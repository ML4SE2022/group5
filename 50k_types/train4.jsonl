{"tokens": ["import", "{", "Term", "as", "T", "}", "from", "\"@lezer/lr/dist/constants\"", ";", "import", "{", "GenError", "}", "from", "\"./error\"", ";", "const", "enum", "TermFlag", "{", "Terminal", "=", "1", ",", "Top", "=", "2", ",", "Eof", "=", "4", ",", "Preserve", "=", "8", ",", "Repeated", "=", "16", ",", "Inline", "=", "32", "}", "export", "type", "Props", "=", "{", "[", "name", "]", ":", "string", ";", "}", ";", "export", "function", "hasProps", "(", "props", ")", "{", "for", "(", "let", "_p", "in", "props", ")", "return", "true", ";", "return", "false", ";", "}", "let", "termHash", "=", "0", ";", "export", "class", "Term", "{", "hash", "=", "++", "termHash", ";", "id", "=", "-", "1", ";", "rules", ":", "Rule", "[", "]", "=", "[", "]", ";", "constructor", "(", "readonly", "name", ",", "private", "flags", ",", "readonly", "nodeName", ",", "readonly", "props", "=", "{", "}", ")", "{", "}", "toString", "(", ")", "{", "return", "this", ".", "name", ";", "}", "get", "nodeType", "(", ")", "{", "return", "this", ".", "top", "||", "this", ".", "nodeName", "!=", "null", "||", "hasProps", "(", "this", ".", "props", ")", "||", "this", ".", "repeated", ";", "}", "get", "terminal", "(", ")", "{", "return", "(", "this", ".", "flags", "&", "TermFlag", ".", "Terminal", ")", ">", "0", ";", "}", "get", "eof", "(", ")", "{", "return", "(", "this", ".", "flags", "&", "TermFlag", ".", "Eof", ")", ">", "0", ";", "}", "get", "error", "(", ")", "{", "return", "\"error\"", "in", "this", ".", "props", ";", "}", "get", "top", "(", ")", "{", "return", "(", "this", ".", "flags", "&", "TermFlag", ".", "Top", ")", ">", "0", ";", "}", "get", "interesting", "(", ")", "{", "return", "this", ".", "flags", ">", "0", "||", "this", ".", "nodeName", "!=", "null", ";", "}", "get", "repeated", "(", ")", "{", "return", "(", "this", ".", "flags", "&", "TermFlag", ".", "Repeated", ")", ">", "0", ";", "}", "set", "preserve", "(", "value", ")", "{", "this", ".", "flags", "=", "value", "?", "this", ".", "flags", "|", "TermFlag", ".", "Preserve", ":", "this", ".", "flags", "&", "~", "TermFlag", ".", "Preserve", ";", "}", "get", "preserve", "(", ")", "{", "return", "(", "this", ".", "flags", "&", "TermFlag", ".", "Preserve", ")", ">", "0", ";", "}", "set", "inline", "(", "value", ")", "{", "this", ".", "flags", "=", "value", "?", "this", ".", "flags", "|", "TermFlag", ".", "Inline", ":", "this", ".", "flags", "&", "~", "TermFlag", ".", "Inline", ";", "}", "get", "inline", "(", ")", "{", "return", "(", "this", ".", "flags", "&", "TermFlag", ".", "Inline", ")", ">", "0", ";", "}", "cmp", "(", "other", ")", "{", "return", "this", ".", "hash", "-", "other", ".", "hash", ";", "}", "}", "export", "class", "TermSet", "{", "terms", ":", "Term", "[", "]", "=", "[", "]", ";", "names", ":", "{", "[", "name", "]", ":", "Term", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "eof", ":", "Term", ";", "error", ":", "Term", ";", "tops", ":", "Term", "[", "]", "=", "[", "]", ";", "constructor", "(", ")", "{", "this", ".", "eof", "=", "this", ".", "term", "(", "\"␄\"", ",", "null", ",", "TermFlag", ".", "Terminal", "|", "TermFlag", ".", "Eof", ")", ";", "this", ".", "error", "=", "this", ".", "term", "(", "\"⚠\"", ",", "\"⚠\"", ",", "TermFlag", ".", "Preserve", ")", ";", "}", "term", "(", "name", ",", "nodeName", ",", "flags", "=", "0", ",", "props", "=", "{", "}", ")", "{", "let", "term", "=", "new", "Term", "(", "name", ",", "flags", ",", "nodeName", ",", "props", ")", ";", "this", ".", "terms", ".", "push", "(", "term", ")", ";", "this", ".", "names", "[", "name", "]", "=", "term", ";", "return", "term", ";", "}", "makeTop", "(", "nodeName", ",", "props", ")", "{", "const", "term", "=", "this", ".", "term", "(", "\"@top\"", ",", "nodeName", ",", "TermFlag", ".", "Top", ",", "props", ")", ";", "this", ".", "tops", ".", "push", "(", "term", ")", ";", "return", "term", ";", "}", "makeTerminal", "(", "name", ",", "nodeName", ",", "props", "=", "{", "}", ")", "{", "return", "this", ".", "term", "(", "name", ",", "nodeName", ",", "TermFlag", ".", "Terminal", ",", "props", ")", ";", "}", "makeNonTerminal", "(", "name", ",", "nodeName", ",", "props", "=", "{", "}", ")", "{", "return", "this", ".", "term", "(", "name", ",", "nodeName", ",", "0", ",", "props", ")", ";", "}", "makeRepeat", "(", "name", ")", "{", "return", "this", ".", "term", "(", "name", ",", "null", ",", "TermFlag", ".", "Repeated", ")", ";", "}", "uniqueName", "(", "name", ")", "{", "for", "(", "let", "i", "=", "0", ";", ";", "i", "++", ")", "{", "let", "cur", "=", "i", "?", "`${", "name", "}-${", "i", "}`", ":", "name", ";", "if", "(", "!", "this", ".", "names", "[", "cur", "]", ")", "return", "cur", ";", "}", "}", "finish", "(", "rules", ")", "{", "for", "(", "let", "rule", "of", "rules", ")", "rule", ".", "name", ".", "rules", ".", "push", "(", "rule", ")", ";", "this", ".", "terms", "=", "this", ".", "terms", ".", "filter", "(", "t", "=>", "t", ".", "terminal", "||", "t", ".", "preserve", "||", "rules", ".", "some", "(", "r", "=>", "r", ".", "name", "==", "t", "||", "r", ".", "parts", ".", "includes", "(", "t", ")", ")", ")", ";", "let", "names", "=", "{", "}", ";", "let", "nodeTypes", "=", "[", "this", ".", "error", "]", ";", "this", ".", "error", ".", "id", "=", "T", ".", "Err", ";", "let", "nextID", "=", "T", ".", "Err", "+", "1", ";", "for", "(", "let", "term", "of", "this", ".", "terms", ")", "if", "(", "term", ".", "id", "<", "0", "&&", "term", ".", "nodeType", "&&", "!", "term", ".", "repeated", ")", "{", "term", ".", "id", "=", "nextID", "++", ";", "nodeTypes", ".", "push", "(", "term", ")", ";", "}", "let", "minRepeatTerm", "=", "nextID", ";", "for", "(", "let", "term", "of", "this", ".", "terms", ")", "if", "(", "term", ".", "repeated", ")", "{", "term", ".", "id", "=", "nextID", "++", ";", "nodeTypes", ".", "push", "(", "term", ")", ";", "}", "this", ".", "eof", ".", "id", "=", "nextID", "++", ";", "for", "(", "let", "term", "of", "this", ".", "terms", ")", "{", "if", "(", "term", ".", "id", "<", "0", ")", "term", ".", "id", "=", "nextID", "++", ";", "if", "(", "term", ".", "name", ")", "names", "[", "term", ".", "id", "]", "=", "term", ".", "name", ";", "}", "if", "(", "nextID", ">=", "0xfffe", ")", "throw", "new", "GenError", "(", "\"Too many terms\"", ")", ";", "return", "{", "nodeTypes", ",", "names", ",", "minRepeatTerm", ",", "maxTerm", ":", "nextID", "-", "1", "}", ";", "}", "}", "export", "function", "cmpSet", "<", "T", ">", "(", "a", ",", "b", ",", "cmp", ")", "{", "if", "(", "a", ".", "length", "!=", "b", ".", "length", ")", "return", "a", ".", "length", "-", "b", ".", "length", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "{", "let", "diff", "=", "cmp", "(", "a", "[", "i", "]", ",", "b", "[", "i", "]", ")", ";", "if", "(", "diff", ")", "return", "diff", ";", "}", "return", "0", ";", "}", "const", "none", "=", "[", "]", ";", "export", "class", "Conflicts", "{", "constructor", "(", "readonly", "precedence", ",", "readonly", "ambigGroups", "=", "none", ",", "readonly", "cut", "=", "0", ")", "{", "}", "join", "(", "other", ")", "{", "if", "(", "this", "==", "Conflicts", ".", "none", "||", "this", "==", "other", ")", "return", "other", ";", "if", "(", "other", "==", "Conflicts", ".", "none", ")", "return", "this", ";", "return", "new", "Conflicts", "(", "Math", ".", "max", "(", "this", ".", "precedence", ",", "other", ".", "precedence", ")", ",", "union", "(", "this", ".", "ambigGroups", ",", "other", ".", "ambigGroups", ")", ",", "Math", ".", "max", "(", "this", ".", "cut", ",", "other", ".", "cut", ")", ")", ";", "}", "cmp", "(", "other", ")", "{", "return", "this", ".", "precedence", "-", "other", ".", "precedence", "||", "cmpSet", "(", "this", ".", "ambigGroups", ",", "other", ".", "ambigGroups", ",", "(", "a", ",", "b", ")", "=>", "a", "<", "b", "?", "-", "1", ":", "a", ">", "b", "?", "1", ":", "0", ")", "||", "this", ".", "cut", "-", "other", ".", "cut", ";", "}", "static", "none", "=", "new", "Conflicts", "(", "0", ")", ";", "}", "export", "function", "union", "<", "T", ">", "(", "a", ",", "b", ")", "{", "if", "(", "a", ".", "length", "==", "0", "||", "a", "==", "b", ")", "return", "b", ";", "if", "(", "b", ".", "length", "==", "0", ")", "return", "a", ";", "let", "result", "=", "a", ".", "slice", "(", ")", ";", "for", "(", "let", "value", "of", "b", ")", "if", "(", "!", "a", ".", "includes", "(", "value", ")", ")", "result", ".", "push", "(", "value", ")", ";", "return", "result", ".", "sort", "(", ")", ";", "}", "let", "ruleID", "=", "0", ";", "export", "class", "Rule", "{", "id", "=", "ruleID", "++", ";", "constructor", "(", "readonly", "name", ",", "readonly", "parts", ",", "readonly", "conflicts", ",", "readonly", "skip", ")", "{", "}", "cmp", "(", "rule", ")", "{", "return", "this", ".", "id", "-", "rule", ".", "id", ";", "}", "cmpNoName", "(", "rule", ")", "{", "return", "this", ".", "parts", ".", "length", "-", "rule", ".", "parts", ".", "length", "||", "this", ".", "skip", ".", "hash", "-", "rule", ".", "skip", ".", "hash", "||", "this", ".", "parts", ".", "reduce", "(", "(", "r", ",", "s", ",", "i", ")", "=>", "r", "||", "s", ".", "cmp", "(", "rule", ".", "parts", "[", "i", "]", ")", ",", "0", ")", "||", "cmpSet", "(", "this", ".", "conflicts", ",", "rule", ".", "conflicts", ",", "(", "a", ",", "b", ")", "=>", "a", ".", "cmp", "(", "b", ")", ")", ";", "}", "toString", "(", ")", "{", "return", "this", ".", "name", "+", "\" -> \"", "+", "this", ".", "parts", ".", "join", "(", "\" \"", ")", ";", "}", "get", "isRepeatWrap", "(", ")", "{", "return", "this", ".", "name", ".", "repeated", "&&", "this", ".", "parts", ".", "length", "==", "2", "&&", "this", ".", "parts", "[", "0", "]", "==", "this", ".", "name", ";", "}", "sameReduce", "(", "other", ")", "{", "return", "this", ".", "name", "==", "other", ".", "name", "&&", "this", ".", "parts", ".", "length", "==", "other", ".", "parts", ".", "length", "&&", "this", ".", "isRepeatWrap", "==", "other", ".", "isRepeatWrap", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Props", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "number", null, null, "string", null, null, "Props", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, "string", null, "number", null, null, null, "Props", null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, "Props", null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, "Conflicts", null, "Conflicts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Conflicts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, "Term", null, null, null, "number", null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Term", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflicts", null, "Conflicts", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/grammar.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "grammar.ts"}
{"tokens": ["export", "function", "hash", "(", "a", ",", "b", ")", "{", "return", "(", "a", "<<", "5", ")", "+", "a", "+", "b", ";", "}", "export", "function", "hashString", "(", "h", ",", "s", ")", "{", "for", "(", "let", "i", "=", "0", ";", "i", "<", "s", ".", "length", ";", "i", "++", ")", "h", "=", "hash", "(", "h", ",", "s", ".", "charCodeAt", "(", "i", ")", ")", ";", "return", "h", ";", "}"], "labels": [null, null, "number", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "number", null, "string", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/hash.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "hash.ts"}
{"tokens": ["export", "const", "verbose", "=", "(", "typeof", "process", "!=", "\"undefined\"", "&&", "process", ".", "env", ".", "LOG", ")", "||", "\"\"", ";", "export", "const", "timing", "=", "/\\btime\\b/", ".", "test", "(", "verbose", ")", ";", "export", "const", "time", "=", "timing", "?", "(", "label", ",", "f", ")", "=>", "{", "let", "t0", "=", "Date", ".", "now", "(", ")", ";", "let", "result", "=", "f", "(", ")", ";", "console", ".", "log", "(", "`${", "label", "} (${", "(", "(", "Date", ".", "now", "(", ")", "-", "t0", ")", "/", "1000", ")", ".", "toFixed", "(", "2", ")", "}s)`", ")", ";", "return", "result", ";", "}", ":", "(", "_label", ",", "f", ")", "=>", "f", "(", ")", ";"], "labels": [null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, "string", null, "T", null, null, null, null, "number", null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "T", null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/log.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "log.ts"}
{"tokens": ["import", "{", "Term", ",", "TermSet", ",", "Rule", ",", "cmpSet", ",", "Conflicts", ",", "union", "}", "from", "\"./grammar\"", ";", "import", "{", "hash", ",", "hashString", "}", "from", "\"./hash\"", ";", "import", "{", "GenError", "}", "from", "\"./error\"", ";", "import", "{", "timing", "}", "from", "\"./log\"", ";", "export", "class", "Pos", "{", "hash", ":", "number", "=", "0", ";", "constructor", "(", "readonly", "rule", ",", "readonly", "pos", ",", "readonly", "ahead", ",", "public", "ambigAhead", ",", "readonly", "skipAhead", ",", "readonly", "via", ")", "{", "}", "finish", "(", ")", "{", "let", "h", "=", "hash", "(", "hash", "(", "this", ".", "rule", ".", "id", ",", "this", ".", "pos", ")", ",", "this", ".", "skipAhead", ".", "hash", ")", ";", "for", "(", "let", "a", "of", "this", ".", "ahead", ")", "h", "=", "hash", "(", "h", ",", "a", ".", "hash", ")", ";", "for", "(", "let", "group", "of", "this", ".", "ambigAhead", ")", "h", "=", "hashString", "(", "h", ",", "group", ")", ";", "this", ".", "hash", "=", "h", ";", "return", "this", ";", "}", "get", "next", "(", ")", "{", "return", "this", ".", "pos", "<", "this", ".", "rule", ".", "parts", ".", "length", "?", "this", ".", "rule", ".", "parts", "[", "this", ".", "pos", "]", ":", "null", ";", "}", "advance", "(", ")", "{", "return", "new", "Pos", "(", "this", ".", "rule", ",", "this", ".", "pos", "+", "1", ",", "this", ".", "ahead", ",", "this", ".", "ambigAhead", ",", "this", ".", "skipAhead", ",", "this", ".", "via", ")", ".", "finish", "(", ")", ";", "}", "get", "skip", "(", ")", "{", "return", "this", ".", "pos", "==", "this", ".", "rule", ".", "parts", ".", "length", "?", "this", ".", "skipAhead", ":", "this", ".", "rule", ".", "skip", ";", "}", "cmp", "(", "pos", ")", "{", "return", "this", ".", "rule", ".", "cmp", "(", "pos", ".", "rule", ")", "||", "this", ".", "pos", "-", "pos", ".", "pos", "||", "this", ".", "skipAhead", ".", "hash", "-", "pos", ".", "skipAhead", ".", "hash", "||", "cmpSet", "(", "this", ".", "ahead", ",", "pos", ".", "ahead", ",", "(", "a", ",", "b", ")", "=>", "a", ".", "cmp", "(", "b", ")", ")", "||", "cmpSet", "(", "this", ".", "ambigAhead", ",", "pos", ".", "ambigAhead", ",", "cmpStr", ")", ";", "}", "eqSimple", "(", "pos", ")", "{", "return", "pos", ".", "rule", "==", "this", ".", "rule", "&&", "pos", ".", "pos", "==", "this", ".", "pos", ";", "}", "toString", "(", ")", "{", "let", "parts", "=", "this", ".", "rule", ".", "parts", ".", "map", "(", "t", "=>", "t", ".", "name", ")", ";", "parts", ".", "splice", "(", "this", ".", "pos", ",", "0", ",", "\"·\"", ")", ";", "return", "`${", "this", ".", "rule", ".", "name", "} -> ${", "parts", ".", "join", "(", "\" \"", ")", "}`", ";", "}", "eq", "(", "other", ")", "{", "return", "this", "==", "other", "||", "this", ".", "hash", "==", "other", ".", "hash", "&&", "this", ".", "rule", "==", "other", ".", "rule", "&&", "this", ".", "pos", "==", "other", ".", "pos", "&&", "this", ".", "skipAhead", "==", "other", ".", "skipAhead", "&&", "sameSet", "(", "this", ".", "ahead", ",", "other", ".", "ahead", ")", "&&", "sameSet", "(", "this", ".", "ambigAhead", ",", "other", ".", "ambigAhead", ")", ";", "}", "trail", "(", "maxLen", "=", "60", ")", "{", "let", "result", "=", "[", "]", ";", "for", "(", "let", "pos", "=", "this", ";", "pos", ";", "pos", "=", "pos", ".", "via", ")", "{", "for", "(", "let", "i", "=", "pos", ".", "pos", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "result", ".", "push", "(", "pos", ".", "rule", ".", "parts", "[", "i", "]", ")", ";", "}", "let", "value", "=", "result", ".", "reverse", "(", ")", ".", "join", "(", "\" \"", ")", ";", "if", "(", "value", ".", "length", ">", "maxLen", ")", "value", "=", "value", ".", "slice", "(", "value", ".", "length", "-", "maxLen", ")", ".", "replace", "(", "/.*? /", ",", "\"… \"", ")", ";", "return", "value", ";", "}", "conflicts", "(", "pos", "=", "this", ".", "pos", ")", "{", "let", "result", "=", "this", ".", "rule", ".", "conflicts", "[", "pos", "]", ";", "if", "(", "pos", "==", "this", ".", "rule", ".", "parts", ".", "length", "&&", "this", ".", "ambigAhead", ".", "length", ")", "result", "=", "result", ".", "join", "(", "new", "Conflicts", "(", "0", ",", "this", ".", "ambigAhead", ")", ")", ";", "return", "result", ";", "}", "static", "addOrigins", "(", "group", ",", "context", ")", "{", "let", "result", "=", "group", ".", "slice", "(", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "result", ".", "length", ";", "i", "++", ")", "{", "let", "next", "=", "result", "[", "i", "]", ";", "if", "(", "next", ".", "pos", "==", "0", ")", "for", "(", "let", "pos", "of", "context", ")", "{", "if", "(", "pos", ".", "next", "==", "next", ".", "rule", ".", "name", "&&", "!", "result", ".", "includes", "(", "pos", ")", ")", "result", ".", "push", "(", "pos", ")", ";", "}", "}", "return", "result", ";", "}", "}", "function", "conflictsAt", "(", "group", ")", "{", "let", "result", "=", "Conflicts", ".", "none", ";", "for", "(", "let", "pos", "of", "group", ")", "result", "=", "result", ".", "join", "(", "pos", ".", "conflicts", "(", ")", ")", ";", "return", "result", ";", "}", "function", "compareRepeatPrec", "(", "a", ",", "b", ")", "{", "for", "(", "let", "pos", "of", "a", ")", "if", "(", "pos", ".", "rule", ".", "name", ".", "repeated", ")", "{", "for", "(", "let", "posB", "of", "b", ")", "if", "(", "posB", ".", "rule", ".", "name", "==", "pos", ".", "rule", ".", "name", ")", "{", "if", "(", "pos", ".", "rule", ".", "isRepeatWrap", "&&", "pos", ".", "pos", "==", "2", ")", "return", "1", ";", "if", "(", "posB", ".", "rule", ".", "isRepeatWrap", "&&", "posB", ".", "pos", "==", "2", ")", "return", "-", "1", ";", "}", "}", "return", "0", ";", "}", "function", "cmpStr", "(", "a", ",", "b", ")", "{", "return", "a", "<", "b", "?", "-", "1", ":", "a", ">", "b", "?", "1", ":", "0", ";", "}", "function", "termsAhead", "(", "rule", ",", "pos", ",", "after", ",", "first", ")", "{", "let", "found", "=", "[", "]", ";", "for", "(", "let", "i", "=", "pos", "+", "1", ";", "i", "<", "rule", ".", "parts", ".", "length", ";", "i", "++", ")", "{", "let", "next", "=", "rule", ".", "parts", "[", "i", "]", ",", "cont", "=", "false", ";", "if", "(", "next", ".", "terminal", ")", "{", "addTo", "(", "next", ",", "found", ")", ";", "}", "else", "for", "(", "let", "term", "of", "first", "[", "next", ".", "name", "]", ")", "{", "if", "(", "term", "==", "null", ")", "cont", "=", "true", ";", "else", "addTo", "(", "term", ",", "found", ")", ";", "}", "if", "(", "!", "cont", ")", "return", "found", ";", "}", "for", "(", "let", "a", "of", "after", ")", "addTo", "(", "a", ",", "found", ")", ";", "return", "found", ";", "}", "function", "eqSet", "<", "T", "extends", "{", "eq", "(", "other", ")", ":", "boolean", ";", "}", ">", "(", "a", ",", "b", ")", "{", "if", "(", "a", ".", "length", "!=", "b", ".", "length", ")", "return", "false", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "if", "(", "!", "a", "[", "i", "]", ".", "eq", "(", "b", "[", "i", "]", ")", ")", "return", "false", ";", "return", "true", ";", "}", "function", "sameSet", "<", "T", ">", "(", "a", ",", "b", ")", "{", "if", "(", "a", ".", "length", "!=", "b", ".", "length", ")", "return", "false", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "if", "(", "a", "[", "i", "]", "!=", "b", "[", "i", "]", ")", "return", "false", ";", "return", "true", ";", "}", "export", "class", "Shift", "{", "constructor", "(", "readonly", "term", ",", "readonly", "target", ")", "{", "}", "eq", "(", "other", ")", "{", "return", "other", "instanceof", "Shift", "&&", "this", ".", "term", "==", "other", ".", "term", "&&", "other", ".", "target", ".", "id", "==", "this", ".", "target", ".", "id", ";", "}", "cmp", "(", "other", ")", "{", "return", "other", "instanceof", "Reduce", "?", "-", "1", ":", "this", ".", "term", ".", "id", "-", "other", ".", "term", ".", "id", "||", "this", ".", "target", ".", "id", "-", "other", ".", "target", ".", "id", ";", "}", "toString", "(", ")", "{", "return", "\"s\"", "+", "this", ".", "target", ".", "id", ";", "}", "map", "(", "mapping", ",", "states", ")", "{", "let", "mapped", "=", "states", "[", "mapping", "[", "this", ".", "target", ".", "id", "]", "]", ";", "return", "mapped", "==", "this", ".", "target", "?", "this", ":", "new", "Shift", "(", "this", ".", "term", ",", "mapped", ")", ";", "}", "}", "export", "class", "Reduce", "{", "constructor", "(", "readonly", "term", ",", "readonly", "rule", ")", "{", "}", "eq", "(", "other", ")", "{", "return", "other", "instanceof", "Reduce", "&&", "this", ".", "term", "==", "other", ".", "term", "&&", "other", ".", "rule", ".", "sameReduce", "(", "this", ".", "rule", ")", ";", "}", "cmp", "(", "other", ")", "{", "return", "other", "instanceof", "Shift", "?", "1", ":", "this", ".", "term", ".", "id", "-", "other", ".", "term", ".", "id", "||", "this", ".", "rule", ".", "name", ".", "id", "-", "other", ".", "rule", ".", "name", ".", "id", "||", "this", ".", "rule", ".", "parts", ".", "length", "-", "other", ".", "rule", ".", "parts", ".", "length", ";", "}", "toString", "(", ")", "{", "return", "`${", "this", ".", "rule", ".", "name", ".", "name", "}(${", "this", ".", "rule", ".", "parts", ".", "length", "})`", ";", "}", "map", "(", ")", "{", "return", "this", ";", "}", "}", "function", "hashPositions", "(", "set", ")", "{", "let", "h", "=", "5381", ";", "for", "(", "let", "pos", "of", "set", ")", "h", "=", "hash", "(", "h", ",", "pos", ".", "hash", ")", ";", "return", "h", ";", "}", "export", "class", "State", "{", "actions", ":", "(", "Shift", "|", "Reduce", ")", "[", "]", "=", "[", "]", ";", "actionPositions", ":", "(", "readonly", "Pos", "[", "]", ")", "[", "]", "=", "[", "]", ";", "goto", ":", "Shift", "[", "]", "=", "[", "]", ";", "tokenGroup", ":", "number", "=", "-", "1", ";", "defaultReduce", ":", "Rule", "|", "null", "=", "null", ";", "constructor", "(", "public", "id", ",", "public", "set", ",", "public", "flags", "=", "0", ",", "readonly", "skip", ",", "readonly", "hash", "=", "hashPositions", "(", "set", ")", ",", "readonly", "startRule", "=", "null", ")", "{", "}", "toString", "(", ")", "{", "let", "actions", "=", "this", ".", "actions", ".", "map", "(", "t", "=>", "t", ".", "term", "+", "\"=\"", "+", "t", ")", ".", "join", "(", "\",\"", ")", "+", "(", "this", ".", "goto", ".", "length", "?", "\" | \"", "+", "this", ".", "goto", ".", "map", "(", "g", "=>", "g", ".", "term", "+", "\"=\"", "+", "g", ")", ".", "join", "(", "\",\"", ")", ":", "\"\"", ")", ";", "return", "this", ".", "id", "+", "\": \"", "+", "this", ".", "set", ".", "filter", "(", "p", "=>", "p", ".", "pos", ">", "0", ")", ".", "join", "(", ")", "+", "(", "this", ".", "defaultReduce", "?", "`\\n  always ${", "this", ".", "defaultReduce", ".", "name", "}(${", "this", ".", "defaultReduce", ".", "parts", ".", "length", "})`", ":", "actions", ".", "length", "?", "\"\\n  \"", "+", "actions", ":", "\"\"", ")", ";", "}", "addActionInner", "(", "value", ",", "positions", ")", "{", "check", ":", "for", "(", "let", "i", "=", "0", ";", "i", "<", "this", ".", "actions", ".", "length", ";", "i", "++", ")", "{", "let", "action", "=", "this", ".", "actions", "[", "i", "]", ";", "if", "(", "action", ".", "term", "==", "value", ".", "term", ")", "{", "if", "(", "action", ".", "eq", "(", "value", ")", ")", "return", "null", ";", "let", "fullPos", "=", "Pos", ".", "addOrigins", "(", "positions", ",", "this", ".", "set", ")", ",", "actionFullPos", "=", "Pos", ".", "addOrigins", "(", "this", ".", "actionPositions", "[", "i", "]", ",", "this", ".", "set", ")", ";", "let", "conflicts", "=", "conflictsAt", "(", "fullPos", ")", ",", "actionConflicts", "=", "conflictsAt", "(", "actionFullPos", ")", ";", "let", "diff", "=", "compareRepeatPrec", "(", "fullPos", ",", "actionFullPos", ")", "||", "conflicts", ".", "precedence", "-", "actionConflicts", ".", "precedence", ";", "if", "(", "diff", ">", "0", ")", "{", "this", ".", "actions", ".", "splice", "(", "i", ",", "1", ")", ";", "this", ".", "actionPositions", ".", "splice", "(", "i", ",", "1", ")", ";", "i", "--", ";", "continue", "check", ";", "}", "else", "if", "(", "diff", "<", "0", ")", "{", "return", "null", ";", "}", "else", "if", "(", "conflicts", ".", "ambigGroups", ".", "some", "(", "g", "=>", "actionConflicts", ".", "ambigGroups", ".", "includes", "(", "g", ")", ")", ")", "{", "continue", "check", ";", "}", "else", "{", "return", "action", ";", "}", "}", "}", "this", ".", "actions", ".", "push", "(", "value", ")", ";", "this", ".", "actionPositions", ".", "push", "(", "positions", ")", ";", "return", "null", ";", "}", "addAction", "(", "value", ",", "positions", ",", "conflicts", ")", "{", "let", "conflict", "=", "this", ".", "addActionInner", "(", "value", ",", "positions", ")", ";", "if", "(", "conflict", ")", "{", "let", "conflictPos", "=", "this", ".", "actionPositions", "[", "this", ".", "actions", ".", "indexOf", "(", "conflict", ")", "]", "[", "0", "]", ";", "let", "rules", "=", "[", "positions", "[", "0", "]", ".", "rule", ".", "name", ",", "conflictPos", ".", "rule", ".", "name", "]", ";", "if", "(", "conflicts", ".", "some", "(", "c", "=>", "c", ".", "rules", ".", "some", "(", "r", "=>", "rules", ".", "includes", "(", "r", ")", ")", ")", ")", "return", ";", "let", "error", ";", "if", "(", "conflict", "instanceof", "Shift", ")", "error", "=", "`shift/reduce conflict between\\n  ${", "conflictPos", "}\\nand\\n  ${", "positions", "[", "0", "]", ".", "rule", "}`", ";", "else", "error", "=", "`reduce/reduce conflict between\\n  ${", "conflictPos", ".", "rule", "}\\nand\\n  ${", "positions", "[", "0", "]", ".", "rule", "}`", ";", "error", "+=", "`\\nWith input:\\n  ${", "positions", "[", "0", "]", ".", "trail", "(", "70", ")", "} · ${", "value", ".", "term", "} …`", ";", "error", "+=", "findConflictOrigin", "(", "conflictPos", ",", "positions", "[", "0", "]", ")", ";", "conflicts", ".", "push", "(", "new", "Conflict", "(", "error", ",", "rules", ")", ")", ";", "}", "}", "getGoto", "(", "term", ")", "{", "return", "this", ".", "goto", ".", "find", "(", "a", "=>", "a", ".", "term", "==", "term", ")", ";", "}", "hasSet", "(", "set", ")", "{", "return", "eqSet", "(", "this", ".", "set", ",", "set", ")", ";", "}", "finish", "(", ")", "{", "if", "(", "this", ".", "actions", ".", "length", ")", "{", "let", "first", "=", "this", ".", "actions", "[", "0", "]", ";", "if", "(", "first", "instanceof", "Reduce", ")", "{", "let", "{", "rule", "}", "=", "first", ";", "if", "(", "this", ".", "actions", ".", "every", "(", "a", "=>", "a", "instanceof", "Reduce", "&&", "a", ".", "rule", ".", "sameReduce", "(", "rule", ")", ")", ")", "this", ".", "defaultReduce", "=", "rule", ";", "}", "}", "this", ".", "actions", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "cmp", "(", "b", ")", ")", ";", "this", ".", "goto", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "cmp", "(", "b", ")", ")", ";", "}", "eq", "(", "other", ")", "{", "let", "dThis", "=", "this", ".", "defaultReduce", ",", "dOther", "=", "other", ".", "defaultReduce", ";", "if", "(", "dThis", "||", "dOther", ")", "return", "dThis", "&&", "dOther", "?", "dThis", ".", "sameReduce", "(", "dOther", ")", ":", "false", ";", "return", "this", ".", "skip", "==", "other", ".", "skip", "&&", "this", ".", "tokenGroup", "==", "other", ".", "tokenGroup", "&&", "eqSet", "(", "this", ".", "actions", ",", "other", ".", "actions", ")", "&&", "eqSet", "(", "this", ".", "goto", ",", "other", ".", "goto", ")", ";", "}", "}", "function", "closure", "(", "set", ",", "first", ")", "{", "let", "added", "=", "[", "]", ",", "redo", "=", "[", "]", ";", "function", "addFor", "(", "name", ",", "ahead", ",", "ambigAhead", ",", "skipAhead", ",", "via", ")", "{", "for", "(", "let", "rule", "of", "name", ".", "rules", ")", "{", "let", "add", "=", "added", ".", "find", "(", "a", "=>", "a", ".", "rule", "==", "rule", ")", ";", "if", "(", "!", "add", ")", "{", "let", "existing", "=", "set", ".", "find", "(", "p", "=>", "p", ".", "pos", "==", "0", "&&", "p", ".", "rule", "==", "rule", ")", ";", "add", "=", "existing", "?", "new", "Pos", "(", "rule", ",", "0", ",", "existing", ".", "ahead", ".", "slice", "(", ")", ",", "existing", ".", "ambigAhead", ",", "existing", ".", "skipAhead", ",", "existing", ".", "via", ")", ":", "new", "Pos", "(", "rule", ",", "0", ",", "[", "]", ",", "none", ",", "skipAhead", ",", "via", ")", ";", "added", ".", "push", "(", "add", ")", ";", "}", "if", "(", "add", ".", "skipAhead", "!=", "skipAhead", ")", "throw", "new", "GenError", "(", "\"Inconsistent skip sets after \"", "+", "via", ".", "trail", "(", ")", ")", ";", "add", ".", "ambigAhead", "=", "union", "(", "add", ".", "ambigAhead", ",", "ambigAhead", ")", ";", "for", "(", "let", "term", "of", "ahead", ")", "if", "(", "!", "add", ".", "ahead", ".", "includes", "(", "term", ")", ")", "{", "add", ".", "ahead", ".", "push", "(", "term", ")", ";", "if", "(", "add", ".", "rule", ".", "parts", ".", "length", "&&", "!", "add", ".", "rule", ".", "parts", "[", "0", "]", ".", "terminal", ")", "addTo", "(", "add", ",", "redo", ")", ";", "}", "}", "}", "for", "(", "let", "pos", "of", "set", ")", "{", "let", "next", "=", "pos", ".", "next", ";", "if", "(", "next", "&&", "!", "next", ".", "terminal", ")", "addFor", "(", "next", ",", "termsAhead", "(", "pos", ".", "rule", ",", "pos", ".", "pos", ",", "pos", ".", "ahead", ",", "first", ")", ",", "pos", ".", "conflicts", "(", "pos", ".", "pos", "+", "1", ")", ".", "ambigGroups", ",", "pos", ".", "pos", "==", "pos", ".", "rule", ".", "parts", ".", "length", "-", "1", "?", "pos", ".", "skipAhead", ":", "pos", ".", "rule", ".", "skip", ",", "pos", ")", ";", "}", "while", "(", "redo", ".", "length", ")", "{", "let", "add", "=", "redo", ".", "pop", "(", ")", "!", ";", "addFor", "(", "add", ".", "rule", ".", "parts", "[", "0", "]", ",", "termsAhead", "(", "add", ".", "rule", ",", "0", ",", "add", ".", "ahead", ",", "first", ")", ",", "union", "(", "add", ".", "rule", ".", "conflicts", "[", "1", "]", ".", "ambigGroups", ",", "add", ".", "rule", ".", "parts", ".", "length", "==", "1", "?", "add", ".", "ambigAhead", ":", "none", ")", ",", "add", ".", "rule", ".", "parts", ".", "length", "==", "1", "?", "add", ".", "skipAhead", ":", "add", ".", "rule", ".", "skip", ",", "add", ")", ";", "}", "let", "result", "=", "set", ".", "slice", "(", ")", ";", "for", "(", "let", "add", "of", "added", ")", "{", "add", ".", "ahead", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "hash", "-", "b", ".", "hash", ")", ";", "add", ".", "finish", "(", ")", ";", "let", "origIndex", "=", "set", ".", "findIndex", "(", "p", "=>", "p", ".", "pos", "==", "0", "&&", "p", ".", "rule", "==", "add", ".", "rule", ")", ";", "if", "(", "origIndex", ">", "-", "1", ")", "result", "[", "origIndex", "]", "=", "add", ";", "else", "result", ".", "push", "(", "add", ")", ";", "}", "return", "result", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "cmp", "(", "b", ")", ")", ";", "}", "function", "addTo", "<", "T", ">", "(", "value", ",", "array", ")", "{", "if", "(", "!", "array", ".", "includes", "(", "value", ")", ")", "array", ".", "push", "(", "value", ")", ";", "}", "export", "function", "computeFirstSets", "(", "terms", ")", "{", "let", "table", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "t", "of", "terms", ".", "terms", ")", "if", "(", "!", "t", ".", "terminal", ")", "table", "[", "t", ".", "name", "]", "=", "[", "]", ";", "for", "(", ";", ";", ")", "{", "let", "change", "=", "false", ";", "for", "(", "let", "nt", "of", "terms", ".", "terms", ")", "if", "(", "!", "nt", ".", "terminal", ")", "for", "(", "let", "rule", "of", "nt", ".", "rules", ")", "{", "let", "set", "=", "table", "[", "nt", ".", "name", "]", ";", "let", "found", "=", "false", ",", "startLen", "=", "set", ".", "length", ";", "for", "(", "let", "part", "of", "rule", ".", "parts", ")", "{", "found", "=", "true", ";", "if", "(", "part", ".", "terminal", ")", "{", "addTo", "(", "part", ",", "set", ")", ";", "}", "else", "{", "for", "(", "let", "t", "of", "table", "[", "part", ".", "name", "]", ")", "{", "if", "(", "t", "==", "null", ")", "found", "=", "false", ";", "else", "addTo", "(", "t", ",", "set", ")", ";", "}", "}", "if", "(", "found", ")", "break", ";", "}", "if", "(", "!", "found", ")", "addTo", "(", "null", ",", "set", ")", ";", "if", "(", "set", ".", "length", ">", "startLen", ")", "change", "=", "true", ";", "}", "if", "(", "!", "change", ")", "return", "table", ";", "}", "}", "class", "Core", "{", "constructor", "(", "readonly", "set", ",", "readonly", "state", ")", "{", "}", "}", "class", "Conflict", "{", "constructor", "(", "readonly", "error", ",", "readonly", "rules", ")", "{", "}", "}", "function", "findConflictOrigin", "(", "a", ",", "b", ")", "{", "if", "(", "a", ".", "eqSimple", "(", "b", ")", ")", "return", "\"\"", ";", "function", "via", "(", "root", ",", "start", ")", "{", "let", "hist", "=", "[", "]", ";", "for", "(", "let", "p", "=", "start", ".", "via", "!", ";", "!", "p", ".", "eqSimple", "(", "root", ")", ";", "p", "=", "p", ".", "via", "!", ")", "hist", ".", "push", "(", "p", ")", ";", "if", "(", "!", "hist", ".", "length", ")", "return", "\"\"", ";", "hist", ".", "unshift", "(", "start", ")", ";", "return", "hist", ".", "reverse", "(", ")", ".", "map", "(", "(", "p", ",", "i", ")", "=>", "\"\\n\"", "+", "\"  \"", ".", "repeat", "(", "i", "+", "1", ")", "+", "(", "p", "==", "start", "?", "\"\"", ":", "\"via \"", ")", "+", "p", ")", ".", "join", "(", "\"\"", ")", ";", "}", "for", "(", "let", "p", "=", "a", ";", "p", ";", "p", "=", "p", ".", "via", ")", "for", "(", "let", "p2", "=", "b", ";", "p2", ";", "p2", "=", "p2", ".", "via", ")", "{", "if", "(", "p", ".", "eqSimple", "(", "p2", ")", ")", "return", "\"\\nShared origin: \"", "+", "p", "+", "via", "(", "p", ",", "a", ")", "+", "via", "(", "p", ",", "b", ")", ";", "}", "return", "\"\"", ";", "}", "export", "function", "buildFullAutomaton", "(", "terms", ",", "startTerms", ",", "first", ")", "{", "let", "states", "=", "[", "]", ";", "let", "cores", "=", "{", "}", ";", "let", "t0", "=", "Date", ".", "now", "(", ")", ";", "function", "getState", "(", "core", ",", "top", "?", ")", "{", "if", "(", "core", ".", "length", "==", "0", ")", "return", "null", ";", "let", "coreHash", "=", "hashPositions", "(", "core", ")", ",", "byHash", "=", "cores", "[", "coreHash", "]", ";", "let", "skip", ";", "for", "(", "let", "pos", "of", "core", ")", "{", "if", "(", "!", "skip", ")", "skip", "=", "pos", ".", "skip", ";", "else", "if", "(", "skip", "!=", "pos", ".", "skip", ")", "throw", "new", "GenError", "(", "\"Inconsistent skip sets after \"", "+", "pos", ".", "trail", "(", ")", ")", ";", "}", "if", "(", "byHash", ")", "for", "(", "let", "known", "of", "byHash", ")", "if", "(", "eqSet", "(", "core", ",", "known", ".", "set", ")", ")", "{", "if", "(", "known", ".", "state", ".", "skip", "!=", "skip", ")", "throw", "new", "GenError", "(", "\"Inconsistent skip sets after \"", "+", "known", ".", "set", "[", "0", "]", ".", "trail", "(", ")", ")", ";", "return", "known", ".", "state", ";", "}", "let", "set", "=", "closure", "(", "core", ",", "first", ")", ";", "let", "hash", "=", "hashPositions", "(", "set", ")", ",", "found", ";", "if", "(", "!", "top", ")", "for", "(", "let", "state", "of", "states", ")", "if", "(", "state", ".", "hash", "==", "hash", "&&", "state", ".", "hasSet", "(", "set", ")", ")", "found", "=", "state", ";", "if", "(", "!", "found", ")", "{", "found", "=", "new", "State", "(", "states", ".", "length", ",", "set", ",", "0", ",", "skip", "!", ",", "hash", ",", "top", ")", ";", "states", ".", "push", "(", "found", ")", ";", "if", "(", "timing", "&&", "states", ".", "length", "%", "500", "==", "0", ")", "console", ".", "log", "(", "`${", "states", ".", "length", "} states after ${", "(", "(", "Date", ".", "now", "(", ")", "-", "t0", ")", "/", "1000", ")", ".", "toFixed", "(", "2", ")", "}s`", ")", ";", "}", ";", "(", "cores", "[", "coreHash", "]", "||", "(", "cores", "[", "coreHash", "]", "=", "[", "]", ")", ")", ".", "push", "(", "new", "Core", "(", "core", ",", "found", ")", ")", ";", "return", "found", ";", "}", "for", "(", "const", "startTerm", "of", "startTerms", ")", "{", "const", "startSkip", "=", "startTerm", ".", "rules", ".", "length", "?", "startTerm", ".", "rules", "[", "0", "]", ".", "skip", ":", "terms", ".", "names", "[", "\"%noskip\"", "]", "!", ";", "getState", "(", "startTerm", ".", "rules", ".", "map", "(", "rule", "=>", "new", "Pos", "(", "rule", ",", "0", ",", "[", "terms", ".", "eof", "]", ",", "none", ",", "startSkip", ",", "null", ")", ".", "finish", "(", ")", ")", ",", "startTerm", ")", ";", "}", "let", "conflicts", "=", "[", "]", ";", "for", "(", "let", "filled", "=", "0", ";", "filled", "<", "states", ".", "length", ";", "filled", "++", ")", "{", "let", "state", "=", "states", "[", "filled", "]", ";", "let", "byTerm", "=", "[", "]", ",", "byTermPos", "=", "[", "]", ",", "atEnd", "=", "[", "]", ";", "for", "(", "let", "pos", "of", "state", ".", "set", ")", "{", "if", "(", "pos", ".", "pos", "==", "pos", ".", "rule", ".", "parts", ".", "length", ")", "{", "if", "(", "!", "pos", ".", "rule", ".", "name", ".", "top", ")", "atEnd", ".", "push", "(", "pos", ")", ";", "}", "else", "{", "let", "next", "=", "pos", ".", "rule", ".", "parts", "[", "pos", ".", "pos", "]", ";", "let", "index", "=", "byTerm", ".", "indexOf", "(", "next", ")", ";", "if", "(", "index", "<", "0", ")", "{", "byTerm", ".", "push", "(", "next", ")", ";", "byTermPos", ".", "push", "(", "[", "pos", "]", ")", ";", "}", "else", "{", "byTermPos", "[", "index", "]", ".", "push", "(", "pos", ")", ";", "}", "}", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "byTerm", ".", "length", ";", "i", "++", ")", "{", "let", "term", "=", "byTerm", "[", "i", "]", ",", "positions", "=", "byTermPos", "[", "i", "]", ".", "map", "(", "p", "=>", "p", ".", "advance", "(", ")", ")", ";", "if", "(", "term", ".", "terminal", ")", "{", "let", "set", "=", "applyCut", "(", "positions", ")", ";", "let", "next", "=", "getState", "(", "set", ")", ";", "if", "(", "next", ")", "state", ".", "addAction", "(", "new", "Shift", "(", "term", ",", "next", ")", ",", "byTermPos", "[", "i", "]", ",", "conflicts", ")", ";", "}", "else", "{", "let", "goto", "=", "getState", "(", "positions", ")", ";", "if", "(", "goto", ")", "state", ".", "goto", ".", "push", "(", "new", "Shift", "(", "term", ",", "goto", ")", ")", ";", "}", "}", "let", "replaced", "=", "false", ";", "for", "(", "let", "pos", "of", "atEnd", ")", "for", "(", "let", "ahead", "of", "pos", ".", "ahead", ")", "{", "let", "count", "=", "state", ".", "actions", ".", "length", ";", "state", ".", "addAction", "(", "new", "Reduce", "(", "ahead", ",", "pos", ".", "rule", ")", ",", "[", "pos", "]", ",", "conflicts", ")", ";", "if", "(", "state", ".", "actions", ".", "length", "==", "count", ")", "replaced", "=", "true", ";", "}", "if", "(", "replaced", ")", "for", "(", "let", "i", "=", "0", ";", "i", "<", "state", ".", "goto", ".", "length", ";", "i", "++", ")", "{", "let", "start", "=", "first", "[", "state", ".", "goto", "[", "i", "]", ".", "term", ".", "name", "]", ";", "if", "(", "!", "start", ".", "some", "(", "term", "=>", "state", ".", "actions", ".", "some", "(", "a", "=>", "a", ".", "term", "==", "term", "&&", "(", "a", "instanceof", "Shift", ")", ")", ")", ")", "state", ".", "goto", ".", "splice", "(", "i", "--", ",", "1", ")", ";", "}", "}", "if", "(", "conflicts", ".", "length", ")", "throw", "new", "GenError", "(", "conflicts", ".", "map", "(", "c", "=>", "c", ".", "error", ")", ".", "join", "(", "\"\\n\\n\"", ")", ")", ";", "for", "(", "let", "state", "of", "states", ")", "state", ".", "finish", "(", ")", ";", "if", "(", "timing", ")", "console", ".", "log", "(", "`${", "states", ".", "length", "} states total.`", ")", ";", "return", "states", ";", "}", "function", "applyCut", "(", "set", ")", "{", "let", "found", "=", "null", ",", "cut", "=", "1", ";", "for", "(", "let", "pos", "of", "set", ")", "{", "let", "value", "=", "pos", ".", "rule", ".", "conflicts", "[", "pos", ".", "pos", "-", "1", "]", ".", "cut", ";", "if", "(", "value", "<", "cut", ")", "continue", ";", "if", "(", "!", "found", "||", "value", ">", "cut", ")", "{", "cut", "=", "value", ";", "found", "=", "[", "]", ";", "}", "found", ".", "push", "(", "pos", ")", ";", "}", "return", "found", "||", "set", ";", "}", "function", "canMergeInner", "(", "a", ",", "b", ",", "mapping", ")", "{", "for", "(", "let", "goto", "of", "a", ".", "goto", ")", "for", "(", "let", "other", "of", "b", ".", "goto", ")", "{", "if", "(", "goto", ".", "term", "==", "other", ".", "term", "&&", "mapping", "[", "goto", ".", "target", ".", "id", "]", "!=", "mapping", "[", "other", ".", "target", ".", "id", "]", ")", "return", "false", ";", "}", "actions", ":", "for", "(", "let", "action", "of", "a", ".", "actions", ")", "{", "let", "conflict", "=", "false", ";", "for", "(", "let", "other", "of", "b", ".", "actions", ")", "if", "(", "other", ".", "term", "==", "action", ".", "term", ")", "{", "if", "(", "action", "instanceof", "Shift", "?", "other", "instanceof", "Shift", "&&", "mapping", "[", "action", ".", "target", ".", "id", "]", "==", "mapping", "[", "other", ".", "target", ".", "id", "]", ":", "other", ".", "eq", "(", "action", ")", ")", "continue", "actions", ";", "conflict", "=", "true", ";", "}", "if", "(", "conflict", ")", "return", "false", ";", "}", "return", "true", ";", "}", "function", "canMerge", "(", "a", ",", "b", ",", "mapping", ")", "{", "return", "canMergeInner", "(", "a", ",", "b", ",", "mapping", ")", "&&", "canMergeInner", "(", "b", ",", "a", ",", "mapping", ")", ";", "}", "function", "mergeStates", "(", "states", ",", "mapping", ")", "{", "let", "newStates", "=", "[", "]", ";", "for", "(", "let", "state", "of", "states", ")", "{", "let", "newID", "=", "mapping", "[", "state", ".", "id", "]", ";", "if", "(", "!", "newStates", "[", "newID", "]", ")", "{", "newStates", "[", "newID", "]", "=", "new", "State", "(", "newID", ",", "state", ".", "set", ",", "0", ",", "state", ".", "skip", ",", "state", ".", "hash", ",", "state", ".", "startRule", ")", ";", "newStates", "[", "newID", "]", ".", "tokenGroup", "=", "state", ".", "tokenGroup", ";", "newStates", "[", "newID", "]", ".", "defaultReduce", "=", "state", ".", "defaultReduce", ";", "}", "}", "for", "(", "let", "state", "of", "states", ")", "{", "let", "newID", "=", "mapping", "[", "state", ".", "id", "]", ",", "target", "=", "newStates", "[", "newID", "]", ";", "target", ".", "flags", "|=", "state", ".", "flags", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "state", ".", "actions", ".", "length", ";", "i", "++", ")", "{", "let", "action", "=", "state", ".", "actions", "[", "i", "]", ".", "map", "(", "mapping", ",", "newStates", ")", ";", "if", "(", "!", "target", ".", "actions", ".", "some", "(", "a", "=>", "a", ".", "eq", "(", "action", ")", ")", ")", "{", "target", ".", "actions", ".", "push", "(", "action", ")", ";", "target", ".", "actionPositions", ".", "push", "(", "state", ".", "actionPositions", "[", "i", "]", ")", ";", "}", "}", "for", "(", "let", "goto", "of", "state", ".", "goto", ")", "{", "let", "mapped", "=", "goto", ".", "map", "(", "mapping", ",", "newStates", ")", ";", "if", "(", "!", "target", ".", "goto", ".", "some", "(", "g", "=>", "g", ".", "eq", "(", "mapped", ")", ")", ")", "target", ".", "goto", ".", "push", "(", "mapped", ")", ";", "}", "}", "return", "newStates", ";", "}", "class", "Group", "{", "members", ":", "number", "[", "]", ";", "constructor", "(", "readonly", "origin", ",", "member", ")", "{", "this", ".", "members", "=", "[", "member", "]", ";", "}", "}", "function", "samePosSet", "(", "a", ",", "b", ")", "{", "if", "(", "a", ".", "length", "!=", "b", ".", "length", ")", "return", "false", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "if", "(", "!", "a", "[", "i", "]", ".", "eqSimple", "(", "b", "[", "i", "]", ")", ")", "return", "false", ";", "return", "true", ";", "}", "function", "collapseAutomaton", "(", "states", ")", "{", "let", "mapping", "=", "[", "]", ",", "groups", "=", "[", "]", ";", "assignGroups", ":", "for", "(", "let", "i", "=", "0", ";", "i", "<", "states", ".", "length", ";", "i", "++", ")", "{", "let", "state", "=", "states", "[", "i", "]", ";", "if", "(", "!", "state", ".", "startRule", ")", "for", "(", "let", "j", "=", "0", ";", "j", "<", "groups", ".", "length", ";", "j", "++", ")", "{", "let", "group", "=", "groups", "[", "j", "]", ",", "other", "=", "states", "[", "group", ".", "members", "[", "0", "]", "]", ";", "if", "(", "state", ".", "tokenGroup", "==", "other", ".", "tokenGroup", "&&", "state", ".", "skip", "==", "other", ".", "skip", "&&", "!", "other", ".", "startRule", "&&", "samePosSet", "(", "state", ".", "set", ",", "other", ".", "set", ")", ")", "{", "group", ".", "members", ".", "push", "(", "i", ")", ";", "mapping", ".", "push", "(", "j", ")", ";", "continue", "assignGroups", ";", "}", "}", "mapping", ".", "push", "(", "groups", ".", "length", ")", ";", "groups", ".", "push", "(", "new", "Group", "(", "groups", ".", "length", ",", "i", ")", ")", ";", "}", "function", "spill", "(", "groupIndex", ",", "index", ")", "{", "let", "group", "=", "groups", "[", "groupIndex", "]", ",", "state", "=", "states", "[", "group", ".", "members", "[", "index", "]", "]", ";", "let", "pop", "=", "group", ".", "members", ".", "pop", "(", ")", "!", ";", "if", "(", "index", "!=", "group", ".", "members", ".", "length", ")", "group", ".", "members", "[", "index", "]", "=", "pop", ";", "for", "(", "let", "i", "=", "groupIndex", "+", "1", ";", "i", "<", "groups", ".", "length", ";", "i", "++", ")", "{", "mapping", "[", "state", ".", "id", "]", "=", "i", ";", "if", "(", "groups", "[", "i", "]", ".", "origin", "==", "group", ".", "origin", "&&", "groups", "[", "i", "]", ".", "members", ".", "every", "(", "id", "=>", "canMerge", "(", "state", ",", "states", "[", "id", "]", ",", "mapping", ")", ")", ")", "{", "groups", "[", "i", "]", ".", "members", ".", "push", "(", "state", ".", "id", ")", ";", "return", ";", "}", "}", "mapping", "[", "state", ".", "id", "]", "=", "groups", ".", "length", ";", "groups", ".", "push", "(", "new", "Group", "(", "group", ".", "origin", ",", "state", ".", "id", ")", ")", ";", "}", "for", "(", "let", "pass", "=", "1", ";", ";", "pass", "++", ")", "{", "let", "conflicts", "=", "false", ",", "t0", "=", "Date", ".", "now", "(", ")", ";", "for", "(", "let", "g", "=", "0", ",", "startLen", "=", "groups", ".", "length", ";", "g", "<", "startLen", ";", "g", "++", ")", "{", "let", "group", "=", "groups", "[", "g", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "group", ".", "members", ".", "length", "-", "1", ";", "i", "++", ")", "{", "for", "(", "let", "j", "=", "i", "+", "1", ";", "j", "<", "group", ".", "members", ".", "length", ";", "j", "++", ")", "{", "let", "idA", "=", "group", ".", "members", "[", "i", "]", ",", "idB", "=", "group", ".", "members", "[", "j", "]", ";", "if", "(", "!", "canMerge", "(", "states", "[", "idA", "]", ",", "states", "[", "idB", "]", ",", "mapping", ")", ")", "{", "conflicts", "=", "true", ";", "spill", "(", "g", ",", "j", "--", ")", ";", "}", "}", "}", "}", "if", "(", "timing", ")", "console", ".", "log", "(", "`Collapse pass ${", "pass", "}${", "conflicts", "?", "``", ":", "`, done`", "} (${", "(", "(", "Date", ".", "now", "(", ")", "-", "t0", ")", "/", "1000", ")", ".", "toFixed", "(", "2", ")", "}s)`", ")", ";", "if", "(", "!", "conflicts", ")", "return", "mergeStates", "(", "states", ",", "mapping", ")", ";", "}", "}", "function", "mergeIdentical", "(", "states", ")", "{", "for", "(", "let", "pass", "=", "1", ";", ";", "pass", "++", ")", "{", "let", "mapping", "=", "[", "]", ",", "didMerge", "=", "false", ",", "t0", "=", "Date", ".", "now", "(", ")", ";", "let", "newStates", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "states", ".", "length", ";", "i", "++", ")", "{", "let", "state", "=", "states", "[", "i", "]", ";", "let", "match", "=", "newStates", ".", "findIndex", "(", "s", "=>", "state", ".", "eq", "(", "s", ")", ")", ";", "if", "(", "match", "<", "0", ")", "{", "mapping", "[", "i", "]", "=", "newStates", ".", "length", ";", "newStates", ".", "push", "(", "state", ")", ";", "}", "else", "{", "mapping", "[", "i", "]", "=", "match", ";", "didMerge", "=", "true", ";", "let", "other", "=", "newStates", "[", "match", "]", ",", "add", "=", "null", ";", "for", "(", "let", "pos", "of", "state", ".", "set", ")", "if", "(", "!", "other", ".", "set", ".", "some", "(", "p", "=>", "p", ".", "eqSimple", "(", "pos", ")", ")", ")", "(", "add", "||", "(", "add", "=", "[", "]", ")", ")", ".", "push", "(", "pos", ")", ";", "if", "(", "add", ")", "other", ".", "set", "=", "add", ".", "concat", "(", "other", ".", "set", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "cmp", "(", "b", ")", ")", ";", "}", "}", "if", "(", "timing", ")", "console", ".", "log", "(", "`Merge identical pass ${", "pass", "}${", "didMerge", "?", "\"\"", ":", "\", done\"", "} (${", "(", "(", "Date", ".", "now", "(", ")", "-", "t0", ")", "/", "1000", ")", ".", "toFixed", "(", "2", ")", "}s)`", ")", ";", "if", "(", "!", "didMerge", ")", "return", "states", ";", "for", "(", "let", "state", "of", "newStates", ")", "if", "(", "!", "state", ".", "defaultReduce", ")", "{", "state", ".", "actions", "=", "state", ".", "actions", ".", "map", "(", "a", "=>", "a", ".", "map", "(", "mapping", ",", "newStates", ")", ")", ";", "state", ".", "goto", "=", "state", ".", "goto", ".", "map", "(", "a", "=>", "a", ".", "map", "(", "mapping", ",", "newStates", ")", ")", ";", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "newStates", ".", "length", ";", "i", "++", ")", "newStates", "[", "i", "]", ".", "id", "=", "i", ";", "states", "=", "newStates", ";", "}", "}", "const", "none", "=", "[", "]", ";", "export", "function", "finishAutomaton", "(", "full", ")", "{", "return", "mergeIdentical", "(", "collapseAutomaton", "(", "full", ")", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, "number", null, null, "array", null, null, null, null, null, "Term", null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "number", null, null, null, null, null, "array", null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflicts", null, "number", null, null, null, null, null, null, null, "Conflicts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflicts", null, null, null, null, null, "Conflicts", null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Rule", null, "number", null, null, null, "object", null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, "State", null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, "Rule", null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, "Term", null, null, "number", null, null, null, null, null, null, null, "Term", null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflicts", null, null, null, null, null, null, "Conflicts", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflict", null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, "Term", null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, "Shift", null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "State", null, null, null, "Rule", null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, "object", null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, "void", null, "Term", null, null, null, null, null, "Term", null, "Pos", null, null, null, null, null, "Rule", null, null, null, null, null, null, null, "Pos", null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, "Term", null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "T", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "TermSet", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "boolean", null, null, null, "number", null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, "Pos", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Pos", null, "Pos", null, null, null, "array", null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "TermSet", null, "array", null, "object", null, null, null, "array", null, null, null, null, null, "object", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "Term", null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Core", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "Pos", null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflict", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "Pos", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "State", null, "State", null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "State", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "State", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Group", null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, "number", null, null, null, "Group", null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "boolean", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Group", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "boolean", null, null, null, "number", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, "number", null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, "array", null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/automaton.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "automaton.ts"}
{"tokens": ["export", "class", "Node", "{", "constructor", "(", "readonly", "start", ")", "{", "}", "}", "export", "class", "GrammarDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "rules", ",", "readonly", "topRules", ",", "readonly", "tokens", ",", "readonly", "context", ",", "readonly", "externalTokens", ",", "readonly", "externalSpecializers", ",", "readonly", "precedences", ",", "readonly", "mainSkip", ",", "readonly", "scopedSkip", ",", "readonly", "dialects", ",", "readonly", "externalProps", ",", "readonly", "autoDelim", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "Object", ".", "values", "(", "this", ".", "rules", ")", ".", "join", "(", "\"\\n\"", ")", ";", "}", "}", "export", "class", "RuleDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "id", ",", "readonly", "props", ",", "readonly", "params", ",", "readonly", "expr", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "this", ".", "id", ".", "name", "+", "(", "this", ".", "params", ".", "length", "?", "`<${", "this", ".", "params", ".", "join", "(", ")", "}>`", ":", "\"\"", ")", "+", "\" -> \"", "+", "this", ".", "expr", ";", "}", "}", "export", "class", "PrecDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "items", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "TokenPrecDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "items", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "TokenConflictDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "a", ",", "readonly", "b", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "TokenDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "precedences", ",", "readonly", "conflicts", ",", "readonly", "rules", ",", "readonly", "literals", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "LiteralDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "literal", ",", "readonly", "props", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "ContextDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "id", ",", "readonly", "source", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "ExternalTokenDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "id", ",", "readonly", "source", ",", "readonly", "tokens", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "ExternalSpecializeDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "type", ",", "readonly", "token", ",", "readonly", "id", ",", "readonly", "source", ",", "readonly", "tokens", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "ExternalPropDeclaration", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "id", ",", "readonly", "externalID", ",", "readonly", "source", ")", "{", "super", "(", "start", ")", ";", "}", "}", "export", "class", "Identifier", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "name", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "this", ".", "name", ";", "}", "}", "export", "class", "Expression", "extends", "Node", "{", "walk", "(", "f", ")", "{", "return", "f", "(", "this", ")", ";", "}", "eq", "(", "_other", ")", "{", "return", "false", ";", "}", "prec", "!", ":", "number", ";", "}", "Expression", ".", "prototype", ".", "prec", "=", "10", ";", "export", "class", "NameExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "namespace", ",", "readonly", "id", ",", "readonly", "args", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "this", ".", "id", ".", "name", "+", "(", "this", ".", "args", ".", "length", "?", "`<${", "this", ".", "args", ".", "join", "(", ")", "}>`", ":", "\"\"", ")", ";", "}", "eq", "(", "other", ")", "{", "return", "(", "this", ".", "namespace", "?", "other", ".", "namespace", "!=", "null", "&&", "other", ".", "namespace", ".", "name", "==", "this", ".", "namespace", ".", "name", ":", "!", "other", ".", "namespace", ")", "&&", "this", ".", "id", ".", "name", "==", "other", ".", "id", ".", "name", "&&", "exprsEq", "(", "this", ".", "args", ",", "other", ".", "args", ")", ";", "}", "walk", "(", "f", ")", "{", "let", "args", "=", "walkExprs", "(", "this", ".", "args", ",", "f", ")", ";", "return", "f", "(", "args", "==", "this", ".", "args", "?", "this", ":", "new", "NameExpression", "(", "this", ".", "start", ",", "this", ".", "namespace", ",", "this", ".", "id", ",", "args", ")", ")", ";", "}", "}", "export", "class", "SpecializeExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "type", ",", "readonly", "props", ",", "readonly", "token", ",", "readonly", "content", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "`@${", "this", ".", "type", "}[${", "this", ".", "props", ".", "join", "(", "\",\"", ")", "}]<${", "this", ".", "token", "}, ${", "this", ".", "content", "}>`", ";", "}", "eq", "(", "other", ")", "{", "return", "this", ".", "type", "==", "other", ".", "type", "&&", "Prop", ".", "eqProps", "(", "this", ".", "props", ",", "other", ".", "props", ")", "&&", "exprEq", "(", "this", ".", "token", ",", "other", ".", "token", ")", "&&", "exprEq", "(", "this", ".", "content", ",", "other", ".", "content", ")", ";", "}", "walk", "(", "f", ")", "{", "let", "token", "=", "this", ".", "token", ".", "walk", "(", "f", ")", ",", "content", "=", "this", ".", "content", ".", "walk", "(", "f", ")", ";", "return", "f", "(", "token", "==", "this", ".", "token", "&&", "content", "==", "this", ".", "content", "?", "this", ":", "new", "SpecializeExpression", "(", "this", ".", "start", ",", "this", ".", "type", ",", "this", ".", "props", ",", "token", ",", "content", ")", ")", ";", "}", "}", "export", "class", "InlineRuleExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "rule", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "let", "rule", "=", "this", ".", "rule", ";", "return", "`${", "rule", ".", "id", "}${", "rule", ".", "props", ".", "length", "?", "`[${", "rule", ".", "props", ".", "join", "(", "\",\"", ")", "}]`", ":", "\"\"", "} { ${", "rule", ".", "expr", "} }`", ";", "}", "eq", "(", "other", ")", "{", "let", "rule", "=", "this", ".", "rule", ",", "oRule", "=", "other", ".", "rule", ";", "return", "exprEq", "(", "rule", ".", "expr", ",", "oRule", ".", "expr", ")", "&&", "rule", ".", "id", ".", "name", "==", "oRule", ".", "id", ".", "name", "&&", "Prop", ".", "eqProps", "(", "rule", ".", "props", ",", "oRule", ".", "props", ")", ";", "}", "walk", "(", "f", ")", "{", "let", "rule", "=", "this", ".", "rule", ",", "expr", "=", "rule", ".", "expr", ".", "walk", "(", "f", ")", ";", "return", "f", "(", "expr", "==", "rule", ".", "expr", "?", "this", ":", "new", "InlineRuleExpression", "(", "this", ".", "start", ",", "new", "RuleDeclaration", "(", "rule", ".", "start", ",", "rule", ".", "id", ",", "rule", ".", "props", ",", "[", "]", ",", "expr", ")", ")", ")", ";", "}", "}", "export", "class", "ChoiceExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "exprs", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "this", ".", "exprs", ".", "map", "(", "e", "=>", "maybeParens", "(", "e", ",", "this", ")", ")", ".", "join", "(", "\" | \"", ")", ";", "}", "eq", "(", "other", ")", "{", "return", "exprsEq", "(", "this", ".", "exprs", ",", "other", ".", "exprs", ")", ";", "}", "walk", "(", "f", ")", "{", "let", "exprs", "=", "walkExprs", "(", "this", ".", "exprs", ",", "f", ")", ";", "return", "f", "(", "exprs", "==", "this", ".", "exprs", "?", "this", ":", "new", "ChoiceExpression", "(", "this", ".", "start", ",", "exprs", ")", ")", ";", "}", "}", "ChoiceExpression", ".", "prototype", ".", "prec", "=", "1", ";", "export", "class", "SequenceExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "exprs", ",", "readonly", "markers", ",", "readonly", "empty", "=", "false", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "this", ".", "empty", "?", "\"()\"", ":", "this", ".", "exprs", ".", "map", "(", "e", "=>", "maybeParens", "(", "e", ",", "this", ")", ")", ".", "join", "(", "\" \"", ")", ";", "}", "eq", "(", "other", ")", "{", "return", "exprsEq", "(", "this", ".", "exprs", ",", "other", ".", "exprs", ")", "&&", "this", ".", "markers", ".", "every", "(", "(", "m", ",", "i", ")", "=>", "{", "let", "om", "=", "other", ".", "markers", "[", "i", "]", ";", "return", "m", ".", "length", "==", "om", ".", "length", "&&", "m", ".", "every", "(", "(", "x", ",", "i", ")", "=>", "x", ".", "eq", "(", "om", "[", "i", "]", ")", ")", ";", "}", ")", ";", "}", "walk", "(", "f", ")", "{", "let", "exprs", "=", "walkExprs", "(", "this", ".", "exprs", ",", "f", ")", ";", "return", "f", "(", "exprs", "==", "this", ".", "exprs", "?", "this", ":", "new", "SequenceExpression", "(", "this", ".", "start", ",", "exprs", ",", "this", ".", "markers", ",", "this", ".", "empty", "&&", "!", "exprs", ".", "length", ")", ")", ";", "}", "}", "SequenceExpression", ".", "prototype", ".", "prec", "=", "2", ";", "export", "class", "ConflictMarker", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "id", ",", "readonly", "type", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "(", "this", ".", "type", "==", "\"ambig\"", "?", "\"~\"", ":", "\"!\"", ")", "+", "this", ".", "id", ".", "name", ";", "}", "eq", "(", "other", ")", "{", "return", "this", ".", "id", ".", "name", "==", "other", ".", "id", ".", "name", "&&", "this", ".", "type", "==", "other", ".", "type", ";", "}", "}", "export", "class", "RepeatExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "expr", ",", "readonly", "kind", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "maybeParens", "(", "this", ".", "expr", ",", "this", ")", "+", "this", ".", "kind", ";", "}", "eq", "(", "other", ")", "{", "return", "exprEq", "(", "this", ".", "expr", ",", "other", ".", "expr", ")", "&&", "this", ".", "kind", "==", "other", ".", "kind", ";", "}", "walk", "(", "f", ")", "{", "let", "expr", "=", "this", ".", "expr", ".", "walk", "(", "f", ")", ";", "return", "f", "(", "expr", "==", "this", ".", "expr", "?", "this", ":", "new", "RepeatExpression", "(", "this", ".", "start", ",", "expr", ",", "this", ".", "kind", ")", ")", ";", "}", "}", "RepeatExpression", ".", "prototype", ".", "prec", "=", "3", ";", "export", "class", "LiteralExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "value", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "JSON", ".", "stringify", "(", "this", ".", "value", ")", ";", "}", "eq", "(", "other", ")", "{", "return", "this", ".", "value", "==", "other", ".", "value", ";", "}", "}", "export", "class", "SetExpression", "extends", "Expression", "{", "constructor", "(", "start", ",", "readonly", "ranges", ",", "readonly", "inverted", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "`[${", "this", ".", "inverted", "?", "\"^\"", ":", "\"\"", "}${", "this", ".", "ranges", ".", "map", "(", "(", "[", "a", ",", "b", "]", ")", "=>", "{", "return", "String", ".", "fromCodePoint", "(", "a", ")", "+", "(", "b", "==", "a", "+", "1", "?", "\"\"", ":", "\"-\"", "+", "String", ".", "fromCodePoint", "(", "b", ")", ")", ";", "}", ")", "}]`", ";", "}", "eq", "(", "other", ")", "{", "return", "this", ".", "inverted", "==", "other", ".", "inverted", "&&", "this", ".", "ranges", ".", "length", "==", "other", ".", "ranges", ".", "length", "&&", "this", ".", "ranges", ".", "every", "(", "(", "[", "a", ",", "b", "]", ",", "i", ")", "=>", "{", "let", "[", "x", ",", "y", "]", "=", "other", ".", "ranges", "[", "i", "]", ";", "return", "a", "==", "x", "&&", "b", "==", "y", ";", "}", ")", ";", "}", "}", "export", "class", "AnyExpression", "extends", "Expression", "{", "constructor", "(", "start", ")", "{", "super", "(", "start", ")", ";", "}", "toString", "(", ")", "{", "return", "\"_\"", ";", "}", "eq", "(", ")", "{", "return", "true", ";", "}", "}", "function", "walkExprs", "(", "exprs", ",", "f", ")", "{", "let", "result", "=", "null", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "exprs", ".", "length", ";", "i", "++", ")", "{", "let", "expr", "=", "exprs", "[", "i", "]", ".", "walk", "(", "f", ")", ";", "if", "(", "expr", "!=", "exprs", "[", "i", "]", "&&", "!", "result", ")", "result", "=", "exprs", ".", "slice", "(", "0", ",", "i", ")", ";", "if", "(", "result", ")", "result", ".", "push", "(", "expr", ")", ";", "}", "return", "result", "||", "exprs", ";", "}", "export", "function", "exprEq", "(", "a", ",", "b", ")", "{", "return", "a", ".", "constructor", "==", "b", ".", "constructor", "&&", "a", ".", "eq", "(", "b", "as", "any", ")", ";", "}", "export", "function", "exprsEq", "(", "a", ",", "b", ")", "{", "return", "a", ".", "length", "==", "b", ".", "length", "&&", "a", ".", "every", "(", "(", "e", ",", "i", ")", "=>", "exprEq", "(", "e", ",", "b", "[", "i", "]", ")", ")", ";", "}", "export", "class", "Prop", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "at", ",", "readonly", "name", ",", "readonly", "value", ")", "{", "super", "(", "start", ")", ";", "}", "eq", "(", "other", ")", "{", "return", "this", ".", "name", "==", "other", ".", "name", "&&", "this", ".", "value", ".", "length", "==", "other", ".", "value", ".", "length", "&&", "this", ".", "value", ".", "every", "(", "(", "v", ",", "i", ")", "=>", "v", ".", "value", "==", "other", ".", "value", "[", "i", "]", ".", "value", "&&", "v", ".", "name", "==", "other", ".", "value", "[", "i", "]", ".", "name", ")", ";", "}", "toString", "(", ")", "{", "let", "result", "=", "(", "this", ".", "at", "?", "\"@\"", ":", "\"\"", ")", "+", "this", ".", "name", ";", "if", "(", "this", ".", "value", ".", "length", ")", "{", "result", "+=", "\"=\"", ";", "for", "(", "let", "{", "name", ",", "value", "}", "of", "this", ".", "value", ")", "result", "+=", "name", "?", "`{${", "name", "}}`", ":", "/[^\\w-]/", ".", "test", "(", "value", "!", ")", "?", "JSON", ".", "stringify", "(", "value", ")", ":", "value", ";", "}", "return", "result", ";", "}", "static", "eqProps", "(", "a", ",", "b", ")", "{", "return", "a", ".", "length", "==", "b", ".", "length", "&&", "a", ".", "every", "(", "(", "p", ",", "i", ")", "=>", "p", ".", "eq", "(", "b", "[", "i", "]", ")", ")", ";", "}", "}", "export", "class", "PropPart", "extends", "Node", "{", "constructor", "(", "start", ",", "readonly", "value", ",", "readonly", "name", ")", "{", "super", "(", "start", ")", ";", "}", "}", "function", "maybeParens", "(", "node", ",", "parent", ")", "{", "return", "node", ".", "prec", "<", "parent", ".", "prec", "?", "\"(\"", "+", "node", ".", "toString", "(", ")", "+", "\")\"", ":", "node", ".", "toString", "(", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "UNK", null, null, "UNK", null, null, null, null, null, null, null, null, "UNK", null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Identifier", null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Identifier", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Identifier", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "string", null, null, "Expression", null, null, "Identifier", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Identifier", null, null, "Identifier", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, "boolean", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Identifier", null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "NameExpression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "string", null, null, null, null, null, "Expression", null, null, "Expression", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, "string", null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, "RuleDeclaration", null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, "RuleDeclaration", null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "SequenceExpression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Identifier", null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "Expression", null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "LiteralExpression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "array", null, null, "boolean", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, "array", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "boolean", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Prop", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Prop", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "string", null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/node.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "node.ts"}
{"tokens": ["import", "{", "Term", ",", "union", "}", "from", "\"./grammar\"", ";", "import", "{", "GenError", "}", "from", "\"./error\"", ";", "export", "const", "MAX_CHAR", "=", "0xfffe", ";", "export", "class", "Edge", "{", "constructor", "(", "readonly", "from", ",", "readonly", "to", ",", "readonly", "target", ")", "{", "}", "toString", "(", ")", "{", "return", "`-> ${", "this", ".", "target", ".", "id", "}[label=${", "JSON", ".", "stringify", "(", "this", ".", "from", "<", "0", "?", "\"ε\"", ":", "charFor", "(", "this", ".", "from", ")", "+", "(", "this", ".", "to", ">", "this", ".", "from", "+", "1", "?", "\"-\"", "+", "charFor", "(", "this", ".", "to", "-", "1", ")", ":", "\"\"", ")", ")", "}]`", ";", "}", "}", "function", "charFor", "(", "n", ")", "{", "return", "n", ">", "MAX_CHAR", "?", "\"∞\"", ":", "n", ">=", "0xd800", "&&", "n", "<", "0xdfff", "?", "\"\\\\u{\"", "+", "n", ".", "toString", "(", "16", ")", "+", "\"}\"", ":", "String", ".", "fromCharCode", "(", "n", ")", ";", "}", "type", "Partition", "=", "{", "[", "id", "]", ":", "State", "[", "]", ";", "}", ";", "function", "minimize", "(", "states", ",", "start", ")", "{", "let", "partition", "=", "Object", ".", "create", "(", "null", ")", ";", "let", "byAccepting", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "state", "of", "states", ")", "{", "let", "id", "=", "ids", "(", "state", ".", "accepting", ")", ";", "let", "group", "=", "byAccepting", "[", "id", "]", "||", "(", "byAccepting", "[", "id", "]", "=", "[", "]", ")", ";", "group", ".", "push", "(", "state", ")", ";", "partition", "[", "state", ".", "id", "]", "=", "group", ";", "}", "for", "(", ";", ";", ")", "{", "let", "split", "=", "false", ",", "newPartition", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "state", "of", "states", ")", "{", "if", "(", "newPartition", "[", "state", ".", "id", "]", ")", "continue", ";", "let", "group", "=", "partition", "[", "state", ".", "id", "]", ";", "if", "(", "group", ".", "length", "==", "1", ")", "{", "newPartition", "[", "group", "[", "0", "]", ".", "id", "]", "=", "group", ";", "continue", ";", "}", "let", "parts", "=", "[", "]", ";", "groups", ":", "for", "(", "let", "state", "of", "group", ")", "{", "for", "(", "let", "p", "of", "parts", ")", "{", "if", "(", "isEquivalent", "(", "state", ",", "p", "[", "0", "]", ",", "partition", ")", ")", "{", "p", ".", "push", "(", "state", ")", ";", "continue", "groups", ";", "}", "}", "parts", ".", "push", "(", "[", "state", "]", ")", ";", "}", "if", "(", "parts", ".", "length", ">", "1", ")", "split", "=", "true", ";", "for", "(", "let", "p", "of", "parts", ")", "for", "(", "let", "s", "of", "p", ")", "newPartition", "[", "s", ".", "id", "]", "=", "p", ";", "}", "if", "(", "!", "split", ")", "return", "applyMinimization", "(", "states", ",", "start", ",", "partition", ")", ";", "partition", "=", "newPartition", ";", "}", "}", "function", "isEquivalent", "(", "a", ",", "b", ",", "partition", ")", "{", "if", "(", "a", ".", "edges", ".", "length", "!=", "b", ".", "edges", ".", "length", ")", "return", "false", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "a", ".", "edges", ".", "length", ";", "i", "++", ")", "{", "let", "eA", "=", "a", ".", "edges", "[", "i", "]", ",", "eB", "=", "b", ".", "edges", "[", "i", "]", ";", "if", "(", "eA", ".", "from", "!=", "eB", ".", "from", "||", "eA", ".", "to", "!=", "eB", ".", "to", "||", "partition", "[", "eA", ".", "target", ".", "id", "]", "!=", "partition", "[", "eB", ".", "target", ".", "id", "]", ")", "return", "false", ";", "}", "return", "true", ";", "}", "function", "applyMinimization", "(", "states", ",", "start", ",", "partition", ")", "{", "for", "(", "let", "state", "of", "states", ")", "{", "for", "(", "let", "i", "=", "0", ";", "i", "<", "state", ".", "edges", ".", "length", ";", "i", "++", ")", "{", "let", "edge", "=", "state", ".", "edges", "[", "i", "]", ",", "target", "=", "partition", "[", "edge", ".", "target", ".", "id", "]", "[", "0", "]", ";", "if", "(", "target", "!=", "edge", ".", "target", ")", "state", ".", "edges", "[", "i", "]", "=", "new", "Edge", "(", "edge", ".", "from", ",", "edge", ".", "to", ",", "target", ")", ";", "}", "}", "return", "partition", "[", "start", ".", "id", "]", "[", "0", "]", ";", "}", "let", "stateID", "=", "1", ";", "export", "class", "State", "{", "edges", ":", "Edge", "[", "]", "=", "[", "]", ";", "constructor", "(", "readonly", "accepting", "=", "[", "]", ",", "readonly", "id", "=", "stateID", "++", ")", "{", "}", "edge", "(", "from", ",", "to", ",", "target", ")", "{", "this", ".", "edges", ".", "push", "(", "new", "Edge", "(", "from", ",", "to", ",", "target", ")", ")", ";", "}", "nullEdge", "(", "target", ")", "{", "this", ".", "edge", "(", "-", "1", ",", "-", "1", ",", "target", ")", ";", "}", "compile", "(", ")", "{", "let", "labeled", "=", "Object", ".", "create", "(", "null", ")", ",", "localID", "=", "0", ";", "let", "startState", "=", "explore", "(", "this", ".", "closure", "(", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "id", "-", "b", ".", "id", ")", ")", ";", "return", "minimize", "(", "Object", ".", "values", "(", "labeled", ")", ",", "startState", ")", ";", "function", "explore", "(", "states", ")", "{", "let", "newState", "=", "labeled", "[", "ids", "(", "states", ")", "]", "=", "new", "State", "(", "states", ".", "reduce", "(", "(", "a", ",", "s", ")", "=>", "union", "(", "a", ",", "s", ".", "accepting", ")", ",", "[", "]", ")", "as", "Term", "[", "]", ",", "localID", "++", ")", ";", "let", "out", "=", "[", "]", ";", "for", "(", "let", "state", "of", "states", ")", "for", "(", "let", "edge", "of", "state", ".", "edges", ")", "{", "if", "(", "edge", ".", "from", ">=", "0", ")", "out", ".", "push", "(", "edge", ")", ";", "}", "let", "transitions", "=", "mergeEdges", "(", "out", ")", ";", "for", "(", "let", "merged", "of", "transitions", ")", "{", "let", "targets", "=", "merged", ".", "targets", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "id", "-", "b", ".", "id", ")", ";", "newState", ".", "edge", "(", "merged", ".", "from", ",", "merged", ".", "to", ",", "labeled", "[", "ids", "(", "targets", ")", "]", "||", "explore", "(", "targets", ")", ")", ";", "}", "return", "newState", ";", "}", "}", "closure", "(", ")", "{", "let", "result", "=", "[", "]", ",", "seen", "=", "Object", ".", "create", "(", "null", ")", ";", "function", "explore", "(", "state", ")", "{", "if", "(", "seen", "[", "state", ".", "id", "]", ")", "return", ";", "seen", "[", "state", ".", "id", "]", "=", "true", ";", "if", "(", "state", ".", "edges", ".", "some", "(", "e", "=>", "e", ".", "from", ">=", "0", ")", "||", "(", "state", ".", "accepting", ".", "length", ">", "0", "&&", "!", "state", ".", "edges", ".", "some", "(", "e", "=>", "sameSet", "(", "state", ".", "accepting", ",", "e", ".", "target", ".", "accepting", ")", ")", ")", ")", "result", ".", "push", "(", "state", ")", ";", "for", "(", "let", "edge", "of", "state", ".", "edges", ")", "if", "(", "edge", ".", "from", "<", "0", ")", "explore", "(", "edge", ".", "target", ")", ";", "}", "explore", "(", "this", ")", ";", "return", "result", ";", "}", "findConflicts", "(", "occurTogether", ")", "{", "let", "conflicts", "=", "[", "]", ",", "cycleTerms", "=", "this", ".", "cycleTerms", "(", ")", ";", "function", "add", "(", "a", ",", "b", ",", "soft", ",", "aEdges", ",", "bEdges", "?", ")", "{", "if", "(", "a", ".", "id", "<", "b", ".", "id", ")", "{", "[", "a", ",", "b", "]", "=", "[", "b", ",", "a", "]", ";", "soft", "=", "-", "soft", ";", "}", "let", "found", "=", "conflicts", ".", "find", "(", "c", "=>", "c", ".", "a", "==", "a", "&&", "c", ".", "b", "==", "b", ")", ";", "if", "(", "!", "found", ")", "conflicts", ".", "push", "(", "new", "Conflict", "(", "a", ",", "b", ",", "soft", ",", "exampleFromEdges", "(", "aEdges", ")", ",", "bEdges", "&&", "exampleFromEdges", "(", "bEdges", ")", ")", ")", ";", "else", "if", "(", "found", ".", "soft", "!=", "soft", ")", "found", ".", "soft", "=", "0", ";", "}", "this", ".", "reachable", "(", "(", "state", ",", "edges", ")", "=>", "{", "if", "(", "state", ".", "accepting", ".", "length", "==", "0", ")", "return", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "state", ".", "accepting", ".", "length", ";", "i", "++", ")", "for", "(", "let", "j", "=", "i", "+", "1", ";", "j", "<", "state", ".", "accepting", ".", "length", ";", "j", "++", ")", "add", "(", "state", ".", "accepting", "[", "i", "]", ",", "state", ".", "accepting", "[", "j", "]", ",", "0", ",", "edges", ")", ";", "state", ".", "reachable", "(", "(", "s", ",", "es", ")", "=>", "{", "if", "(", "s", "!=", "state", ")", "for", "(", "let", "term", "of", "s", ".", "accepting", ")", "{", "let", "hasCycle", "=", "cycleTerms", ".", "includes", "(", "term", ")", ";", "for", "(", "let", "orig", "of", "state", ".", "accepting", ")", "if", "(", "term", "!=", "orig", ")", "add", "(", "term", ",", "orig", ",", "hasCycle", "||", "cycleTerms", ".", "includes", "(", "orig", ")", "||", "!", "occurTogether", "(", "term", ",", "orig", ")", "?", "0", ":", "1", ",", "edges", ",", "edges", ".", "concat", "(", "es", ")", ")", ";", "}", "}", ")", ";", "}", ")", ";", "return", "conflicts", ";", "}", "cycleTerms", "(", ")", "{", "let", "work", "=", "[", "]", ";", "this", ".", "reachable", "(", "state", "=>", "{", "for", "(", "let", "{", "target", "}", "of", "state", ".", "edges", ")", "work", ".", "push", "(", "state", ",", "target", ")", ";", "}", ")", ";", "let", "table", "=", "new", "Map", ";", "let", "haveCycle", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "work", ".", "length", ";", ")", "{", "let", "from", "=", "work", "[", "i", "++", "]", ",", "to", "=", "work", "[", "i", "++", "]", ";", "let", "entry", "=", "table", ".", "get", "(", "from", ")", ";", "if", "(", "!", "entry", ")", "table", ".", "set", "(", "from", ",", "entry", "=", "[", "]", ")", ";", "if", "(", "entry", ".", "includes", "(", "to", ")", ")", "continue", ";", "if", "(", "from", "==", "to", ")", "{", "if", "(", "!", "haveCycle", ".", "includes", "(", "from", ")", ")", "haveCycle", ".", "push", "(", "from", ")", ";", "}", "else", "{", "for", "(", "let", "next", "of", "entry", ")", "work", ".", "push", "(", "from", ",", "next", ")", ";", "entry", ".", "push", "(", "to", ")", ";", "}", "}", "let", "result", "=", "[", "]", ";", "for", "(", "let", "state", "of", "haveCycle", ")", "{", "for", "(", "let", "term", "of", "state", ".", "accepting", ")", "{", "if", "(", "!", "result", ".", "includes", "(", "term", ")", ")", "result", ".", "push", "(", "term", ")", ";", "}", "}", "return", "result", ";", "}", "reachable", "(", "f", ")", "{", "let", "seen", "=", "[", "]", ",", "edges", "=", "[", "]", ";", "(", "function", "explore", "(", "s", ")", "{", "f", "(", "s", ",", "edges", ")", ";", "seen", ".", "push", "(", "s", ")", ";", "for", "(", "let", "edge", "of", "s", ".", "edges", ")", "if", "(", "!", "seen", ".", "includes", "(", "edge", ".", "target", ")", ")", "{", "edges", ".", "push", "(", "edge", ")", ";", "explore", "(", "edge", ".", "target", ")", ";", "edges", ".", "pop", "(", ")", ";", "}", "}", ")", "(", "this", ")", ";", "}", "toString", "(", ")", "{", "let", "out", "=", "\"digraph {\\n\"", ";", "this", ".", "reachable", "(", "state", "=>", "{", "if", "(", "state", ".", "accepting", ".", "length", ")", "out", "+=", "`  ${", "state", ".", "id", "} [label=${", "JSON", ".", "stringify", "(", "state", ".", "accepting", ".", "join", "(", ")", ")", "}];\\n`", ";", "for", "(", "let", "edge", "of", "state", ".", "edges", ")", "out", "+=", "`  ${", "state", ".", "id", "} ${", "edge", "};\\n`", ";", "}", ")", ";", "return", "out", "+", "\"}\"", ";", "}", "toArray", "(", "groupMasks", ",", "precedence", ")", "{", "let", "offsets", "=", "[", "]", ";", "let", "data", "=", "[", "]", ";", "this", ".", "reachable", "(", "state", "=>", "{", "let", "start", "=", "data", ".", "length", ";", "let", "acceptEnd", "=", "start", "+", "3", "+", "state", ".", "accepting", ".", "length", "*", "2", ";", "offsets", "[", "state", ".", "id", "]", "=", "start", ";", "data", ".", "push", "(", "state", ".", "stateMask", "(", "groupMasks", ")", ",", "acceptEnd", ",", "state", ".", "edges", ".", "length", ")", ";", "state", ".", "accepting", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "precedence", ".", "indexOf", "(", "a", ".", "id", ")", "-", "precedence", ".", "indexOf", "(", "b", ".", "id", ")", ")", ";", "for", "(", "let", "term", "of", "state", ".", "accepting", ")", "data", ".", "push", "(", "term", ".", "id", ",", "groupMasks", "[", "term", ".", "id", "]", "||", "0xffff", ")", ";", "for", "(", "let", "edge", "of", "state", ".", "edges", ")", "data", ".", "push", "(", "edge", ".", "from", ",", "edge", ".", "to", ",", "-", "edge", ".", "target", ".", "id", "-", "1", ")", ";", "}", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "data", ".", "length", ";", "i", "++", ")", "if", "(", "data", "[", "i", "]", "<", "0", ")", "data", "[", "i", "]", "=", "offsets", "[", "-", "data", "[", "i", "]", "-", "1", "]", ";", "if", "(", "data", ".", "length", ">", "2", "**", "16", ")", "throw", "new", "GenError", "(", "\"Tokenizer tables too big to represent with 16-bit offsets.\"", ")", ";", "return", "Uint16Array", ".", "from", "(", "data", ")", ";", "}", "stateMask", "(", "groupMasks", ")", "{", "let", "mask", "=", "0", ";", "this", ".", "reachable", "(", "state", "=>", "{", "for", "(", "let", "term", "of", "state", ".", "accepting", ")", "mask", "|=", "(", "groupMasks", "[", "term", ".", "id", "]", "||", "0xffff", ")", ";", "}", ")", ";", "return", "mask", ";", "}", "}", "export", "class", "Conflict", "{", "constructor", "(", "readonly", "a", ",", "readonly", "b", ",", "public", "soft", ",", "readonly", "exampleA", ",", "readonly", "exampleB", "?", ")", "{", "}", "}", "function", "exampleFromEdges", "(", "edges", ")", "{", "let", "str", "=", "\"\"", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "edges", ".", "length", ";", "i", "++", ")", "str", "+=", "String", ".", "fromCharCode", "(", "edges", "[", "i", "]", ".", "from", ")", ";", "return", "str", ";", "}", "function", "ids", "(", "elts", ")", "{", "let", "result", "=", "\"\"", ";", "for", "(", "let", "elt", "of", "elts", ")", "{", "if", "(", "result", ".", "length", ")", "result", "+=", "\"-\"", ";", "result", "+=", "elt", ".", "id", ";", "}", "return", "result", ";", "}", "function", "sameSet", "<", "T", ">", "(", "a", ",", "b", ")", "{", "if", "(", "a", ".", "length", "!=", "b", ".", "length", ")", "return", "false", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "a", ".", "length", ";", "i", "++", ")", "if", "(", "a", "[", "i", "]", "!=", "b", "[", "i", "]", ")", "return", "false", ";", "return", "true", ";", "}", "class", "MergedEdge", "{", "constructor", "(", "readonly", "from", ",", "readonly", "to", ",", "readonly", "targets", ")", "{", "}", "}", "function", "mergeEdges", "(", "edges", ")", "{", "let", "separate", "=", "[", "]", ",", "result", "=", "[", "]", ";", "for", "(", "let", "edge", "of", "edges", ")", "{", "if", "(", "!", "separate", ".", "includes", "(", "edge", ".", "from", ")", ")", "separate", ".", "push", "(", "edge", ".", "from", ")", ";", "if", "(", "!", "separate", ".", "includes", "(", "edge", ".", "to", ")", ")", "separate", ".", "push", "(", "edge", ".", "to", ")", ";", "}", "separate", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", "-", "b", ")", ";", "for", "(", "let", "i", "=", "1", ";", "i", "<", "separate", ".", "length", ";", "i", "++", ")", "{", "let", "from", "=", "separate", "[", "i", "-", "1", "]", ",", "to", "=", "separate", "[", "i", "]", ";", "let", "found", "=", "[", "]", ";", "for", "(", "let", "edge", "of", "edges", ")", "if", "(", "edge", ".", "to", ">", "from", "&&", "edge", ".", "from", "<", "to", ")", "{", "for", "(", "let", "target", "of", "edge", ".", "target", ".", "closure", "(", ")", ")", "if", "(", "!", "found", ".", "includes", "(", "target", ")", ")", "found", ".", "push", "(", "target", ")", ";", "}", "if", "(", "found", ".", "length", ")", "result", ".", "push", "(", "new", "MergedEdge", "(", "from", ",", "to", ",", "found", ")", ")", ";", "}", "return", "result", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, "number", null, null, "number", null, null, "State", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, "array", null, "State", null, null, null, "Partition", null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, "Partition", null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "State", null, "State", null, "Partition", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, "State", null, "Partition", null, null, null, null, null, "State", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "number", null, null, null, null, null, null, "void", null, "number", null, "number", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, "object", null, null, null, null, null, null, null, null, "number", null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, "State", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, "array", null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "State", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "void", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "boolean", null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, "void", null, "Term", null, "Term", null, "number", null, "array", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflict", null, null, null, null, null, "Conflict", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Map", null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Uint16Array", null, "object", null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "State", null, null, null, "number", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "object", null, null, null, "number", null, null, null, null, null, null, null, "State", null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, "Term", null, null, "number", null, null, "string", null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "array", null, null, null, "string", null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "number", null, null, "array", null, null, null, null, null, "array", null, "array", null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "Edge", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/token.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "token.ts"}
{"tokens": ["import", "{", "GrammarDeclaration", ",", "RuleDeclaration", ",", "PrecDeclaration", ",", "TokenPrecDeclaration", ",", "TokenConflictDeclaration", ",", "TokenDeclaration", ",", "LiteralDeclaration", ",", "ContextDeclaration", ",", "ExternalTokenDeclaration", ",", "ExternalSpecializeDeclaration", ",", "ExternalPropDeclaration", ",", "Identifier", ",", "Expression", ",", "NameExpression", ",", "ChoiceExpression", ",", "SequenceExpression", ",", "LiteralExpression", ",", "RepeatExpression", ",", "SetExpression", ",", "InlineRuleExpression", ",", "Prop", ",", "PropPart", ",", "SpecializeExpression", ",", "AnyExpression", ",", "ConflictMarker", "}", "from", "\"./node\"", ";", "import", "{", "GenError", "}", "from", "\"./error\"", ";", "let", "word", "=", "/[\\w_-]+/gy", ";", "try", "{", "word", "=", "/[\\p{Alphabetic}\\d_-]+/ugy", ";", "}", "catch", "(", "_", ")", "{", "}", "const", "none", "=", "[", "]", ";", "export", "class", "Input", "{", "type", "=", "\"sof\"", ";", "value", ":", "any", "=", "null", ";", "start", "=", "0", ";", "end", "=", "0", ";", "constructor", "(", "readonly", "string", ",", "readonly", "fileName", "=", "null", ")", "{", "this", ".", "next", "(", ")", ";", "}", "lineInfo", "(", "pos", ")", "{", "for", "(", "let", "line", "=", "1", ",", "cur", "=", "0", ";", ";", ")", "{", "let", "next", "=", "this", ".", "string", ".", "indexOf", "(", "\"\\n\"", ",", "cur", ")", ";", "if", "(", "next", ">", "-", "1", "&&", "next", "<", "pos", ")", "{", "++", "line", ";", "cur", "=", "next", "+", "1", ";", "}", "else", "{", "return", "{", "line", ",", "ch", ":", "pos", "-", "cur", "}", ";", "}", "}", "}", "message", "(", "msg", ",", "pos", "=", "-", "1", ")", "{", "let", "posInfo", "=", "this", ".", "fileName", "||", "\"\"", ";", "if", "(", "pos", ">", "-", "1", ")", "{", "let", "info", "=", "this", ".", "lineInfo", "(", "pos", ")", ";", "posInfo", "+=", "(", "posInfo", "?", "\" \"", ":", "\"\"", ")", "+", "info", ".", "line", "+", "\":\"", "+", "info", ".", "ch", ";", "}", "return", "posInfo", "?", "msg", "+", "` (${", "posInfo", "})`", ":", "msg", ";", "}", "raise", "(", "msg", ",", "pos", "=", "-", "1", ")", "{", "throw", "new", "GenError", "(", "this", ".", "message", "(", "msg", ",", "pos", ")", ")", ";", "}", "match", "(", "pos", ",", "re", ")", "{", "let", "match", "=", "re", ".", "exec", "(", "this", ".", "string", ".", "slice", "(", "pos", ")", ")", ";", "return", "match", "?", "pos", "+", "match", "[", "0", "]", ".", "length", ":", "-", "1", ";", "}", "next", "(", ")", "{", "let", "start", "=", "this", ".", "match", "(", "this", ".", "end", ",", "/^(\\s|\\/\\/.*|\\/\\*[^]*?\\*\\/)*/", ")", ";", "if", "(", "start", "==", "this", ".", "string", ".", "length", ")", "return", "this", ".", "set", "(", "\"eof\"", ",", "null", ",", "start", ",", "start", ")", ";", "let", "next", "=", "this", ".", "string", "[", "start", "]", ";", "if", "(", "next", "==", "'\"'", ")", "{", "let", "end", "=", "this", ".", "match", "(", "start", "+", "1", ",", "/^(\\\\.|[^\"])*\"/", ")", ";", "if", "(", "end", "==", "-", "1", ")", "this", ".", "raise", "(", "\"Unterminated string literal\"", ",", "start", ")", ";", "return", "this", ".", "set", "(", "\"string\"", ",", "readString", "(", "this", ".", "string", ".", "slice", "(", "start", "+", "1", ",", "end", "-", "1", ")", ")", ",", "start", ",", "end", ")", ";", "}", "else", "if", "(", "next", "==", "\"'\"", ")", "{", "let", "end", "=", "this", ".", "match", "(", "start", "+", "1", ",", "/^(\\\\.|[^'])*'/", ")", ";", "if", "(", "end", "==", "-", "1", ")", "this", ".", "raise", "(", "\"Unterminated string literal\"", ",", "start", ")", ";", "return", "this", ".", "set", "(", "\"string\"", ",", "readString", "(", "this", ".", "string", ".", "slice", "(", "start", "+", "1", ",", "end", "-", "1", ")", ")", ",", "start", ",", "end", ")", ";", "}", "else", "if", "(", "next", "==", "\"@\"", ")", "{", "word", ".", "lastIndex", "=", "start", "+", "1", ";", "let", "m", "=", "word", ".", "exec", "(", "this", ".", "string", ")", ";", "if", "(", "!", "m", ")", "return", "this", ".", "raise", "(", "\"@ without a name\"", ",", "start", ")", ";", "return", "this", ".", "set", "(", "\"at\"", ",", "m", "[", "0", "]", ",", "start", ",", "start", "+", "1", "+", "m", "[", "0", "]", ".", "length", ")", ";", "}", "else", "if", "(", "(", "next", "==", "\"$\"", "||", "next", "==", "\"!\"", ")", "&&", "this", ".", "string", "[", "start", "+", "1", "]", "==", "\"[\"", ")", "{", "let", "end", "=", "this", ".", "match", "(", "start", "+", "2", ",", "/^(?:\\\\.|[^\\]])*\\]/", ")", ";", "if", "(", "end", "==", "-", "1", ")", "this", ".", "raise", "(", "\"Unterminated character set\"", ",", "start", ")", ";", "return", "this", ".", "set", "(", "\"set\"", ",", "this", ".", "string", ".", "slice", "(", "start", "+", "2", ",", "end", "-", "1", ")", ",", "start", ",", "end", ")", ";", "}", "else", "if", "(", "/[\\[\\]()!~+*?{}<>\\.,|:$=]/", ".", "test", "(", "next", ")", ")", "{", "return", "this", ".", "set", "(", "next", ",", "null", ",", "start", ",", "start", "+", "1", ")", ";", "}", "else", "{", "word", ".", "lastIndex", "=", "start", ";", "let", "m", "=", "word", ".", "exec", "(", "this", ".", "string", ")", ";", "if", "(", "!", "m", ")", "return", "this", ".", "raise", "(", "\"Unexpected character \"", "+", "JSON", ".", "stringify", "(", "next", ")", ",", "start", ")", ";", "return", "this", ".", "set", "(", "\"id\"", ",", "m", "[", "0", "]", ",", "start", ",", "start", "+", "m", "[", "0", "]", ".", "length", ")", ";", "}", "}", "set", "(", "type", ",", "value", ",", "start", ",", "end", ")", "{", "this", ".", "type", "=", "type", ";", "this", ".", "value", "=", "value", ";", "this", ".", "start", "=", "start", ";", "this", ".", "end", "=", "end", ";", "}", "eat", "(", "type", ",", "value", "=", "null", ")", "{", "if", "(", "this", ".", "type", "==", "type", "&&", "(", "value", "==", "null", "||", "this", ".", "value", "===", "value", ")", ")", "{", "this", ".", "next", "(", ")", ";", "return", "true", ";", "}", "else", "{", "return", "false", ";", "}", "}", "unexpected", "(", ")", "{", "return", "this", ".", "raise", "(", "`Unexpected token '${", "this", ".", "string", ".", "slice", "(", "this", ".", "start", ",", "this", ".", "end", ")", "}'`", ",", "this", ".", "start", ")", ";", "}", "expect", "(", "type", ",", "value", "=", "null", ")", "{", "let", "val", "=", "this", ".", "value", ";", "if", "(", "this", ".", "type", "!=", "type", "||", "!", "(", "value", "==", "null", "||", "val", "===", "value", ")", ")", "this", ".", "unexpected", "(", ")", ";", "this", ".", "next", "(", ")", ";", "return", "val", ";", "}", "parse", "(", ")", "{", "return", "parseGrammar", "(", "this", ")", ";", "}", "}", "function", "parseGrammar", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "let", "rules", "=", "[", "]", ";", "let", "prec", "=", "null", ";", "let", "tokens", "=", "null", ";", "let", "mainSkip", "=", "null", ";", "let", "scopedSkip", "=", "[", "]", ";", "let", "dialects", "=", "[", "]", ";", "let", "context", "=", "null", ";", "let", "external", "=", "[", "]", ";", "let", "specialized", "=", "[", "]", ";", "let", "props", "=", "[", "]", ";", "let", "tops", "=", "[", "]", ";", "let", "sawTop", "=", "false", ";", "let", "autoDelim", "=", "false", ";", "while", "(", "input", ".", "type", "!=", "\"eof\"", ")", "{", "let", "start", "=", "input", ".", "start", ";", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"top\"", ")", ")", "{", "if", "(", "input", ".", "type", "as", "any", "!=", "\"id\"", ")", "input", ".", "raise", "(", "`Top rules must have a name`", ",", "input", ".", "start", ")", ";", "tops", ".", "push", "(", "parseRule", "(", "input", ",", "parseIdent", "(", "input", ")", ")", ")", ";", "sawTop", "=", "true", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"at\"", "&&", "input", ".", "value", "==", "\"tokens\"", ")", "{", "if", "(", "tokens", ")", "input", ".", "raise", "(", "`Multiple @tokens declaractions`", ",", "input", ".", "start", ")", ";", "else", "tokens", "=", "parseTokens", "(", "input", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"context\"", ")", ")", "{", "if", "(", "context", ")", "input", ".", "raise", "(", "`Multiple @context declarations`", ",", "start", ")", ";", "let", "id", "=", "parseIdent", "(", "input", ")", ";", "input", ".", "expect", "(", "\"id\"", ",", "\"from\"", ")", ";", "let", "source", "=", "input", ".", "expect", "(", "\"string\"", ")", ";", "context", "=", "new", "ContextDeclaration", "(", "start", ",", "id", ",", "source", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"external\"", ")", ")", "{", "if", "(", "input", ".", "eat", "(", "\"id\"", ",", "\"tokens\"", ")", ")", "external", ".", "push", "(", "parseExternalTokens", "(", "input", ",", "start", ")", ")", ";", "else", "if", "(", "input", ".", "eat", "(", "\"id\"", ",", "\"prop\"", ")", ")", "props", ".", "push", "(", "parseExternalProp", "(", "input", ",", "start", ")", ")", ";", "else", "if", "(", "input", ".", "eat", "(", "\"id\"", ",", "\"extend\"", ")", ")", "specialized", ".", "push", "(", "parseExternalSpecialize", "(", "input", ",", "\"extend\"", ",", "start", ")", ")", ";", "else", "if", "(", "input", ".", "eat", "(", "\"id\"", ",", "\"specialize\"", ")", ")", "specialized", ".", "push", "(", "parseExternalSpecialize", "(", "input", ",", "\"specialize\"", ",", "start", ")", ")", ";", "else", "input", ".", "unexpected", "(", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"dialects\"", ")", ")", "{", "input", ".", "expect", "(", "\"{\"", ")", ";", "for", "(", "let", "first", "=", "true", ";", "!", "input", ".", "eat", "(", "\"}\"", ")", ";", "first", "=", "false", ")", "{", "if", "(", "!", "first", ")", "input", ".", "eat", "(", "\",\"", ")", ";", "dialects", ".", "push", "(", "parseIdent", "(", "input", ")", ")", ";", "}", "}", "else", "if", "(", "input", ".", "type", "==", "\"at\"", "&&", "input", ".", "value", "==", "\"precedence\"", ")", "{", "if", "(", "prec", ")", "input", ".", "raise", "(", "`Multiple precedence declarations`", ",", "input", ".", "start", ")", ";", "prec", "=", "parsePrecedence", "(", "input", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"detectDelim\"", ")", ")", "{", "autoDelim", "=", "true", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"skip\"", ")", ")", "{", "let", "skip", "=", "parseBracedExpr", "(", "input", ")", ";", "if", "(", "input", ".", "type", "==", "\"{\"", ")", "{", "input", ".", "next", "(", ")", ";", "let", "rules", "=", "[", "]", ",", "topRules", "=", "[", "]", ";", "while", "(", "!", "input", ".", "eat", "(", "\"}\"", ")", ")", "{", "if", "(", "input", ".", "eat", "(", "\"at\"", ",", "\"top\"", ")", ")", "{", "topRules", ".", "push", "(", "parseRule", "(", "input", ",", "parseIdent", "(", "input", ")", ")", ")", ";", "sawTop", "=", "true", ";", "}", "else", "{", "rules", ".", "push", "(", "parseRule", "(", "input", ")", ")", ";", "}", "}", "scopedSkip", ".", "push", "(", "{", "expr", ":", "skip", ",", "topRules", ",", "rules", "}", ")", ";", "}", "else", "{", "if", "(", "mainSkip", ")", "input", ".", "raise", "(", "`Multiple top-level skip declarations`", ",", "input", ".", "start", ")", ";", "mainSkip", "=", "skip", ";", "}", "}", "else", "{", "rules", ".", "push", "(", "parseRule", "(", "input", ")", ")", ";", "}", "}", "if", "(", "!", "sawTop", ")", "return", "input", ".", "raise", "(", "`Missing @top declaration`", ")", ";", "return", "new", "GrammarDeclaration", "(", "start", ",", "rules", ",", "tops", ",", "tokens", ",", "context", ",", "external", ",", "specialized", ",", "prec", ",", "mainSkip", ",", "scopedSkip", ",", "dialects", ",", "props", ",", "autoDelim", ")", ";", "}", "function", "parseRule", "(", "input", ",", "named", "?", ")", "{", "let", "start", "=", "named", "?", "named", ".", "start", ":", "input", ".", "start", ";", "let", "id", "=", "named", "||", "parseIdent", "(", "input", ")", ";", "let", "props", "=", "parseProps", "(", "input", ")", ";", "let", "params", "=", "[", "]", ";", "if", "(", "input", ".", "eat", "(", "\"<\"", ")", ")", "while", "(", "!", "input", ".", "eat", "(", "\">\"", ")", ")", "{", "if", "(", "params", ".", "length", ")", "input", ".", "expect", "(", "\",\"", ")", ";", "params", ".", "push", "(", "parseIdent", "(", "input", ")", ")", ";", "}", "let", "expr", "=", "parseBracedExpr", "(", "input", ")", ";", "return", "new", "RuleDeclaration", "(", "start", ",", "id", ",", "props", ",", "params", ",", "expr", ")", ";", "}", "function", "parseProps", "(", "input", ")", "{", "if", "(", "input", ".", "type", "!=", "\"[\"", ")", "return", "none", ";", "let", "props", "=", "[", "]", ";", "input", ".", "expect", "(", "\"[\"", ")", ";", "while", "(", "!", "input", ".", "eat", "(", "\"]\"", ")", ")", "{", "if", "(", "props", ".", "length", ")", "input", ".", "expect", "(", "\",\"", ")", ";", "props", ".", "push", "(", "parseProp", "(", "input", ")", ")", ";", "}", "return", "props", ";", "}", "function", "parseProp", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ",", "value", "=", "[", "]", ",", "name", "=", "input", ".", "value", ",", "at", "=", "input", ".", "type", "==", "\"at\"", ";", "if", "(", "!", "input", ".", "eat", "(", "\"at\"", ")", "&&", "!", "input", ".", "eat", "(", "\"id\"", ")", ")", "input", ".", "unexpected", "(", ")", ";", "if", "(", "input", ".", "eat", "(", "\"=\"", ")", ")", "for", "(", ";", ";", ")", "{", "if", "(", "input", ".", "type", "==", "\"string\"", "||", "input", ".", "type", "==", "\"id\"", ")", "{", "value", ".", "push", "(", "new", "PropPart", "(", "input", ".", "start", ",", "input", ".", "value", ",", "null", ")", ")", ";", "input", ".", "next", "(", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\".\"", ")", ")", "{", "value", ".", "push", "(", "new", "PropPart", "(", "input", ".", "start", ",", "\".\"", ",", "null", ")", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"{\"", ")", ")", "{", "value", ".", "push", "(", "new", "PropPart", "(", "input", ".", "start", ",", "null", ",", "input", ".", "expect", "(", "\"id\"", ")", ")", ")", ";", "input", ".", "expect", "(", "\"}\"", ")", ";", "}", "else", "{", "break", ";", "}", "}", "return", "new", "Prop", "(", "start", ",", "at", ",", "name", ",", "value", ")", ";", "}", "function", "parseBracedExpr", "(", "input", ")", "{", "input", ".", "expect", "(", "\"{\"", ")", ";", "let", "expr", "=", "parseExprChoice", "(", "input", ")", ";", "input", ".", "expect", "(", "\"}\"", ")", ";", "return", "expr", ";", "}", "const", "SET_MARKER", "=", "\"\\ufdda\"", ";", "function", "parseExprInner", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "if", "(", "input", ".", "eat", "(", "\"(\"", ")", ")", "{", "let", "expr", "=", "parseExprChoice", "(", "input", ")", ";", "input", ".", "expect", "(", "\")\"", ")", ";", "return", "expr", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"string\"", ")", "{", "let", "value", "=", "input", ".", "value", ";", "input", ".", "next", "(", ")", ";", "if", "(", "value", ".", "length", "==", "0", ")", "return", "new", "SequenceExpression", "(", "start", ",", "none", ",", "[", "none", ",", "none", "]", ")", ";", "return", "new", "LiteralExpression", "(", "start", ",", "value", ")", ";", "}", "else", "if", "(", "input", ".", "eat", "(", "\"id\"", ",", "\"_\"", ")", ")", "{", "return", "new", "AnyExpression", "(", "start", ")", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"set\"", ")", "{", "let", "content", "=", "input", ".", "value", ",", "invert", "=", "input", ".", "string", "[", "input", ".", "start", "]", "==", "\"!\"", ";", "let", "unescaped", "=", "readString", "(", "content", ".", "replace", "(", "/\\\\.|-|\"/g", ",", "(", "m", ")", "=>", "{", "return", "m", "==", "\"-\"", "?", "SET_MARKER", ":", "m", "==", "'\"'", "?", "'\\\\\"'", ":", "m", ";", "}", ")", ")", ";", "let", "ranges", "=", "[", "]", ";", "for", "(", "let", "pos", "=", "0", ";", "pos", "<", "unescaped", ".", "length", ";", ")", "{", "let", "code", "=", "unescaped", ".", "codePointAt", "(", "pos", ")", "!", ";", "pos", "+=", "code", ">", "0xffff", "?", "2", ":", "1", ";", "if", "(", "pos", "<", "unescaped", ".", "length", "-", "1", "&&", "unescaped", "[", "pos", "]", "==", "SET_MARKER", ")", "{", "let", "end", "=", "unescaped", ".", "codePointAt", "(", "pos", "+", "1", ")", "!", ";", "pos", "+=", "end", ">", "0xffff", "?", "3", ":", "2", ";", "if", "(", "end", "<", "code", ")", "input", ".", "raise", "(", "\"Invalid character range\"", ",", "input", ".", "start", ")", ";", "addRange", "(", "input", ",", "ranges", ",", "code", ",", "end", "+", "1", ")", ";", "}", "else", "{", "if", "(", "code", "==", "SET_MARKER", ".", "charCodeAt", "(", "0", ")", ")", "code", "=", "45", ";", "addRange", "(", "input", ",", "ranges", ",", "code", ",", "code", "+", "1", ")", ";", "}", "}", "input", ".", "next", "(", ")", ";", "return", "new", "SetExpression", "(", "start", ",", "ranges", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", "[", "0", "]", "-", "b", "[", "0", "]", ")", ",", "invert", ")", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"at\"", "&&", "(", "input", ".", "value", "==", "\"specialize\"", "||", "input", ".", "value", "==", "\"extend\"", ")", ")", "{", "let", "{", "start", ",", "value", "}", "=", "input", ";", "input", ".", "next", "(", ")", ";", "let", "props", "=", "parseProps", "(", "input", ")", ";", "input", ".", "expect", "(", "\"<\"", ")", ";", "let", "token", "=", "parseExprChoice", "(", "input", ")", ",", "content", ";", "if", "(", "input", ".", "eat", "(", "\",\"", ")", ")", "{", "content", "=", "parseExprChoice", "(", "input", ")", ";", "}", "else", "if", "(", "token", "instanceof", "LiteralExpression", ")", "{", "content", "=", "token", ";", "}", "else", "{", "input", ".", "raise", "(", "`@${", "value", "} requires two arguments when its first argument isn't a literal string`", ")", ";", "}", "input", ".", "expect", "(", "\">\"", ")", ";", "return", "new", "SpecializeExpression", "(", "start", ",", "value", ",", "props", ",", "token", ",", "content", ")", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"[\"", ")", "{", "let", "rule", "=", "parseRule", "(", "input", ",", "new", "Identifier", "(", "start", ",", "\"_anon\"", ")", ")", ";", "if", "(", "rule", ".", "params", ".", "length", ")", "input", ".", "raise", "(", "`Inline rules can't have parameters`", ",", "rule", ".", "start", ")", ";", "return", "new", "InlineRuleExpression", "(", "start", ",", "rule", ")", ";", "}", "else", "{", "let", "id", "=", "parseIdent", "(", "input", ")", ";", "if", "(", "input", ".", "type", "==", "\"[\"", "||", "input", ".", "type", "==", "\"{\"", ")", "{", "let", "rule", "=", "parseRule", "(", "input", ",", "id", ")", ";", "if", "(", "rule", ".", "params", ".", "length", ")", "input", ".", "raise", "(", "`Inline rules can't have parameters`", ",", "rule", ".", "start", ")", ";", "return", "new", "InlineRuleExpression", "(", "start", ",", "rule", ")", ";", "}", "else", "{", "let", "namespace", "=", "null", ";", "if", "(", "input", ".", "eat", "(", "\".\"", ")", ")", "{", "namespace", "=", "id", ";", "id", "=", "parseIdent", "(", "input", ")", ";", "}", "return", "new", "NameExpression", "(", "start", ",", "namespace", ",", "id", ",", "parseArgs", "(", "input", ")", ")", ";", "}", "}", "}", "function", "parseArgs", "(", "input", ")", "{", "let", "args", "=", "[", "]", ";", "if", "(", "input", ".", "eat", "(", "\"<\"", ")", ")", "while", "(", "!", "input", ".", "eat", "(", "\">\"", ")", ")", "{", "if", "(", "args", ".", "length", ")", "input", ".", "expect", "(", "\",\"", ")", ";", "args", ".", "push", "(", "parseExprChoice", "(", "input", ")", ")", ";", "}", "return", "args", ";", "}", "function", "addRange", "(", "input", ",", "ranges", ",", "from", ",", "to", ")", "{", "if", "(", "!", "ranges", ".", "every", "(", "(", "[", "a", ",", "b", "]", ")", "=>", "b", "<=", "from", "||", "a", ">=", "to", ")", ")", "input", ".", "raise", "(", "\"Overlapping character range\"", ",", "input", ".", "start", ")", ";", "ranges", ".", "push", "(", "[", "from", ",", "to", "]", ")", ";", "}", "function", "parseExprSuffix", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "let", "expr", "=", "parseExprInner", "(", "input", ")", ";", "for", "(", ";", ";", ")", "{", "let", "kind", "=", "input", ".", "type", ";", "if", "(", "input", ".", "eat", "(", "\"*\"", ")", "||", "input", ".", "eat", "(", "\"?\"", ")", "||", "input", ".", "eat", "(", "\"+\"", ")", ")", "expr", "=", "new", "RepeatExpression", "(", "start", ",", "expr", ",", "kind", "as", "\"*\"", "|", "\"+\"", "|", "\"?\"", ")", ";", "else", "return", "expr", ";", "}", "}", "function", "endOfSequence", "(", "input", ")", "{", "return", "input", ".", "type", "==", "\"}\"", "||", "input", ".", "type", "==", "\")\"", "||", "input", ".", "type", "==", "\"|\"", "||", "input", ".", "type", "==", "\"/\"", "||", "input", ".", "type", "==", "\"/\\\\\"", "||", "input", ".", "type", "==", "\"{\"", "||", "input", ".", "type", "==", "\",\"", "||", "input", ".", "type", "==", "\">\"", ";", "}", "function", "parseExprSequence", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ",", "exprs", "=", "[", "]", ",", "markers", "=", "[", "none", "]", ";", "do", "{", "for", "(", ";", ";", ")", "{", "let", "localStart", "=", "input", ".", "start", ",", "markerType", "!", ";", "if", "(", "input", ".", "eat", "(", "\"~\"", ")", ")", "markerType", "=", "\"ambig\"", ";", "else", "if", "(", "input", ".", "eat", "(", "\"!\"", ")", ")", "markerType", "=", "\"prec\"", ";", "else", "break", ";", "markers", "[", "markers", ".", "length", "-", "1", "]", "=", "markers", "[", "markers", ".", "length", "-", "1", "]", ".", "concat", "(", "new", "ConflictMarker", "(", "localStart", ",", "parseIdent", "(", "input", ")", ",", "markerType", ")", ")", ";", "}", "if", "(", "endOfSequence", "(", "input", ")", ")", "break", ";", "exprs", ".", "push", "(", "parseExprSuffix", "(", "input", ")", ")", ";", "markers", ".", "push", "(", "none", ")", ";", "}", "while", "(", "!", "endOfSequence", "(", "input", ")", ")", ";", "if", "(", "exprs", ".", "length", "==", "1", "&&", "markers", ".", "every", "(", "ms", "=>", "ms", ".", "length", "==", "0", ")", ")", "return", "exprs", "[", "0", "]", ";", "return", "new", "SequenceExpression", "(", "start", ",", "exprs", ",", "markers", ",", "!", "exprs", ".", "length", ")", ";", "}", "function", "parseExprChoice", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ",", "left", "=", "parseExprSequence", "(", "input", ")", ";", "if", "(", "!", "input", ".", "eat", "(", "\"|\"", ")", ")", "return", "left", ";", "let", "exprs", "=", "[", "left", "]", ";", "do", "{", "exprs", ".", "push", "(", "parseExprSequence", "(", "input", ")", ")", ";", "}", "while", "(", "input", ".", "eat", "(", "\"|\"", ")", ")", ";", "let", "empty", "=", "exprs", ".", "find", "(", "s", "=>", "s", "instanceof", "SequenceExpression", "&&", "s", ".", "empty", ")", ";", "if", "(", "empty", ")", "input", ".", "raise", "(", "\"Empty expression in choice operator. If this is intentional, use () to make it explicit.\"", ",", "empty", ".", "start", ")", ";", "return", "new", "ChoiceExpression", "(", "start", ",", "exprs", ")", ";", "}", "function", "parseIdent", "(", "input", ")", "{", "if", "(", "input", ".", "type", "!=", "\"id\"", ")", "input", ".", "unexpected", "(", ")", ";", "let", "start", "=", "input", ".", "start", ",", "name", "=", "input", ".", "value", ";", "input", ".", "next", "(", ")", ";", "return", "new", "Identifier", "(", "start", ",", "name", ")", ";", "}", "function", "parsePrecedence", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "input", ".", "next", "(", ")", ";", "input", ".", "expect", "(", "\"{\"", ")", ";", "let", "items", "=", "[", "]", ";", "while", "(", "!", "input", ".", "eat", "(", "\"}\"", ")", ")", "{", "if", "(", "items", ".", "length", ")", "input", ".", "eat", "(", "\",\"", ")", ";", "items", ".", "push", "(", "{", "id", ":", "parseIdent", "(", "input", ")", ",", "type", ":", "input", ".", "eat", "(", "\"at\"", ",", "\"left\"", ")", "?", "\"left\"", ":", "input", ".", "eat", "(", "\"at\"", ",", "\"right\"", ")", "?", "\"right\"", ":", "input", ".", "eat", "(", "\"at\"", ",", "\"cut\"", ")", "?", "\"cut\"", ":", "null", "}", ")", ";", "}", "return", "new", "PrecDeclaration", "(", "start", ",", "items", ")", ";", "}", "function", "parseTokens", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "input", ".", "next", "(", ")", ";", "input", ".", "expect", "(", "\"{\"", ")", ";", "let", "tokenRules", "=", "[", "]", ";", "let", "literals", "=", "[", "]", ";", "let", "precedences", "=", "[", "]", ";", "let", "conflicts", "=", "[", "]", ";", "while", "(", "!", "input", ".", "eat", "(", "\"}\"", ")", ")", "{", "if", "(", "input", ".", "type", "==", "\"at\"", "&&", "input", ".", "value", "==", "\"precedence\"", ")", "{", "precedences", ".", "push", "(", "parseTokenPrecedence", "(", "input", ")", ")", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"at\"", "&&", "input", ".", "value", "==", "\"conflict\"", ")", "{", "conflicts", ".", "push", "(", "parseTokenConflict", "(", "input", ")", ")", ";", "}", "else", "if", "(", "input", ".", "type", "==", "\"string\"", ")", "{", "literals", ".", "push", "(", "new", "LiteralDeclaration", "(", "input", ".", "start", ",", "input", ".", "expect", "(", "\"string\"", ")", ",", "parseProps", "(", "input", ")", ")", ")", ";", "}", "else", "{", "tokenRules", ".", "push", "(", "parseRule", "(", "input", ")", ")", ";", "}", "}", "return", "new", "TokenDeclaration", "(", "start", ",", "precedences", ",", "conflicts", ",", "tokenRules", ",", "literals", ")", ";", "}", "function", "parseTokenPrecedence", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "input", ".", "next", "(", ")", ";", "input", ".", "expect", "(", "\"{\"", ")", ";", "let", "tokens", "=", "[", "]", ";", "while", "(", "!", "input", ".", "eat", "(", "\"}\"", ")", ")", "{", "if", "(", "tokens", ".", "length", ")", "input", ".", "eat", "(", "\",\"", ")", ";", "let", "expr", "=", "parseExprInner", "(", "input", ")", ";", "if", "(", "expr", "instanceof", "LiteralExpression", "||", "expr", "instanceof", "NameExpression", ")", "tokens", ".", "push", "(", "expr", ")", ";", "else", "input", ".", "raise", "(", "`Invalid expression in token precedences`", ",", "expr", ".", "start", ")", ";", "}", "return", "new", "TokenPrecDeclaration", "(", "start", ",", "tokens", ")", ";", "}", "function", "parseTokenConflict", "(", "input", ")", "{", "let", "start", "=", "input", ".", "start", ";", "input", ".", "next", "(", ")", ";", "input", ".", "expect", "(", "\"{\"", ")", ";", "let", "a", "=", "parseExprInner", "(", "input", ")", ";", "if", "(", "!", "(", "a", "instanceof", "LiteralExpression", "||", "a", "instanceof", "NameExpression", ")", ")", "input", ".", "raise", "(", "`Invalid expression in token conflict`", ",", "a", ".", "start", ")", ";", "input", ".", "eat", "(", "\",\"", ")", ";", "let", "b", "=", "parseExprInner", "(", "input", ")", ";", "if", "(", "!", "(", "b", "instanceof", "LiteralExpression", "||", "b", "instanceof", "NameExpression", ")", ")", "input", ".", "raise", "(", "`Invalid expression in token conflict`", ",", "b", ".", "start", ")", ";", "input", ".", "expect", "(", "\"}\"", ")", ";", "return", "new", "TokenConflictDeclaration", "(", "start", ",", "a", ",", "b", ")", ";", "}", "function", "parseExternalTokenSet", "(", "input", ")", "{", "let", "tokens", "=", "[", "]", ";", "input", ".", "expect", "(", "\"{\"", ")", ";", "while", "(", "!", "input", ".", "eat", "(", "\"}\"", ")", ")", "{", "if", "(", "tokens", ".", "length", ")", "input", ".", "eat", "(", "\",\"", ")", ";", "let", "id", "=", "parseIdent", "(", "input", ")", ";", "let", "props", "=", "parseProps", "(", "input", ")", ";", "tokens", ".", "push", "(", "{", "id", ",", "props", "}", ")", ";", "}", "return", "tokens", ";", "}", "function", "parseExternalTokens", "(", "input", ",", "start", ")", "{", "let", "id", "=", "parseIdent", "(", "input", ")", ";", "input", ".", "expect", "(", "\"id\"", ",", "\"from\"", ")", ";", "let", "from", "=", "input", ".", "expect", "(", "\"string\"", ")", ";", "return", "new", "ExternalTokenDeclaration", "(", "start", ",", "id", ",", "from", ",", "parseExternalTokenSet", "(", "input", ")", ")", ";", "}", "function", "parseExternalSpecialize", "(", "input", ",", "type", ",", "start", ")", "{", "let", "token", "=", "parseBracedExpr", "(", "input", ")", ";", "let", "id", "=", "parseIdent", "(", "input", ")", ";", "input", ".", "expect", "(", "\"id\"", ",", "\"from\"", ")", ";", "let", "from", "=", "input", ".", "expect", "(", "\"string\"", ")", ";", "return", "new", "ExternalSpecializeDeclaration", "(", "start", ",", "type", ",", "token", ",", "id", ",", "from", ",", "parseExternalTokenSet", "(", "input", ")", ")", ";", "}", "function", "parseExternalProp", "(", "input", ",", "start", ")", "{", "let", "externalID", "=", "parseIdent", "(", "input", ")", ";", "let", "id", "=", "input", ".", "eat", "(", "\"id\"", ",", "\"as\"", ")", "?", "parseIdent", "(", "input", ")", ":", "externalID", ";", "input", ".", "expect", "(", "\"id\"", ",", "\"from\"", ")", ";", "let", "from", "=", "input", ".", "expect", "(", "\"string\"", ")", ";", "return", "new", "ExternalPropDeclaration", "(", "start", ",", "id", ",", "externalID", ",", "from", ")", ";", "}", "function", "readString", "(", "string", ")", "{", "let", "point", "=", "/\\\\(?:u\\{([\\da-f]+)\\}|u([\\da-f]{4})|x([\\da-f]{2})|([ntbrf0])|(.))|[^]/yig", ";", "let", "out", "=", "\"\"", ",", "m", ";", "while", "(", "m", "=", "point", ".", "exec", "(", "string", ")", ")", "{", "let", "[", "all", ",", "u1", ",", "u2", ",", "u3", ",", "single", ",", "unknown", "]", "=", "m", ";", "if", "(", "u1", "||", "u2", "||", "u3", ")", "out", "+=", "String", ".", "fromCodePoint", "(", "parseInt", "(", "u1", "||", "u2", "||", "u3", ",", "16", ")", ")", ";", "else", "if", "(", "single", ")", "out", "+=", "single", "==", "\"n\"", "?", "\"\\n\"", ":", "single", "==", "\"t\"", "?", "\"\\t\"", ":", "single", "==", "\"0\"", "?", "\"\\0\"", ":", "single", "==", "\"r\"", "?", "\"\\r\"", ":", "single", "==", "\"f\"", "?", "\"\\f\"", ":", "\"\\b\"", ";", "else", "if", "(", "unknown", ")", "out", "+=", "unknown", ";", "else", "out", "+=", "all", ";", "}", "return", "out", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExp", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "object", null, "number", null, null, null, null, null, "number", null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "number", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "number", null, "RegExp", null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, null, null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, null, null, "number", null, null, null, null, null, null, "array", null, null, null, null, null, "UNK", null, null, null, null, "UNK", null, null, null, null, "Expression", null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "UNK", null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "boolean", null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, "Input", null, "Identifier", null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Input", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Prop", null, "Input", null, null, null, "number", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Input", null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "Expression", null, "Input", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Input", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Input", null, "array", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Input", null, null, null, "number", null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Input", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Input", null, null, null, "number", null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Input", null, null, null, "number", null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Identifier", null, "Input", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Input", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, "number", null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, "string", null, "number", null, null, null, "Expression", null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Input", null, "number", null, null, null, "Identifier", null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, "RegExp", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/parse.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "parse.ts"}
{"tokens": ["import", "{", "Encode", "}", "from", "\"@lezer/lr/dist/constants\"", ";", "function", "digitToChar", "(", "digit", ")", "{", "let", "ch", "=", "digit", "+", "Encode", ".", "Start", ";", "if", "(", "ch", ">=", "Encode", ".", "Gap1", ")", "ch", "++", ";", "if", "(", "ch", ">=", "Encode", ".", "Gap2", ")", "ch", "++", ";", "return", "String", ".", "fromCharCode", "(", "ch", ")", ";", "}", "export", "function", "encode", "(", "value", ",", "max", "=", "0xffff", ")", "{", "if", "(", "value", ">", "max", ")", "throw", "new", "Error", "(", "\"Trying to encode a number that's too big: \"", "+", "value", ")", ";", "if", "(", "value", "==", "Encode", ".", "BigVal", ")", "return", "String", ".", "fromCharCode", "(", "Encode", ".", "BigValCode", ")", ";", "let", "result", "=", "\"\"", ";", "for", "(", "let", "first", "=", "Encode", ".", "Base", ";", ";", "first", "=", "0", ")", "{", "let", "low", "=", "value", "%", "Encode", ".", "Base", ",", "rest", "=", "value", "-", "low", ";", "result", "=", "digitToChar", "(", "low", "+", "first", ")", "+", "result", ";", "if", "(", "rest", "==", "0", ")", "break", ";", "value", "=", "rest", "/", "Encode", ".", "Base", ";", "}", "return", "result", ";", "}", "export", "function", "encodeArray", "(", "values", ",", "max", "=", "0xffff", ")", "{", "let", "result", "=", "'\"'", "+", "encode", "(", "values", ".", "length", ",", "0xffffffff", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "values", ".", "length", ";", "i", "++", ")", "result", "+=", "encode", "(", "values", "[", "i", "]", ",", "max", ")", ";", "result", "+=", "'\"'", ";", "return", "result", ";", "}"], "labels": [null, null, null, null, null, null, null, null, "string", null, "number", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/encode.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "encode.ts"}
{"tokens": ["import", "{", "GrammarDeclaration", ",", "RuleDeclaration", ",", "TokenDeclaration", ",", "ExternalTokenDeclaration", ",", "ExternalSpecializeDeclaration", ",", "Expression", ",", "Identifier", ",", "LiteralExpression", ",", "NameExpression", ",", "SequenceExpression", ",", "ChoiceExpression", ",", "RepeatExpression", ",", "SetExpression", ",", "AnyExpression", ",", "ConflictMarker", ",", "InlineRuleExpression", ",", "SpecializeExpression", ",", "Prop", ",", "PropPart", ",", "exprsEq", ",", "exprEq", "}", "from", "\"./node\"", ";", "import", "{", "Term", ",", "TermSet", ",", "Rule", ",", "Conflicts", ",", "Props", ",", "hasProps", "}", "from", "\"./grammar\"", ";", "import", "{", "State", ",", "MAX_CHAR", ",", "Conflict", "}", "from", "\"./token\"", ";", "import", "{", "Input", "}", "from", "\"./parse\"", ";", "import", "{", "computeFirstSets", ",", "buildFullAutomaton", ",", "finishAutomaton", ",", "State", "as", "LRState", ",", "Shift", ",", "Reduce", ",", "Pos", "}", "from", "\"./automaton\"", ";", "import", "{", "encodeArray", "}", "from", "\"./encode\"", ";", "import", "{", "GenError", "}", "from", "\"./error\"", ";", "import", "{", "verbose", ",", "time", "}", "from", "\"./log\"", ";", "import", "{", "NodeProp", "}", "from", "\"@lezer/common\"", ";", "import", "{", "LRParser", ",", "ExternalTokenizer", ",", "Stack", ",", "ContextTracker", "}", "from", "\"@lezer/lr\"", ";", "import", "{", "Action", ",", "Specialize", ",", "StateFlag", ",", "Seq", ",", "ParseState", ",", "File", "}", "from", "\"@lezer/lr/dist/constants\"", ";", "const", "none", "=", "[", "]", ";", "class", "Parts", "{", "constructor", "(", "readonly", "terms", ",", "readonly", "conflicts", ")", "{", "}", "concat", "(", "other", ")", "{", "if", "(", "this", "==", "Parts", ".", "none", ")", "return", "other", ";", "if", "(", "other", "==", "Parts", ".", "none", ")", "return", "this", ";", "let", "conflicts", "=", "null", ";", "if", "(", "this", ".", "conflicts", "||", "other", ".", "conflicts", ")", "{", "conflicts", "=", "this", ".", "conflicts", "?", "this", ".", "conflicts", ".", "slice", "(", ")", ":", "this", ".", "ensureConflicts", "(", ")", "as", "Conflicts", "[", "]", ";", "let", "otherConflicts", "=", "other", ".", "ensureConflicts", "(", ")", ";", "conflicts", "[", "conflicts", ".", "length", "-", "1", "]", "=", "conflicts", "[", "conflicts", ".", "length", "-", "1", "]", ".", "join", "(", "otherConflicts", "[", "0", "]", ")", ";", "for", "(", "let", "i", "=", "1", ";", "i", "<", "otherConflicts", ".", "length", ";", "i", "++", ")", "conflicts", ".", "push", "(", "otherConflicts", "[", "i", "]", ")", ";", "}", "return", "new", "Parts", "(", "this", ".", "terms", ".", "concat", "(", "other", ".", "terms", ")", ",", "conflicts", ")", ";", "}", "withConflicts", "(", "pos", ",", "conflicts", ")", "{", "if", "(", "conflicts", "==", "Conflicts", ".", "none", ")", "return", "this", ";", "let", "array", "=", "this", ".", "conflicts", "?", "this", ".", "conflicts", ".", "slice", "(", ")", ":", "this", ".", "ensureConflicts", "(", ")", "as", "Conflicts", "[", "]", ";", "array", "[", "pos", "]", "=", "array", "[", "pos", "]", ".", "join", "(", "conflicts", ")", ";", "return", "new", "Parts", "(", "this", ".", "terms", ",", "array", ")", ";", "}", "ensureConflicts", "(", ")", "{", "if", "(", "this", ".", "conflicts", ")", "return", "this", ".", "conflicts", ";", "let", "empty", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<=", "this", ".", "terms", ".", "length", ";", "i", "++", ")", "empty", ".", "push", "(", "Conflicts", ".", "none", ")", ";", "return", "empty", ";", "}", "static", "none", "=", "new", "Parts", "(", "none", ",", "null", ")", ";", "}", "function", "p", "(", "...", "terms", ")", "{", "return", "new", "Parts", "(", "terms", ",", "null", ")", ";", "}", "class", "BuiltRule", "{", "constructor", "(", "readonly", "id", ",", "readonly", "args", ",", "readonly", "term", ")", "{", "}", "matches", "(", "expr", ")", "{", "return", "this", ".", "id", "==", "expr", ".", "id", ".", "name", "&&", "exprsEq", "(", "expr", ".", "args", ",", "this", ".", "args", ")", ";", "}", "matchesRepeat", "(", "expr", ")", "{", "return", "this", ".", "id", "==", "\"+\"", "&&", "exprEq", "(", "expr", ".", "expr", ",", "this", ".", "args", "[", "0", "]", ")", ";", "}", "}", "export", "type", "BuildOptions", "=", "{", "fileName", "?", ":", "string", ";", "warn", "?", ":", "(", "message", ":", "string", ")", "=>", "void", ";", "includeNames", "?", ":", "boolean", ";", "moduleStyle", "?", ":", "string", ";", "exportName", "?", ":", "string", ";", "externalTokenizer", "?", ":", "(", "name", ":", "string", ",", "terms", ":", "{", "[", "name", "]", ":", "number", ";", "}", ")", "=>", "ExternalTokenizer", ";", "externalSpecializer", "?", ":", "(", "name", ":", "string", ",", "terms", ":", "{", "[", "name", "]", ":", "number", ";", "}", ")", "=>", "(", "value", ":", "string", ",", "stack", ":", "Stack", ")", "=>", "number", ";", "externalProp", "?", ":", "(", "name", ":", "string", ")", "=>", "NodeProp", "<", "any", ">", ";", "contextTracker", "?", ":", "ContextTracker", "<", "any", ">", ";", "}", ";", "type", "SkipInfo", "=", "{", "skip", ":", "readonly", "Term", "[", "]", ";", "rule", ":", "Term", "|", "null", ";", "startTokens", ":", "readonly", "Term", "[", "]", ";", "id", ":", "number", ";", "}", ";", "class", "Builder", "{", "ast", "!", ":", "GrammarDeclaration", ";", "input", "!", ":", "Input", ";", "terms", "=", "new", "TermSet", ";", "tokens", ":", "TokenSet", ";", "externalTokens", ":", "ExternalTokenSet", "[", "]", ";", "externalSpecializers", ":", "ExternalSpecializer", "[", "]", ";", "specialized", ":", "{", "[", "name", "]", ":", "{", "value", ":", "string", ";", "name", ":", "string", "|", "null", ";", "term", ":", "Term", ";", "type", ":", "string", ";", "dialect", ":", "number", "|", "null", ";", "}", "[", "]", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "tokenOrigins", ":", "{", "[", "name", "]", ":", "{", "spec", "?", ":", "Term", ";", "external", "?", ":", "ExternalTokenSet", "|", "ExternalSpecializer", ";", "}", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "rules", ":", "Rule", "[", "]", "=", "[", "]", ";", "built", ":", "BuiltRule", "[", "]", "=", "[", "]", ";", "ruleNames", ":", "{", "[", "name", "]", ":", "Identifier", "|", "null", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "namespaces", ":", "{", "[", "name", "]", ":", "Namespace", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "namedTerms", ":", "{", "[", "name", "]", ":", "Term", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "termTable", ":", "{", "[", "name", "]", ":", "number", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "knownProps", ":", "{", "[", "name", "]", ":", "{", "prop", ":", "NodeProp", "<", "any", ">", ";", "source", ":", "{", "name", ":", "string", ";", "from", ":", "string", "|", "null", ";", "}", ";", "}", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "dialects", ":", "readonly", "string", "[", "]", ";", "dynamicRulePrecedences", ":", "{", "rule", ":", "Term", ";", "prec", ":", "number", ";", "}", "[", "]", "=", "[", "]", ";", "definedGroups", ":", "{", "name", ":", "Term", ";", "group", ":", "string", ";", "rule", ":", "RuleDeclaration", ";", "}", "[", "]", "=", "[", "]", ";", "astRules", ":", "{", "skip", ":", "Term", ";", "rule", ":", "RuleDeclaration", ";", "}", "[", "]", "=", "[", "]", ";", "currentSkip", ":", "Term", "[", "]", "=", "[", "]", ";", "skipRules", "!", ":", "Term", "[", "]", ";", "constructor", "(", "text", ",", "readonly", "options", ")", "{", "time", "(", "\"Parse\"", ",", "(", ")", "=>", "{", "this", ".", "input", "=", "new", "Input", "(", "text", ",", "options", ".", "fileName", ")", ";", "this", ".", "ast", "=", "this", ".", "input", ".", "parse", "(", ")", ";", "}", ")", ";", "let", "NP", "=", "NodeProp", ";", "for", "(", "let", "prop", "in", "NP", ")", "{", "if", "(", "NP", "[", "prop", "]", "instanceof", "NodeProp", "&&", "!", "NP", "[", "prop", "]", ".", "perNode", ")", "this", ".", "knownProps", "[", "prop", "]", "=", "{", "prop", ":", "NP", "[", "prop", "]", ",", "source", ":", "{", "name", ":", "prop", ",", "from", ":", "null", "}", "}", ";", "}", "for", "(", "let", "prop", "of", "this", ".", "ast", ".", "externalProps", ")", "{", "this", ".", "knownProps", "[", "prop", ".", "id", ".", "name", "]", "=", "{", "prop", ":", "this", ".", "options", ".", "externalProp", "?", "this", ".", "options", ".", "externalProp", "(", "prop", ".", "id", ".", "name", ")", ":", "new", "NodeProp", "<", "string", ">", "(", ")", ",", "source", ":", "{", "name", ":", "prop", ".", "externalID", ".", "name", ",", "from", ":", "prop", ".", "source", "}", "}", ";", "}", "this", ".", "dialects", "=", "this", ".", "ast", ".", "dialects", ".", "map", "(", "d", "=>", "d", ".", "name", ")", ";", "this", ".", "tokens", "=", "new", "TokenSet", "(", "this", ",", "this", ".", "ast", ".", "tokens", ")", ";", "this", ".", "externalTokens", "=", "this", ".", "ast", ".", "externalTokens", ".", "map", "(", "ext", "=>", "new", "ExternalTokenSet", "(", "this", ",", "ext", ")", ")", ";", "this", ".", "externalSpecializers", "=", "this", ".", "ast", ".", "externalSpecializers", ".", "map", "(", "decl", "=>", "new", "ExternalSpecializer", "(", "this", ",", "decl", ")", ")", ";", "time", "(", "\"Build rules\"", ",", "(", ")", "=>", "{", "let", "noSkip", "=", "this", ".", "newName", "(", "\"%noskip\"", ",", "true", ")", ";", "this", ".", "defineRule", "(", "noSkip", ",", "[", "]", ")", ";", "let", "mainSkip", "=", "this", ".", "ast", ".", "mainSkip", "?", "this", ".", "newName", "(", "\"%mainskip\"", ",", "true", ")", ":", "noSkip", ";", "let", "scopedSkip", "=", "[", "]", ",", "topRules", "=", "[", "]", ";", "for", "(", "let", "rule", "of", "this", ".", "ast", ".", "rules", ")", "this", ".", "astRules", ".", "push", "(", "{", "skip", ":", "mainSkip", ",", "rule", "}", ")", ";", "for", "(", "let", "rule", "of", "this", ".", "ast", ".", "topRules", ")", "topRules", ".", "push", "(", "{", "skip", ":", "mainSkip", ",", "rule", "}", ")", ";", "for", "(", "let", "scoped", "of", "this", ".", "ast", ".", "scopedSkip", ")", "{", "let", "skip", "=", "noSkip", ",", "found", "=", "this", ".", "ast", ".", "scopedSkip", ".", "findIndex", "(", "(", "sc", ",", "i", ")", "=>", "i", "<", "scopedSkip", ".", "length", "&&", "exprEq", "(", "sc", ".", "expr", ",", "scoped", ".", "expr", ")", ")", ";", "if", "(", "found", ">", "-", "1", ")", "skip", "=", "scopedSkip", "[", "found", "]", ";", "else", "if", "(", "this", ".", "ast", ".", "mainSkip", "&&", "exprEq", "(", "scoped", ".", "expr", ",", "this", ".", "ast", ".", "mainSkip", ")", ")", "skip", "=", "mainSkip", ";", "else", "if", "(", "!", "isEmpty", "(", "scoped", ".", "expr", ")", ")", "skip", "=", "this", ".", "newName", "(", "\"%skip\"", ",", "true", ")", ";", "scopedSkip", ".", "push", "(", "skip", ")", ";", "for", "(", "let", "rule", "of", "scoped", ".", "rules", ")", "this", ".", "astRules", ".", "push", "(", "{", "skip", ",", "rule", "}", ")", ";", "for", "(", "let", "rule", "of", "scoped", ".", "topRules", ")", "topRules", ".", "push", "(", "{", "skip", ",", "rule", "}", ")", ";", "}", "for", "(", "let", "{", "rule", "}", "of", "this", ".", "astRules", ")", "{", "this", ".", "unique", "(", "rule", ".", "id", ")", ";", "if", "(", "this", ".", "namespaces", "[", "rule", ".", "id", ".", "name", "]", ")", "this", ".", "raise", "(", "`Rule name '${", "rule", ".", "id", ".", "name", "}' conflicts with a defined namespace`", ",", "rule", ".", "id", ".", "start", ")", ";", "}", "this", ".", "currentSkip", ".", "push", "(", "noSkip", ")", ";", "this", ".", "skipRules", "=", "mainSkip", "==", "noSkip", "?", "[", "mainSkip", "]", ":", "[", "noSkip", ",", "mainSkip", "]", ";", "if", "(", "mainSkip", "!=", "noSkip", ")", "this", ".", "defineRule", "(", "mainSkip", ",", "this", ".", "normalizeExpr", "(", "this", ".", "ast", ".", "mainSkip", "!", ")", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "this", ".", "ast", ".", "scopedSkip", ".", "length", ";", "i", "++", ")", "{", "let", "skip", "=", "scopedSkip", "[", "i", "]", ";", "if", "(", "!", "this", ".", "skipRules", ".", "includes", "(", "skip", ")", ")", "{", "this", ".", "skipRules", ".", "push", "(", "skip", ")", ";", "if", "(", "skip", "!=", "noSkip", ")", "this", ".", "defineRule", "(", "skip", ",", "this", ".", "normalizeExpr", "(", "this", ".", "ast", ".", "scopedSkip", "[", "i", "]", ".", "expr", ")", ")", ";", "}", "}", "this", ".", "currentSkip", ".", "pop", "(", ")", ";", "for", "(", "let", "{", "rule", ",", "skip", "}", "of", "topRules", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "rule", ".", "start", "-", "b", ".", "rule", ".", "start", ")", ")", "{", "this", ".", "unique", "(", "rule", ".", "id", ")", ";", "this", ".", "used", "(", "rule", ".", "id", ".", "name", ")", ";", "this", ".", "currentSkip", ".", "push", "(", "skip", ")", ";", "let", "{", "name", ",", "props", "}", "=", "this", ".", "nodeInfo", "(", "rule", ".", "props", ",", "\"a\"", ",", "rule", ".", "id", ".", "name", ",", "none", ",", "none", ",", "rule", ".", "expr", ")", ";", "let", "term", "=", "this", ".", "terms", ".", "makeTop", "(", "name", ",", "props", ")", ";", "this", ".", "namedTerms", "[", "name", "!", "]", "=", "term", ";", "this", ".", "defineRule", "(", "term", ",", "this", ".", "normalizeExpr", "(", "rule", ".", "expr", ")", ")", ";", "this", ".", "currentSkip", ".", "pop", "(", ")", ";", "}", "for", "(", "let", "ext", "of", "this", ".", "externalSpecializers", ")", "ext", ".", "finish", "(", ")", ";", "for", "(", "let", "{", "skip", ",", "rule", "}", "of", "this", ".", "astRules", ")", "{", "if", "(", "this", ".", "ruleNames", "[", "rule", ".", "id", ".", "name", "]", "&&", "isExported", "(", "rule", ")", "&&", "!", "rule", ".", "params", ".", "length", ")", "{", "this", ".", "buildRule", "(", "rule", ",", "[", "]", ",", "skip", ",", "false", ")", ";", "if", "(", "rule", ".", "expr", "instanceof", "SequenceExpression", "&&", "rule", ".", "expr", ".", "exprs", ".", "length", "==", "0", ")", "this", ".", "used", "(", "rule", ".", "id", ".", "name", ")", ";", "}", "}", "}", ")", ";", "for", "(", "let", "name", "in", "this", ".", "ruleNames", ")", "{", "let", "value", "=", "this", ".", "ruleNames", "[", "name", "]", ";", "if", "(", "value", ")", "this", ".", "warn", "(", "`Unused rule '${", "value", ".", "name", "}'`", ",", "value", ".", "start", ")", ";", "}", "this", ".", "tokens", ".", "takePrecedences", "(", ")", ";", "this", ".", "tokens", ".", "takeConflicts", "(", ")", ";", "for", "(", "let", "{", "name", ",", "group", ",", "rule", "}", "of", "this", ".", "definedGroups", ")", "this", ".", "defineGroup", "(", "name", ",", "group", ",", "rule", ")", ";", "this", ".", "checkGroups", "(", ")", ";", "}", "unique", "(", "id", ")", "{", "if", "(", "id", ".", "name", "in", "this", ".", "ruleNames", ")", "this", ".", "raise", "(", "`Duplicate definition of rule '${", "id", ".", "name", "}'`", ",", "id", ".", "start", ")", ";", "this", ".", "ruleNames", "[", "id", ".", "name", "]", "=", "id", ";", "}", "used", "(", "name", ")", "{", "this", ".", "ruleNames", "[", "name", "]", "=", "null", ";", "}", "defineNamespace", "(", "name", ",", "value", ",", "pos", "=", "0", ")", "{", "if", "(", "this", ".", "namespaces", "[", "name", "]", ")", "this", ".", "raise", "(", "`Duplicate definition of namespace '${", "name", "}'`", ",", "pos", ")", ";", "this", ".", "namespaces", "[", "name", "]", "=", "value", ";", "}", "newName", "(", "base", ",", "nodeName", "=", "null", ",", "props", "=", "{", "}", ")", "{", "for", "(", "let", "i", "=", "nodeName", "?", "0", ":", "1", ";", ";", "i", "++", ")", "{", "let", "name", "=", "i", "?", "`${", "base", "}-${", "i", "}`", ":", "base", ";", "if", "(", "!", "this", ".", "terms", ".", "names", "[", "name", "]", ")", "return", "this", ".", "terms", ".", "makeNonTerminal", "(", "name", ",", "nodeName", "===", "true", "?", "null", ":", "nodeName", ",", "props", ")", ";", "}", "}", "prepareParser", "(", ")", "{", "let", "rules", "=", "time", "(", "\"Simplify rules\"", ",", "(", ")", "=>", "simplifyRules", "(", "this", ".", "rules", ",", "[", "...", "this", ".", "skipRules", ",", "...", "this", ".", "terms", ".", "tops", "]", ")", ")", ";", "let", "{", "nodeTypes", ",", "names", ":", "termNames", ",", "minRepeatTerm", ",", "maxTerm", "}", "=", "this", ".", "terms", ".", "finish", "(", "rules", ")", ";", "for", "(", "let", "prop", "in", "this", ".", "namedTerms", ")", "this", ".", "termTable", "[", "prop", "]", "=", "this", ".", "namedTerms", "[", "prop", "]", ".", "id", ";", "if", "(", "/\\bgrammar\\b/", ".", "test", "(", "verbose", ")", ")", "console", ".", "log", "(", "rules", ".", "join", "(", "\"\\n\"", ")", ")", ";", "let", "startTerms", "=", "this", ".", "terms", ".", "tops", ".", "slice", "(", ")", ";", "let", "first", "=", "computeFirstSets", "(", "this", ".", "terms", ")", ";", "let", "skipInfo", "=", "this", ".", "skipRules", ".", "map", "(", "(", "name", ",", "id", ")", "=>", "{", "let", "skip", "=", "[", "]", ",", "startTokens", "=", "[", "]", ",", "rules", "=", "[", "]", ";", "for", "(", "let", "rule", "of", "name", ".", "rules", ")", "{", "if", "(", "!", "rule", ".", "parts", ".", "length", ")", "continue", ";", "let", "start", "=", "rule", ".", "parts", "[", "0", "]", ";", "for", "(", "let", "t", "of", "start", ".", "terminal", "?", "[", "start", "]", ":", "first", "[", "start", ".", "name", "]", "||", "[", "]", ")", "if", "(", "!", "startTokens", ".", "includes", "(", "t", ")", ")", "startTokens", ".", "push", "(", "t", ")", ";", "if", "(", "start", ".", "terminal", "&&", "rule", ".", "parts", ".", "length", "==", "1", "&&", "!", "rules", ".", "some", "(", "r", "=>", "r", "!=", "rule", "&&", "r", ".", "parts", "[", "0", "]", "==", "start", ")", ")", "skip", ".", "push", "(", "start", ")", ";", "else", "rules", ".", "push", "(", "rule", ")", ";", "}", "name", ".", "rules", "=", "rules", ";", "if", "(", "rules", ".", "length", ")", "startTerms", ".", "push", "(", "name", ")", ";", "return", "{", "skip", ",", "rule", ":", "rules", ".", "length", "?", "name", ":", "null", ",", "startTokens", ",", "id", "}", ";", "}", ")", ";", "let", "fullTable", "=", "time", "(", "\"Build full automaton\"", ",", "(", ")", "=>", "buildFullAutomaton", "(", "this", ".", "terms", ",", "startTerms", ",", "first", ")", ")", ";", "let", "{", "tokenGroups", ",", "tokenPrec", ",", "tokenData", "}", "=", "time", "(", "\"Build token groups\"", ",", "(", ")", "=>", "this", ".", "tokens", ".", "buildTokenGroups", "(", "fullTable", ",", "skipInfo", ")", ")", ";", "let", "table", "=", "time", "(", "\"Finish automaton\"", ",", "(", ")", "=>", "finishAutomaton", "(", "fullTable", ")", "as", "readonly", "LRState", "[", "]", ")", ";", "let", "skipState", "=", "findSkipStates", "(", "table", ",", "this", ".", "terms", ".", "tops", ")", ";", "if", "(", "/\\blr\\b/", ".", "test", "(", "verbose", ")", ")", "console", ".", "log", "(", "table", ".", "join", "(", "\"\\n\"", ")", ")", ";", "let", "specialized", "=", "[", "]", ";", "for", "(", "let", "ext", "of", "this", ".", "externalSpecializers", ")", "specialized", ".", "push", "(", "ext", ")", ";", "for", "(", "let", "name", "in", "this", ".", "specialized", ")", "specialized", ".", "push", "(", "{", "token", ":", "this", ".", "terms", ".", "names", "[", "name", "]", ",", "table", ":", "buildSpecializeTable", "(", "this", ".", "specialized", "[", "name", "]", ")", "}", ")", ";", "let", "tokStart", "=", "(", "tokenizer", ")", "=>", "{", "if", "(", "tokenizer", "instanceof", "ExternalTokenDeclaration", ")", "return", "tokenizer", ".", "start", ";", "return", "this", ".", "tokens", ".", "ast", "?", "this", ".", "tokens", ".", "ast", ".", "start", ":", "-", "1", ";", "}", ";", "let", "tokenizers", "=", "(", "tokenGroups", "as", "(", "TokenGroup", "|", "ExternalTokenDeclaration", ")", "[", "]", ")", ".", "concat", "(", "this", ".", "externalTokens", ".", "map", "(", "e", "=>", "e", ".", "ast", ")", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "tokStart", "(", "a", ")", "-", "tokStart", "(", "b", ")", ")", ";", "let", "data", "=", "new", "DataBuilder", ";", "let", "skipData", "=", "skipInfo", ".", "map", "(", "info", "=>", "{", "let", "actions", "=", "[", "]", ";", "for", "(", "let", "term", "of", "info", ".", "skip", ")", "actions", ".", "push", "(", "term", ".", "id", ",", "0", ",", "Action", ".", "StayFlag", ">>", "16", ")", ";", "if", "(", "info", ".", "rule", ")", "{", "let", "state", "=", "table", ".", "find", "(", "s", "=>", "s", ".", "startRule", "==", "info", ".", "rule", ")", "!", ";", "for", "(", "let", "action", "of", "state", ".", "actions", "as", "Shift", "[", "]", ")", "actions", ".", "push", "(", "action", ".", "term", ".", "id", ",", "state", ".", "id", ",", "Action", ".", "GotoFlag", ">>", "16", ")", ";", "}", "actions", ".", "push", "(", "Seq", ".", "End", ",", "Seq", ".", "Done", ")", ";", "return", "data", ".", "storeArray", "(", "actions", ")", ";", "}", ")", ";", "let", "states", "=", "time", "(", "\"Finish states\"", ",", "(", ")", "=>", "{", "let", "states", "=", "new", "Uint32Array", "(", "table", ".", "length", "*", "ParseState", ".", "Size", ")", ";", "let", "forceReductions", "=", "this", ".", "computeForceReductions", "(", "table", ",", "skipInfo", ")", ";", "let", "finishCx", "=", "new", "FinishStateContext", "(", "tokenizers", ",", "data", ",", "states", ",", "skipData", ",", "skipInfo", ",", "table", ",", "this", ")", ";", "for", "(", "let", "s", "of", "table", ")", "finishCx", ".", "finish", "(", "s", ",", "skipState", "(", "s", ".", "id", ")", ",", "forceReductions", "[", "s", ".", "id", "]", ")", ";", "return", "states", ";", "}", ")", ";", "let", "dialects", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "this", ".", "dialects", ".", "length", ";", "i", "++", ")", "dialects", "[", "this", ".", "dialects", "[", "i", "]", "]", "=", "data", ".", "storeArray", "(", "(", "this", ".", "tokens", ".", "byDialect", "[", "i", "]", "||", "none", ")", ".", "map", "(", "t", "=>", "t", ".", "id", ")", ".", "concat", "(", "Seq", ".", "End", ")", ")", ";", "let", "dynamicPrecedences", "=", "null", ";", "if", "(", "this", ".", "dynamicRulePrecedences", ".", "length", ")", "{", "dynamicPrecedences", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "{", "rule", ",", "prec", "}", "of", "this", ".", "dynamicRulePrecedences", ")", "dynamicPrecedences", "[", "rule", ".", "id", "]", "=", "prec", ";", "}", "let", "topRules", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "term", "of", "this", ".", "terms", ".", "tops", ")", "topRules", "[", "term", ".", "nodeName", "!", "]", "=", "[", "table", ".", "find", "(", "state", "=>", "state", ".", "startRule", "==", "term", ")", "!", ".", "id", ",", "term", ".", "id", "]", ";", "let", "precTable", "=", "data", ".", "storeArray", "(", "tokenPrec", ".", "concat", "(", "Seq", ".", "End", ")", ")", ";", "let", "{", "nodeProps", ",", "skippedTypes", "}", "=", "this", ".", "gatherNodeProps", "(", "nodeTypes", ")", ";", "return", "{", "states", ",", "stateData", ":", "data", ".", "finish", "(", ")", ",", "goto", ":", "computeGotoTable", "(", "table", ")", ",", "nodeNames", ":", "nodeTypes", ".", "filter", "(", "t", "=>", "t", ".", "id", "<", "minRepeatTerm", ")", ".", "map", "(", "t", "=>", "t", ".", "nodeName", ")", ".", "join", "(", "\" \"", ")", ",", "nodeProps", ",", "skippedTypes", ",", "maxTerm", ",", "repeatNodeCount", ":", "nodeTypes", ".", "length", "-", "minRepeatTerm", ",", "tokenizers", ",", "tokenData", ",", "topRules", ",", "dialects", ",", "dynamicPrecedences", ",", "specialized", ",", "tokenPrec", ":", "precTable", ",", "termNames", "}", ";", "}", "getParser", "(", ")", "{", "let", "{", "states", ",", "stateData", ",", "goto", ",", "nodeNames", ",", "nodeProps", ":", "rawNodeProps", ",", "skippedTypes", ",", "maxTerm", ",", "repeatNodeCount", ",", "tokenizers", ":", "rawTokenizers", ",", "tokenData", ",", "topRules", ",", "dialects", ",", "dynamicPrecedences", ",", "specialized", ":", "rawSpecialized", ",", "tokenPrec", ",", "termNames", "}", "=", "this", ".", "prepareParser", "(", ")", ";", "let", "specialized", "=", "rawSpecialized", ".", "map", "(", "v", "=>", "{", "if", "(", "v", "instanceof", "ExternalSpecializer", ")", "{", "let", "ext", "=", "this", ".", "options", ".", "externalSpecializer", "!", "(", "v", ".", "ast", ".", "id", ".", "name", ",", "this", ".", "termTable", ")", ";", "return", "{", "term", ":", "v", ".", "term", "!", ".", "id", ",", "get", ":", "(", "value", ",", "stack", ")", "=>", "(", "ext", "(", "value", ",", "stack", ")", "<<", "1", ")", "|", "(", "v", ".", "ast", ".", "type", "==", "\"extend\"", "?", "Specialize", ".", "Extend", ":", "Specialize", ".", "Specialize", ")", "}", ";", "}", "else", "{", "return", "{", "term", ":", "v", ".", "token", ".", "id", ",", "get", ":", "(", "value", ")", "=>", "v", ".", "table", "[", "value", "]", "||", "-", "1", "}", ";", "}", "}", ")", ";", "let", "tokenizers", "=", "rawTokenizers", ".", "map", "(", "tok", "=>", "{", "return", "tok", "instanceof", "ExternalTokenDeclaration", "?", "this", ".", "options", ".", "externalTokenizer", "!", "(", "tok", ".", "id", ".", "name", ",", "this", ".", "termTable", ")", ":", "tok", ".", "id", ";", "}", ")", ";", "return", "(", "LRParser", "as", "any", ")", ".", "deserialize", "(", "{", "version", ":", "File", ".", "Version", ",", "states", ",", "stateData", ",", "goto", ",", "nodeNames", ",", "maxTerm", ",", "repeatNodeCount", ",", "nodeProps", ":", "rawNodeProps", ".", "map", "(", "(", "{", "prop", ",", "terms", "}", ")", "=>", "[", "this", ".", "knownProps", "[", "prop", "]", ".", "prop", ",", "...", "terms", "]", ")", ",", "skippedNodes", ":", "skippedTypes", ",", "tokenData", ",", "tokenizers", ",", "context", ":", "this", ".", "ast", ".", "context", "?", "this", ".", "options", ".", "contextTracker", ":", "undefined", ",", "topRules", ",", "dialects", ",", "dynamicPrecedences", ",", "specialized", ",", "tokenPrec", ",", "termNames", "}", ")", ";", "}", "getParserFile", "(", ")", "{", "let", "{", "states", ",", "stateData", ",", "goto", ",", "nodeNames", ",", "nodeProps", ":", "rawNodeProps", ",", "skippedTypes", ",", "maxTerm", ",", "repeatNodeCount", ",", "tokenizers", ":", "rawTokenizers", ",", "tokenData", ",", "topRules", ",", "dialects", ":", "rawDialects", ",", "dynamicPrecedences", ",", "specialized", ":", "rawSpecialized", ",", "tokenPrec", ",", "termNames", "}", "=", "this", ".", "prepareParser", "(", ")", ";", "let", "mod", "=", "this", ".", "options", ".", "moduleStyle", "||", "\"es\"", ";", "let", "gen", "=", "\"// This file was generated by lezer-generator. You probably shouldn't edit it.\\n\"", ",", "head", "=", "gen", ";", "head", "+=", "mod", "==", "\"cjs\"", "?", "`const {LRParser} = require(\"@lezer/lr\")\\n`", ":", "`import {LRParser} from \"@lezer/lr\"\\n`", ";", "let", "imports", "=", "{", "}", ",", "imported", "=", "Object", ".", "create", "(", "null", ")", ";", "let", "defined", "=", "Object", ".", "create", "(", "null", ")", ";", "let", "exportName", "=", "this", ".", "options", ".", "exportName", "||", "\"parser\"", ";", "defined", ".", "Parser", "=", "defined", "[", "exportName", "]", "=", "true", ";", "let", "getName", "=", "(", "prefix", ")", "=>", "{", "for", "(", "let", "i", "=", "0", ";", ";", "i", "++", ")", "{", "let", "id", "=", "prefix", "+", "(", "i", "?", "\"_\"", "+", "i", ":", "\"\"", ")", ";", "if", "(", "!", "defined", "[", "id", "]", ")", "return", "id", ";", "}", "}", ";", "let", "importName", "=", "(", "name", ",", "source", ",", "prefix", ")", "=>", "{", "let", "spec", "=", "name", "+", "\" from \"", "+", "source", ";", "if", "(", "imported", "[", "spec", "]", ")", "return", "imported", "[", "spec", "]", ";", "let", "src", "=", "JSON", ".", "stringify", "(", "source", ")", ",", "varName", "=", "name", ";", "if", "(", "name", "in", "defined", ")", "{", "varName", "=", "getName", "(", "prefix", ")", ";", "name", "+=", "`${", "mod", "==", "\"cjs\"", "?", "\":\"", ":", "\" as\"", "} ${", "varName", "}`", ";", "}", ";", "(", "imports", "[", "src", "]", "||", "(", "imports", "[", "src", "]", "=", "[", "]", ")", ")", ".", "push", "(", "name", ")", ";", "return", "imported", "[", "spec", "]", "=", "varName", ";", "}", ";", "let", "tokenizers", "=", "rawTokenizers", ".", "map", "(", "tok", "=>", "{", "if", "(", "tok", "instanceof", "ExternalTokenDeclaration", ")", "{", "let", "{", "source", ",", "id", ":", "{", "name", "}", "}", "=", "tok", ";", "return", "importName", "(", "name", ",", "source", ",", "\"tok\"", ")", ";", "}", "else", "{", "return", "tok", ".", "id", ";", "}", "}", ")", ";", "let", "context", "=", "this", ".", "ast", ".", "context", "?", "importName", "(", "this", ".", "ast", ".", "context", ".", "id", ".", "name", ",", "this", ".", "ast", ".", "context", ".", "source", ",", "\"cx\"", ")", ":", "null", ";", "let", "nodeProps", "=", "rawNodeProps", ".", "map", "(", "(", "{", "prop", ",", "terms", "}", ")", "=>", "{", "let", "{", "source", "}", "=", "this", ".", "knownProps", "[", "prop", "]", ";", "let", "propID", "=", "source", ".", "from", "?", "importName", "(", "source", ".", "name", ",", "source", ".", "from", ",", "\"prop\"", ")", ":", "importName", "(", "\"NodeProp\"", ",", "\"@lezer/common\"", ",", "\"NodeProp\"", ")", "+", "\".\"", "+", "source", ".", "name", ";", "return", "`[${", "propID", "}, ${", "terms", ".", "map", "(", "serializePropValue", ")", ".", "join", "(", "\",\"", ")", "}]`", ";", "}", ")", ";", "function", "specializationTableString", "(", "table", ")", "{", "return", "\"{__proto__:null,\"", "+", "Object", ".", "keys", "(", "table", ")", ".", "map", "(", "key", "=>", "`${", "/\\W/", ".", "test", "(", "key", ")", "?", "JSON", ".", "stringify", "(", "key", ")", ":", "key", "}:${", "table", "[", "key", "]", "}`", ")", ".", "join", "(", "\", \"", ")", "+", "\"}\"", ";", "}", "let", "specHead", "=", "\"\"", ";", "let", "specialized", "=", "rawSpecialized", ".", "map", "(", "v", "=>", "{", "if", "(", "v", "instanceof", "ExternalSpecializer", ")", "{", "let", "name", "=", "importName", "(", "v", ".", "ast", ".", "id", ".", "name", ",", "v", ".", "ast", ".", "source", ",", "v", ".", "ast", ".", "id", ".", "name", ")", ";", "return", "`{term: ${", "v", ".", "term", "!", ".", "id", "}, get: (value, stack) => (${", "name", "}(value, stack) << 1)${", "v", ".", "ast", ".", "type", "==", "\"extend\"", "?", "` | ${", "Specialize", ".", "Extend", "}`", ":", "''", "}}`", ";", "}", "else", "{", "let", "tableName", "=", "getName", "(", "\"spec_\"", "+", "v", ".", "token", ".", "name", ".", "replace", "(", "/\\W/g", ",", "\"\"", ")", ")", ";", "specHead", "+=", "`const ${", "tableName", "} = ${", "specializationTableString", "(", "v", ".", "table", ")", "}\\n`", ";", "return", "`{term: ${", "v", ".", "token", ".", "id", "}, get: value => ${", "tableName", "}[value] || -1}`", ";", "}", "}", ")", ";", "for", "(", "let", "source", "in", "imports", ")", "{", "if", "(", "mod", "==", "\"cjs\"", ")", "head", "+=", "`const {${", "imports", "[", "source", "]", ".", "join", "(", "\", \"", ")", "}} = require(${", "source", "})\\n`", ";", "else", "head", "+=", "`import {${", "imports", "[", "source", "]", ".", "join", "(", "\", \"", ")", "}} from ${", "source", "}\\n`", ";", "}", "head", "+=", "specHead", ";", "function", "serializePropValue", "(", "value", ")", "{", "return", "typeof", "value", "!=", "\"string\"", "||", "/^(true|false|\\d+(\\.\\d+)?|\\.\\d+)$/", ".", "test", "(", "value", ")", "?", "value", ":", "JSON", ".", "stringify", "(", "value", ")", ";", "}", "let", "dialects", "=", "Object", ".", "keys", "(", "rawDialects", ")", ".", "map", "(", "d", "=>", "`${", "d", "}: ${", "rawDialects", "[", "d", "]", "}`", ")", ";", "let", "parserStr", "=", "`LRParser.deserialize({\n  version: ${", "File", ".", "Version", "},\n  states: ${", "encodeArray", "(", "states", ",", "0xffffffff", ")", "},\n  stateData: ${", "encodeArray", "(", "stateData", ")", "},\n  goto: ${", "encodeArray", "(", "goto", ")", "},\n  nodeNames: ${", "JSON", ".", "stringify", "(", "nodeNames", ")", "},\n  maxTerm: ${", "maxTerm", "}${", "context", "?", "`,\n  context: ${", "context", "}`", ":", "\"\"", "}${", "nodeProps", ".", "length", "?", "`,\n  nodeProps: [\n    ${", "nodeProps", ".", "join", "(", "\",\\n    \"", ")", "}\n  ]`", ":", "\"\"", "}${", "skippedTypes", ".", "length", "?", "`,\n  skippedNodes: ${", "JSON", ".", "stringify", "(", "skippedTypes", ")", "}`", ":", "\"\"", "},\n  repeatNodeCount: ${", "repeatNodeCount", "},\n  tokenData: ${", "encodeArray", "(", "tokenData", ")", "},\n  tokenizers: [${", "tokenizers", ".", "join", "(", "\", \"", ")", "}],\n  topRules: ${", "JSON", ".", "stringify", "(", "topRules", ")", "}${", "dialects", ".", "length", "?", "`,\n  dialects: {${", "dialects", ".", "join", "(", "\", \"", ")", "}}`", ":", "\"\"", "}${", "dynamicPrecedences", "?", "`,\n  dynamicPrecedences: ${", "JSON", ".", "stringify", "(", "dynamicPrecedences", ")", "}`", ":", "\"\"", "}${", "specialized", ".", "length", "?", "`,\n  specialized: [${", "specialized", ".", "join", "(", "\",\"", ")", "}]`", ":", "\"\"", "},\n  tokenPrec: ${", "tokenPrec", "}${", "this", ".", "options", ".", "includeNames", "?", "`,\n  termNames: ${", "JSON", ".", "stringify", "(", "termNames", ")", "}`", ":", "''", "}\n})`", ";", "let", "terms", "=", "[", "]", ";", "for", "(", "let", "name", "in", "this", ".", "termTable", ")", "{", "let", "id", "=", "name", ";", "if", "(", "KEYWORDS", ".", "includes", "(", "id", ")", ")", "for", "(", "let", "i", "=", "1", ";", ";", "i", "++", ")", "{", "id", "=", "\"_\"", ".", "repeat", "(", "i", ")", "+", "name", ";", "if", "(", "!", "(", "id", "in", "this", ".", "termTable", ")", ")", "break", ";", "}", "terms", ".", "push", "(", "`${", "id", "}${", "mod", "==", "\"cjs\"", "?", "\":\"", ":", "\" =\"", "} ${", "this", ".", "termTable", "[", "name", "]", "}`", ")", ";", "}", "for", "(", "let", "id", "=", "0", ";", "id", "<", "this", ".", "dialects", ".", "length", ";", "id", "++", ")", "terms", ".", "push", "(", "`Dialect_${", "this", ".", "dialects", "[", "id", "]", "}${", "mod", "==", "\"cjs\"", "?", "\":\"", ":", "\" =\"", "} ${", "id", "}`", ")", ";", "return", "{", "parser", ":", "head", "+", "(", "mod", "==", "\"cjs\"", "?", "`exports.${", "exportName", "} = ${", "parserStr", "}\\n`", ":", "`export const ${", "exportName", "} = ${", "parserStr", "}\\n`", ")", ",", "terms", ":", "mod", "==", "\"cjs\"", "?", "`${", "gen", "}module.exports = {\\n  ${", "terms", ".", "join", "(", "\",\\n  \"", ")", "}\\n}`", ":", "`${", "gen", "}export const\\n  ${", "terms", ".", "join", "(", "\",\\n  \"", ")", "}\\n`", "}", ";", "}", "gatherNonSkippedNodes", "(", ")", "{", "let", "seen", "=", "Object", ".", "create", "(", "null", ")", ";", "let", "work", "=", "[", "]", ";", "let", "add", "=", "(", "term", ")", "=>", "{", "if", "(", "!", "seen", "[", "term", ".", "id", "]", ")", "{", "seen", "[", "term", ".", "id", "]", "=", "true", ";", "work", ".", "push", "(", "term", ")", ";", "}", "}", ";", "this", ".", "terms", ".", "tops", ".", "forEach", "(", "add", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "work", ".", "length", ";", "i", "++", ")", "{", "for", "(", "let", "rule", "of", "work", "[", "i", "]", ".", "rules", ")", "for", "(", "let", "part", "of", "rule", ".", "parts", ")", "add", "(", "part", ")", ";", "}", "return", "seen", ";", "}", "gatherNodeProps", "(", "nodeTypes", ")", "{", "let", "notSkipped", "=", "this", ".", "gatherNonSkippedNodes", "(", ")", ",", "skippedTypes", "=", "[", "]", ";", "let", "nodeProps", "=", "[", "]", ";", "for", "(", "let", "type", "of", "nodeTypes", ")", "{", "if", "(", "!", "notSkipped", "[", "type", ".", "id", "]", "&&", "!", "type", ".", "error", ")", "skippedTypes", ".", "push", "(", "type", ".", "id", ")", ";", "for", "(", "let", "prop", "in", "type", ".", "props", ")", "{", "let", "known", "=", "this", ".", "knownProps", "[", "prop", "]", ";", "if", "(", "!", "known", ")", "throw", "new", "GenError", "(", "\"No known prop type for \"", "+", "prop", ")", ";", "if", "(", "known", ".", "source", ".", "from", "==", "null", "&&", "(", "known", ".", "source", ".", "name", "==", "\"repeated\"", "||", "known", ".", "source", ".", "name", "==", "\"error\"", ")", ")", "continue", ";", "let", "rec", "=", "nodeProps", ".", "find", "(", "r", "=>", "r", ".", "prop", "==", "prop", ")", ";", "if", "(", "!", "rec", ")", "nodeProps", ".", "push", "(", "rec", "=", "{", "prop", ",", "values", ":", "{", "}", "}", ")", ";", "(", "rec", ".", "values", "[", "type", ".", "props", "[", "prop", "]", "]", "||", "(", "rec", ".", "values", "[", "type", ".", "props", "[", "prop", "]", "]", "=", "[", "]", ")", ")", ".", "push", "(", "type", ".", "id", ")", ";", "}", "}", "return", "{", "nodeProps", ":", "nodeProps", ".", "map", "(", "(", "{", "prop", ",", "values", "}", ")", "=>", "{", "let", "terms", "=", "[", "]", ";", "for", "(", "let", "val", "in", "values", ")", "{", "let", "ids", "=", "values", "[", "val", "]", ";", "if", "(", "ids", ".", "length", "==", "1", ")", "{", "terms", ".", "push", "(", "ids", "[", "0", "]", ",", "val", ")", ";", "}", "else", "{", "terms", ".", "push", "(", "-", "ids", ".", "length", ")", ";", "for", "(", "let", "id", "of", "ids", ")", "terms", ".", "push", "(", "id", ")", ";", "terms", ".", "push", "(", "val", ")", ";", "}", "}", "return", "{", "prop", ",", "terms", "}", ";", "}", ")", ",", "skippedTypes", "}", ";", "}", "makeTerminal", "(", "name", ",", "tag", ",", "props", ")", "{", "return", "this", ".", "terms", ".", "makeTerminal", "(", "this", ".", "terms", ".", "uniqueName", "(", "name", ")", ",", "tag", ",", "props", ")", ";", "}", "computeForceReductions", "(", "states", ",", "skipInfo", ")", "{", "let", "reductions", "=", "[", "]", ";", "let", "candidates", "=", "[", "]", ";", "let", "gotoEdges", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "state", "of", "states", ")", "{", "reductions", ".", "push", "(", "0", ")", ";", "for", "(", "let", "edge", "of", "state", ".", "goto", ")", "{", "let", "array", "=", "gotoEdges", "[", "edge", ".", "term", ".", "id", "]", "||", "(", "gotoEdges", "[", "edge", ".", "term", ".", "id", "]", "=", "[", "]", ")", ";", "let", "found", "=", "array", ".", "find", "(", "o", "=>", "o", ".", "target", "==", "edge", ".", "target", ".", "id", ")", ";", "if", "(", "found", ")", "found", ".", "parents", ".", "push", "(", "state", ".", "id", ")", ";", "else", "array", ".", "push", "(", "{", "parents", ":", "[", "state", ".", "id", "]", ",", "target", ":", "edge", ".", "target", ".", "id", "}", ")", ";", "}", "candidates", "[", "state", ".", "id", "]", "=", "state", ".", "set", ".", "filter", "(", "pos", "=>", "pos", ".", "pos", ">", "0", "&&", "!", "pos", ".", "rule", ".", "name", ".", "top", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "b", ".", "pos", "-", "a", ".", "pos", "||", "a", ".", "rule", ".", "parts", ".", "length", "-", "b", ".", "rule", ".", "parts", ".", "length", ")", ";", "}", "let", "length1Reductions", "=", "Object", ".", "create", "(", "null", ")", ";", "function", "createsCycle", "(", "term", ",", "startState", ",", "parents", "=", "null", ")", "{", "let", "edges", "=", "gotoEdges", "[", "term", "]", ";", "if", "(", "!", "edges", ")", "return", "false", ";", "return", "edges", ".", "some", "(", "val", "=>", "{", "let", "parentIntersection", "=", "parents", "?", "parents", ".", "filter", "(", "id", "=>", "val", ".", "parents", ".", "includes", "(", "id", ")", ")", ":", "val", ".", "parents", ";", "if", "(", "parentIntersection", ".", "length", "==", "0", ")", "return", "false", ";", "if", "(", "val", ".", "target", "==", "startState", ")", "return", "true", ";", "let", "found", "=", "length1Reductions", "[", "val", ".", "target", "]", ";", "return", "found", "!=", "null", "&&", "createsCycle", "(", "found", ",", "startState", ",", "parentIntersection", ")", ";", "}", ")", ";", "}", "for", "(", "let", "state", "of", "states", ")", "{", "if", "(", "state", ".", "defaultReduce", "&&", "state", ".", "defaultReduce", ".", "parts", ".", "length", ">", "0", ")", "{", "reductions", "[", "state", ".", "id", "]", "=", "reduceAction", "(", "state", ".", "defaultReduce", ",", "skipInfo", ")", ";", "if", "(", "state", ".", "defaultReduce", ".", "parts", ".", "length", "==", "1", ")", "length1Reductions", "[", "state", ".", "id", "]", "=", "state", ".", "defaultReduce", ".", "name", ".", "id", ";", "}", "}", "for", "(", "let", "setSize", "=", "1", ";", ";", "setSize", "++", ")", "{", "let", "done", "=", "true", ";", "for", "(", "let", "state", "of", "states", ")", "{", "if", "(", "state", ".", "defaultReduce", ")", "continue", ";", "let", "set", "=", "candidates", "[", "state", ".", "id", "]", ";", "if", "(", "set", ".", "length", "!=", "setSize", ")", "{", "if", "(", "set", ".", "length", ">", "setSize", ")", "done", "=", "false", ";", "continue", ";", "}", "for", "(", "let", "pos", "of", "set", ")", "{", "if", "(", "pos", ".", "pos", "!=", "1", "||", "!", "createsCycle", "(", "pos", ".", "rule", ".", "name", ".", "id", ",", "state", ".", "id", ")", ")", "{", "reductions", "[", "state", ".", "id", "]", "=", "reduceAction", "(", "pos", ".", "rule", ",", "skipInfo", ",", "pos", ".", "pos", ")", ";", "if", "(", "pos", ".", "pos", "==", "1", ")", "length1Reductions", "[", "state", ".", "id", "]", "=", "pos", ".", "rule", ".", "name", ".", "id", ";", "break", ";", "}", "}", "}", "if", "(", "done", ")", "break", ";", "}", "return", "reductions", ";", "}", "substituteArgs", "(", "expr", ",", "args", ",", "params", ")", "{", "if", "(", "args", ".", "length", "==", "0", ")", "return", "expr", ";", "return", "expr", ".", "walk", "(", "expr", "=>", "{", "let", "found", ";", "if", "(", "expr", "instanceof", "NameExpression", "&&", "!", "expr", ".", "namespace", "&&", "(", "found", "=", "params", ".", "findIndex", "(", "p", "=>", "p", ".", "name", "==", "expr", ".", "id", ".", "name", ")", ")", ">", "-", "1", ")", "{", "let", "arg", "=", "args", "[", "found", "]", ";", "if", "(", "expr", ".", "args", ".", "length", ")", "{", "if", "(", "arg", "instanceof", "NameExpression", "&&", "!", "arg", ".", "args", ".", "length", ")", "return", "new", "NameExpression", "(", "expr", ".", "start", ",", "arg", ".", "namespace", ",", "arg", ".", "id", ",", "expr", ".", "args", ")", ";", "this", ".", "raise", "(", "`Passing arguments to a parameter that already has arguments`", ",", "expr", ".", "start", ")", ";", "}", "return", "arg", ";", "}", "else", "if", "(", "expr", "instanceof", "InlineRuleExpression", ")", "{", "let", "r", "=", "expr", ".", "rule", ",", "props", "=", "this", ".", "substituteArgsInProps", "(", "r", ".", "props", ",", "args", ",", "params", ")", ";", "return", "props", "==", "r", ".", "props", "?", "expr", ":", "new", "InlineRuleExpression", "(", "expr", ".", "start", ",", "new", "RuleDeclaration", "(", "r", ".", "start", ",", "r", ".", "id", ",", "props", ",", "r", ".", "params", ",", "r", ".", "expr", ")", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "SpecializeExpression", ")", "{", "let", "props", "=", "this", ".", "substituteArgsInProps", "(", "expr", ".", "props", ",", "args", ",", "params", ")", ";", "return", "props", "==", "expr", ".", "props", "?", "expr", ":", "new", "SpecializeExpression", "(", "expr", ".", "start", ",", "expr", ".", "type", ",", "props", ",", "expr", ".", "token", ",", "expr", ".", "content", ")", ";", "}", "return", "expr", ";", "}", ")", ";", "}", "substituteArgsInProps", "(", "props", ",", "args", ",", "params", ")", "{", "let", "substituteInValue", "=", "(", "value", ")", "=>", "{", "let", "result", "=", "value", "as", "PropPart", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "value", ".", "length", ";", "i", "++", ")", "{", "let", "part", "=", "value", "[", "i", "]", ";", "if", "(", "!", "part", ".", "name", ")", "continue", ";", "let", "found", "=", "params", ".", "findIndex", "(", "p", "=>", "p", ".", "name", "==", "part", ".", "name", ")", ";", "if", "(", "found", "<", "0", ")", "continue", ";", "if", "(", "result", "==", "value", ")", "result", "=", "value", ".", "slice", "(", ")", ";", "let", "expr", "=", "args", "[", "found", "]", ";", "if", "(", "expr", "instanceof", "NameExpression", "&&", "!", "expr", ".", "namespace", "&&", "!", "expr", ".", "args", ".", "length", ")", "result", "[", "i", "]", "=", "new", "PropPart", "(", "part", ".", "start", ",", "expr", ".", "id", ".", "name", ",", "null", ")", ";", "else", "if", "(", "expr", "instanceof", "LiteralExpression", ")", "result", "[", "i", "]", "=", "new", "PropPart", "(", "part", ".", "start", ",", "expr", ".", "value", ",", "null", ")", ";", "else", "this", ".", "raise", "(", "`Trying to interpolate expression '${", "expr", "}' into a prop`", ",", "part", ".", "start", ")", ";", "}", "return", "result", ";", "}", ";", "let", "result", "=", "props", "as", "Prop", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "props", ".", "length", ";", "i", "++", ")", "{", "let", "prop", "=", "props", "[", "i", "]", ",", "value", "=", "substituteInValue", "(", "prop", ".", "value", ")", ";", "if", "(", "value", "!=", "prop", ".", "value", ")", "{", "if", "(", "result", "==", "props", ")", "result", "=", "props", ".", "slice", "(", ")", ";", "result", "[", "i", "]", "=", "new", "Prop", "(", "prop", ".", "start", ",", "prop", ".", "at", ",", "prop", ".", "name", ",", "value", ")", ";", "}", "}", "return", "result", ";", "}", "conflictsFor", "(", "markers", ")", "{", "let", "here", "=", "Conflicts", ".", "none", ",", "atEnd", "=", "Conflicts", ".", "none", ";", "for", "(", "let", "marker", "of", "markers", ")", "{", "if", "(", "marker", ".", "type", "==", "\"ambig\"", ")", "{", "here", "=", "here", ".", "join", "(", "new", "Conflicts", "(", "0", ",", "[", "marker", ".", "id", ".", "name", "]", ")", ")", ";", "}", "else", "{", "let", "precs", "=", "this", ".", "ast", ".", "precedences", "!", ";", "let", "index", "=", "precs", "?", "precs", ".", "items", ".", "findIndex", "(", "item", "=>", "item", ".", "id", ".", "name", "==", "marker", ".", "id", ".", "name", ")", ":", "-", "1", ";", "if", "(", "index", "<", "0", ")", "this", ".", "raise", "(", "`Reference to unknown precedence: '${", "marker", ".", "id", ".", "name", "}'`", ",", "marker", ".", "id", ".", "start", ")", ";", "let", "prec", "=", "precs", ".", "items", "[", "index", "]", ",", "value", "=", "precs", ".", "items", ".", "length", "-", "index", ";", "if", "(", "prec", ".", "type", "==", "\"cut\"", ")", "{", "here", "=", "here", ".", "join", "(", "new", "Conflicts", "(", "0", ",", "none", ",", "value", ")", ")", ";", "}", "else", "{", "here", "=", "here", ".", "join", "(", "new", "Conflicts", "(", "value", "<<", "2", ")", ")", ";", "atEnd", "=", "atEnd", ".", "join", "(", "new", "Conflicts", "(", "(", "value", "<<", "2", ")", "+", "(", "prec", ".", "type", "==", "\"left\"", "?", "1", ":", "prec", ".", "type", "==", "\"right\"", "?", "-", "1", ":", "0", ")", ")", ")", ";", "}", "}", "}", "return", "{", "here", ",", "atEnd", "}", ";", "}", "raise", "(", "message", ",", "pos", "=", "1", ")", "{", "return", "this", ".", "input", ".", "raise", "(", "message", ",", "pos", ")", ";", "}", "warn", "(", "message", ",", "pos", "=", "-", "1", ")", "{", "let", "msg", "=", "this", ".", "input", ".", "message", "(", "message", ",", "pos", ")", ";", "if", "(", "this", ".", "options", ".", "warn", ")", "this", ".", "options", ".", "warn", "(", "msg", ")", ";", "else", "console", ".", "warn", "(", "msg", ")", ";", "}", "defineRule", "(", "name", ",", "choices", ")", "{", "let", "skip", "=", "this", ".", "currentSkip", "[", "this", ".", "currentSkip", ".", "length", "-", "1", "]", ";", "for", "(", "let", "choice", "of", "choices", ")", "this", ".", "rules", ".", "push", "(", "new", "Rule", "(", "name", ",", "choice", ".", "terms", ",", "choice", ".", "ensureConflicts", "(", ")", ",", "skip", ")", ")", ";", "}", "resolve", "(", "expr", ")", "{", "if", "(", "expr", ".", "namespace", ")", "{", "let", "ns", "=", "this", ".", "namespaces", "[", "expr", ".", "namespace", ".", "name", "]", ";", "if", "(", "!", "ns", ")", "this", ".", "raise", "(", "`Reference to undefined namespace '${", "expr", ".", "namespace", ".", "name", "}'`", ",", "expr", ".", "start", ")", ";", "return", "ns", ".", "resolve", "(", "expr", ",", "this", ")", ";", "}", "else", "{", "for", "(", "let", "built", "of", "this", ".", "built", ")", "if", "(", "built", ".", "matches", "(", "expr", ")", ")", "return", "[", "p", "(", "built", ".", "term", ")", "]", ";", "let", "found", "=", "this", ".", "tokens", ".", "getToken", "(", "expr", ")", ";", "if", "(", "found", ")", "return", "[", "p", "(", "found", ")", "]", ";", "for", "(", "let", "ext", "of", "this", ".", "externalTokens", ")", "{", "let", "found", "=", "ext", ".", "getToken", "(", "expr", ")", ";", "if", "(", "found", ")", "return", "[", "p", "(", "found", ")", "]", ";", "}", "for", "(", "let", "ext", "of", "this", ".", "externalSpecializers", ")", "{", "let", "found", "=", "ext", ".", "getToken", "(", "expr", ")", ";", "if", "(", "found", ")", "return", "[", "p", "(", "found", ")", "]", ";", "}", "let", "known", "=", "this", ".", "astRules", ".", "find", "(", "r", "=>", "r", ".", "rule", ".", "id", ".", "name", "==", "expr", ".", "id", ".", "name", ")", ";", "if", "(", "!", "known", ")", "return", "this", ".", "raise", "(", "`Reference to undefined rule '${", "expr", ".", "id", ".", "name", "}'`", ",", "expr", ".", "start", ")", ";", "if", "(", "known", ".", "rule", ".", "params", ".", "length", "!=", "expr", ".", "args", ".", "length", ")", "this", ".", "raise", "(", "`Wrong number or arguments for '${", "expr", ".", "id", ".", "name", "}'`", ",", "expr", ".", "start", ")", ";", "this", ".", "used", "(", "known", ".", "rule", ".", "id", ".", "name", ")", ";", "return", "[", "p", "(", "this", ".", "buildRule", "(", "known", ".", "rule", ",", "expr", ".", "args", ",", "known", ".", "skip", ")", ")", "]", ";", "}", "}", "normalizeRepeat", "(", "expr", ")", "{", "let", "known", "=", "this", ".", "built", ".", "find", "(", "b", "=>", "b", ".", "matchesRepeat", "(", "expr", ")", ")", ";", "if", "(", "known", ")", "return", "p", "(", "known", ".", "term", ")", ";", "let", "name", "=", "expr", ".", "expr", ".", "prec", "<", "expr", ".", "prec", "?", "`(${", "expr", ".", "expr", "})+`", ":", "`${", "expr", ".", "expr", "}+`", ";", "let", "term", "=", "this", ".", "terms", ".", "makeRepeat", "(", "this", ".", "terms", ".", "uniqueName", "(", "name", ")", ")", ";", "this", ".", "built", ".", "push", "(", "new", "BuiltRule", "(", "\"+\"", ",", "[", "expr", ".", "expr", "]", ",", "term", ")", ")", ";", "this", ".", "defineRule", "(", "term", ",", "this", ".", "normalizeExpr", "(", "expr", ".", "expr", ")", ".", "concat", "(", "p", "(", "term", ",", "term", ")", ")", ")", ";", "return", "p", "(", "term", ")", ";", "}", "normalizeSequence", "(", "expr", ")", "{", "let", "result", "=", "expr", ".", "exprs", ".", "map", "(", "e", "=>", "this", ".", "normalizeExpr", "(", "e", ")", ")", ";", "let", "builder", "=", "this", ";", "function", "complete", "(", "start", ",", "from", ",", "endConflicts", ")", "{", "let", "{", "here", ",", "atEnd", "}", "=", "builder", ".", "conflictsFor", "(", "expr", ".", "markers", "[", "from", "]", ")", ";", "if", "(", "from", "==", "result", ".", "length", ")", "return", "[", "start", ".", "withConflicts", "(", "start", ".", "terms", ".", "length", ",", "here", ".", "join", "(", "endConflicts", ")", ")", "]", ";", "let", "choices", "=", "[", "]", ";", "for", "(", "let", "choice", "of", "result", "[", "from", "]", ")", "{", "for", "(", "let", "full", "of", "complete", "(", "start", ".", "concat", "(", "choice", ")", ".", "withConflicts", "(", "start", ".", "terms", ".", "length", ",", "here", ")", ",", "from", "+", "1", ",", "endConflicts", ".", "join", "(", "atEnd", ")", ")", ")", "choices", ".", "push", "(", "full", ")", ";", "}", "return", "choices", ";", "}", "return", "complete", "(", "Parts", ".", "none", ",", "0", ",", "Conflicts", ".", "none", ")", ";", "}", "normalizeExpr", "(", "expr", ")", "{", "if", "(", "expr", "instanceof", "RepeatExpression", "&&", "expr", ".", "kind", "==", "\"?\"", ")", "{", "return", "[", "Parts", ".", "none", ",", "...", "this", ".", "normalizeExpr", "(", "expr", ".", "expr", ")", "]", ";", "}", "else", "if", "(", "expr", "instanceof", "RepeatExpression", ")", "{", "let", "repeated", "=", "this", ".", "normalizeRepeat", "(", "expr", ")", ";", "return", "expr", ".", "kind", "==", "\"+\"", "?", "[", "repeated", "]", ":", "[", "Parts", ".", "none", ",", "repeated", "]", ";", "}", "else", "if", "(", "expr", "instanceof", "ChoiceExpression", ")", "{", "return", "expr", ".", "exprs", ".", "reduce", "(", "(", "o", ",", "e", ")", "=>", "o", ".", "concat", "(", "this", ".", "normalizeExpr", "(", "e", ")", ")", ",", "[", "]", "as", "Parts", "[", "]", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "SequenceExpression", ")", "{", "return", "this", ".", "normalizeSequence", "(", "expr", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "LiteralExpression", ")", "{", "return", "[", "p", "(", "this", ".", "tokens", ".", "getLiteral", "(", "expr", ")", "!", ")", "]", ";", "}", "else", "if", "(", "expr", "instanceof", "NameExpression", ")", "{", "return", "this", ".", "resolve", "(", "expr", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "SpecializeExpression", ")", "{", "return", "[", "p", "(", "this", ".", "resolveSpecialization", "(", "expr", ")", ")", "]", ";", "}", "else", "if", "(", "expr", "instanceof", "InlineRuleExpression", ")", "{", "return", "[", "p", "(", "this", ".", "buildRule", "(", "expr", ".", "rule", ",", "none", ",", "this", ".", "currentSkip", "[", "this", ".", "currentSkip", ".", "length", "-", "1", "]", ",", "true", ")", ")", "]", ";", "}", "else", "{", "return", "this", ".", "raise", "(", "`This type of expression ('${", "expr", "}') may not occur in non-token rules`", ",", "expr", ".", "start", ")", ";", "}", "}", "buildRule", "(", "rule", ",", "args", ",", "skip", ",", "inline", "=", "false", ")", "{", "let", "expr", "=", "this", ".", "substituteArgs", "(", "rule", ".", "expr", ",", "args", ",", "rule", ".", "params", ")", ";", "let", "{", "name", ":", "nodeName", ",", "props", ",", "dynamicPrec", ",", "inline", ":", "explicitInline", ",", "group", ",", "exported", "}", "=", "this", ".", "nodeInfo", "(", "rule", ".", "props", "||", "none", ",", "inline", "?", "\"pg\"", ":", "\"pgi\"", ",", "rule", ".", "id", ".", "name", ",", "args", ",", "rule", ".", "params", ",", "rule", ".", "expr", ")", ";", "if", "(", "exported", "&&", "rule", ".", "params", ".", "length", ")", "this", ".", "warn", "(", "`Can't export parameterized rules`", ",", "rule", ".", "start", ")", ";", "if", "(", "exported", "&&", "inline", ")", "this", ".", "warn", "(", "`Can't export inline rule`", ",", "rule", ".", "start", ")", ";", "let", "name", "=", "this", ".", "newName", "(", "rule", ".", "id", ".", "name", "+", "(", "args", ".", "length", "?", "\"<\"", "+", "args", ".", "join", "(", "\",\"", ")", "+", "\">\"", ":", "\"\"", ")", ",", "nodeName", "||", "true", ",", "props", ")", ";", "if", "(", "explicitInline", ")", "name", ".", "inline", "=", "true", ";", "if", "(", "dynamicPrec", ")", "this", ".", "registerDynamicPrec", "(", "name", ",", "dynamicPrec", ")", ";", "if", "(", "(", "name", ".", "nodeType", "||", "exported", ")", "&&", "rule", ".", "params", ".", "length", "==", "0", ")", "{", "if", "(", "!", "nodeName", ")", "name", ".", "preserve", "=", "true", ";", "if", "(", "!", "inline", ")", "this", ".", "namedTerms", "[", "exported", "||", "rule", ".", "id", ".", "name", "]", "=", "name", ";", "}", "if", "(", "!", "inline", ")", "this", ".", "built", ".", "push", "(", "new", "BuiltRule", "(", "rule", ".", "id", ".", "name", ",", "args", ",", "name", ")", ")", ";", "this", ".", "currentSkip", ".", "push", "(", "skip", ")", ";", "this", ".", "defineRule", "(", "name", ",", "this", ".", "normalizeExpr", "(", "expr", ")", ")", ";", "this", ".", "currentSkip", ".", "pop", "(", ")", ";", "if", "(", "group", ")", "this", ".", "definedGroups", ".", "push", "(", "{", "name", ",", "group", ",", "rule", "}", ")", ";", "return", "name", ";", "}", "nodeInfo", "(", "props", ",", "allow", ",", "defaultName", "=", "null", ",", "args", "=", "none", ",", "params", "=", "none", ",", "expr", "?", ",", "defaultProps", "?", ")", "{", "let", "result", "=", "{", "}", ";", "let", "name", "=", "defaultName", "&&", "(", "allow", ".", "indexOf", "(", "\"a\"", ")", ">", "-", "1", "||", "!", "ignored", "(", "defaultName", ")", ")", "&&", "!", "/ /", ".", "test", "(", "defaultName", ")", "?", "defaultName", ":", "null", ";", "let", "dialect", "=", "null", ",", "dynamicPrec", "=", "0", ",", "inline", "=", "false", ",", "group", "=", "null", ",", "exported", "=", "null", ";", "for", "(", "let", "prop", "of", "props", ")", "{", "if", "(", "!", "prop", ".", "at", ")", "{", "if", "(", "!", "this", ".", "knownProps", "[", "prop", ".", "name", "]", ")", "{", "let", "builtin", "=", "[", "\"name\"", ",", "\"dialect\"", ",", "\"dynamicPrecedence\"", ",", "\"export\"", ",", "\"isGroup\"", "]", ".", "includes", "(", "prop", ".", "name", ")", "?", "` (did you mean '@${", "prop", ".", "name", "}'?)`", ":", "\"\"", ";", "this", ".", "raise", "(", "`Unknown prop name '${", "prop", ".", "name", "}'${", "builtin", "}`", ",", "prop", ".", "start", ")", ";", "}", "result", "[", "prop", ".", "name", "]", "=", "this", ".", "finishProp", "(", "prop", ",", "args", ",", "params", ")", ";", "}", "else", "if", "(", "prop", ".", "name", "==", "\"name\"", ")", "{", "name", "=", "this", ".", "finishProp", "(", "prop", ",", "args", ",", "params", ")", ";", "if", "(", "/ /", ".", "test", "(", "name", ")", ")", "this", ".", "raise", "(", "`Node names cannot have spaces ('${", "name", "}')`", ",", "prop", ".", "start", ")", ";", "}", "else", "if", "(", "prop", ".", "name", "==", "\"dialect\"", ")", "{", "if", "(", "allow", ".", "indexOf", "(", "\"d\"", ")", "<", "0", ")", "this", ".", "raise", "(", "\"Can't specify a dialect on non-token rules\"", ",", "props", "[", "0", "]", ".", "start", ")", ";", "if", "(", "prop", ".", "value", ".", "length", "!=", "1", "&&", "!", "prop", ".", "value", "[", "0", "]", ".", "value", ")", "this", ".", "raise", "(", "\"The '@dialect' rule prop must hold a plain string value\"", ")", ";", "let", "dialectID", "=", "this", ".", "dialects", ".", "indexOf", "(", "prop", ".", "value", "[", "0", "]", ".", "value", "!", ")", ";", "if", "(", "dialectID", "<", "0", ")", "this", ".", "raise", "(", "`Unknown dialect '${", "prop", ".", "value", "[", "0", "]", ".", "value", "}'`", ",", "prop", ".", "value", "[", "0", "]", ".", "start", ")", ";", "dialect", "=", "dialectID", ";", "}", "else", "if", "(", "prop", ".", "name", "==", "\"dynamicPrecedence\"", ")", "{", "if", "(", "allow", ".", "indexOf", "(", "\"p\"", ")", "<", "0", ")", "this", ".", "raise", "(", "\"Dynamic precedence can only be specified on nonterminals\"", ")", ";", "if", "(", "prop", ".", "value", ".", "length", "!=", "1", "||", "!", "/^-?(?:10|\\d)$/", ".", "test", "(", "prop", ".", "value", "[", "0", "]", ".", "value", "!", ")", ")", "this", ".", "raise", "(", "\"The '@dynamicPrecedence' rule prop must hold an integer between -10 and 10\"", ")", ";", "dynamicPrec", "=", "+", "prop", ".", "value", "[", "0", "]", ".", "value", "!", ";", "}", "else", "if", "(", "prop", ".", "name", "==", "\"inline\"", ")", "{", "if", "(", "prop", ".", "value", ".", "length", ")", "this", ".", "raise", "(", "\"'@inline' doesn't take a value\"", ",", "prop", ".", "value", "[", "0", "]", ".", "start", ")", ";", "if", "(", "allow", ".", "indexOf", "(", "\"i\"", ")", "<", "0", ")", "this", ".", "raise", "(", "\"Inline can only be specified on nonterminals\"", ")", ";", "inline", "=", "true", ";", "}", "else", "if", "(", "prop", ".", "name", "==", "\"isGroup\"", ")", "{", "if", "(", "allow", ".", "indexOf", "(", "\"g\"", ")", "<", "0", ")", "this", ".", "raise", "(", "\"'@isGroup' can only be specified on nonterminals\"", ")", ";", "group", "=", "prop", ".", "value", ".", "length", "?", "this", ".", "finishProp", "(", "prop", ",", "args", ",", "params", ")", ":", "defaultName", ";", "}", "else", "if", "(", "prop", ".", "name", "==", "\"export\"", ")", "{", "if", "(", "prop", ".", "value", ".", "length", ")", "exported", "=", "this", ".", "finishProp", "(", "prop", ",", "args", ",", "params", ")", ";", "else", "exported", "=", "defaultName", ";", "}", "else", "{", "this", ".", "raise", "(", "`Unknown built-in prop name '@${", "prop", ".", "name", "}'`", ",", "prop", ".", "start", ")", ";", "}", "}", "if", "(", "expr", "&&", "this", ".", "ast", ".", "autoDelim", "&&", "(", "name", "||", "hasProps", "(", "result", ")", ")", ")", "{", "let", "delim", "=", "this", ".", "findDelimiters", "(", "expr", ")", ";", "if", "(", "delim", ")", "{", "addToProp", "(", "delim", "[", "0", "]", ",", "\"closedBy\"", ",", "delim", "[", "1", "]", ".", "nodeName", "!", ")", ";", "addToProp", "(", "delim", "[", "1", "]", ",", "\"openedBy\"", ",", "delim", "[", "0", "]", ".", "nodeName", "!", ")", ";", "}", "}", "if", "(", "defaultProps", "&&", "hasProps", "(", "defaultProps", ")", ")", "{", "for", "(", "let", "prop", "in", "defaultProps", ")", "if", "(", "!", "(", "prop", "in", "result", ")", ")", "result", "[", "prop", "]", "=", "defaultProps", "[", "prop", "]", ";", "}", "if", "(", "hasProps", "(", "result", ")", "&&", "!", "name", ")", "this", ".", "raise", "(", "`Node has properties but no name`", ",", "props", ".", "length", "?", "props", "[", "0", "]", ".", "start", ":", "expr", "!", ".", "start", ")", ";", "if", "(", "inline", "&&", "(", "hasProps", "(", "result", ")", "||", "dialect", "||", "dynamicPrec", ")", ")", "this", ".", "raise", "(", "`Inline nodes can't have props, dynamic precedence, or a dialect`", ",", "props", "[", "0", "]", ".", "start", ")", ";", "if", "(", "inline", "&&", "name", ")", "name", "=", "null", ";", "return", "{", "name", ",", "props", ":", "result", ",", "dialect", ",", "dynamicPrec", ",", "inline", ",", "group", ",", "exported", "}", ";", "}", "finishProp", "(", "prop", ",", "args", ",", "params", ")", "{", "return", "prop", ".", "value", ".", "map", "(", "part", "=>", "{", "if", "(", "part", ".", "value", ")", "return", "part", ".", "value", ";", "let", "pos", "=", "params", ".", "findIndex", "(", "param", "=>", "param", ".", "name", "==", "part", ".", "name", ")", ";", "if", "(", "pos", "<", "0", ")", "this", ".", "raise", "(", "`Property refers to '${", "part", ".", "name", "}', but no parameter by that name is in scope`", ",", "part", ".", "start", ")", ";", "let", "expr", "=", "args", "[", "pos", "]", ";", "if", "(", "expr", "instanceof", "NameExpression", "&&", "!", "expr", ".", "args", ".", "length", "&&", "!", "expr", ".", "namespace", ")", "return", "expr", ".", "id", ".", "name", ";", "if", "(", "expr", "instanceof", "LiteralExpression", ")", "return", "expr", ".", "value", ";", "return", "this", ".", "raise", "(", "`Expression '${", "expr", "}' can not be used as part of a property value`", ",", "part", ".", "start", ")", ";", "}", ")", ".", "join", "(", "\"\"", ")", ";", "}", "resolveSpecialization", "(", "expr", ")", "{", "let", "type", "=", "expr", ".", "type", ";", "let", "{", "name", ",", "props", ",", "dialect", "}", "=", "this", ".", "nodeInfo", "(", "expr", ".", "props", ",", "\"d\"", ")", ";", "let", "terminal", "=", "this", ".", "normalizeExpr", "(", "expr", ".", "token", ")", ";", "if", "(", "terminal", ".", "length", "!=", "1", "||", "terminal", "[", "0", "]", ".", "terms", ".", "length", "!=", "1", "||", "!", "terminal", "[", "0", "]", ".", "terms", "[", "0", "]", ".", "terminal", ")", "this", ".", "raise", "(", "`The first argument to '${", "type", "}' must resolve to a token`", ",", "expr", ".", "token", ".", "start", ")", ";", "let", "values", ";", "if", "(", "expr", ".", "content", "instanceof", "LiteralExpression", ")", "values", "=", "[", "expr", ".", "content", ".", "value", "]", ";", "else", "if", "(", "(", "expr", ".", "content", "instanceof", "ChoiceExpression", ")", "&&", "expr", ".", "content", ".", "exprs", ".", "every", "(", "e", "=>", "e", "instanceof", "LiteralExpression", ")", ")", "values", "=", "expr", ".", "content", ".", "exprs", ".", "map", "(", "expr", "=>", "(", "expr", "as", "LiteralExpression", ")", ".", "value", ")", ";", "else", "return", "this", ".", "raise", "(", "`The second argument to '${", "expr", ".", "type", "}' must be a literal or choice of literals`", ",", "expr", ".", "content", ".", "start", ")", ";", "let", "term", "=", "terminal", "[", "0", "]", ".", "terms", "[", "0", "]", ",", "token", "=", "null", ";", "let", "table", "=", "this", ".", "specialized", "[", "term", ".", "name", "]", "||", "(", "this", ".", "specialized", "[", "term", ".", "name", "]", "=", "[", "]", ")", ";", "for", "(", "let", "value", "of", "values", ")", "{", "let", "known", "=", "table", ".", "find", "(", "sp", "=>", "sp", ".", "value", "==", "value", ")", ";", "if", "(", "known", "==", "null", ")", "{", "if", "(", "!", "token", ")", "{", "token", "=", "this", ".", "makeTerminal", "(", "term", ".", "name", "+", "\"/\"", "+", "JSON", ".", "stringify", "(", "value", ")", ",", "name", ",", "props", ")", ";", "if", "(", "dialect", "!=", "null", ")", "(", "this", ".", "tokens", ".", "byDialect", "[", "dialect", "]", "||", "(", "this", ".", "tokens", ".", "byDialect", "[", "dialect", "]", "=", "[", "]", ")", ")", ".", "push", "(", "token", ")", ";", "}", "table", ".", "push", "(", "{", "value", ",", "term", ":", "token", ",", "type", ",", "dialect", ",", "name", "}", ")", ";", "this", ".", "tokenOrigins", "[", "token", ".", "name", "]", "=", "{", "spec", ":", "term", "}", ";", "}", "else", "{", "if", "(", "known", ".", "type", "!=", "type", ")", "this", ".", "raise", "(", "`Conflicting specialization types for ${", "JSON", ".", "stringify", "(", "value", ")", "} of ${", "term", ".", "name", "} (${", "type", "} vs ${", "known", ".", "type", "})`", ",", "expr", ".", "start", ")", ";", "if", "(", "known", ".", "dialect", "!=", "dialect", ")", "this", ".", "raise", "(", "`Conflicting dialects for specialization ${", "JSON", ".", "stringify", "(", "value", ")", "} of ${", "term", ".", "name", "}`", ",", "expr", ".", "start", ")", ";", "if", "(", "known", ".", "name", "!=", "name", ")", "this", ".", "raise", "(", "`Conflicting names for specialization ${", "JSON", ".", "stringify", "(", "value", ")", "} of ${", "term", ".", "name", "}`", ",", "expr", ".", "start", ")", ";", "if", "(", "token", "&&", "known", ".", "term", "!=", "token", ")", "this", ".", "raise", "(", "`Conflicting specialization tokens for ${", "JSON", ".", "stringify", "(", "value", ")", "} of ${", "term", ".", "name", "}`", ",", "expr", ".", "start", ")", ";", "token", "=", "known", ".", "term", ";", "}", "}", "return", "token", "!", ";", "}", "findDelimiters", "(", "expr", ")", "{", "if", "(", "!", "(", "expr", "instanceof", "SequenceExpression", ")", "||", "expr", ".", "exprs", ".", "length", "<", "2", ")", "return", "null", ";", "let", "findToken", "=", "(", "expr", ")", ":", "{", "term", ":", "Term", ";", "str", ":", "string", ";", "}", "|", "null", "=>", "{", "if", "(", "expr", "instanceof", "LiteralExpression", ")", "return", "{", "term", ":", "this", ".", "tokens", ".", "getLiteral", "(", "expr", ")", ",", "str", ":", "expr", ".", "value", "}", ";", "if", "(", "expr", "instanceof", "NameExpression", "&&", "expr", ".", "args", ".", "length", "==", "0", ")", "{", "let", "rule", "=", "this", ".", "ast", ".", "rules", ".", "find", "(", "r", "=>", "r", ".", "id", ".", "name", "==", "expr", ".", "id", ".", "name", ")", ";", "if", "(", "rule", ")", "return", "findToken", "(", "rule", ".", "expr", ")", ";", "let", "token", "=", "this", ".", "tokens", ".", "rules", ".", "find", "(", "r", "=>", "r", ".", "id", ".", "name", "==", "expr", ".", "id", ".", "name", ")", ";", "if", "(", "token", "&&", "token", ".", "expr", "instanceof", "LiteralExpression", ")", "return", "{", "term", ":", "this", ".", "tokens", ".", "getToken", "(", "expr", ")", "!", ",", "str", ":", "token", ".", "expr", ".", "value", "}", ";", "}", "return", "null", ";", "}", ";", "let", "lastToken", "=", "findToken", "(", "expr", ".", "exprs", "[", "expr", ".", "exprs", ".", "length", "-", "1", "]", ")", ";", "if", "(", "!", "lastToken", "||", "!", "lastToken", ".", "term", ".", "nodeName", ")", "return", "null", ";", "const", "brackets", "=", "[", "\"()\"", ",", "\"[]\"", ",", "\"{}\"", ",", "\"<>\"", "]", ";", "let", "bracket", "=", "brackets", ".", "find", "(", "b", "=>", "lastToken", "!", ".", "str", ".", "indexOf", "(", "b", "[", "1", "]", ")", ">", "-", "1", "&&", "lastToken", "!", ".", "str", ".", "indexOf", "(", "b", "[", "0", "]", ")", "<", "0", ")", ";", "if", "(", "!", "bracket", ")", "return", "null", ";", "let", "firstToken", "=", "findToken", "(", "expr", ".", "exprs", "[", "0", "]", ")", ";", "if", "(", "!", "firstToken", "||", "!", "firstToken", ".", "term", ".", "nodeName", "||", "firstToken", ".", "str", ".", "indexOf", "(", "bracket", "[", "0", "]", ")", "<", "0", "||", "firstToken", ".", "str", ".", "indexOf", "(", "bracket", "[", "1", "]", ")", ">", "-", "1", ")", "return", "null", ";", "return", "[", "firstToken", ".", "term", ",", "lastToken", ".", "term", "]", ";", "}", "registerDynamicPrec", "(", "term", ",", "prec", ")", "{", "this", ".", "dynamicRulePrecedences", ".", "push", "(", "{", "rule", ":", "term", ",", "prec", "}", ")", ";", "term", ".", "preserve", "=", "true", ";", "}", "defineGroup", "(", "rule", ",", "group", ",", "ast", ")", "{", "let", "recur", "=", "[", "]", ";", "let", "getNamed", "=", "(", "rule", ")", ":", "Term", "[", "]", "=>", "{", "if", "(", "rule", ".", "nodeName", ")", "return", "[", "rule", "]", ";", "if", "(", "recur", ".", "includes", "(", "rule", ")", ")", "this", ".", "raise", "(", "`Rule '${", "ast", ".", "id", ".", "name", "}' cannot define a group because it contains a non-named recursive rule ('${", "rule", ".", "name", "}')`", ",", "ast", ".", "start", ")", ";", "let", "result", "=", "[", "]", ";", "recur", ".", "push", "(", "rule", ")", ";", "for", "(", "let", "r", "of", "this", ".", "rules", ")", "if", "(", "r", ".", "name", "==", "rule", ")", "{", "let", "names", "=", "r", ".", "parts", ".", "map", "(", "getNamed", ")", ".", "filter", "(", "x", "=>", "x", ".", "length", ")", ";", "if", "(", "names", ".", "length", ">", "1", ")", "this", ".", "raise", "(", "`Rule '${", "ast", ".", "id", ".", "name", "}' cannot define a group because some choices produce multiple named nodes`", ",", "ast", ".", "start", ")", ";", "if", "(", "names", ".", "length", "==", "1", ")", "for", "(", "let", "n", "of", "names", "[", "0", "]", ")", "result", ".", "push", "(", "n", ")", ";", "}", "recur", ".", "pop", "(", ")", ";", "return", "result", ";", "}", ";", "for", "(", "let", "name", "of", "getNamed", "(", "rule", ")", ")", "name", ".", "props", "[", "\"group\"", "]", "=", "(", "name", ".", "props", "[", "\"group\"", "]", "?.", "split", "(", "\" \"", ")", "||", "[", "]", ")", ".", "concat", "(", "group", ")", ".", "sort", "(", ")", ".", "join", "(", "\" \"", ")", ";", "}", "checkGroups", "(", ")", "{", "let", "groups", "=", "Object", ".", "create", "(", "null", ")", ",", "nodeNames", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "term", "of", "this", ".", "terms", ".", "terms", ")", "if", "(", "term", ".", "nodeName", ")", "{", "nodeNames", "[", "term", ".", "nodeName", "]", "=", "true", ";", "if", "(", "term", ".", "props", "[", "\"group\"", "]", ")", "for", "(", "let", "group", "of", "term", ".", "props", "[", "\"group\"", "]", ".", "split", "(", "\" \"", ")", ")", "{", ";", "(", "groups", "[", "group", "]", "||", "(", "groups", "[", "group", "]", "=", "[", "]", ")", ")", ".", "push", "(", "term", ")", ";", "}", "}", "let", "names", "=", "Object", ".", "keys", "(", "groups", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "names", ".", "length", ";", "i", "++", ")", "{", "let", "name", "=", "names", "[", "i", "]", ",", "terms", "=", "groups", "[", "name", "]", ";", "if", "(", "nodeNames", "[", "name", "]", ")", "this", ".", "warn", "(", "`Group name '${", "name", "}' conflicts with a node of the same name`", ")", ";", "for", "(", "let", "j", "=", "i", "+", "1", ";", "j", "<", "names", ".", "length", ";", "j", "++", ")", "{", "let", "other", "=", "groups", "[", "names", "[", "j", "]", "]", ";", "if", "(", "terms", ".", "some", "(", "t", "=>", "other", ".", "includes", "(", "t", ")", ")", "&&", "(", "terms", ".", "length", ">", "other", ".", "length", "?", "other", ".", "some", "(", "t", "=>", "!", "terms", ".", "includes", "(", "t", ")", ")", ":", "terms", ".", "some", "(", "t", "=>", "!", "other", ".", "includes", "(", "t", ")", ")", ")", ")", "this", ".", "warn", "(", "`Groups '${", "name", "}' and '${", "names", "[", "j", "]", "}' overlap without one being a superset of the other`", ")", ";", "}", "}", "}", "}", "const", "MinSharedActions", "=", "5", ";", "type", "SharedActions", "=", "{", "actions", ":", "readonly", "(", "Shift", "|", "Reduce", ")", "[", "]", ";", "addr", ":", "number", ";", "}", ";", "class", "FinishStateContext", "{", "sharedActions", ":", "SharedActions", "[", "]", "=", "[", "]", ";", "constructor", "(", "readonly", "tokenizers", ",", "readonly", "data", ",", "readonly", "stateArray", ",", "readonly", "skipData", ",", "readonly", "skipInfo", ",", "readonly", "states", ",", "readonly", "builder", ")", "{", "}", "findSharedActions", "(", "state", ")", "{", "if", "(", "state", ".", "actions", ".", "length", "<", "MinSharedActions", ")", "return", "null", ";", "let", "found", "=", "null", ";", "for", "(", "let", "shared", "of", "this", ".", "sharedActions", ")", "{", "if", "(", "(", "!", "found", "||", "shared", ".", "actions", ".", "length", ">", "found", ".", "actions", ".", "length", ")", "&&", "shared", ".", "actions", ".", "every", "(", "a", "=>", "state", ".", "actions", ".", "some", "(", "b", "=>", "b", ".", "eq", "(", "a", ")", ")", ")", ")", "found", "=", "shared", ";", "}", "if", "(", "found", ")", "return", "found", ";", "let", "max", "=", "null", ",", "scratch", "=", "[", "]", ";", "for", "(", "let", "i", "=", "state", ".", "id", "+", "1", ";", "i", "<", "this", ".", "states", ".", "length", ";", "i", "++", ")", "{", "let", "other", "=", "this", ".", "states", "[", "i", "]", ",", "fill", "=", "0", ";", "if", "(", "other", ".", "defaultReduce", "||", "other", ".", "actions", ".", "length", "<", "MinSharedActions", ")", "continue", ";", "for", "(", "let", "a", "of", "state", ".", "actions", ")", "for", "(", "let", "b", "of", "other", ".", "actions", ")", "if", "(", "a", ".", "eq", "(", "b", ")", ")", "scratch", "[", "fill", "++", "]", "=", "a", ";", "if", "(", "fill", ">=", "MinSharedActions", "&&", "(", "!", "max", "||", "max", ".", "length", "<", "fill", ")", ")", "{", "max", "=", "scratch", ";", "scratch", "=", "[", "]", ";", "}", "}", "if", "(", "!", "max", ")", "return", "null", ";", "let", "result", "=", "{", "actions", ":", "max", ",", "addr", ":", "this", ".", "storeActions", "(", "max", ",", "-", "1", ",", "null", ")", "}", ";", "this", ".", "sharedActions", ".", "push", "(", "result", ")", ";", "return", "result", ";", "}", "storeActions", "(", "actions", ",", "skipReduce", ",", "shared", ")", "{", "if", "(", "skipReduce", "<", "0", "&&", "shared", "&&", "shared", ".", "actions", ".", "length", "==", "actions", ".", "length", ")", "return", "shared", ".", "addr", ";", "let", "data", "=", "[", "]", ";", "for", "(", "let", "action", "of", "actions", ")", "{", "if", "(", "shared", "&&", "shared", ".", "actions", ".", "some", "(", "a", "=>", "a", ".", "eq", "(", "action", ")", ")", ")", "continue", ";", "if", "(", "action", "instanceof", "Shift", ")", "{", "data", ".", "push", "(", "action", ".", "term", ".", "id", ",", "action", ".", "target", ".", "id", ",", "0", ")", ";", "}", "else", "{", "let", "code", "=", "reduceAction", "(", "action", ".", "rule", ",", "this", ".", "skipInfo", ")", ";", "if", "(", "code", "!=", "skipReduce", ")", "data", ".", "push", "(", "action", ".", "term", ".", "id", ",", "code", "&", "Action", ".", "ValueMask", ",", "code", ">>", "16", ")", ";", "}", "}", "data", ".", "push", "(", "Seq", ".", "End", ")", ";", "if", "(", "skipReduce", ">", "-", "1", ")", "data", ".", "push", "(", "Seq", ".", "Other", ",", "skipReduce", "&", "Action", ".", "ValueMask", ",", "skipReduce", ">>", "16", ")", ";", "else", "if", "(", "shared", ")", "data", ".", "push", "(", "Seq", ".", "Next", ",", "shared", ".", "addr", "&", "0xffff", ",", "shared", ".", "addr", ">>", "16", ")", ";", "else", "data", ".", "push", "(", "Seq", ".", "Done", ")", ";", "return", "this", ".", "data", ".", "storeArray", "(", "data", ")", ";", "}", "finish", "(", "state", ",", "isSkip", ",", "forcedReduce", ")", "{", "let", "b", "=", "this", ".", "builder", ";", "let", "skipID", "=", "b", ".", "skipRules", ".", "indexOf", "(", "state", ".", "skip", ")", ";", "let", "skipTable", "=", "this", ".", "skipData", "[", "skipID", "]", ",", "skipTerms", "=", "this", ".", "skipInfo", "[", "skipID", "]", ".", "startTokens", ";", "let", "defaultReduce", "=", "state", ".", "defaultReduce", "?", "reduceAction", "(", "state", ".", "defaultReduce", ",", "this", ".", "skipInfo", ")", ":", "0", ";", "let", "flags", "=", "isSkip", "?", "StateFlag", ".", "Skipped", ":", "0", ";", "let", "skipReduce", "=", "-", "1", ",", "shared", "=", "null", ";", "if", "(", "defaultReduce", "==", "0", ")", "{", "for", "(", "const", "action", "of", "state", ".", "actions", ")", "if", "(", "action", "instanceof", "Reduce", "&&", "action", ".", "term", ".", "eof", "&&", "this", ".", "skipInfo", ".", "some", "(", "i", "=>", "i", ".", "rule", "==", "action", ".", "rule", ".", "name", ")", ")", "skipReduce", "=", "reduceAction", "(", "action", ".", "rule", ",", "this", ".", "skipInfo", ")", ";", "if", "(", "skipReduce", "<", "0", ")", "shared", "=", "this", ".", "findSharedActions", "(", "state", ")", ";", "}", "if", "(", "state", ".", "set", ".", "some", "(", "p", "=>", "p", ".", "rule", ".", "name", ".", "top", "&&", "p", ".", "pos", "==", "p", ".", "rule", ".", "parts", ".", "length", ")", ")", "flags", "|=", "StateFlag", ".", "Accepting", ";", "let", "external", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "state", ".", "actions", ".", "length", "+", "skipTerms", ".", "length", ";", "i", "++", ")", "{", "let", "term", "=", "i", "<", "state", ".", "actions", ".", "length", "?", "state", ".", "actions", "[", "i", "]", ".", "term", ":", "skipTerms", "[", "i", "-", "state", ".", "actions", ".", "length", "]", ";", "for", "(", ";", ";", ")", "{", "let", "orig", "=", "b", ".", "tokenOrigins", "[", "term", ".", "name", "]", ";", "if", "(", "orig", "&&", "orig", ".", "spec", ")", "{", "term", "=", "orig", ".", "spec", ";", "continue", ";", "}", "if", "(", "orig", "&&", "(", "orig", ".", "external", "instanceof", "ExternalTokenSet", ")", ")", "addToSet", "(", "external", ",", "orig", ".", "external", ".", "ast", ")", ";", "break", ";", "}", "}", "external", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "start", "-", "b", ".", "start", ")", ";", "let", "tokenizerMask", "=", "0", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "this", ".", "tokenizers", ".", "length", ";", "i", "++", ")", "{", "let", "tok", "=", "this", ".", "tokenizers", "[", "i", "]", ";", "if", "(", "tok", "instanceof", "ExternalTokenDeclaration", "?", "external", ".", "includes", "(", "tok", ")", ":", "tok", ".", "id", "==", "state", ".", "tokenGroup", ")", "tokenizerMask", "|=", "(", "1", "<<", "i", ")", ";", "}", "let", "base", "=", "state", ".", "id", "*", "ParseState", ".", "Size", ";", "this", ".", "stateArray", "[", "base", "+", "ParseState", ".", "Flags", "]", "=", "flags", ";", "this", ".", "stateArray", "[", "base", "+", "ParseState", ".", "Actions", "]", "=", "this", ".", "storeActions", "(", "defaultReduce", "?", "none", ":", "state", ".", "actions", ",", "skipReduce", ",", "shared", ")", ";", "this", ".", "stateArray", "[", "base", "+", "ParseState", ".", "Skip", "]", "=", "skipTable", ";", "this", ".", "stateArray", "[", "base", "+", "ParseState", ".", "TokenizerMask", "]", "=", "tokenizerMask", ";", "this", ".", "stateArray", "[", "base", "+", "ParseState", ".", "DefaultReduce", "]", "=", "defaultReduce", ";", "this", ".", "stateArray", "[", "base", "+", "ParseState", ".", "ForcedReduce", "]", "=", "forcedReduce", ";", "}", "}", "function", "addToProp", "(", "term", ",", "prop", ",", "value", ")", "{", "let", "cur", "=", "term", ".", "props", "[", "prop", "]", ";", "if", "(", "!", "cur", "||", "cur", ".", "split", "(", "\" \"", ")", ".", "indexOf", "(", "value", ")", "<", "0", ")", "term", ".", "props", "[", "prop", "]", "=", "cur", "?", "cur", "+", "\" \"", "+", "value", ":", "value", ";", "}", "function", "buildSpecializeTable", "(", "spec", ")", "{", "let", "table", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "{", "value", ",", "term", ",", "type", "}", "of", "spec", ")", "{", "let", "code", "=", "type", "==", "\"specialize\"", "?", "Specialize", ".", "Specialize", ":", "Specialize", ".", "Extend", ";", "table", "[", "value", "]", "=", "(", "term", ".", "id", "<<", "1", ")", "|", "code", ";", "}", "return", "table", ";", "}", "function", "reduceAction", "(", "rule", ",", "skipInfo", ",", "depth", "=", "rule", ".", "parts", ".", "length", ")", "{", "return", "rule", ".", "name", ".", "id", "|", "Action", ".", "ReduceFlag", "|", "(", "rule", ".", "isRepeatWrap", "&&", "depth", "==", "rule", ".", "parts", ".", "length", "?", "Action", ".", "RepeatFlag", ":", "0", ")", "|", "(", "skipInfo", ".", "some", "(", "i", "=>", "i", ".", "rule", "==", "rule", ".", "name", ")", "?", "Action", ".", "StayFlag", ":", "0", ")", "|", "(", "depth", "<<", "Action", ".", "ReduceDepthShift", ")", ";", "}", "function", "findArray", "(", "data", ",", "value", ")", "{", "search", ":", "for", "(", "let", "i", "=", "0", ";", ";", ")", "{", "let", "next", "=", "data", ".", "indexOf", "(", "value", "[", "0", "]", ",", "i", ")", ";", "if", "(", "next", "==", "-", "1", "||", "next", "+", "value", ".", "length", ">", "data", ".", "length", ")", "break", ";", "for", "(", "let", "j", "=", "1", ";", "j", "<", "value", ".", "length", ";", "j", "++", ")", "{", "if", "(", "value", "[", "j", "]", "!=", "data", "[", "next", "+", "j", "]", ")", "{", "i", "=", "next", "+", "1", ";", "continue", "search", ";", "}", "}", "return", "next", ";", "}", "return", "-", "1", ";", "}", "function", "findSkipStates", "(", "table", ",", "startRules", ")", "{", "let", "nonSkip", "=", "Object", ".", "create", "(", "null", ")", ";", "let", "work", "=", "[", "]", ";", "let", "add", "=", "(", "state", ")", "=>", "{", "if", "(", "!", "nonSkip", "[", "state", ".", "id", "]", ")", "{", "nonSkip", "[", "state", ".", "id", "]", "=", "true", ";", "work", ".", "push", "(", "state", ")", ";", "}", "}", ";", "for", "(", "let", "state", "of", "table", ")", "if", "(", "state", ".", "startRule", "&&", "startRules", ".", "includes", "(", "state", ".", "startRule", ")", ")", "add", "(", "state", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "work", ".", "length", ";", "i", "++", ")", "{", "for", "(", "let", "a", "of", "work", "[", "i", "]", ".", "actions", ")", "if", "(", "a", "instanceof", "Shift", ")", "add", "(", "a", ".", "target", ")", ";", "for", "(", "let", "a", "of", "work", "[", "i", "]", ".", "goto", ")", "add", "(", "a", ".", "target", ")", ";", "}", "return", "(", "id", ")", "=>", "!", "nonSkip", "[", "id", "]", ";", "}", "class", "DataBuilder", "{", "data", ":", "number", "[", "]", "=", "[", "]", ";", "storeArray", "(", "data", ")", "{", "let", "found", "=", "findArray", "(", "this", ".", "data", ",", "data", ")", ";", "if", "(", "found", ">", "-", "1", ")", "return", "found", ";", "let", "pos", "=", "this", ".", "data", ".", "length", ";", "for", "(", "let", "num", "of", "data", ")", "this", ".", "data", ".", "push", "(", "num", ")", ";", "return", "pos", ";", "}", "finish", "(", ")", "{", "return", "Uint16Array", ".", "from", "(", "this", ".", "data", ")", ";", "}", "}", "function", "computeGotoTable", "(", "states", ")", "{", "let", "goto", "=", "{", "}", ";", "let", "maxTerm", "=", "0", ";", "for", "(", "let", "state", "of", "states", ")", "{", "for", "(", "let", "entry", "of", "state", ".", "goto", ")", "{", "maxTerm", "=", "Math", ".", "max", "(", "entry", ".", "term", ".", "id", ",", "maxTerm", ")", ";", "let", "set", "=", "goto", "[", "entry", ".", "term", ".", "id", "]", "||", "(", "goto", "[", "entry", ".", "term", ".", "id", "]", "=", "{", "}", ")", ";", "(", "set", "[", "entry", ".", "target", ".", "id", "]", "||", "(", "set", "[", "entry", ".", "target", ".", "id", "]", "=", "[", "]", ")", ")", ".", "push", "(", "state", ".", "id", ")", ";", "}", "}", "let", "data", "=", "new", "DataBuilder", ";", "let", "index", "=", "[", "]", ";", "let", "offset", "=", "maxTerm", "+", "2", ";", "for", "(", "let", "term", "=", "0", ";", "term", "<=", "maxTerm", ";", "term", "++", ")", "{", "let", "entries", "=", "goto", "[", "term", "]", ";", "if", "(", "!", "entries", ")", "{", "index", ".", "push", "(", "1", ")", ";", "continue", ";", "}", "let", "termTable", "=", "[", "]", ";", "let", "keys", "=", "Object", ".", "keys", "(", "entries", ")", ";", "for", "(", "let", "target", "of", "keys", ")", "{", "let", "list", "=", "entries", "[", "target", "as", "any", "]", ";", "termTable", ".", "push", "(", "(", "target", "==", "keys", "[", "keys", ".", "length", "-", "1", "]", "?", "1", ":", "0", ")", "+", "(", "list", ".", "length", "<<", "1", ")", ")", ";", "termTable", ".", "push", "(", "+", "target", ")", ";", "for", "(", "let", "source", "of", "list", ")", "termTable", ".", "push", "(", "source", ")", ";", "}", "index", ".", "push", "(", "data", ".", "storeArray", "(", "termTable", ")", "+", "offset", ")", ";", "}", "if", "(", "index", ".", "some", "(", "n", "=>", "n", ">", "0xffff", ")", ")", "throw", "new", "GenError", "(", "\"Goto table too large\"", ")", ";", "return", "Uint16Array", ".", "from", "(", "[", "maxTerm", "+", "1", ",", "...", "index", ",", "...", "data", ".", "data", "]", ")", ";", "}", "class", "TokenGroup", "{", "constructor", "(", "readonly", "tokens", ",", "readonly", "id", ")", "{", "}", "}", "function", "addToSet", "<", "T", ">", "(", "set", ",", "value", ")", "{", "if", "(", "!", "set", ".", "includes", "(", "value", ")", ")", "set", ".", "push", "(", "value", ")", ";", "}", "function", "buildTokenMasks", "(", "groups", ")", "{", "let", "masks", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "group", "of", "groups", ")", "{", "let", "groupMask", "=", "1", "<<", "group", ".", "id", ";", "for", "(", "let", "term", "of", "group", ".", "tokens", ")", "{", "masks", "[", "term", ".", "id", "]", "=", "(", "masks", "[", "term", ".", "id", "]", "||", "0", ")", "|", "groupMask", ";", "}", "}", "return", "masks", ";", "}", "interface", "Namespace", "{", "resolve", "(", "expr", ",", "builder", ")", ":", "Parts", "[", "]", ";", "}", "class", "TokenArg", "{", "constructor", "(", "readonly", "name", ",", "readonly", "expr", ",", "readonly", "scope", ")", "{", "}", "}", "class", "BuildingRule", "{", "constructor", "(", "readonly", "name", ",", "readonly", "start", ",", "readonly", "to", ",", "readonly", "args", ")", "{", "}", "}", "class", "TokenSet", "{", "startState", ":", "State", "=", "new", "State", ";", "built", ":", "BuiltRule", "[", "]", "=", "[", "]", ";", "building", ":", "BuildingRule", "[", "]", "=", "[", "]", ";", "rules", ":", "readonly", "RuleDeclaration", "[", "]", ";", "byDialect", ":", "{", "[", "dialect", "]", ":", "Term", "[", "]", ";", "}", "=", "Object", ".", "create", "(", "null", ")", ";", "precedenceRelations", ":", "readonly", "{", "term", ":", "Term", ";", "after", ":", "readonly", "Term", "[", "]", ";", "}", "[", "]", "=", "[", "]", ";", "explicitConflicts", ":", "{", "a", ":", "Term", ";", "b", ":", "Term", ";", "}", "[", "]", "=", "[", "]", ";", "constructor", "(", "readonly", "b", ",", "readonly", "ast", ")", "{", "this", ".", "rules", "=", "ast", "?", "ast", ".", "rules", ":", "none", ";", "for", "(", "let", "rule", "of", "this", ".", "rules", ")", "this", ".", "b", ".", "unique", "(", "rule", ".", "id", ")", ";", "}", "getToken", "(", "expr", ")", "{", "for", "(", "let", "built", "of", "this", ".", "built", ")", "if", "(", "built", ".", "matches", "(", "expr", ")", ")", "return", "built", ".", "term", ";", "let", "name", "=", "expr", ".", "id", ".", "name", ";", "let", "rule", "=", "this", ".", "rules", ".", "find", "(", "r", "=>", "r", ".", "id", ".", "name", "==", "name", ")", ";", "if", "(", "!", "rule", ")", "return", "null", ";", "let", "{", "name", ":", "nodeName", ",", "props", ",", "dialect", ",", "exported", "}", "=", "this", ".", "b", ".", "nodeInfo", "(", "rule", ".", "props", ",", "\"d\"", ",", "name", ",", "expr", ".", "args", ",", "rule", ".", "params", ".", "length", "!=", "expr", ".", "args", ".", "length", "?", "none", ":", "rule", ".", "params", ")", ";", "let", "term", "=", "this", ".", "b", ".", "makeTerminal", "(", "expr", ".", "toString", "(", ")", ",", "nodeName", ",", "props", ")", ";", "if", "(", "dialect", "!=", "null", ")", "(", "this", ".", "byDialect", "[", "dialect", "]", "||", "(", "this", ".", "byDialect", "[", "dialect", "]", "=", "[", "]", ")", ")", ".", "push", "(", "term", ")", ";", "if", "(", "(", "term", ".", "nodeType", "||", "exported", ")", "&&", "rule", ".", "params", ".", "length", "==", "0", ")", "{", "if", "(", "!", "term", ".", "nodeType", ")", "term", ".", "preserve", "=", "true", ";", "this", ".", "b", ".", "namedTerms", "[", "exported", "||", "name", "]", "=", "term", ";", "}", "this", ".", "buildRule", "(", "rule", ",", "expr", ",", "this", ".", "startState", ",", "new", "State", "(", "[", "term", "]", ")", ")", ";", "this", ".", "built", ".", "push", "(", "new", "BuiltRule", "(", "name", ",", "expr", ".", "args", ",", "term", ")", ")", ";", "return", "term", ";", "}", "getLiteral", "(", "expr", ")", "{", "let", "id", "=", "JSON", ".", "stringify", "(", "expr", ".", "value", ")", ";", "for", "(", "let", "built", "of", "this", ".", "built", ")", "if", "(", "built", ".", "id", "==", "id", ")", "return", "built", ".", "term", ";", "let", "name", "=", "null", ",", "props", "=", "{", "}", ",", "dialect", "=", "null", ",", "exported", "=", "null", ";", "let", "decl", "=", "this", ".", "ast", "?", "this", ".", "ast", ".", "literals", ".", "find", "(", "l", "=>", "l", ".", "literal", "==", "expr", ".", "value", ")", ":", "null", ";", "if", "(", "decl", ")", "(", "{", "name", ",", "props", ",", "dialect", ",", "exported", "}", "=", "this", ".", "b", ".", "nodeInfo", "(", "decl", ".", "props", ",", "\"da\"", ",", "expr", ".", "value", ")", ")", ";", "let", "term", "=", "this", ".", "b", ".", "makeTerminal", "(", "id", ",", "name", ",", "props", ")", ";", "if", "(", "dialect", "!=", "null", ")", "(", "this", ".", "byDialect", "[", "dialect", "]", "||", "(", "this", ".", "byDialect", "[", "dialect", "]", "=", "[", "]", ")", ")", ".", "push", "(", "term", ")", ";", "if", "(", "exported", ")", "this", ".", "b", ".", "namedTerms", "[", "exported", "]", "=", "term", ";", "this", ".", "build", "(", "expr", ",", "this", ".", "startState", ",", "new", "State", "(", "[", "term", "]", ")", ",", "none", ")", ";", "this", ".", "built", ".", "push", "(", "new", "BuiltRule", "(", "id", ",", "none", ",", "term", ")", ")", ";", "return", "term", ";", "}", "buildRule", "(", "rule", ",", "expr", ",", "from", ",", "to", ",", "args", "=", "none", ")", "{", "let", "name", "=", "expr", ".", "id", ".", "name", ";", "if", "(", "rule", ".", "params", ".", "length", "!=", "expr", ".", "args", ".", "length", ")", "this", ".", "b", ".", "raise", "(", "`Incorrect number of arguments for token '${", "name", "}'`", ",", "expr", ".", "start", ")", ";", "let", "building", "=", "this", ".", "building", ".", "find", "(", "b", "=>", "b", ".", "name", "==", "name", "&&", "exprsEq", "(", "expr", ".", "args", ",", "b", ".", "args", ")", ")", ";", "if", "(", "building", ")", "{", "if", "(", "building", ".", "to", "==", "to", ")", "{", "from", ".", "nullEdge", "(", "building", ".", "start", ")", ";", "return", ";", "}", "let", "lastIndex", "=", "this", ".", "building", ".", "length", "-", "1", ";", "while", "(", "this", ".", "building", "[", "lastIndex", "]", ".", "name", "!=", "name", ")", "lastIndex", "--", ";", "this", ".", "b", ".", "raise", "(", "`Invalid (non-tail) recursion in token rules: ${", "this", ".", "building", ".", "slice", "(", "lastIndex", ")", ".", "map", "(", "b", "=>", "b", ".", "name", ")", ".", "join", "(", "\" -> \"", ")", "}`", ",", "expr", ".", "start", ")", ";", "}", "this", ".", "b", ".", "used", "(", "rule", ".", "id", ".", "name", ")", ";", "let", "start", "=", "new", "State", ";", "from", ".", "nullEdge", "(", "start", ")", ";", "this", ".", "building", ".", "push", "(", "new", "BuildingRule", "(", "name", ",", "start", ",", "to", ",", "expr", ".", "args", ")", ")", ";", "this", ".", "build", "(", "this", ".", "b", ".", "substituteArgs", "(", "rule", ".", "expr", ",", "expr", ".", "args", ",", "rule", ".", "params", ")", ",", "start", ",", "to", ",", "expr", ".", "args", ".", "map", "(", "(", "e", ",", "i", ")", "=>", "new", "TokenArg", "(", "rule", "!", ".", "params", "[", "i", "]", ".", "name", ",", "e", ",", "args", ")", ")", ")", ";", "this", ".", "building", ".", "pop", "(", ")", ";", "}", "build", "(", "expr", ",", "from", ",", "to", ",", "args", ")", "{", "if", "(", "expr", "instanceof", "NameExpression", ")", "{", "if", "(", "expr", ".", "namespace", ")", "{", "if", "(", "expr", ".", "namespace", ".", "name", "==", "\"std\"", ")", "return", "this", ".", "buildStd", "(", "expr", ",", "from", ",", "to", ")", ";", "this", ".", "b", ".", "raise", "(", "`Unknown namespace '${", "expr", ".", "namespace", ".", "name", "}'`", ",", "expr", ".", "start", ")", ";", "}", "let", "name", "=", "expr", ".", "id", ".", "name", ",", "arg", "=", "args", ".", "find", "(", "a", "=>", "a", ".", "name", "==", "name", ")", ";", "if", "(", "arg", ")", "return", "this", ".", "build", "(", "arg", ".", "expr", ",", "from", ",", "to", ",", "arg", ".", "scope", ")", ";", "let", "rule", "=", "this", ".", "rules", ".", "find", "(", "r", "=>", "r", ".", "id", ".", "name", "==", "name", ")", ";", "if", "(", "!", "rule", ")", "return", "this", ".", "b", ".", "raise", "(", "`Reference to rule '${", "expr", ".", "id", ".", "name", "}', which isn't found in this token group`", ",", "expr", ".", "start", ")", ";", "this", ".", "buildRule", "(", "rule", ",", "expr", ",", "from", ",", "to", ",", "args", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "ChoiceExpression", ")", "{", "for", "(", "let", "choice", "of", "expr", ".", "exprs", ")", "this", ".", "build", "(", "choice", ",", "from", ",", "to", ",", "args", ")", ";", "}", "else", "if", "(", "isEmpty", "(", "expr", ")", ")", "{", "from", ".", "nullEdge", "(", "to", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "SequenceExpression", ")", "{", "let", "conflict", "=", "expr", ".", "markers", ".", "find", "(", "c", "=>", "c", ".", "length", ">", "0", ")", ";", "if", "(", "conflict", ")", "this", ".", "b", ".", "raise", "(", "\"Conflict marker in token expression\"", ",", "conflict", "[", "0", "]", ".", "start", ")", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "expr", ".", "exprs", ".", "length", ";", "i", "++", ")", "{", "let", "next", "=", "i", "==", "expr", ".", "exprs", ".", "length", "-", "1", "?", "to", ":", "new", "State", ";", "this", ".", "build", "(", "expr", ".", "exprs", "[", "i", "]", ",", "from", ",", "next", ",", "args", ")", ";", "from", "=", "next", ";", "}", "}", "else", "if", "(", "expr", "instanceof", "RepeatExpression", ")", "{", "if", "(", "expr", ".", "kind", "==", "\"*\"", ")", "{", "let", "loop", "=", "new", "State", ";", "from", ".", "nullEdge", "(", "loop", ")", ";", "this", ".", "build", "(", "expr", ".", "expr", ",", "loop", ",", "loop", ",", "args", ")", ";", "loop", ".", "nullEdge", "(", "to", ")", ";", "}", "else", "if", "(", "expr", ".", "kind", "==", "\"+\"", ")", "{", "let", "loop", "=", "new", "State", ";", "this", ".", "build", "(", "expr", ".", "expr", ",", "from", ",", "loop", ",", "args", ")", ";", "this", ".", "build", "(", "expr", ".", "expr", ",", "loop", ",", "loop", ",", "args", ")", ";", "loop", ".", "nullEdge", "(", "to", ")", ";", "}", "else", "{", "from", ".", "nullEdge", "(", "to", ")", ";", "this", ".", "build", "(", "expr", ".", "expr", ",", "from", ",", "to", ",", "args", ")", ";", "}", "}", "else", "if", "(", "expr", "instanceof", "SetExpression", ")", "{", "for", "(", "let", "[", "a", ",", "b", "]", "of", "expr", ".", "inverted", "?", "invertRanges", "(", "expr", ".", "ranges", ")", ":", "expr", ".", "ranges", ")", "rangeEdges", "(", "from", ",", "to", ",", "a", ",", "b", ")", ";", "}", "else", "if", "(", "expr", "instanceof", "LiteralExpression", ")", "{", "for", "(", "let", "i", "=", "0", ";", "i", "<", "expr", ".", "value", ".", "length", ";", "i", "++", ")", "{", "let", "ch", "=", "expr", ".", "value", ".", "charCodeAt", "(", "i", ")", ";", "let", "next", "=", "i", "==", "expr", ".", "value", ".", "length", "-", "1", "?", "to", ":", "new", "State", ";", "from", ".", "edge", "(", "ch", ",", "ch", "+", "1", ",", "next", ")", ";", "from", "=", "next", ";", "}", "}", "else", "if", "(", "expr", "instanceof", "AnyExpression", ")", "{", "from", ".", "edge", "(", "0", ",", "MAX_CHAR", "+", "1", ",", "to", ")", ";", "}", "else", "{", "return", "this", ".", "b", ".", "raise", "(", "`Unrecognized expression type in token`", ",", "(", "expr", "as", "any", ")", ".", "start", ")", ";", "}", "}", "buildStd", "(", "expr", ",", "from", ",", "to", ")", "{", "if", "(", "expr", ".", "args", ".", "length", ")", "this", ".", "b", ".", "raise", "(", "`'std.${", "expr", ".", "id", ".", "name", "}' does not take arguments`", ",", "expr", ".", "args", "[", "0", "]", ".", "start", ")", ";", "if", "(", "!", "STD_RANGES", ".", "hasOwnProperty", "(", "expr", ".", "id", ".", "name", ")", ")", "this", ".", "b", ".", "raise", "(", "`There is no builtin rule 'std.${", "expr", ".", "id", ".", "name", "}'`", ",", "expr", ".", "start", ")", ";", "for", "(", "let", "[", "a", ",", "b", "]", "of", "STD_RANGES", "[", "expr", ".", "id", ".", "name", "]", ")", "from", ".", "edge", "(", "a", ",", "b", ",", "to", ")", ";", "}", "takePrecedences", "(", ")", "{", "let", "rel", "=", "this", ".", "precedenceRelations", "=", "[", "]", ";", "if", "(", "this", ".", "ast", ")", "for", "(", "let", "group", "of", "this", ".", "ast", ".", "precedences", ")", "{", "let", "prev", "=", "[", "]", ";", "for", "(", "let", "item", "of", "group", ".", "items", ")", "{", "let", "level", "=", "[", "]", ";", "if", "(", "item", "instanceof", "NameExpression", ")", "{", "for", "(", "let", "built", "of", "this", ".", "built", ")", "if", "(", "item", ".", "args", ".", "length", "?", "built", ".", "matches", "(", "item", ")", ":", "built", ".", "id", "==", "item", ".", "id", ".", "name", ")", "level", ".", "push", "(", "built", ".", "term", ")", ";", "}", "else", "{", "let", "id", "=", "JSON", ".", "stringify", "(", "item", ".", "value", ")", ",", "found", "=", "this", ".", "built", ".", "find", "(", "b", "=>", "b", ".", "id", "==", "id", ")", ";", "if", "(", "found", ")", "level", ".", "push", "(", "found", ".", "term", ")", ";", "}", "if", "(", "!", "level", ".", "length", ")", "this", ".", "b", ".", "warn", "(", "`Precedence specified for unknown token ${", "item", "}`", ",", "item", ".", "start", ")", ";", "for", "(", "let", "term", "of", "level", ")", "addRel", "(", "rel", ",", "term", ",", "prev", ")", ";", "prev", "=", "prev", ".", "concat", "(", "level", ")", ";", "}", "}", "}", "takeConflicts", "(", ")", "{", "let", "resolve", "=", "(", "expr", ")", "=>", "{", "if", "(", "expr", "instanceof", "NameExpression", ")", "{", "for", "(", "let", "built", "of", "this", ".", "built", ")", "if", "(", "built", ".", "matches", "(", "expr", ")", ")", "return", "built", ".", "term", ";", "}", "else", "{", "let", "id", "=", "JSON", ".", "stringify", "(", "expr", ".", "value", ")", ",", "found", "=", "this", ".", "built", ".", "find", "(", "b", "=>", "b", ".", "id", "==", "id", ")", ";", "if", "(", "found", ")", "return", "found", ".", "term", ";", "}", "this", ".", "b", ".", "warn", "(", "`Precedence specified for unknown token ${", "expr", "}`", ",", "expr", ".", "start", ")", ";", "return", "null", ";", "}", ";", "for", "(", "let", "c", "of", "this", ".", "ast", "?.", "conflicts", "||", "[", "]", ")", "{", "let", "a", "=", "resolve", "(", "c", ".", "a", ")", ",", "b", "=", "resolve", "(", "c", ".", "b", ")", ";", "if", "(", "a", "&&", "b", ")", "{", "if", "(", "a", ".", "id", "<", "b", ".", "id", ")", "[", "a", ",", "b", "]", "=", "[", "b", ",", "a", "]", ";", "this", ".", "explicitConflicts", ".", "push", "(", "{", "a", ",", "b", "}", ")", ";", "}", "}", "}", "precededBy", "(", "a", ",", "b", ")", "{", "let", "found", "=", "this", ".", "precedenceRelations", ".", "find", "(", "r", "=>", "r", ".", "term", "==", "a", ")", ";", "return", "found", "&&", "found", ".", "after", ".", "includes", "(", "b", ")", ";", "}", "buildTokenGroups", "(", "states", ",", "skipInfo", ")", "{", "let", "tokens", "=", "this", ".", "startState", ".", "compile", "(", ")", ";", "if", "(", "tokens", ".", "accepting", ".", "length", ")", "this", ".", "b", ".", "raise", "(", "`Grammar contains zero-length tokens (in '${", "tokens", ".", "accepting", "[", "0", "]", ".", "name", "}')`", ",", "this", ".", "rules", ".", "find", "(", "r", "=>", "r", ".", "id", ".", "name", "==", "tokens", ".", "accepting", "[", "0", "]", ".", "name", ")", "!", ".", "start", ")", ";", "if", "(", "/\\btokens\\b/", ".", "test", "(", "verbose", ")", ")", "console", ".", "log", "(", "tokens", ".", "toString", "(", ")", ")", ";", "let", "allConflicts", "=", "tokens", ".", "findConflicts", "(", "checkTogether", "(", "states", ",", "this", ".", "b", ",", "skipInfo", ")", ")", ".", "filter", "(", "(", "{", "a", ",", "b", "}", ")", "=>", "!", "this", ".", "precededBy", "(", "a", ",", "b", ")", "&&", "!", "this", ".", "precededBy", "(", "b", ",", "a", ")", ")", ";", "for", "(", "let", "{", "a", ",", "b", "}", "of", "this", ".", "explicitConflicts", ")", "{", "if", "(", "!", "allConflicts", ".", "some", "(", "c", "=>", "c", ".", "a", "==", "a", "&&", "c", ".", "b", "==", "b", ")", ")", "allConflicts", ".", "push", "(", "new", "Conflict", "(", "a", ",", "b", ",", "0", ",", "\"\"", ",", "\"\"", ")", ")", ";", "}", "let", "softConflicts", "=", "allConflicts", ".", "filter", "(", "c", "=>", "c", ".", "soft", ")", ",", "conflicts", "=", "allConflicts", ".", "filter", "(", "c", "=>", "!", "c", ".", "soft", ")", ";", "let", "errors", "=", "[", "]", ";", "let", "groups", "=", "[", "]", ";", "for", "(", "let", "state", "of", "states", ")", "{", "if", "(", "state", ".", "defaultReduce", ")", "continue", ";", "let", "terms", "=", "[", "]", ",", "incompatible", "=", "[", "]", ";", "let", "skip", "=", "skipInfo", "[", "this", ".", "b", ".", "skipRules", ".", "indexOf", "(", "state", ".", "skip", ")", "]", ".", "startTokens", ";", "for", "(", "let", "term", "of", "skip", ")", "if", "(", "state", ".", "actions", ".", "some", "(", "a", "=>", "a", ".", "term", "==", "term", ")", ")", "this", ".", "b", ".", "raise", "(", "`Use of token ${", "term", ".", "name", "} conflicts with skip rule`", ")", ";", "let", "stateTerms", "=", "[", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "state", ".", "actions", ".", "length", "+", "(", "skip", "?", "skip", ".", "length", ":", "0", ")", ";", "i", "++", ")", "{", "let", "term", "=", "i", "<", "state", ".", "actions", ".", "length", "?", "state", ".", "actions", "[", "i", "]", ".", "term", ":", "skip", "[", "i", "-", "state", ".", "actions", ".", "length", "]", ";", "let", "orig", "=", "this", ".", "b", ".", "tokenOrigins", "[", "term", ".", "name", "]", ";", "if", "(", "orig", "&&", "orig", ".", "spec", ")", "term", "=", "orig", ".", "spec", ";", "else", "if", "(", "orig", "&&", "orig", ".", "external", ")", "continue", ";", "addToSet", "(", "stateTerms", ",", "term", ")", ";", "}", "if", "(", "stateTerms", ".", "length", "==", "0", ")", "continue", ";", "for", "(", "let", "term", "of", "stateTerms", ")", "{", "for", "(", "let", "conflict", "of", "conflicts", ")", "{", "let", "conflicting", "=", "conflict", ".", "a", "==", "term", "?", "conflict", ".", "b", ":", "conflict", ".", "b", "==", "term", "?", "conflict", ".", "a", ":", "null", ";", "if", "(", "!", "conflicting", ")", "continue", ";", "if", "(", "stateTerms", ".", "includes", "(", "conflicting", ")", "&&", "!", "errors", ".", "some", "(", "e", "=>", "e", ".", "conflict", "==", "conflict", ")", ")", "{", "let", "example", "=", "conflict", ".", "exampleA", "?", "` (example: ${", "JSON", ".", "stringify", "(", "conflict", ".", "exampleA", ")", "}${", "conflict", ".", "exampleB", "?", "` vs ${", "JSON", ".", "stringify", "(", "conflict", ".", "exampleB", ")", "}`", ":", "\"\"", "})`", ":", "\"\"", ";", "errors", ".", "push", "(", "{", "error", ":", "`Overlapping tokens ${", "term", ".", "name", "} and ${", "conflicting", ".", "name", "} used in same context${", "example", "}\\n`", "+", "`After: ${", "state", ".", "set", "[", "0", "]", ".", "trail", "(", ")", "}`", ",", "conflict", "}", ")", ";", "}", "addToSet", "(", "terms", ",", "term", ")", ";", "addToSet", "(", "incompatible", ",", "conflicting", ")", ";", "}", "}", "let", "tokenGroup", "=", "null", ";", "for", "(", "let", "group", "of", "groups", ")", "{", "if", "(", "incompatible", ".", "some", "(", "term", "=>", "group", ".", "tokens", ".", "includes", "(", "term", ")", ")", ")", "continue", ";", "for", "(", "let", "term", "of", "terms", ")", "addToSet", "(", "group", ".", "tokens", ",", "term", ")", ";", "tokenGroup", "=", "group", ";", "break", ";", "}", "if", "(", "!", "tokenGroup", ")", "{", "tokenGroup", "=", "new", "TokenGroup", "(", "terms", ",", "groups", ".", "length", ")", ";", "groups", ".", "push", "(", "tokenGroup", ")", ";", "}", "state", ".", "tokenGroup", "=", "tokenGroup", ".", "id", ";", "}", "if", "(", "errors", ".", "length", ")", "this", ".", "b", ".", "raise", "(", "errors", ".", "map", "(", "e", "=>", "e", ".", "error", ")", ".", "join", "(", "\"\\n\\n\"", ")", ")", ";", "if", "(", "groups", ".", "length", ">", "16", ")", "this", ".", "b", ".", "raise", "(", "`Too many different token groups (${", "groups", ".", "length", "}) to represent them as a 16-bit bitfield`", ")", ";", "let", "precTable", "=", "[", "]", ",", "rel", "=", "this", ".", "precedenceRelations", ".", "slice", "(", ")", ";", "for", "(", "let", "{", "a", ",", "b", ",", "soft", "}", "of", "softConflicts", ")", "if", "(", "soft", ")", "{", "if", "(", "!", "rel", ".", "some", "(", "r", "=>", "r", ".", "term", "==", "a", ")", "||", "!", "rel", ".", "some", "(", "r", "=>", "r", ".", "term", "==", "b", ")", ")", "continue", ";", "if", "(", "soft", "<", "0", ")", "[", "a", ",", "b", "]", "=", "[", "b", ",", "a", "]", ";", "addRel", "(", "rel", ",", "b", ",", "[", "a", "]", ")", ";", "addRel", "(", "rel", ",", "a", ",", "[", "]", ")", ";", "}", "add", ":", "while", "(", "rel", ".", "length", ")", "{", "for", "(", "let", "i", "=", "0", ";", "i", "<", "rel", ".", "length", ";", "i", "++", ")", "{", "let", "record", "=", "rel", "[", "i", "]", ";", "if", "(", "record", ".", "after", ".", "every", "(", "t", "=>", "precTable", ".", "includes", "(", "t", ".", "id", ")", ")", ")", "{", "precTable", ".", "push", "(", "record", ".", "term", ".", "id", ")", ";", "if", "(", "rel", ".", "length", "==", "1", ")", "break", "add", ";", "rel", "[", "i", "]", "=", "rel", ".", "pop", "(", ")", "!", ";", "continue", "add", ";", "}", "}", "this", ".", "b", ".", "raise", "(", "`Cyclic token precedence relation between ${", "rel", ".", "map", "(", "r", "=>", "r", ".", "term", ")", ".", "join", "(", "\", \"", ")", "}`", ")", ";", "}", "precTable", "=", "precTable", ".", "filter", "(", "id", "=>", "allConflicts", ".", "some", "(", "c", "=>", "!", "c", ".", "soft", "&&", "(", "c", ".", "a", ".", "id", "==", "id", "||", "c", ".", "b", ".", "id", "==", "id", ")", ")", ")", ";", "return", "{", "tokenGroups", ":", "groups", ",", "tokenPrec", ":", "precTable", ",", "tokenData", ":", "tokens", ".", "toArray", "(", "buildTokenMasks", "(", "groups", ")", ",", "precTable", ")", "}", ";", "}", "}", "function", "checkTogether", "(", "states", ",", "b", ",", "skipInfo", ")", "{", "let", "cache", "=", "Object", ".", "create", "(", "null", ")", ";", "function", "hasTerm", "(", "state", ",", "term", ")", "{", "return", "state", ".", "actions", ".", "some", "(", "a", "=>", "a", ".", "term", "==", "term", ")", "||", "skipInfo", "[", "b", ".", "skipRules", ".", "indexOf", "(", "state", ".", "skip", ")", "]", ".", "startTokens", ".", "includes", "(", "term", ")", ";", "}", "return", "(", "a", ",", "b", ")", "=>", "{", "if", "(", "a", ".", "id", "<", "b", ".", "id", ")", "[", "a", ",", "b", "]", "=", "[", "b", ",", "a", "]", ";", "let", "key", "=", "a", ".", "id", "|", "(", "b", ".", "id", "<<", "16", ")", ",", "cached", "=", "cache", "[", "key", "]", ";", "if", "(", "cached", "!=", "null", ")", "return", "cached", ";", "return", "cache", "[", "key", "]", "=", "states", ".", "some", "(", "state", "=>", "hasTerm", "(", "state", ",", "a", ")", "&&", "hasTerm", "(", "state", ",", "b", ")", ")", ";", "}", ";", "}", "function", "invertRanges", "(", "ranges", ")", "{", "let", "pos", "=", "0", ",", "result", "=", "[", "]", ";", "for", "(", "let", "[", "a", ",", "b", "]", "of", "ranges", ")", "{", "if", "(", "a", ">", "pos", ")", "result", ".", "push", "(", "[", "pos", ",", "a", "]", ")", ";", "pos", "=", "b", ";", "}", "if", "(", "pos", "<=", "MAX_CODE", ")", "result", ".", "push", "(", "[", "pos", ",", "MAX_CODE", "+", "1", "]", ")", ";", "return", "result", ";", "}", "const", "ASTRAL", "=", "0x10000", ",", "GAP_START", "=", "0xd800", ",", "GAP_END", "=", "0xe000", ",", "MAX_CODE", "=", "0x10ffff", ";", "const", "LOW_SURR_B", "=", "0xdc00", ",", "HIGH_SURR_B", "=", "0xdfff", ";", "function", "rangeEdges", "(", "from", ",", "to", ",", "low", ",", "hi", ")", "{", "if", "(", "low", "<", "GAP_START", "&&", "hi", "==", "MAX_CODE", "+", "1", ")", "{", "from", ".", "edge", "(", "low", ",", "MAX_CHAR", "+", "1", ",", "to", ")", ";", "return", ";", "}", "if", "(", "low", "<", "ASTRAL", ")", "{", "if", "(", "low", "<", "GAP_START", ")", "from", ".", "edge", "(", "low", ",", "Math", ".", "min", "(", "hi", ",", "GAP_START", ")", ",", "to", ")", ";", "if", "(", "hi", ">", "GAP_END", ")", "from", ".", "edge", "(", "Math", ".", "max", "(", "low", ",", "GAP_END", ")", ",", "Math", ".", "min", "(", "hi", ",", "MAX_CHAR", "+", "1", ")", ",", "to", ")", ";", "low", "=", "ASTRAL", ";", "}", "if", "(", "hi", "<", "ASTRAL", ")", "return", ";", "let", "lowStr", "=", "String", ".", "fromCodePoint", "(", "low", ")", ",", "hiStr", "=", "String", ".", "fromCodePoint", "(", "hi", "-", "1", ")", ";", "let", "lowA", "=", "lowStr", ".", "charCodeAt", "(", "0", ")", ",", "lowB", "=", "lowStr", ".", "charCodeAt", "(", "1", ")", ";", "let", "hiA", "=", "hiStr", ".", "charCodeAt", "(", "0", ")", ",", "hiB", "=", "hiStr", ".", "charCodeAt", "(", "1", ")", ";", "if", "(", "lowA", "==", "hiA", ")", "{", "let", "hop", "=", "new", "State", ";", "from", ".", "edge", "(", "lowA", ",", "lowA", "+", "1", ",", "hop", ")", ";", "hop", ".", "edge", "(", "lowB", ",", "hiB", "+", "1", ",", "to", ")", ";", "}", "else", "{", "let", "midStart", "=", "lowA", ",", "midEnd", "=", "hiA", ";", "if", "(", "lowB", ">", "LOW_SURR_B", ")", "{", "midStart", "++", ";", "let", "hop", "=", "new", "State", ";", "from", ".", "edge", "(", "lowA", ",", "lowA", "+", "1", ",", "hop", ")", ";", "hop", ".", "edge", "(", "lowB", ",", "HIGH_SURR_B", "+", "1", ",", "to", ")", ";", "}", "if", "(", "hiB", "<", "HIGH_SURR_B", ")", "{", "midEnd", "--", ";", "let", "hop", "=", "new", "State", ";", "from", ".", "edge", "(", "hiA", ",", "hiA", "+", "1", ",", "hop", ")", ";", "hop", ".", "edge", "(", "LOW_SURR_B", ",", "hiB", "+", "1", ",", "to", ")", ";", "}", "if", "(", "midStart", "<=", "midEnd", ")", "{", "let", "hop", "=", "new", "State", ";", "from", ".", "edge", "(", "midStart", ",", "midEnd", "+", "1", ",", "hop", ")", ";", "hop", ".", "edge", "(", "LOW_SURR_B", ",", "HIGH_SURR_B", "+", "1", ",", "to", ")", ";", "}", "}", "}", "const", "STD_RANGES", "=", "{", "asciiLetter", ":", "[", "[", "65", ",", "91", "]", ",", "[", "97", ",", "123", "]", "]", ",", "asciiLowercase", ":", "[", "[", "97", ",", "123", "]", "]", ",", "asciiUppercase", ":", "[", "[", "65", ",", "91", "]", "]", ",", "digit", ":", "[", "[", "48", ",", "58", "]", "]", ",", "whitespace", ":", "[", "[", "9", ",", "14", "]", ",", "[", "32", ",", "33", "]", ",", "[", "133", ",", "134", "]", ",", "[", "160", ",", "161", "]", ",", "[", "5760", ",", "5761", "]", ",", "[", "8192", ",", "8203", "]", ",", "[", "8232", ",", "8234", "]", ",", "[", "8239", ",", "8240", "]", ",", "[", "8287", ",", "8288", "]", ",", "[", "12288", ",", "12289", "]", "]", "}", ";", "function", "isEmpty", "(", "expr", ")", "{", "return", "expr", "instanceof", "SequenceExpression", "&&", "expr", ".", "exprs", ".", "length", "==", "0", ";", "}", "function", "gatherExtTokens", "(", "b", ",", "tokens", ")", "{", "let", "result", "=", "Object", ".", "create", "(", "null", ")", ";", "for", "(", "let", "token", "of", "tokens", ")", "{", "b", ".", "unique", "(", "token", ".", "id", ")", ";", "let", "{", "name", ",", "props", ",", "dialect", "}", "=", "b", ".", "nodeInfo", "(", "token", ".", "props", ",", "\"d\"", ",", "token", ".", "id", ".", "name", ")", ";", "let", "term", "=", "b", ".", "makeTerminal", "(", "token", ".", "id", ".", "name", ",", "name", ",", "props", ")", ";", "if", "(", "dialect", "!=", "null", ")", "(", "b", ".", "tokens", ".", "byDialect", "[", "dialect", "]", "||", "(", "b", ".", "tokens", ".", "byDialect", "[", "dialect", "]", "=", "[", "]", ")", ")", ".", "push", "(", "term", ")", ";", "b", ".", "namedTerms", "[", "token", ".", "id", ".", "name", "]", "=", "result", "[", "token", ".", "id", ".", "name", "]", "=", "term", ";", "}", "return", "result", ";", "}", "function", "findExtToken", "(", "b", ",", "tokens", ",", "expr", ")", "{", "let", "found", "=", "tokens", "[", "expr", ".", "id", ".", "name", "]", ";", "if", "(", "!", "found", ")", "return", "null", ";", "if", "(", "expr", ".", "args", ".", "length", ")", "b", ".", "raise", "(", "\"External tokens cannot take arguments\"", ",", "expr", ".", "args", "[", "0", "]", ".", "start", ")", ";", "b", ".", "used", "(", "expr", ".", "id", ".", "name", ")", ";", "return", "found", ";", "}", "function", "addRel", "(", "rel", ",", "term", ",", "after", ")", "{", "let", "found", "=", "rel", ".", "findIndex", "(", "r", "=>", "r", ".", "term", "==", "term", ")", ";", "if", "(", "found", "<", "0", ")", "rel", ".", "push", "(", "{", "term", ",", "after", "}", ")", ";", "else", "rel", "[", "found", "]", "=", "{", "term", ",", "after", ":", "rel", "[", "found", "]", ".", "after", ".", "concat", "(", "after", ")", "}", ";", "}", "class", "ExternalTokenSet", "{", "tokens", ":", "{", "[", "name", "]", ":", "Term", ";", "}", ";", "constructor", "(", "readonly", "b", ",", "readonly", "ast", ")", "{", "this", ".", "tokens", "=", "gatherExtTokens", "(", "b", ",", "ast", ".", "tokens", ")", ";", "for", "(", "let", "name", "in", "this", ".", "tokens", ")", "this", ".", "b", ".", "tokenOrigins", "[", "this", ".", "tokens", "[", "name", "]", ".", "name", "]", "=", "{", "external", ":", "this", "}", ";", "}", "getToken", "(", "expr", ")", "{", "return", "findExtToken", "(", "this", ".", "b", ",", "this", ".", "tokens", ",", "expr", ")", ";", "}", "}", "class", "ExternalSpecializer", "{", "term", ":", "Term", "|", "null", "=", "null", ";", "tokens", ":", "{", "[", "name", "]", ":", "Term", ";", "}", ";", "constructor", "(", "readonly", "b", ",", "readonly", "ast", ")", "{", "this", ".", "tokens", "=", "gatherExtTokens", "(", "b", ",", "ast", ".", "tokens", ")", ";", "}", "finish", "(", ")", "{", "let", "terms", "=", "this", ".", "b", ".", "normalizeExpr", "(", "this", ".", "ast", ".", "token", ")", ";", "if", "(", "terms", ".", "length", "!=", "1", "||", "terms", "[", "0", "]", ".", "terms", ".", "length", "!=", "1", "||", "!", "terms", "[", "0", "]", ".", "terms", "[", "0", "]", ".", "terminal", ")", "this", ".", "b", ".", "raise", "(", "`The token expression to '@external ${", "this", ".", "ast", ".", "type", "}' must resolve to a token`", ",", "this", ".", "ast", ".", "token", ".", "start", ")", ";", "this", ".", "term", "=", "terms", "[", "0", "]", ".", "terms", "[", "0", "]", ";", "for", "(", "let", "name", "in", "this", ".", "tokens", ")", "this", ".", "b", ".", "tokenOrigins", "[", "this", ".", "tokens", "[", "name", "]", ".", "name", "]", "=", "{", "spec", ":", "this", ".", "term", ",", "external", ":", "this", "}", ";", "}", "getToken", "(", "expr", ")", "{", "return", "findExtToken", "(", "this", ".", "b", ",", "this", ".", "tokens", ",", "expr", ")", ";", "}", "}", "function", "inlineRules", "(", "rules", ",", "preserve", ")", "{", "for", "(", "let", "pass", "=", "0", ";", ";", "pass", "++", ")", "{", "let", "inlinable", "=", "Object", ".", "create", "(", "null", ")", ",", "found", ";", "if", "(", "pass", "==", "0", ")", "for", "(", "let", "rule", "of", "rules", ")", "{", "if", "(", "rule", ".", "name", ".", "inline", "&&", "!", "inlinable", "[", "rule", ".", "name", ".", "name", "]", ")", "{", "let", "group", "=", "rules", ".", "filter", "(", "r", "=>", "r", ".", "name", "==", "rule", ".", "name", ")", ";", "if", "(", "group", ".", "some", "(", "r", "=>", "r", ".", "parts", ".", "includes", "(", "rule", ".", "name", ")", ")", ")", "continue", ";", "found", "=", "inlinable", "[", "rule", ".", "name", ".", "name", "]", "=", "group", ";", "}", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "rules", ".", "length", ";", "i", "++", ")", "{", "let", "rule", "=", "rules", "[", "i", "]", ";", "if", "(", "!", "rule", ".", "name", ".", "interesting", "&&", "!", "rule", ".", "parts", ".", "includes", "(", "rule", ".", "name", ")", "&&", "rule", ".", "parts", ".", "length", "<", "3", "&&", "!", "preserve", ".", "includes", "(", "rule", ".", "name", ")", "&&", "(", "rule", ".", "parts", ".", "length", "==", "1", "||", "rules", ".", "every", "(", "other", "=>", "other", ".", "skip", "==", "rule", ".", "skip", "||", "!", "other", ".", "parts", ".", "includes", "(", "rule", ".", "name", ")", ")", ")", "&&", "!", "rule", ".", "parts", ".", "some", "(", "p", "=>", "!", "!", "inlinable", "[", "p", ".", "name", "]", ")", "&&", "!", "rules", ".", "some", "(", "(", "r", ",", "j", ")", "=>", "j", "!=", "i", "&&", "r", ".", "name", "==", "rule", ".", "name", ")", ")", "found", "=", "inlinable", "[", "rule", ".", "name", ".", "name", "]", "=", "[", "rule", "]", ";", "}", "if", "(", "!", "found", ")", "return", "rules", ";", "let", "newRules", "=", "[", "]", ";", "for", "(", "let", "rule", "of", "rules", ")", "{", "if", "(", "inlinable", "[", "rule", ".", "name", ".", "name", "]", ")", "continue", ";", "if", "(", "!", "rule", ".", "parts", ".", "some", "(", "p", "=>", "!", "!", "inlinable", "[", "p", ".", "name", "]", ")", ")", "{", "newRules", ".", "push", "(", "rule", ")", ";", "continue", ";", "}", "function", "expand", "(", "at", ",", "conflicts", ",", "parts", ")", "{", "if", "(", "at", "==", "rule", ".", "parts", ".", "length", ")", "{", "newRules", ".", "push", "(", "new", "Rule", "(", "rule", ".", "name", ",", "parts", ",", "conflicts", ",", "rule", ".", "skip", ")", ")", ";", "return", ";", "}", "let", "next", "=", "rule", ".", "parts", "[", "at", "]", ",", "replace", "=", "inlinable", "[", "next", ".", "name", "]", ";", "if", "(", "!", "replace", ")", "{", "expand", "(", "at", "+", "1", ",", "conflicts", ".", "concat", "(", "rule", ".", "conflicts", "[", "at", "+", "1", "]", ")", ",", "parts", ".", "concat", "(", "next", ")", ")", ";", "return", ";", "}", "for", "(", "let", "r", "of", "replace", ")", "expand", "(", "at", "+", "1", ",", "conflicts", ".", "slice", "(", "0", ",", "conflicts", ".", "length", "-", "1", ")", ".", "concat", "(", "conflicts", "[", "at", "]", ".", "join", "(", "r", ".", "conflicts", "[", "0", "]", ")", ")", ".", "concat", "(", "r", ".", "conflicts", ".", "slice", "(", "1", ",", "r", ".", "conflicts", ".", "length", "-", "1", ")", ")", ".", "concat", "(", "rule", ".", "conflicts", "[", "at", "+", "1", "]", ".", "join", "(", "r", ".", "conflicts", "[", "r", ".", "conflicts", ".", "length", "-", "1", "]", ")", ")", ",", "parts", ".", "concat", "(", "r", ".", "parts", ")", ")", ";", "}", "expand", "(", "0", ",", "[", "rule", ".", "conflicts", "[", "0", "]", "]", ",", "[", "]", ")", ";", "}", "rules", "=", "newRules", ";", "}", "}", "function", "mergeRules", "(", "rules", ")", "{", "let", "merged", "=", "Object", ".", "create", "(", "null", ")", ",", "found", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "rules", ".", "length", ";", ")", "{", "let", "groupStart", "=", "i", ";", "let", "name", "=", "rules", "[", "i", "++", "]", ".", "name", ";", "while", "(", "i", "<", "rules", ".", "length", "&&", "rules", "[", "i", "]", ".", "name", "==", "name", ")", "i", "++", ";", "let", "size", "=", "i", "-", "groupStart", ";", "if", "(", "name", ".", "interesting", ")", "continue", ";", "for", "(", "let", "j", "=", "i", ";", "j", "<", "rules", ".", "length", ";", ")", "{", "let", "otherStart", "=", "j", ",", "otherName", "=", "rules", "[", "j", "++", "]", ".", "name", ";", "while", "(", "j", "<", "rules", ".", "length", "&&", "rules", "[", "j", "]", ".", "name", "==", "otherName", ")", "j", "++", ";", "if", "(", "j", "-", "otherStart", "!=", "size", "||", "otherName", ".", "interesting", ")", "continue", ";", "let", "match", "=", "true", ";", "for", "(", "let", "k", "=", "0", ";", "k", "<", "size", "&&", "match", ";", "k", "++", ")", "{", "let", "a", "=", "rules", "[", "groupStart", "+", "k", "]", ",", "b", "=", "rules", "[", "otherStart", "+", "k", "]", ";", "if", "(", "a", ".", "cmpNoName", "(", "b", ")", "!=", "0", ")", "match", "=", "false", ";", "}", "if", "(", "match", ")", "found", "=", "merged", "[", "name", ".", "name", "]", "=", "otherName", ";", "}", "}", "if", "(", "!", "found", ")", "return", "rules", ";", "let", "newRules", "=", "[", "]", ";", "for", "(", "let", "rule", "of", "rules", ")", "if", "(", "!", "merged", "[", "rule", ".", "name", ".", "name", "]", ")", "{", "newRules", ".", "push", "(", "rule", ".", "parts", ".", "every", "(", "p", "=>", "!", "merged", "[", "p", ".", "name", "]", ")", "?", "rule", ":", "new", "Rule", "(", "rule", ".", "name", ",", "rule", ".", "parts", ".", "map", "(", "p", "=>", "merged", "[", "p", ".", "name", "]", "||", "p", ")", ",", "rule", ".", "conflicts", ",", "rule", ".", "skip", ")", ")", ";", "}", "return", "newRules", ";", "}", "function", "simplifyRules", "(", "rules", ",", "preserve", ")", "{", "return", "mergeRules", "(", "inlineRules", "(", "rules", ",", "preserve", ")", ")", ";", "}", "export", "function", "buildParser", "(", "text", ",", "options", "=", "{", "}", ")", "{", "let", "builder", "=", "new", "Builder", "(", "text", ",", "options", ")", ",", "parser", "=", "builder", ".", "getParser", "(", ")", ";", "(", "parser", "as", "any", ")", ".", "termTable", "=", "builder", ".", "termTable", ";", "return", "parser", ";", "}", "const", "KEYWORDS", "=", "[", "\"break\"", ",", "\"case\"", ",", "\"catch\"", ",", "\"continue\"", ",", "\"debugger\"", ",", "\"default\"", ",", "\"do\"", ",", "\"else\"", ",", "\"finally\"", ",", "\"for\"", ",", "\"function\"", ",", "\"if\"", ",", "\"return\"", ",", "\"switch\"", ",", "\"throw\"", ",", "\"try\"", ",", "\"var\"", ",", "\"while\"", ",", "\"with\"", ",", "\"null\"", ",", "\"true\"", ",", "\"false\"", ",", "\"instanceof\"", ",", "\"typeof\"", ",", "\"void\"", ",", "\"delete\"", ",", "\"new\"", ",", "\"in\"", ",", "\"this\"", ",", "\"const\"", ",", "\"class\"", ",", "\"extends\"", ",", "\"export\"", ",", "\"import\"", ",", "\"super\"", ",", "\"enum\"", ",", "\"implements\"", ",", "\"interface\"", ",", "\"let\"", ",", "\"package\"", ",", "\"private\"", ",", "\"protected\"", ",", "\"public\"", ",", "\"static\"", ",", "\"yield\"", "]", ";", "export", "function", "buildParserFile", "(", "text", ",", "options", "=", "{", "}", ")", "{", "return", "new", "Builder", "(", "text", ",", "options", ")", ".", "getParserFile", "(", ")", ";", "}", "function", "ignored", "(", "name", ")", "{", "let", "first", "=", "name", "[", "0", "]", ";", "return", "first", "==", "\"_\"", "||", "first", ".", "toUpperCase", "(", ")", "!=", "first", ";", "}", "function", "isExported", "(", "rule", ")", "{", "return", "rule", ".", "props", ".", "some", "(", "p", "=>", "p", ".", "at", "&&", "p", ".", "name", "==", "\"export\"", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "null", null, null, null, "Parts", null, "Parts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Parts", null, "number", null, "Conflicts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Parts", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "Term", null, null, null, "boolean", null, "NameExpression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "BuildOptions", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, "Namespace", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, null, null, null, null, "Props", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "number", null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, "array", null, null, null, null, null, "UNK", null, null, null, "array", null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, "Uint32Array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Stack", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "string", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "string", null, "string", null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "void", null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "object", null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "string", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "string", null, "string", null, "Props", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "boolean", null, "number", null, "number", null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Prop", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "Conflicts", null, null, null, null, null, "Conflicts", null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Term", null, "array", null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Parts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "NameExpression", null, null, null, null, null, null, null, null, null, null, "Namespace", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Parts", null, "UNK", null, null, null, "BuiltRule", null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "SequenceExpression", null, null, null, "array", null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Parts", null, "number", null, "Conflicts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "Parts", null, null, null, null, null, null, null, null, null, null, "Parts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Parts", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "RuleDeclaration", null, null, null, "Term", null, "boolean", null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, "Props", null, null, null, null, "Props", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "boolean", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "Prop", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Prop", null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "Identifier", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Term", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Term", null, "string", null, "RuleDeclaration", null, null, null, "array", null, null, null, null, null, "array", null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "object", null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, "UNK", null, null, "Uint32Array", null, null, null, null, null, null, null, null, null, null, null, "Builder", null, null, null, "UNK", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "number", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "UNK", null, "boolean", null, "number", null, null, null, "Builder", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Pos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Term", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "array", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Rule", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "array", null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "void", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "array", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Uint16Array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Uint16Array", null, null, null, null, null, "object", null, null, null, null, null, "number", null, null, null, null, null, null, "State", null, null, null, null, null, null, null, "Shift", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, "array", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, "number", null, null, null, null, null, "void", null, null, null, null, "array", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "array", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "TokenGroup", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "NameExpression", null, "Builder", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "State", null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Builder", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "NameExpression", null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "LiteralExpression", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "RuleDeclaration", null, "NameExpression", null, "State", null, "State", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Expression", null, "State", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "NameExpression", null, "State", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, "BuiltRule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Term", null, "Term", null, null, null, "object", null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Conflict", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "Conflict", null, null, null, null, null, null, "array", null, null, null, null, null, "Conflict", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, "Conflict", null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TokenGroup", null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "Conflict", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, "Builder", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "array", null, null, null, "number", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "number", null, null, null, "number", null, null, null, "number", null, null, null, null, "number", null, null, null, "number", null, null, null, null, "void", null, "State", null, "State", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Expression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "Builder", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "Builder", null, "object", null, "NameExpression", null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "array", null, "Term", null, null, null, null, null, "number", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Builder", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "NameExpression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Builder", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, "NameExpression", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "Rule", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Term", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LRParser", null, "string", null, "BuildOptions", null, null, null, null, null, null, "Builder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "string", null, "BuildOptions", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "string", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "RuleDeclaration", null, null, null, null, null, null, null, null, null, "Prop", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/build.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "build.ts"}
{"tokens": ["import", "{", "buildParserFile", ",", "GenError", "}", "from", "\"..\"", ";", "let", "file", "=", "undefined", ",", "out", "=", "undefined", ",", "moduleStyle", "=", "\"es\"", ",", "includeNames", "=", "false", ",", "exportName", "=", "undefined", ",", "noTerms", "=", "false", ";", "let", "{", "writeFileSync", ",", "readFileSync", "}", "=", "require", "(", "\"fs\"", ")", ";", "const", "usage", "=", "\"Usage: build-parser [--cjs] [--names] [--noTerms] [--output outfile] [--export name] file\"", ";", "for", "(", "let", "i", "=", "2", ";", "i", "<", "process", ".", "argv", ".", "length", ";", ")", "{", "let", "arg", "=", "process", ".", "argv", "[", "i", "++", "]", ";", "if", "(", "!", "/^-/", ".", "test", "(", "arg", ")", ")", "{", "if", "(", "file", ")", "error", "(", "\"Multiple input files given\"", ")", ";", "file", "=", "arg", ";", "}", "else", "if", "(", "arg", "==", "\"--help\"", ")", "{", "console", ".", "log", "(", "usage", ")", ";", "process", ".", "exit", "(", "0", ")", ";", "}", "else", "if", "(", "arg", "==", "\"--cjs\"", ")", "{", "moduleStyle", "=", "\"cjs\"", ";", "}", "else", "if", "(", "arg", "==", "\"-o\"", "||", "arg", "==", "\"--output\"", ")", "{", "if", "(", "out", ")", "error", "(", "\"Multiple output files given\"", ")", ";", "out", "=", "process", ".", "argv", "[", "i", "++", "]", ";", "}", "else", "if", "(", "arg", "==", "\"--names\"", ")", "{", "includeNames", "=", "true", ";", "}", "else", "if", "(", "arg", "==", "\"--export\"", ")", "{", "exportName", "=", "process", ".", "argv", "[", "i", "++", "]", ";", "}", "else", "if", "(", "arg", "==", "\"--noTerms\"", ")", "{", "noTerms", "=", "true", ";", "}", "else", "{", "error", "(", "\"Unrecognized option \"", "+", "arg", ")", ";", "}", "}", "if", "(", "!", "file", ")", "error", "(", "\"No input file given\"", ")", ";", "function", "error", "(", "msg", ")", "{", "console", ".", "error", "(", "msg", ")", ";", "console", ".", "log", "(", "usage", ")", ";", "process", ".", "exit", "(", "1", ")", ";", "}", "let", "parser", ",", "terms", ";", "try", "{", ";", "(", "{", "parser", ",", "terms", "}", "=", "buildParserFile", "(", "readFileSync", "(", "file", ",", "\"utf8\"", ")", ",", "{", "fileName", ":", "file", ",", "moduleStyle", ",", "includeNames", ",", "exportName", "}", ")", ")", ";", "}", "catch", "(", "e", ")", "{", "console", ".", "error", "(", "e", "instanceof", "GenError", "?", "e", ".", "message", ":", "e", ".", "stack", ")", ";", "process", ".", "exit", "(", "1", ")", ";", "}", "if", "(", "out", ")", "{", "let", "ext", "=", "/^(.*)\\.(c?js|ts|esm?)$/", ".", "exec", "(", "out", ")", ";", "let", "[", "parserFile", ",", "termFile", "]", "=", "ext", "?", "[", "out", ",", "ext", "[", "1", "]", "+", "\".terms.\"", "+", "ext", "[", "2", "]", "]", ":", "[", "out", "+", "\".js\"", ",", "out", "+", "\".terms.js\"", "]", ";", "writeFileSync", "(", "parserFile", ",", "parser", ")", ";", "if", "(", "!", "noTerms", ")", "writeFileSync", "(", "termFile", ",", "terms", ")", ";", "console", ".", "log", "(", "`Wrote ${", "parserFile", "}${", "noTerms", "?", "\"\"", ":", "` and ${", "termFile", "}`", "}`", ")", ";", "}", "else", "{", "console", ".", "log", "(", "parser", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, "boolean", null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/lezer-generator.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "lezer-generator.ts"}
{"tokens": ["import", "{", "Tree", ",", "NodeType", ",", "NodeProp", ",", "Parser", "}", "from", "\"@lezer/common\"", ";", "const", "none", "=", "[", "]", ";", "class", "TestSpec", "{", "constructor", "(", "readonly", "name", ",", "readonly", "props", ",", "readonly", "children", "=", "none", ",", "readonly", "wildcard", "=", "false", ")", "{", "}", "static", "parse", "(", "spec", ")", "{", "let", "pos", "=", "0", ",", "tok", "=", "\"sof\"", ",", "value", "=", "\"\"", ";", "function", "err", "(", ")", "{", "throw", "new", "SyntaxError", "(", "\"Invalid test spec: \"", "+", "spec", ")", ";", "}", "function", "next", "(", ")", "{", "while", "(", "pos", "<", "spec", ".", "length", "&&", "/\\s/", ".", "test", "(", "spec", ".", "charAt", "(", "pos", ")", ")", ")", "pos", "++", ";", "if", "(", "pos", "==", "spec", ".", "length", ")", "return", "tok", "=", "\"eof\"", ";", "let", "next", "=", "spec", ".", "charAt", "(", "pos", "++", ")", ";", "if", "(", "next", "==", "\"(\"", "&&", "spec", ".", "slice", "(", "pos", ",", "pos", "+", "4", ")", "==", "\"...)\"", ")", "{", "pos", "+=", "4", ";", "return", "tok", "=", "\"...\"", ";", "}", "if", "(", "/[\\[\\](),=]/", ".", "test", "(", "next", ")", ")", "return", "tok", "=", "next", ";", "if", "(", "/[^()\\[\\],=\"\\s]/", ".", "test", "(", "next", ")", ")", "{", "let", "name", "=", "/[^()\\[\\],=\"\\s]*/", ".", "exec", "(", "spec", ".", "slice", "(", "pos", "-", "1", ")", ")", ";", "value", "=", "name", "!", "[", "0", "]", ";", "pos", "+=", "name", "!", "[", "0", "]", ".", "length", "-", "1", ";", "return", "tok", "=", "\"name\"", ";", "}", "if", "(", "next", "==", "'\"'", ")", "{", "let", "content", "=", "/^\"((?:[^\\\\\"]|\\\\.)*)\"/", ".", "exec", "(", "spec", ".", "slice", "(", "pos", "-", "1", ")", ")", "||", "err", "(", ")", ";", "value", "=", "JSON", ".", "parse", "(", "content", "[", "0", "]", ")", ";", "pos", "+=", "content", "[", "0", "]", ".", "length", "-", "1", ";", "return", "tok", "=", "\"name\"", ";", "}", "return", "err", "(", ")", ";", "}", "next", "(", ")", ";", "function", "parseSeq", "(", ")", "{", "let", "seq", "=", "[", "]", ";", "while", "(", "tok", "!=", "\"eof\"", "&&", "tok", "!=", "\")\"", ")", "{", "seq", ".", "push", "(", "parse", "(", ")", ")", ";", "if", "(", "tok", "==", "\",\"", ")", "next", "(", ")", ";", "}", "return", "seq", ";", "}", "function", "parse", "(", ")", "{", "let", "name", "=", "value", ",", "children", "=", "none", ",", "props", "=", "[", "]", ",", "wildcard", "=", "false", ";", "if", "(", "tok", "!=", "\"name\"", ")", "err", "(", ")", ";", "next", "(", ")", ";", "if", "(", "tok", "as", "any", "==", "\"[\"", ")", "{", "next", "(", ")", ";", "while", "(", "tok", "as", "any", "!=", "\"]\"", ")", "{", "if", "(", "tok", "as", "any", "!=", "\"name\"", ")", "err", "(", ")", ";", "let", "prop", "=", "(", "NodeProp", "as", "any", ")", "[", "value", "]", "as", "NodeProp", "<", "any", ">", ",", "val", "=", "\"\"", ";", "if", "(", "!", "(", "prop", "instanceof", "NodeProp", ")", ")", "err", "(", ")", ";", "next", "(", ")", ";", "if", "(", "tok", "as", "any", "==", "\"=\"", ")", "{", "next", "(", ")", ";", "if", "(", "tok", "as", "any", "!=", "\"name\"", ")", "err", "(", ")", ";", "val", "=", "value", ";", "next", "(", ")", ";", "}", "props", ".", "push", "(", "{", "prop", ",", "value", ":", "prop", ".", "deserialize", "(", "val", ")", "}", ")", ";", "}", "next", "(", ")", ";", "}", "if", "(", "tok", "as", "any", "==", "\"(\"", ")", "{", "next", "(", ")", ";", "children", "=", "parseSeq", "(", ")", ";", "if", "(", "tok", "!=", "\")\"", ")", "err", "(", ")", ";", "next", "(", ")", ";", "}", "else", "if", "(", "tok", "as", "any", "==", "\"...\"", ")", "{", "wildcard", "=", "true", ";", "next", "(", ")", ";", "}", "return", "new", "TestSpec", "(", "name", ",", "props", ",", "children", ",", "wildcard", ")", ";", "}", "let", "result", "=", "parseSeq", "(", ")", ";", "if", "(", "tok", "!=", "\"eof\"", ")", "err", "(", ")", ";", "return", "result", ";", "}", "matches", "(", "type", ")", "{", "if", "(", "type", ".", "name", "!=", "this", ".", "name", ")", "return", "false", ";", "for", "(", "let", "{", "prop", ",", "value", "}", "of", "this", ".", "props", ")", "if", "(", "(", "value", "||", "type", ".", "prop", "(", "prop", ")", ")", "&&", "JSON", ".", "stringify", "(", "type", ".", "prop", "(", "prop", ")", ")", "!=", "JSON", ".", "stringify", "(", "value", ")", ")", "return", "false", ";", "return", "true", ";", "}", "}", "function", "defaultIgnore", "(", "type", ")", "{", "return", "/\\W/", ".", "test", "(", "type", ".", "name", ")", ";", "}", "export", "function", "testTree", "(", "tree", ",", "expect", ",", "mayIgnore", "=", "defaultIgnore", ")", "{", "let", "specs", "=", "TestSpec", ".", "parse", "(", "expect", ")", ";", "let", "stack", "=", "[", "specs", "]", ",", "pos", "=", "[", "0", "]", ";", "tree", ".", "iterate", "(", "{", "enter", "(", "type", ",", "start", ")", "{", "if", "(", "!", "type", ".", "name", ")", "return", ";", "let", "last", "=", "stack", ".", "length", "-", "1", ",", "index", "=", "pos", "[", "last", "]", ",", "seq", "=", "stack", "[", "last", "]", ";", "let", "next", "=", "index", "<", "seq", ".", "length", "?", "seq", "[", "index", "]", ":", "null", ";", "if", "(", "next", "&&", "next", ".", "matches", "(", "type", ")", ")", "{", "if", "(", "next", ".", "wildcard", ")", "{", "pos", "[", "last", "]", "++", ";", "return", "false", ";", "}", "pos", ".", "push", "(", "0", ")", ";", "stack", ".", "push", "(", "next", ".", "children", ")", ";", "return", "undefined", ";", "}", "else", "if", "(", "mayIgnore", "(", "type", ")", ")", "{", "return", "false", ";", "}", "else", "{", "let", "parent", "=", "last", ">", "0", "?", "stack", "[", "last", "-", "1", "]", "[", "pos", "[", "last", "-", "1", "]", "]", ".", "name", ":", "\"tree\"", ";", "let", "after", "=", "next", "?", "next", ".", "name", "+", "(", "parent", "==", "\"tree\"", "?", "\"\"", ":", "\" in \"", "+", "parent", ")", ":", "`end of ${", "parent", "}`", ";", "throw", "new", "Error", "(", "`Expected ${", "after", "}, got ${", "type", ".", "name", "} at ${", "start", "} \\n${", "tree", "}`", ")", ";", "}", "}", ",", "leave", "(", "type", ",", "start", ")", "{", "if", "(", "!", "type", ".", "name", ")", "return", ";", "let", "last", "=", "stack", ".", "length", "-", "1", ",", "index", "=", "pos", "[", "last", "]", ",", "seq", "=", "stack", "[", "last", "]", ";", "if", "(", "index", "<", "seq", ".", "length", ")", "throw", "new", "Error", "(", "`Unexpected end of ${", "type", ".", "name", "}. Expected ${", "seq", ".", "slice", "(", "index", ")", ".", "map", "(", "s", "=>", "s", ".", "name", ")", ".", "join", "(", "\", \"", ")", "} at ${", "start", "}\\n${", "tree", "}`", ")", ";", "pos", ".", "pop", "(", ")", ";", "stack", ".", "pop", "(", ")", ";", "pos", "[", "last", "-", "1", "]", "++", ";", "}", "}", ")", ";", "if", "(", "pos", "[", "0", "]", "!=", "specs", ".", "length", ")", "throw", "new", "Error", "(", "`Unexpected end of tree. Expected ${", "stack", "[", "0", "]", ".", "slice", "(", "pos", "[", "0", "]", ")", ".", "map", "(", "s", "=>", "s", ".", "name", ")", ".", "join", "(", "\", \"", ")", "} at ${", "tree", ".", "length", "}\\n${", "tree", "}`", ")", ";", "}", "param", "{", "string", "}", "file", "param", "{", "number", "}", "index", "function", "toLineContext", "(", "file", ",", "index", ")", "{", "const", "endEol", "=", "file", ".", "indexOf", "(", "'\\n'", ",", "index", "+", "80", ")", ";", "const", "endIndex", "=", "endEol", "===", "-", "1", "?", "file", ".", "length", ":", "endEol", ";", "return", "file", ".", "substring", "(", "index", ",", "endIndex", ")", ".", "split", "(", "/\\n/", ")", ".", "map", "(", "str", "=>", "'  | '", "+", "str", ")", ".", "join", "(", "'\\n'", ")", ";", "}", "export", "function", "fileTests", "(", "file", ",", "fileName", ",", "mayIgnore", "=", "defaultIgnore", ")", "{", "let", "caseExpr", "=", "/\\s*#\\s*(.*)(?:\\r\\n|\\r|\\n)([^]*?)==+>([^]*?)(?:$|(?:\\r\\n|\\r|\\n)+(?=#))/gy", ";", "let", "tests", "=", "[", "]", ";", "let", "lastIndex", "=", "0", ";", "for", "(", ";", ";", ")", "{", "let", "m", "=", "caseExpr", ".", "exec", "(", "file", ")", ";", "if", "(", "!", "m", ")", "throw", "new", "Error", "(", "`Unexpected file format in ${", "fileName", "} around\\n\\n${", "toLineContext", "(", "file", ",", "lastIndex", ")", "}`", ")", ";", "let", "[", ",", "name", ",", "configStr", "]", "=", "/(.*?)(\\{.*?\\})?$/", ".", "exec", "(", "m", "[", "1", "]", ")", "!", ";", "let", "config", "=", "configStr", "?", "JSON", ".", "parse", "(", "configStr", ")", ":", "null", ";", "let", "text", "=", "m", "[", "2", "]", ".", "trim", "(", ")", ",", "expected", "=", "m", "[", "3", "]", ";", "tests", ".", "push", "(", "{", "name", ",", "run", "(", "parser", ")", "{", "let", "strict", "=", "!", "/⚠|\\.\\.\\./", ".", "test", "(", "expected", ")", ";", "if", "(", "(", "parser", "as", "any", ")", ".", "configure", "&&", "(", "strict", "||", "config", ")", ")", "parser", "=", "(", "parser", "as", "any", ")", ".", "configure", "(", "{", "strict", ",", "...", "config", "}", ")", ";", "testTree", "(", "parser", ".", "parse", "(", "text", ")", ",", "expected", ",", "mayIgnore", ")", ";", "}", "}", ")", ";", "lastIndex", "=", "m", ".", "index", "+", "m", "[", "0", "]", ".", "length", ";", "if", "(", "lastIndex", "==", "file", ".", "length", ")", "break", ";", "}", "return", "tests", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "array", null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, "string", null, null, null, "number", null, null, null, "string", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestSpec", null, null, null, null, "string", null, null, null, null, null, null, null, "array", null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "NodeType", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "NodeType", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Tree", null, "string", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "boolean", null, "NodeType", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "NodeType", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "number", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, "string", null, "boolean", null, null, null, null, null, "RegExp", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/src/test.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "test.ts"}
{"tokens": ["import", "{", "buildParser", "}", "from", "\"../dist/index.js\"", ";", "import", "{", "NodeProp", "}", "from", "\"@lezer/common\"", ";", "import", "{", "LRParser", ",", "ExternalTokenizer", ",", "InputStream", "}", "from", "\"@lezer/lr\"", ";", "import", "{", "fileTests", "}", "from", "\"../dist/test.js\"", ";", "import", "ist", "from", "\"ist\"", ";", "import", "*", "as", "fs", "from", "\"fs\"", ";", "import", "*", "as", "path", "from", "\"path\"", ";", "import", "{", "fileURLToPath", "}", "from", "\"url\"", ";", "let", "caseDir", "=", "path", ".", "join", "(", "path", ".", "dirname", "(", "fileURLToPath", "(", "import", ".", "meta", ".", "url", ")", ")", ",", "\"cases\"", ")", ";", "function", "externalTokenizer", "(", "name", ",", "terms", ")", "{", "if", "(", "name", "==", "\"ext1\"", ")", "return", "new", "ExternalTokenizer", "(", "(", "input", ")", "=>", "{", "if", "(", "input", ".", "next", "==", "\"{\"", ".", "charCodeAt", "(", "0", ")", ")", "{", "input", ".", "advance", "(", ")", ";", "input", ".", "acceptToken", "(", "terms", ".", "braceOpen", ")", ";", "}", "else", "if", "(", "input", ".", "next", "==", "\"}\"", ".", "charCodeAt", "(", "0", ")", ")", "{", "input", ".", "advance", "(", ")", ";", "input", ".", "acceptToken", "(", "terms", ".", "braceClose", ")", ";", "}", "else", "if", "(", "input", ".", "next", "==", "\".\"", ".", "charCodeAt", "(", "0", ")", ")", "{", "input", ".", "advance", "(", ")", ";", "input", ".", "acceptToken", "(", "terms", ".", "Dot", ")", ";", "}", "}", ")", ";", "throw", "new", "Error", "(", "\"Undefined external tokenizer \"", "+", "name", ")", ";", "}", "function", "externalSpecializer", "(", "name", ",", "terms", ")", "{", "if", "(", "name", "==", "\"spec1\"", ")", "return", "(", "value", ")", "=>", "value", "==", "\"one\"", "?", "terms", ".", "one", ":", "value", "==", "\"two\"", "?", "terms", ".", "two", ":", "-", "1", ";", "throw", "new", "Error", "(", "\"Undefined external specialize \"", "+", "name", ")", ";", "}", "function", "externalProp", "(", ")", "{", "return", "new", "NodeProp", "<", "string", ">", "(", "{", "deserialize", ":", "x", "=>", "x", "}", ")", ";", "}", "describe", "(", "\"Cases\"", ",", "(", ")", "=>", "{", "for", "(", "let", "file", "of", "fs", ".", "readdirSync", "(", "caseDir", ")", ")", "{", "let", "match", "=", "/^(.*)\\.txt$/", ".", "exec", "(", "file", ")", ";", "if", "(", "!", "match", ")", "continue", ";", "let", "name", "=", "match", "[", "1", "]", ",", "fileName", "=", "path", ".", "join", "(", "caseDir", ",", "file", ")", ";", "let", "content", "=", "fs", ".", "readFileSync", "(", "fileName", ",", "\"utf8\"", ")", ";", "let", "grammar", "=", "/^([^]*?)($|\\n# )/", ".", "exec", "(", "content", ")", "!", ";", "content", "=", "content", ".", "slice", "(", "grammar", "[", "1", "]", ".", "length", ")", ";", "let", "parser", "=", "null", ";", "let", "force", "=", "(", ")", "=>", "{", "if", "(", "!", "parser", ")", "parser", "=", "buildParser", "(", "grammar", "[", "1", "]", ",", "{", "fileName", ",", "externalTokenizer", ",", "externalSpecializer", ",", "externalProp", ",", "warn", "(", "msg", ")", "{", "throw", "new", "Error", "(", "msg", ")", ";", "}", "}", ")", ";", "return", "parser", ";", "}", ";", "let", "expectedErr", "=", "/\\/\\/! (.*)/", ".", "exec", "(", "grammar", "[", "1", "]", ")", ";", "let", "noCases", "=", "!", "/\\S/", ".", "test", "(", "content", ")", ";", "if", "(", "noCases", "&&", "!", "expectedErr", ")", "throw", "new", "Error", "(", "\"Test with neither expected errors nor input cases (\"", "+", "file", "+", "\")\"", ")", ";", "if", "(", "expectedErr", ")", "it", "(", "`${", "name", "} fails`", ",", "(", ")", "=>", "{", "ist", ".", "throws", "(", "force", ",", "(", "e", ")", "=>", "e", ".", "message", ".", "toLowerCase", "(", ")", ".", "indexOf", "(", "expectedErr", "!", "[", "1", "]", ".", "trim", "(", ")", ".", "toLowerCase", "(", ")", ")", ">=", "0", ")", ";", "}", ")", ";", "if", "(", "!", "noCases", ")", "for", "(", "let", "{", "name", ":", "n", ",", "run", "}", "of", "fileTests", "(", "content", ",", "file", ")", ")", "it", "(", "name", "+", "\"/\"", "+", "n", ",", "(", ")", "=>", "run", "(", "force", "(", ")", ")", ")", ";", "}", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, "InputStream", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LRParser", null, null, null, null, "LRParser", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RegExpExecArray", null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/test/test-cases.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "test-cases.ts"}
{"tokens": ["import", "{", "buildParser", ",", "BuildOptions", "}", "from", "\"../dist/index.js\"", ";", "import", "{", "Tree", ",", "TreeFragment", ",", "NodeProp", ",", "parseMixed", ",", "SyntaxNode", "}", "from", "\"@lezer/common\"", ";", "import", "{", "LRParser", ",", "ParserConfig", "}", "from", "\"@lezer/lr\"", ";", "import", "{", "testTree", "}", "from", "\"../dist/test.js\"", ";", "import", "ist", "from", "\"ist\"", ";", "function", "p", "(", "text", ",", "options", "?", ",", "config", "?", ")", "{", "let", "value", "=", "null", ";", "return", "(", ")", "=>", "{", "if", "(", "!", "value", ")", "{", "value", "=", "buildParser", "(", "text", ",", "Object", ".", "assign", "(", "{", "}", ",", "{", "warn", "(", "e", ")", "{", "throw", "new", "Error", "(", "e", ")", ";", "}", "}", ",", "options", ")", ")", ";", "if", "(", "config", ")", "value", "=", "value", ".", "configure", "(", "config", ")", ";", "}", "return", "value", ";", "}", ";", "}", "function", "shared", "(", "a", ",", "b", ")", "{", "let", "inA", "=", "new", "Set", "<", "Tree", ">", "(", ")", ",", "shared", "=", "0", ";", "(", "function", "register", "(", "t", ")", "{", "if", "(", "t", "instanceof", "Tree", ")", "{", "let", "mounted", "=", "t", ".", "prop", "(", "NodeProp", ".", "mounted", ")", ";", "if", "(", "mounted", "&&", "!", "mounted", ".", "overlay", ")", "t", "=", "mounted", ".", "tree", ";", "t", ".", "children", ".", "forEach", "(", "register", ")", ";", "}", "inA", ".", "add", "(", "t", ")", ";", "}", ")", "(", "a", ")", ";", "(", "function", "scan", "(", "t", ")", "{", "if", "(", "inA", ".", "has", "(", "t", ")", ")", "{", "shared", "+=", "t", ".", "length", ";", "}", "else", "if", "(", "t", "instanceof", "Tree", ")", "{", "let", "mounted", "=", "t", ".", "prop", "(", "NodeProp", ".", "mounted", ")", ";", "(", "mounted", "&&", "!", "mounted", ".", "overlay", "?", "mounted", ".", "tree", ":", "t", ")", ".", "children", ".", "forEach", "(", "scan", ")", ";", "}", "}", ")", "(", "b", ")", ";", "return", "Math", ".", "round", "(", "100", "*", "shared", "/", "b", ".", "length", ")", ";", "}", "function", "fragments", "(", "tree", ",", "...", "changes", ")", "{", "return", "TreeFragment", ".", "applyChanges", "(", "TreeFragment", ".", "addTree", "(", "tree", ")", ",", "changes", ".", "map", "(", "(", "[", "fromA", ",", "toA", ",", "fromB", "=", "fromA", ",", "toB", "=", "toA", "]", ")", "=>", "(", "{", "fromA", ",", "toA", ",", "fromB", ",", "toB", "}", ")", ")", ",", "2", ")", ";", "}", "describe", "(", "\"parsing\"", ",", "(", ")", "=>", "{", "let", "p1", "=", "p", "(", "`\n    @precedence { call }\n\n    @top T { statement* }\n    statement { Cond | Loop | Block | expression \";\" }\n    Cond { kw<\"if\"> expression statement }\n    Block { \"{\" statement* \"}\" }\n    Loop { kw<\"while\"> expression statement }\n    expression { Call | Num | Var | \"!\" expression }\n    Call { expression !call \"(\" expression* \")\" }\n\n    kw<value> { @specialize<Var, value> }\n    @tokens {\n      Num { std.digit+ }\n      Var { std.asciiLetter+ }\n      whitespace { std.whitespace+ }\n    }\n    @skip { whitespace }`", ")", ";", "function", "qq", "(", "ast", ")", "{", "return", "function", "(", "query", ",", "offset", "=", "1", ")", ":", "{", "start", ":", "number", ";", "end", ":", "number", ";", "}", "{", "let", "result", "=", "null", ",", "cursor", "=", "ast", ".", "cursor", "(", ")", ";", "do", "{", "if", "(", "cursor", ".", "name", "==", "query", "&&", "--", "offset", "==", "0", ")", "result", "=", "{", "start", ":", "cursor", ".", "from", ",", "end", ":", "cursor", ".", "to", "}", ";", "}", "while", "(", "cursor", ".", "next", "(", ")", ")", ";", "if", "(", "result", ")", "return", "result", ";", "throw", "new", "Error", "(", "\"Couldn't find \"", "+", "query", ")", ";", "}", ";", "}", "it", "(", "\"can parse incrementally\"", ",", "(", ")", "=>", "{", "let", "doc", "=", "\"if true { print(1); hello; } while false { if 1 do(something 1 2 3); }\"", ".", "repeat", "(", "10", ")", ";", "let", "ast", "=", "p1", "(", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", "}", ")", ".", "parse", "(", "doc", ")", ";", "let", "content", "=", "\"Cond(Var,Block(Call(Var,Num),Var)),Loop(Var,Block(Cond(Num,Call(Var,Var,Num,Num,Num))))\"", ";", "let", "expected", "=", "\"T(\"", "+", "(", "content", "+", "\",\"", ")", ".", "repeat", "(", "9", ")", "+", "content", "+", "\")\"", ";", "testTree", "(", "ast", ",", "expected", ")", ";", "ist", "(", "ast", ".", "length", ",", "700", ")", ";", "let", "pos", "=", "doc", ".", "indexOf", "(", "\"false\"", ")", ",", "doc2", "=", "doc", ".", "slice", "(", "0", ",", "pos", ")", "+", "\"x\"", "+", "doc", ".", "slice", "(", "pos", "+", "5", ")", ";", "let", "ast2", "=", "p1", "(", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", "}", ")", ".", "parse", "(", "doc2", ",", "fragments", "(", "ast", ",", "[", "pos", ",", "pos", "+", "5", ",", "pos", ",", "pos", "+", "1", "]", ")", ")", ";", "testTree", "(", "ast2", ",", "expected", ")", ";", "ist", "(", "shared", "(", "ast", ",", "ast2", ")", ",", "40", ",", "\">\"", ")", ";", "ist", "(", "ast2", ".", "length", ",", "696", ")", ";", "}", ")", ";", "it", "(", "\"assigns the correct node positions\"", ",", "(", ")", "=>", "{", "let", "doc", "=", "\"if 1 { while 2 { foo(bar(baz bug)); } }\"", ";", "let", "ast", "=", "p1", "(", ")", ".", "configure", "(", "{", "bufferLength", ":", "10", ",", "strict", ":", "true", "}", ")", ".", "parse", "(", "doc", ")", ";", "let", "q", "=", "qq", "(", "ast", ")", ";", "ist", "(", "ast", ".", "length", ",", "39", ")", ";", "let", "cond", "=", "q", "(", "\"Cond\"", ")", ",", "one", "=", "q", "(", "\"Num\"", ")", ";", "ist", "(", "cond", ".", "start", ",", "0", ")", ";", "ist", "(", "cond", ".", "end", ",", "39", ")", ";", "ist", "(", "one", ".", "start", ",", "3", ")", ";", "ist", "(", "one", ".", "end", ",", "4", ")", ";", "let", "loop", "=", "q", "(", "\"Loop\"", ")", ",", "two", "=", "q", "(", "\"Num\"", ",", "2", ")", ";", "ist", "(", "loop", ".", "start", ",", "7", ")", ";", "ist", "(", "loop", ".", "end", ",", "37", ")", ";", "ist", "(", "two", ".", "start", ",", "13", ")", ";", "ist", "(", "two", ".", "end", ",", "14", ")", ";", "let", "call", "=", "q", "(", "\"Call\"", ")", ",", "inner", "=", "q", "(", "\"Call\"", ",", "2", ")", ";", "ist", "(", "call", ".", "start", ",", "17", ")", ";", "ist", "(", "call", ".", "end", ",", "34", ")", ";", "ist", "(", "inner", ".", "start", ",", "21", ")", ";", "ist", "(", "inner", ".", "end", ",", "33", ")", ";", "let", "bar", "=", "q", "(", "\"Var\"", ",", "2", ")", ",", "bug", "=", "q", "(", "\"Var\"", ",", "4", ")", ";", "ist", "(", "bar", ".", "start", ",", "21", ")", ";", "ist", "(", "bar", ".", "end", ",", "24", ")", ";", "ist", "(", "bug", ".", "start", ",", "29", ")", ";", "ist", "(", "bug", ".", "end", ",", "32", ")", ";", "}", ")", ";", "let", "resolveDoc", "=", "\"while 111 { one; two(three 20); }\"", ";", "function", "testResolve", "(", "bufferLength", ")", "{", "let", "ast", "=", "p1", "(", ")", ".", "configure", "(", "{", "strict", ":", "true", ",", "bufferLength", "}", ")", ".", "parse", "(", "resolveDoc", ")", ";", "let", "cx111", "=", "ast", ".", "cursor", "(", "7", ")", ";", "ist", "(", "cx111", ".", "name", ",", "\"Num\"", ")", ";", "ist", "(", "cx111", ".", "from", ",", "6", ")", ";", "ist", "(", "cx111", ".", "to", ",", "9", ")", ";", "cx111", ".", "parent", "(", ")", ";", "ist", "(", "cx111", ".", "name", ",", "\"Loop\"", ")", ";", "ist", "(", "cx111", ".", "from", ",", "0", ")", ";", "ist", "(", "cx111", ".", "to", ",", "33", ")", ";", "let", "cxThree", "=", "ast", ".", "cursor", "(", "22", ")", ";", "ist", "(", "cxThree", ".", "name", ",", "\"Var\"", ")", ";", "ist", "(", "cxThree", ".", "from", ",", "21", ")", ";", "ist", "(", "cxThree", ".", "to", ",", "26", ")", ";", "cxThree", ".", "parent", "(", ")", ";", "ist", "(", "cxThree", ".", "name", ",", "\"Call\"", ")", ";", "ist", "(", "cxThree", ".", "from", ",", "17", ")", ";", "ist", "(", "cxThree", ".", "to", ",", "30", ")", ";", "let", "branch", "=", "cxThree", ".", "moveTo", "(", "18", ")", ";", "ist", "(", "branch", ".", "name", ",", "\"Var\"", ")", ";", "ist", "(", "branch", ".", "from", ",", "17", ")", ";", "ist", "(", "branch", ".", "to", ",", "20", ")", ";", "ist", "(", "ast", ".", "cursor", "(", "6", ")", ".", "name", ",", "\"Loop\"", ")", ";", "ist", "(", "ast", ".", "cursor", "(", "9", ")", ".", "name", ",", "\"Loop\"", ")", ";", "let", "c", "=", "ast", ".", "cursor", "(", "20", ")", ";", "ist", "(", "c", ".", "firstChild", "(", ")", ")", ";", "ist", "(", "c", ".", "name", ",", "\"Var\"", ")", ";", "ist", "(", "c", ".", "nextSibling", "(", ")", ")", ";", "ist", "(", "c", ".", "name", ",", "\"Var\"", ")", ";", "ist", "(", "c", ".", "nextSibling", "(", ")", ")", ";", "ist", "(", "c", ".", "name", ",", "\"Num\"", ")", ";", "ist", "(", "!", "c", ".", "nextSibling", "(", ")", ")", ";", "}", "it", "(", "\"can resolve positions in buffers\"", ",", "(", ")", "=>", "testResolve", "(", "1024", ")", ")", ";", "it", "(", "\"can resolve positions in trees\"", ",", "(", ")", "=>", "testResolve", "(", "2", ")", ")", ";", "let", "iterDoc", "=", "\"while 1 { a; b; c(d e); } while 2 { f; }\"", ";", "let", "iterSeq", "=", "[", "\"T\"", ",", "0", ",", "\"Loop\"", ",", "0", ",", "\"Num\"", ",", "6", ",", "\"/Num\"", ",", "7", ",", "\"Block\"", ",", "8", ",", "\"Var\"", ",", "10", ",", "\"/Var\"", ",", "11", ",", "\"Var\"", ",", "13", ",", "\"/Var\"", ",", "14", ",", "\"Call\"", ",", "16", ",", "\"Var\"", ",", "16", ",", "\"/Var\"", ",", "17", ",", "\"Var\"", ",", "18", ",", "\"/Var\"", ",", "19", ",", "\"Var\"", ",", "20", ",", "\"/Var\"", ",", "21", ",", "\"/Call\"", ",", "22", ",", "\"/Block\"", ",", "25", ",", "\"/Loop\"", ",", "25", ",", "\"Loop\"", ",", "26", ",", "\"Num\"", ",", "32", ",", "\"/Num\"", ",", "33", ",", "\"Block\"", ",", "34", ",", "\"Var\"", ",", "36", ",", "\"/Var\"", ",", "37", ",", "\"/Block\"", ",", "40", ",", "\"/Loop\"", ",", "40", ",", "\"/T\"", ",", "40", "]", ";", "let", "partialSeq", "=", "[", "\"T\"", ",", "0", ",", "\"Loop\"", ",", "0", ",", "\"Block\"", ",", "8", ",", "\"Var\"", ",", "13", ",", "\"/Var\"", ",", "14", ",", "\"Call\"", ",", "16", ",", "\"Var\"", ",", "16", ",", "\"/Var\"", ",", "17", ",", "\"Var\"", ",", "18", ",", "\"/Var\"", ",", "19", ",", "\"/Call\"", ",", "22", ",", "\"/Block\"", ",", "25", ",", "\"/Loop\"", ",", "25", ",", "\"/T\"", ",", "40", "]", ";", "function", "testIter", "(", "bufferLength", ",", "partial", ")", "{", "let", "parser", "=", "p1", "(", ")", ",", "output", "=", "[", "]", ";", "let", "ast", "=", "parser", ".", "configure", "(", "{", "strict", ":", "true", ",", "bufferLength", "}", ")", ".", "parse", "(", "iterDoc", ")", ";", "ast", ".", "iterate", "(", "{", "from", ":", "partial", "?", "13", ":", "0", ",", "to", ":", "partial", "?", "19", ":", "ast", ".", "length", ",", "enter", "(", "open", ",", "start", ")", "{", "output", ".", "push", "(", "open", ".", "name", ",", "start", ")", ";", "}", ",", "leave", "(", "close", ",", "_", ",", "end", ")", "{", "output", ".", "push", "(", "\"/\"", "+", "close", ".", "name", ",", "end", ")", ";", "}", "}", ")", ";", "ist", "(", "output", ".", "join", "(", ")", ",", "(", "partial", "?", "partialSeq", ":", "iterSeq", ")", ".", "join", "(", ")", ")", ";", "}", "it", "(", "\"supports forward iteration in buffers\"", ",", "(", ")", "=>", "testIter", "(", "1024", ",", "false", ")", ")", ";", "it", "(", "\"supports forward iteration in trees\"", ",", "(", ")", "=>", "testIter", "(", "2", ",", "false", ")", ")", ";", "it", "(", "\"supports partial forward iteration in buffers\"", ",", "(", ")", "=>", "testIter", "(", "1024", ",", "true", ")", ")", ";", "it", "(", "\"supports partial forward iteration in trees\"", ",", "(", ")", "=>", "testIter", "(", "2", ",", "true", ")", ")", ";", "it", "(", "\"can skip individual nodes during iteration\"", ",", "(", ")", "=>", "{", "let", "ast", "=", "p1", "(", ")", ".", "parse", "(", "\"foo(baz(baz), bug(quux)\"", ")", ";", "let", "ids", "=", "0", ";", "ast", ".", "iterate", "(", "{", "enter", "(", "type", ",", "start", ")", "{", "if", "(", "type", ".", "name", "==", "\"Var\"", ")", "ids", "++", ";", "return", "start", "==", "4", "&&", "type", ".", "name", "==", "\"Call\"", "?", "false", ":", "undefined", ";", "}", "}", ")", ";", "ist", "(", "ids", ",", "3", ")", ";", "}", ")", ";", "it", "(", "\"doesn't incorrectly reuse nodes\"", ",", "(", ")", "=>", "{", "let", "parser", "=", "buildParser", "(", "`\n@precedence { times @left, plus @left }\n@top T { expr+ }\nexpr { Bin | Var }\nBin { expr !plus \"+\" expr | expr !times \"*\" expr }\n@skip { space }\n@tokens { space { \" \"+ } Var { \"x\" } \"*\"[@name=Times] \"+\"[@name=Plus] }\n`", ")", ";", "let", "p", "=", "parser", ".", "configure", "(", "{", "strict", ":", "true", ",", "bufferLength", ":", "2", "}", ")", ";", "let", "ast", "=", "p", ".", "parse", "(", "\"x + x + x\"", ")", ";", "testTree", "(", "ast", ",", "\"T(Bin(Bin(Var,Plus,Var),Plus,Var))\"", ")", ";", "let", "ast2", "=", "p", ".", "parse", "(", "\"x * x + x + x\"", ",", "fragments", "(", "ast", ",", "[", "0", ",", "0", ",", "0", ",", "4", "]", ")", ")", ";", "testTree", "(", "ast2", ",", "\"T(Bin(Bin(Bin(Var,Times,Var),Plus,Var),Plus,Var))\"", ")", ";", "}", ")", ";", "it", "(", "\"can cache skipped content\"", ",", "(", ")", "=>", "{", "let", "comments", "=", "buildParser", "(", "`\n@top T { \"x\"+ }\n@skip { space | Comment }\n@skip {} {\n  Comment { commentStart (Comment | commentContent)* commentEnd }\n}\n@tokens {\n  space { \" \"+ }\n  commentStart { \"(\" }\n  commentEnd { \")\" }\n  commentContent { ![()]+ }\n}`", ")", ";", "let", "doc", "=", "\"x  (one (two) (three \"", "+", "\"(y)\"", ".", "repeat", "(", "500", ")", "+", "\")) x\"", ";", "let", "ast", "=", "comments", ".", "configure", "(", "{", "bufferLength", ":", "10", ",", "strict", ":", "true", "}", ")", ".", "parse", "(", "doc", ")", ";", "let", "ast2", "=", "comments", ".", "configure", "(", "{", "bufferLength", ":", "10", "}", ")", ".", "parse", "(", "doc", ".", "slice", "(", "1", ")", ",", "fragments", "(", "ast", ",", "[", "0", ",", "1", ",", "0", ",", "0", "]", ")", ")", ";", "ist", "(", "shared", "(", "ast", ",", "ast2", ")", ",", "80", ",", "\">\"", ")", ";", "}", ")", ";", "it", "(", "\"doesn't get slow on long invalid input\"", ",", "(", ")", "=>", "{", "let", "t0", "=", "Date", ".", "now", "(", ")", ";", "let", "ast", "=", "p1", "(", ")", ".", "parse", "(", "\"#\"", ".", "repeat", "(", "2000", ")", ")", ";", "ist", "(", "Date", ".", "now", "(", ")", "-", "t0", "<", "500", ")", ";", "ist", "(", "ast", ".", "toString", "(", ")", ",", "\"T(⚠)\"", ")", ";", "}", ")", ";", "it", "(", "\"supports input ranges\"", ",", "(", ")", "=>", "{", "let", "tree", "=", "p1", "(", ")", ".", "parse", "(", "`if 1{{x}}0{{y}}0 foo {{z}};`", ",", "[", "]", ",", "[", "{", "from", ":", "0", ",", "to", ":", "4", "}", ",", "{", "from", ":", "9", ",", "to", ":", "10", "}", ",", "{", "from", ":", "15", ",", "to", ":", "21", "}", ",", "{", "from", ":", "26", ",", "to", ":", "27", "}", "]", ")", ";", "ist", "(", "tree", ".", "toString", "(", ")", ",", "\"T(Cond(Num,Var))\"", ")", ";", "}", ")", ";", "it", "(", "\"doesn't reuse nodes whose tokens looked ahead beyond the unchanged fragments\"", ",", "(", ")", "=>", "{", "let", "comments", "=", "buildParser", "(", "`\n@top Top { (Group | Char)* }\n@tokens {\n  Group { \"(\" ![)]* \")\" }\n  Char { _ }\n}`", ")", ".", "configure", "(", "{", "bufferLength", ":", "10", "}", ")", ";", "let", "doc", "=", "\"xxx(\"", "+", "\"x\"", ".", "repeat", "(", "996", ")", ";", "let", "tree1", "=", "comments", ".", "parse", "(", "doc", ")", ";", "let", "tree2", "=", "comments", ".", "parse", "(", "doc", "+", "\")\"", ",", "TreeFragment", ".", "applyChanges", "(", "TreeFragment", ".", "addTree", "(", "tree1", ")", ",", "[", "{", "fromA", ":", "1000", ",", "toA", ":", "1000", ",", "fromB", ":", "1000", ",", "toB", ":", "1001", "}", "]", ")", ")", ";", "ist", "(", "tree2", ".", "toString", "(", ")", ",", "\"Top(Char,Char,Char,Group)\"", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "\"sequences\"", ",", "(", ")", "=>", "{", "let", "p1", "=", "p", "(", "`\n    @top T { (X | Y)+ }\n    @skip { C }\n    C { \"c\" }\n    X { \"x\" }\n    Y { \"y\" \";\"* }`", ")", ";", "function", "depth", "(", "tree", ")", "{", "return", "tree", "instanceof", "Tree", "?", "tree", ".", "children", ".", "reduce", "(", "(", "d", ",", "c", ")", "=>", "Math", ".", "max", "(", "d", ",", "depth", "(", "c", ")", "+", "1", ")", ",", "1", ")", ":", "1", ";", "}", "function", "breadth", "(", "tree", ")", "{", "return", "tree", "instanceof", "Tree", "?", "tree", ".", "children", ".", "reduce", "(", "(", "b", ",", "c", ")", "=>", "Math", ".", "max", "(", "b", ",", "breadth", "(", "c", ")", ")", ",", "tree", ".", "children", ".", "length", ")", ":", "0", ";", "}", "it", "(", "\"balances parsed sequences\"", ",", "(", ")", "=>", "{", "let", "ast", "=", "p1", "(", ")", ".", "configure", "(", "{", "strict", ":", "true", ",", "bufferLength", ":", "10", "}", ")", ".", "parse", "(", "\"x\"", ".", "repeat", "(", "1000", ")", ")", ";", "let", "d", "=", "depth", "(", "ast", ")", ",", "b", "=", "breadth", "(", "ast", ")", ";", "ist", "(", "d", ",", "6", ",", "\"<=\"", ")", ";", "ist", "(", "d", ",", "4", ",", "\">=\"", ")", ";", "ist", "(", "b", ",", "5", ",", "\">=\"", ")", ";", "ist", "(", "b", ",", "10", ",", "\"<=\"", ")", ";", "}", ")", ";", "it", "(", "\"creates a tree for long content-less repeats\"", ",", "(", ")", "=>", "{", "let", "p", "=", "buildParser", "(", "`\n@top T { (A | B { \"[\" b+ \"]\" })+ }\n@tokens {\n  A { \"a\" }\n  b { \"b\" }\n}`", ")", ".", "configure", "(", "{", "bufferLength", ":", "10", "}", ")", ";", "let", "tree", "=", "p", ".", "parse", "(", "\"a[\"", "+", "\"b\"", ".", "repeat", "(", "500", ")", "+", "\"]\"", ")", ";", "ist", "(", "tree", ".", "toString", "(", ")", ",", "\"T(A,B)\"", ")", ";", "ist", "(", "depth", "(", "tree", ")", ",", "5", ",", "\">=\"", ")", ";", "}", ")", ";", "it", "(", "\"balancing doesn't get confused by skipped nodes\"", ",", "(", ")", "=>", "{", "let", "ast", "=", "p1", "(", ")", ".", "configure", "(", "{", "strict", ":", "true", ",", "bufferLength", ":", "10", "}", ")", ".", "parse", "(", "\"xc\"", ".", "repeat", "(", "1000", ")", ")", ";", "let", "d", "=", "depth", "(", "ast", ")", ",", "b", "=", "breadth", "(", "ast", ")", ";", "ist", "(", "d", ",", "6", ",", "\"<=\"", ")", ";", "ist", "(", "d", ",", "4", ",", "\">=\"", ")", ";", "ist", "(", "b", ",", "5", ",", "\">=\"", ")", ";", "ist", "(", "b", ",", "10", ",", "\"<=\"", ")", ";", "}", ")", ";", "it", "(", "\"caches parts of sequences\"", ",", "(", ")", "=>", "{", "let", "doc", "=", "\"x\"", ".", "repeat", "(", "1000", ")", ",", "p", "=", "p1", "(", ")", ".", "configure", "(", "{", "bufferLength", ":", "10", "}", ")", ";", "let", "ast", "=", "p", ".", "parse", "(", "doc", ")", ";", "let", "full", "=", "p", ".", "parse", "(", "doc", ",", "TreeFragment", ".", "addTree", "(", "ast", ")", ")", ";", "ist", "(", "shared", "(", "ast", ",", "full", ")", ",", "99", ",", "\">\"", ")", ";", "let", "front", "=", "p", ".", "parse", "(", "doc", ",", "fragments", "(", "ast", ",", "[", "900", ",", "1000", "]", ")", ")", ";", "ist", "(", "shared", "(", "ast", ",", "front", ")", ",", "50", ",", "\">\"", ")", ";", "let", "back", "=", "p", ".", "parse", "(", "doc", ",", "fragments", "(", "ast", ",", "[", "0", ",", "100", "]", ")", ")", ";", "ist", "(", "shared", "(", "ast", ",", "back", ")", ",", "50", ",", "\">\"", ")", ";", "let", "middle", "=", "p", ".", "parse", "(", "doc", ",", "fragments", "(", "ast", ",", "[", "0", ",", "100", "]", ",", "[", "900", ",", "1000", "]", ")", ")", ";", "ist", "(", "shared", "(", "ast", ",", "middle", ")", ",", "50", ",", "\">\"", ")", ";", "let", "sides", "=", "p", ".", "parse", "(", "doc", ",", "fragments", "(", "ast", ",", "[", "450", ",", "550", "]", ")", ")", ";", "ist", "(", "shared", "(", "ast", ",", "sides", ")", ",", "50", ",", "\">\"", ")", ";", "}", ")", ";", "it", "(", "\"assigns the right positions to sequences\"", ",", "(", ")", "=>", "{", "let", "doc", "=", "\"x\"", ".", "repeat", "(", "100", ")", "+", "\"y;;;;;;;;;\"", "+", "\"x\"", ".", "repeat", "(", "90", ")", ";", "let", "ast", "=", "p1", "(", ")", ".", "configure", "(", "{", "bufferLength", ":", "10", "}", ")", ".", "parse", "(", "doc", ")", ";", "let", "i", "=", "0", ";", "ast", ".", "iterate", "(", "{", "enter", "(", "type", ",", "start", ",", "end", ")", "{", "if", "(", "i", "==", "0", ")", "{", "ist", "(", "type", ".", "name", ",", "\"T\"", ")", ";", "}", "else", "if", "(", "i", "==", "101", ")", "{", "ist", "(", "type", ".", "name", ",", "\"Y\"", ")", ";", "ist", "(", "start", ",", "100", ")", ";", "ist", "(", "end", ",", "110", ")", ";", "}", "else", "{", "ist", "(", "type", ".", "name", ",", "\"X\"", ")", ";", "ist", "(", "end", ",", "start", "+", "1", ")", ";", "ist", "(", "start", ",", "i", "<=", "100", "?", "i", "-", "1", ":", "i", "+", "8", ")", ";", "}", "i", "++", ";", "}", "}", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "\"multiple tops\"", ",", "(", ")", "=>", "{", "it", "(", "\"parses named tops\"", ",", "(", ")", "=>", "{", "let", "parser", "=", "buildParser", "(", "`\n@top X { FOO C }\n@top Y { B C }\nFOO { B }\nB { \"b\" }\nC { \"c\" }\n`", ")", ";", "testTree", "(", "parser", ".", "parse", "(", "\"bc\"", ")", ",", "\"X(FOO(B), C)\"", ")", ";", "testTree", "(", "parser", ".", "configure", "(", "{", "top", ":", "\"X\"", "}", ")", ".", "parse", "(", "\"bc\"", ")", ",", "\"X(FOO(B), C)\"", ")", ";", "testTree", "(", "parser", ".", "configure", "(", "{", "top", ":", "\"Y\"", "}", ")", ".", "parse", "(", "\"bc\"", ")", ",", "\"Y(B, C)\"", ")", ";", "}", ")", ";", "it", "(", "\"parses first top as default\"", ",", "(", ")", "=>", "{", "let", "parser", "=", "buildParser", "(", "`\n@top X { FOO C }\n@top Y { B C }\nFOO { B }\nB { \"b\" }\nC { \"c\" }\n`", ")", ";", "testTree", "(", "parser", ".", "parse", "(", "\"bc\"", ")", ",", "\"X(FOO(B), C)\"", ")", ";", "testTree", "(", "parser", ".", "configure", "(", "{", "top", ":", "\"Y\"", "}", ")", ".", "parse", "(", "\"bc\"", ")", ",", "\"Y(B, C)\"", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "\"mixed languages\"", ",", "(", ")", "=>", "{", "const", "blob", "=", "p", "(", "`@top Blob { ch* } @tokens { ch { _ } }`", ",", "undefined", ",", "{", "bufferLength", ":", "10", "}", ")", ";", "it", "(", "\"can mix grammars\"", ",", "(", ")", "=>", "{", "let", "inner", "=", "buildParser", "(", "`\n      @top I { expr+ }\n      expr { B { Open{\"(\"} expr+ Close{\")\"} } | Dot{\".\"} }`", ")", ";", "let", "outer", "=", "buildParser", "(", "`\n      @top O { expr+ }\n      expr { \"[[\" NestContent \"]]\" | Bang{\"!\"} }\n      @tokens {\n        NestContent[@export] { ![\\\\]]+ }\n        \"[[\"[@name=Start] \"]]\"[@name=End]\n      }\n    `", ")", ".", "configure", "(", "{", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "if", "(", "node", ".", "name", "==", "\"NestContent\"", ")", "return", "{", "parser", ":", "inner", "}", ";", "return", "null", ";", "}", ")", "}", ")", ";", "testTree", "(", "outer", ".", "parse", "(", "\"![[((.).)]][[.]]\"", ")", ",", "'O(Bang,Start,I(B(Open,B(Open,Dot,Close),Dot,Close)),End,Start,I(Dot),End)'", ")", ";", "testTree", "(", "outer", ".", "parse", "(", "\"[[/\\]]\"", ")", ",", "'O(Start,I(⚠),End)'", ")", ";", "let", "tree", "=", "outer", ".", "parse", "(", "\"[[(.)]]\"", ")", ";", "let", "innerNode", "=", "tree", ".", "topNode", ".", "childAfter", "(", "2", ")", "!", ";", "ist", "(", "innerNode", ".", "name", ",", "\"I\"", ")", ";", "ist", "(", "innerNode", ".", "from", ",", "2", ")", ";", "ist", "(", "innerNode", ".", "to", ",", "5", ")", ";", "ist", "(", "innerNode", ".", "firstChild", "!", ".", "from", ",", "2", ")", ";", "ist", "(", "innerNode", ".", "firstChild", "!", ".", "to", ",", "5", ")", ";", "}", ")", ";", "it", "(", "\"supports conditional nesting\"", ",", "(", ")", "=>", "{", "let", "inner", "=", "buildParser", "(", "`@top Script { any } @tokens { any { ![]+ } }`", ")", ";", "let", "outer", "=", "buildParser", "(", "`\n      @top T { Tag }\n      Tag { Open Content? Close }\n      Open { \"<\" name \">\" }\n      Close { \"</\" name \">\" }\n      @tokens {\n        name { std.asciiLetter+ }\n        Content { ![<]+ }\n      }\n    `", ")", ".", "configure", "(", "{", "wrap", ":", "parseMixed", "(", "(", "node", ",", "input", ")", "=>", "{", "if", "(", "node", ".", "name", "==", "\"Content\"", ")", "{", "let", "open", "=", "node", ".", "node", ".", "parent", "!", ".", "firstChild", "!", ";", "if", "(", "input", ".", "read", "(", "open", ".", "from", ",", "open", ".", "to", ")", "==", "\"<script>\"", ")", "return", "{", "parser", ":", "inner", "}", ";", "}", "return", "null", ";", "}", ")", "}", ")", ";", "testTree", "(", "outer", ".", "parse", "(", "\"<foo>bar</foo>\"", ")", ",", "\"T(Tag(Open,Content,Close))\"", ")", ";", "testTree", "(", "outer", ".", "parse", "(", "\"<script>hello</script>\"", ")", ",", "\"T(Tag(Open,Script,Close))\"", ")", ";", "}", ")", ";", "it", "(", "\"can parse incrementally across nesting\"", ",", "(", ")", "=>", "{", "let", "outer", "=", "buildParser", "(", "`\n      @top Program { (Nest | Name)* }\n      @skip { space }\n      @skip {} {\n        Nest { \"{\" Nested \"}\" }\n        Nested { nestedChar* }\n      }\n      @tokens {\n        space { std.whitespace+ }\n        nestedChar { ![}] }\n        Name { $[a-z]+ }\n      }\n    `", ")", ".", "configure", "(", "{", "bufferLength", ":", "10", ",", "wrap", ":", "parseMixed", "(", "node", "=>", "node", ".", "name", "==", "\"Nested\"", "?", "{", "parser", ":", "blob", "(", ")", "}", ":", "null", ")", "}", ")", ";", "let", "base", "=", "\"hello {bbbb} \"", ";", "let", "doc", "=", "base", ".", "repeat", "(", "500", ")", "+", "\"{\"", "+", "\"b\"", ".", "repeat", "(", "1000", ")", "+", "\"} \"", "+", "base", ".", "repeat", "(", "500", ")", ",", "off", "=", "base", ".", "length", "*", "500", "+", "500", ";", "let", "ast1", "=", "outer", ".", "parse", "(", "doc", ")", ";", "let", "ast2", "=", "outer", ".", "parse", "(", "doc", ".", "slice", "(", "0", ",", "off", ")", "+", "\"bbb\"", "+", "doc", ".", "slice", "(", "off", ")", ",", "TreeFragment", ".", "applyChanges", "(", "TreeFragment", ".", "addTree", "(", "ast1", ")", ",", "[", "{", "fromA", ":", "off", ",", "toA", ":", "off", ",", "fromB", ":", "off", ",", "toB", ":", "off", "+", "3", "}", "]", ")", ")", ";", "ist", "(", "ast1", ".", "toString", "(", ")", ",", "ast2", ".", "toString", "(", ")", ")", ";", "ist", "(", "shared", "(", "ast1", ",", "ast2", ")", ",", "90", ",", "\">\"", ")", ";", "}", ")", ";", "it", "(", "\"can create overlays\"", ",", "(", ")", "=>", "{", "let", "outer", "=", "buildParser", "(", "`\n      @top Doc { (Dir | Content)* }\n      Dir { \"{{\" Word \"}}\" }\n      @tokens {\n        Content { (![{] | \"{\" ![{])+ }\n        Word { $[a-z]+ }\n      }\n    `", ")", ";", "let", "mix", "=", "outer", ".", "configure", "(", "{", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "return", "node", ".", "name", "==", "\"Doc\"", "?", "{", "parser", ":", "blob", "(", ")", ",", "overlay", ":", "node", "=>", "node", ".", "name", "==", "\"Content\"", "}", ":", "null", ";", "}", ")", "}", ")", ";", "let", "tree", "=", "mix", ".", "parse", "(", "\"foo{{bar}}baz{{bug}}\"", ")", ";", "ist", "(", "tree", ".", "toString", "(", ")", ",", "\"Doc(Content,Dir(Word),Content,Dir(Word))\"", ")", ";", "let", "c1", "=", "tree", ".", "resolveInner", "(", "1", ")", ";", "ist", "(", "c1", ".", "name", ",", "\"Blob\"", ")", ";", "ist", "(", "c1", ".", "from", ",", "0", ")", ";", "ist", "(", "c1", ".", "to", ",", "13", ")", ";", "ist", "(", "c1", ".", "parent", "!", ".", "name", ",", "\"Doc\"", ")", ";", "ist", "(", "tree", ".", "resolveInner", "(", "10", ",", "1", ")", ".", "name", ",", "\"Blob\"", ")", ";", "let", "mix2", "=", "outer", ".", "configure", "(", "{", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "return", "node", ".", "name", "==", "\"Doc\"", "?", "{", "parser", ":", "blob", "(", ")", ",", "overlay", ":", "[", "{", "from", ":", "5", ",", "to", ":", "7", "}", "]", "}", ":", "null", ";", "}", ")", "}", ")", ";", "let", "tree2", "=", "mix2", ".", "parse", "(", "\"{{a}}bc{{d}}\"", ")", ";", "let", "c2", "=", "tree2", ".", "resolveInner", "(", "6", ")", ";", "ist", "(", "c2", ".", "name", ",", "\"Blob\"", ")", ";", "ist", "(", "c2", ".", "from", ",", "5", ")", ";", "ist", "(", "c2", ".", "to", ",", "7", ")", ";", "}", ")", ";", "it", "(", "\"reuses ranges from previous parses\"", ",", "(", ")", "=>", "{", "let", "outer", "=", "buildParser", "(", "`\n      @top Doc { expr* }\n      expr {\n        Paren { \"(\" expr* \")\" } |\n        Array { \"[\" expr* \"]\" } |\n        Number |\n        String\n      }\n      @skip { space }\n      @tokens {\n        Number { $[0-9]+ }\n        String { \"'\" ![']* \"'\" }\n        space { $[ \\n]+ }\n      }\n    `", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", ",", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "return", "node", ".", "name", "==", "\"Array\"", "?", "{", "parser", ":", "blob", "(", ")", ",", "overlay", ":", "node", "=>", "{", "if", "(", "node", ".", "name", "==", "\"String\"", ")", "{", "queried", ".", "push", "(", "node", ".", "from", ")", ";", "return", "true", ";", "}", "return", "false", ";", "}", "}", ":", "null", ";", "}", ")", "}", ")", ";", "let", "queried", "=", "[", "]", ";", "let", "doc", "=", "\" (100) (() [50] 123456789012345678901234 ((['one' 123456789012345678901234 (('two'))]) ['three'])) \"", ";", "let", "tree", "=", "outer", ".", "parse", "(", "doc", ")", ";", "ist", "(", "tree", ".", "toString", "(", ")", ",", "\"Doc(Paren(Number),Paren(Paren,Array(Number),Number,Paren(Paren(Array(String,Number,Paren(Paren(String)))),Array(String))))\"", ")", ";", "let", "inOne", "=", "tree", ".", "resolveInner", "(", "45", ")", ";", "ist", "(", "inOne", ".", "name", ",", "\"Blob\"", ")", ";", "ist", "(", "inOne", ".", "from", ",", "44", ")", ";", "ist", "(", "inOne", ".", "to", ",", "82", ")", ";", "ist", "(", "inOne", ".", "nextSibling", ",", "null", ")", ";", "ist", "(", "inOne", ".", "prevSibling", ",", "null", ")", ";", "ist", "(", "inOne", ".", "parent", "!", ".", "name", ",", "\"Array\"", ")", ";", "ist", "(", "tree", ".", "resolveInner", "(", "89", ")", ".", "name", ",", "\"Blob\"", ")", ";", "ist", "(", "queried", ".", "join", "(", ")", ",", "\"44,77,88\"", ")", ";", "queried", ".", "length", "=", "0", ";", "let", "tree2", "=", "outer", ".", "parse", "(", "doc", ".", "slice", "(", "0", ",", "45", ")", "+", "\"x\"", "+", "doc", ".", "slice", "(", "46", ")", ",", "fragments", "(", "tree", ",", "[", "45", ",", "46", "]", ")", ")", ";", "ist", "(", "queried", ".", "join", "(", ")", ",", "\"44\"", ")", ";", "ist", "(", "shared", "(", "tree", ",", "tree2", ")", ",", "20", ",", "\">\"", ")", ";", "}", ")", ";", "it", "(", "\"properly handles fragment offsets\"", ",", "(", ")", "=>", "{", "let", "inner", "=", "buildParser", "(", "`@top Text { (Word | \" \")* } @tokens { Word { ![ ]+ } }`", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", "}", ")", ";", "let", "outer", "=", "buildParser", "(", "`\n      @top Doc { expr* }\n      expr { Wrap { \"(\" expr* \")\" } | Templ { \"[\" expr* \"]\" } | Number | String }\n      @skip { space }\n      @tokens {\n        Number { $[0-9]+ }\n        String { \"'\" ![']* \"'\" }\n        space { $[ \\n]+ }\n      }\n    `", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", ",", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "return", "node", ".", "name", "==", "\"Templ\"", "?", "{", "parser", ":", "inner", ",", "overlay", ":", "node", "=>", "node", ".", "name", "==", "\"String\"", "?", "{", "from", ":", "node", ".", "from", "+", "1", ",", "to", ":", "node", ".", "to", "-", "1", "}", ":", "false", "}", ":", "null", ";", "}", ")", "}", ")", ";", "let", "doc", "=", "\" 0123456789012345678901234 (['123456789 123456789 12345 stuff' 123456789 (('123456789 123456789 12345 other' 4))] 200)\"", ";", "let", "tree", "=", "outer", ".", "parse", "(", "doc", ")", ";", "let", "tree1", "=", "outer", ".", "parse", "(", "\"88\"", "+", "doc", ",", "fragments", "(", "tree", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ")", ")", ";", "ist", "(", "tree", ".", "resolveInner", "(", "50", ")", ".", "tree", ",", "tree1", ".", "resolveInner", "(", "52", ")", ".", "tree", ")", ";", "let", "tree2", "=", "outer", ".", "parse", "(", "\"88\"", "+", "doc", ".", "slice", "(", "0", ",", "30", ")", "+", "doc", ".", "slice", "(", "31", ")", ",", "fragments", "(", "tree", ",", "[", "0", ",", "0", ",", "0", ",", "2", "]", ",", "[", "30", ",", "31", ",", "32", ",", "32", "]", ")", ")", ";", "ist", "(", "shared", "(", "tree", ",", "tree2", ")", ",", "20", ",", "\">\"", ")", ";", "ist", "(", "shared", "(", "tree", ".", "resolveInner", "(", "49", ")", ".", "tree", "!", ",", "tree2", ".", "resolveInner", "(", "50", ")", ".", "tree", "!", ")", ",", "20", ",", "\">\"", ")", ";", "let", "other", "=", "tree2", ".", "resolveInner", "(", "103", ",", "1", ")", ";", "ist", "(", "other", ".", "from", ",", "103", ")", ";", "ist", "(", "other", ".", "to", ",", "108", ")", ";", "}", ")", ";", "it", "(", "\"supports nested overlays\"", ",", "(", ")", "=>", "{", "let", "outer", "=", "buildParser", "(", "`\n      @top Doc { expr* }\n      expr {\n        Paren { \"(\" expr* \")\" } |\n        Array { \"[\" expr* \"]\" } |\n        Number |\n        String\n      }\n      @skip { space }\n      @tokens {\n        Number { $[0-9]+ }\n        String { \"'\" ![']* \"'\" }\n        space { $[ \\n]+ }\n      }\n    `", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", ",", "}", ")", ";", "function", "testMixed", "(", "parser", ")", "{", "let", "tree", "=", "parser", ".", "parse", "(", "\"['x' 100 (['xxx' 20 ('xx')] 'xxx')]\"", ")", ";", "let", "blob1", "=", "tree", ".", "resolveInner", "(", "2", ",", "1", ")", ";", "ist", "(", "blob1", ".", "name", ",", "\"Blob\"", ")", ";", "ist", "(", "blob1", ".", "from", ",", "2", ")", ";", "ist", "(", "blob1", ".", "to", ",", "32", ")", ";", "let", "blob2", "=", "tree", ".", "resolveInner", "(", "12", ",", "1", ")", ";", "ist", "(", "blob2", ".", "name", ",", "\"Blob\"", ")", ";", "ist", "(", "blob2", ".", "from", ",", "12", ")", ";", "ist", "(", "blob2", ".", "to", ",", "24", ")", ";", "}", "testMixed", "(", "outer", ".", "configure", "(", "{", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "return", "node", ".", "name", "==", "\"Array\"", "?", "{", "parser", ":", "blob", "(", ")", ",", "overlay", ":", "node", "=>", "node", ".", "name", "==", "\"String\"", "?", "{", "from", ":", "node", ".", "from", "+", "1", ",", "to", ":", "node", ".", "to", "-", "1", "}", ":", "false", "}", ":", "null", ";", "}", ")", "}", ")", ")", ";", "testMixed", "(", "outer", ".", "configure", "(", "{", "wrap", ":", "parseMixed", "(", "node", "=>", "{", "if", "(", "node", ".", "name", "!=", "\"Array\"", ")", "return", "null", ";", "let", "ranges", "=", "[", "]", ";", "let", "scan", "=", "(", "node", ")", "=>", "{", "if", "(", "node", ".", "name", "==", "\"String\"", ")", "ranges", ".", "push", "(", "{", "from", ":", "node", ".", "from", "+", "1", ",", "to", ":", "node", ".", "to", "-", "1", "}", ")", ";", "else", "for", "(", "let", "ch", "=", "node", ".", "firstChild", ";", "ch", ";", "ch", "=", "ch", ".", "nextSibling", ")", "if", "(", "ch", ".", "name", "!=", "\"Array\"", ")", "scan", "(", "ch", ")", ";", "}", ";", "scan", "(", "node", ".", "node", ")", ";", "return", "{", "parser", ":", "blob", "(", ")", ",", "overlay", ":", "ranges", "}", ";", "}", ")", "}", ")", ")", ";", "}", ")", ";", "it", "(", "\"re-parses cut-off inner parses even if the outer tree was finished\"", ",", "(", ")", "=>", "{", "let", "inner", "=", "buildParser", "(", "`@top Phrase { \"<\" ch* \">\" } @tokens { ch { ![>] } }`", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", "}", ")", ";", "let", "parser", "=", "buildParser", "(", "`\n      @top Doc { Section* }\n      Section { \"{\" SectionContent? \"}\" }\n      @tokens { SectionContent { ![}]+ } }\n    `", ")", ".", "configure", "(", "{", "bufferLength", ":", "2", ",", "wrap", ":", "parseMixed", "(", "node", "=>", "node", ".", "name", "==", "\"SectionContent\"", "?", "{", "parser", ":", "inner", "}", ":", "null", ")", "}", ")", ";", "let", "input", "=", "`{<${", "\"x\"", ".", "repeat", "(", "100", ")", "}>}{<xxxx>}`", ",", "tree1", ";", "let", "parse", "=", "parser", ".", "startParse", "(", "input", ")", ";", "while", "(", "parse", ".", "parsedPos", "<", "50", ")", "parse", ".", "advance", "(", ")", ";", "parse", ".", "stopAt", "(", "parse", ".", "parsedPos", ")", ";", "while", "(", "!", "(", "tree1", "=", "parse", ".", "advance", "(", ")", ")", ")", "{", "}", "ist", "(", "tree1", ".", "toString", "(", ")", ",", "\"Doc(Section(Phrase(⚠)),Section(Phrase(⚠)))\"", ")", ";", "let", "tree2", "=", "parser", ".", "parse", "(", "input", ",", "TreeFragment", ".", "addTree", "(", "tree1", ")", ")", ";", "ist", "(", "tree2", ".", "toString", "(", ")", ",", "\"Doc(Section(Phrase),Section(Phrase))\"", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LRParser", null, "string", null, "BuildOptions", null, null, "UNK", null, null, null, null, "LRParser", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Tree", null, "Tree", null, null, null, "Set", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LRParser", null, null, null, null, null, null, null, "object", null, "Tree", null, null, null, null, null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "void", null, "number", null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, "boolean", null, null, null, "LRParser", null, null, null, null, null, "array", null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "NodeType", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "NodeType", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "boolean", null, "NodeType", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LRParser", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "LRParser", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "void", null, "NodeType", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LRParser", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, "Input", null, null, null, null, null, null, null, null, null, null, null, null, null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "LRParser", null, null, null, "Tree", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "void", null, null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TreeCursor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/test/test-parse.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "test-parse.ts"}
{"tokens": ["import", "{", "fileTests", "}", "from", "\"../dist/test.js\"", ";", "describe", "(", "\"test\"", ",", "(", ")", "=>", "{", "it", "(", "\"handle parser error\"", ",", "(", ")", "=>", "{", "const", "content", "=", "`\n# Working Spec\n\nb\n\n==> B\n\n# Broken Spec\n\nbbbb bbbb bbbb bbbb\nbbbb bbbb bbbb bbbb\nbbbb bbbb bbbb bbbb\nbbbb bbbb bbbb bbbb aaaa\nbbbb\n`", ";", "const", "expectedError", "=", "`Unexpected file format in test-error.txt around\n\n  | # Broken Spec\n  |${", "' '", "}\n  | bbbb bbbb bbbb bbbb\n  | bbbb bbbb bbbb bbbb\n  | bbbb bbbb bbbb bbbb\n  | bbbb bbbb bbbb bbbb aaaa`", ";", "const", "file", "=", "\"test-error.txt\"", ";", "try", "{", "fileTests", "(", "content", ",", "file", ")", ";", "}", "catch", "(", "err", ")", "{", "if", "(", "err", ".", "message", "!==", "expectedError", ")", "{", "throw", "err", ";", "}", "}", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/lezer-parser/generator", "path": "generator/test/test-test.ts", "commit_hash": "c80cfcf4ad467654b4ba6766b942509405eee754", "file": "test-test.ts"}
{"tokens": ["exports", "import", "{", "injectable", "}", "from", "'inversify'", ";", "import", "{", "get", ",", "has", ",", "isPlainObject", ",", "merge", ",", "set", "}", "from", "'lodash'", ";", "/**\n * Config\n * An easy to use application wide configuration class\n */", "@", "injectable", "(", ")", "export", "class", "Config", "{", "var", "protected", "tree", ":", "object", ";", "param", "{", "object", "}", "obj", "return", "{", "object", "}", "protected", "static", "freeze", "(", "obj", ")", "{", "const", "newObject", "=", "{", "}", ";", "Object", ".", "getOwnPropertyNames", "(", "obj", ")", ".", "forEach", "(", "(", "key", ")", "=>", "{", "if", "(", "isPlainObject", "(", "obj", "[", "key", "]", ")", ")", "{", "newObject", "[", "key", "]", "=", "this", ".", "freeze", "(", "obj", "[", "key", "]", ")", ";", "}", "else", "{", "newObject", "[", "key", "]", "=", "obj", "[", "key", "]", ";", "}", "}", ")", ";", "return", "Object", ".", "freeze", "(", "newObject", ")", ";", "}", "param", "{", "object", "}", "obj", "return", "{", "object", "}", "protected", "static", "unfreeze", "(", "obj", ")", "{", "const", "newObject", "=", "{", "}", ";", "Object", ".", "getOwnPropertyNames", "(", "obj", ")", ".", "forEach", "(", "(", "key", ")", "=>", "{", "if", "(", "typeof", "obj", "[", "key", "]", "===", "'object'", ")", "{", "newObject", "[", "key", "]", "=", "this", ".", "unfreeze", "(", "obj", "[", "key", "]", ")", ";", "}", "else", "{", "newObject", "[", "key", "]", "=", "obj", "[", "key", "]", ";", "}", "}", ")", ";", "return", "newObject", ";", "}", "var", "protected", "get", "immutable", "(", ")", "{", "return", "Object", ".", "isFrozen", "(", "this", ".", "tree", ")", ";", "}", "param", "{", "object", "}", "configuration", "constructor", "(", "configuration", "=", "{", "}", ")", "{", "this", ".", "tree", "=", "configuration", ";", "}", "param", "{", "*", "}", "key", "param", "{", "*", "}", "def", "return", "{", "*", "}", "public", "get", "(", "key", ",", "def", "?", ")", "{", "if", "(", "key", "===", "'.'", ")", "{", "return", "this", ".", "tree", ";", "}", "if", "(", "this", ".", "has", "(", "key", ")", "===", "false", ")", "{", "return", "def", ";", "}", "return", "get", "(", "this", ".", "tree", ",", "key", ")", ";", "}", "param", "{", "string", "}", "key", "return", "{", "boolean", "}", "public", "has", "(", "key", ")", "{", "return", "has", "(", "this", ".", "tree", ",", "key", ")", ";", "}", "param", "{", "string", "}", "key", "param", "{", "*", "}", "return", "{", "Config", "}", "public", "set", "(", "key", ",", "value", ")", "{", "if", "(", "this", ".", "immutable", "===", "true", ")", "{", "throw", "new", "Error", "(", "'Configuration is immutable'", ")", ";", "}", "set", "(", "this", ".", "tree", ",", "key", ",", "value", ")", ";", "return", "this", ";", "}", "param", "{", "object", "}", "obj", "return", "{", "Config", "}", "public", "merge", "(", "obj", ")", "{", "if", "(", "this", ".", "immutable", "===", "true", ")", "{", "throw", "new", "Error", "(", "'Configuration is immutable'", ")", ";", "}", "merge", "(", "this", ".", "tree", ",", "obj", ")", ";", "return", "this", ";", "}", "return", "{", "Config", "}", "public", "freeze", "(", ")", "{", "this", ".", "tree", "=", "Config", ".", "freeze", "(", "this", ".", "tree", ")", ";", "return", "this", ";", "}", "return", "{", "Config", "}", "public", "unfreeze", "(", ")", "{", "this", ".", "tree", "=", "Config", ".", "unfreeze", "(", "this", ".", "tree", ")", ";", "return", "this", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "object", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "object", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/config/config.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "config.ts"}
{"tokens": ["exports", "exports", "exports", "exports", "import", "*", "as", "fs", "from", "'fs'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Config", "}", "from", "'./index'", ";", "var", "const", "environmentPrefix", "=", "'HOUSTON'", ";", "var", "const", "configurationPaths", "=", "[", "path", ".", "resolve", "(", "process", ".", "cwd", "(", ")", ",", "'config.js'", ")", ",", "path", ".", "resolve", "(", "'/etc/houston/config.js'", ")", "]", ";", "example", "param", "{", "string", "}", "str", "return", "{", "string", "}", "export", "function", "stringToDot", "(", "str", ")", "{", "return", "str", ".", "toLowerCase", "(", ")", ".", "split", "(", "'_'", ")", ".", "splice", "(", "1", ")", ".", "join", "(", "'.'", ")", ".", "replace", "(", "'env'", ",", "'environment'", ")", ";", "}", "return", "{", "Config", "}", "export", "function", "getEnvironmentConfig", "(", ")", "{", "const", "config", "=", "new", "Config", "(", ")", ";", "Object", ".", "keys", "(", "process", ".", "env", ")", ".", "forEach", "(", "(", "key", ")", "=>", "{", "if", "(", "key", ".", "startsWith", "(", "environmentPrefix", ")", ")", "{", "const", "name", "=", "stringToDot", "(", "key", ")", ";", "const", "numberValue", "=", "Number", "(", "process", ".", "env", "[", "key", "]", ")", ";", "if", "(", "isNaN", "(", "numberValue", ")", "===", "false", ")", "{", "config", ".", "set", "(", "name", ",", "numberValue", ")", ";", "}", "else", "{", "config", ".", "set", "(", "name", ",", "process", ".", "env", "[", "key", "]", ")", ";", "}", "}", "}", ")", ";", "if", "(", "process", ".", "env", ".", "NODE_ENV", "!=", "null", ")", "{", "config", ".", "set", "(", "'environment'", ",", "process", ".", "env", ".", "NODE_ENV", ")", ";", "}", "if", "(", "process", ".", "env", ".", "NODE_DEBUG", "!=", "null", ")", "{", "config", ".", "set", "(", "'log.console'", ",", "'debug'", ")", ";", "}", "return", "config", ".", "freeze", "(", ")", ";", "}", "return", "{", "Config", "}", "export", "function", "getProgramConfig", "(", ")", "{", "const", "config", "=", "new", "Config", "(", ")", ";", "try", "{", "const", "pkg", "=", "require", "(", "'../../../package.json'", ")", ";", "const", "[", "major", ",", "minor", ",", "patch", "]", "=", "pkg", ".", "version", ".", "split", "(", "'-'", ")", "[", "0", "]", ".", "split", "(", "'.'", ")", ";", "config", ".", "set", "(", "'houston.version'", ",", "pkg", ".", "version", ")", ";", "config", ".", "set", "(", "'houston.major'", ",", "major", ")", ";", "config", ".", "set", "(", "'houston.minor'", ",", "minor", ")", ";", "config", ".", "set", "(", "'houston.patch'", ",", "patch", ")", ";", "}", "catch", "(", "e", ")", "{", "}", "try", "{", "const", "gitCommitPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'..'", ",", "'..'", ",", "'..'", ",", "'.git'", ",", "'ORIG_HEAD'", ")", ";", "const", "exists", "=", "fs", ".", "statSync", "(", "gitCommitPath", ")", ".", "isFile", "(", ")", ";", "if", "(", "exists", "===", "true", ")", "{", "const", "commit", "=", "fs", ".", "readFileSync", "(", "gitCommitPath", ",", "{", "encoding", ":", "'utf8'", "}", ")", ".", "trim", "(", ")", ";", "config", ".", "set", "(", "'houston.commit'", ",", "commit", ")", ";", "}", "}", "catch", "(", "e", ")", "{", "}", "try", "{", "const", "gitChangePath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'..'", ",", "'..'", ",", "'..'", ",", "'.git'", ",", "'COMMIT_EDITMSG'", ")", ";", "const", "exists", "=", "fs", ".", "statSync", "(", "gitChangePath", ")", ".", "isFile", "(", ")", ";", "if", "(", "exists", "===", "true", ")", "{", "const", "change", "=", "fs", ".", "readFileSync", "(", "gitChangePath", ",", "{", "encoding", ":", "'utf8'", "}", ")", ".", "trim", "(", ")", ";", "config", ".", "set", "(", "'houston.change'", ",", "change", ")", ";", "}", "}", "catch", "(", "e", ")", "{", "}", "return", "config", ".", "freeze", "(", ")", ";", "}", "param", "{", "string", "}", "p", "throws", "return", "{", "Config", "}", "export", "function", "getFileConfig", "(", "p", "?", ")", "{", "const", "config", "=", "new", "Config", "(", ")", ";", "let", "file", "=", "{", "}", ";", "if", "(", "p", "!=", "null", "&&", "p", ".", "startsWith", "(", "'/'", ")", ")", "{", "file", "=", "require", "(", "p", ")", ";", "}", "else", "if", "(", "p", "!=", "null", ")", "{", "const", "relativeP", "=", "path", ".", "resolve", "(", "process", ".", "cwd", "(", ")", ",", "p", ")", ";", "file", "=", "require", "(", "relativeP", ")", ";", "}", "else", "{", "for", "(", "const", "possible", "of", "configurationPaths", ")", "{", "try", "{", "if", "(", "fs", ".", "statSync", "(", "possible", ")", ".", "isFile", "(", ")", ")", "{", "file", "=", "require", "(", "possible", ")", ";", "break", ";", "}", "}", "catch", "(", "e", ")", "{", "}", "}", "}", "return", "config", ".", "merge", "(", "file", ")", ".", "freeze", "(", ")", ";", "}", "param", "{", "string", "}", "p", "throws", "return", "{", "Config", "}", "export", "function", "getConfig", "(", "p", "?", ")", "{", "const", "environment", "=", "getEnvironmentConfig", "(", ")", ";", "const", "program", "=", "getProgramConfig", "(", ")", ";", "const", "file", "=", "getFileConfig", "(", "p", ")", ";", "const", "config", "=", "new", "Config", "(", ")", ";", "return", "config", ".", "merge", "(", "program", ".", "get", "(", "'.'", ")", ")", ".", "merge", "(", "file", ".", "get", "(", "'.'", ")", ")", ".", "merge", "(", "environment", ".", "get", "(", "'.'", ")", ")", ".", "freeze", "(", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, "string", null, null, null, null, "Config", null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, "string", null, null, null, null, "Config", null, null, null, null, null, null, "Config", null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/config/loader.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "loader.ts"}
{"tokens": ["/**\n * houston/src/lib/app.ts\n * IOC container for houston. This is the entrypoint to anything and everything\n * sweat in life.\n */", "import", "{", "Container", ",", "ContainerModule", "}", "from", "'inversify'", ";", "import", "{", "Config", "}", "from", "'./config'", ";", "/**\n * App\n * A houston IOC container\n */", "export", "class", "App", "extends", "Container", "{", "var", "protected", "static", "providers", ":", "ContainerModule", "[", "]", "=", "[", "require", "(", "'../repo/provider'", ")", ".", "provider", ",", "require", "(", "'../worker/provider'", ")", ".", "provider", ",", "require", "(", "'./cache/provider'", ")", ".", "provider", ",", "require", "(", "'./database/provider'", ")", ".", "provider", ",", "require", "(", "'./log/provider'", ")", ".", "provider", ",", "require", "(", "'./queue/provider'", ")", ".", "provider", ",", "require", "(", "'./service/provider'", ")", ".", "provider", "]", ";", "param", "{", "Config", "}", "config", "public", "constructor", "(", "config", ")", "{", "super", "(", ")", ";", "this", ".", "bind", "<", "App", ">", "(", "App", ")", ".", "toConstantValue", "(", "this", ")", ";", "this", ".", "bind", "<", "Config", ">", "(", "Config", ")", ".", "toConstantValue", "(", "config", ")", ";", "this", ".", "setupProviders", "(", ")", ";", "}", "return", "{", "void", "}", "public", "setupProviders", "(", ")", "{", "this", ".", "load", "(", "...", "App", ".", "providers", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/app.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "app.ts"}
{"tokens": ["/**\n * houston/src/lib/log/level.ts\n * Some log levels\n */", "var", "export", "const", "DEBUG", "=", "Symbol", "(", ")", ";", "var", "export", "const", "INFO", "=", "Symbol", "(", ")", ";", "var", "export", "const", "WARN", "=", "Symbol", "(", ")", ";", "var", "export", "const", "ERROR", "=", "Symbol", "(", ")", ";", "var", "export", "enum", "Level", "{", "DEBUG", ",", "INFO", ",", "WARN", ",", "ERROR", "}", "param", "{", "string", "}", "level", "return", "{", "Level", "}", "export", "function", "parseLevel", "(", "level", ")", "{", "switch", "(", "level", ".", "toLowerCase", "(", ")", ".", "trim", "(", ")", ")", "{", "case", "(", "'debug'", ")", ":", "return", "Level", ".", "DEBUG", ";", "case", "(", "'info'", ")", ":", "return", "Level", ".", "INFO", ";", "case", "(", "'warn'", ")", ":", "return", "Level", ".", "WARN", ";", "case", "(", "'error'", ")", ":", "return", "Level", ".", "ERROR", ";", "default", ":", "return", "Level", ".", "INFO", ";", "}", "}", "param", "{", "Level", "}", "level", "return", "{", "string", "}", "export", "function", "levelString", "(", "level", ")", "{", "switch", "(", "level", ")", "{", "case", "(", "Level", ".", "DEBUG", ")", ":", "return", "'debug'", ";", "case", "(", "Level", ".", "INFO", ")", ":", "return", "'info'", ";", "case", "(", "Level", ".", "WARN", ")", ":", "return", "'warn'", ";", "case", "(", "Level", ".", "ERROR", ")", ":", "return", "'error'", ";", "default", ":", "return", "'info'", ";", "}", "}", "param", "{", "Level", "}", "level", "return", "{", "Number", "}", "export", "function", "levelIndex", "(", "level", ")", "{", "switch", "(", "level", ")", "{", "case", "(", "Level", ".", "DEBUG", ")", ":", "return", "0", ";", "case", "(", "Level", ".", "INFO", ")", ":", "return", "1", ";", "case", "(", "Level", ".", "WARN", ")", ":", "return", "2", ";", "case", "(", "Level", ".", "ERROR", ")", ":", "return", "3", ";", "default", ":", "return", "1", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Level", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Level", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Level", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/level.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "level.ts"}
{"tokens": ["/**\n * houston/src/lib/log/output.ts\n * An abstract class for sending logs somewhere.\n */", "import", "{", "injectable", "}", "from", "'inversify'", ";", "import", "{", "Config", "}", "from", "'../config'", ";", "import", "{", "Log", "}", "from", "'./log'", ";", "/**\n * A generic abstract class for handling logs.\n */", "@", "injectable", "(", ")", "export", "abstract", "class", "Output", "{", "param", "{", "Config", "}", "config", "return", "{", "boolean", "}", "public", "static", "enabled", "(", "config", ")", "{", "return", "true", ";", "}", "param", "{", "Config", "}", "config", "public", "constructor", "(", "config", ")", "{", "return", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "debug", "(", "log", ")", "{", "return", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "info", "(", "log", ")", "{", "return", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "warn", "(", "log", ")", "{", "return", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "error", "(", "log", ")", "{", "return", ";", "}", "}", "/**\n * An interface of the Output class as a constructor.\n * This is kinda pointless, but it keeps typescript happy when hinting.\n */", "export", "interface", "OutputConstructor", "{", "new", "(", "config", ")", ";", "enabled", "(", "config", ")", ":", "boolean", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, "Config", null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/output.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "output.ts"}
{"tokens": ["/**\n * houston/src/lib/log/services/console.ts\n * Outputs logs to the console\n */", "import", "{", "Config", "}", "from", "'../../config'", ";", "import", "{", "Level", ",", "parseLevel", "}", "from", "'../level'", ";", "import", "{", "Log", "}", "from", "'../log'", ";", "import", "{", "Output", "}", "from", "'../output'", ";", "export", "class", "Console", "extends", "Output", "{", "var", "protected", "config", ":", "Config", ";", "param", "{", "Config", "}", "config", "return", "{", "boolean", "}", "public", "static", "enabled", "(", "config", ")", "{", "if", "(", "config", ".", "has", "(", "'log.console'", ")", "===", "false", ")", "{", "return", "false", ";", "}", "return", "(", "config", ".", "get", "(", "'log.console'", ")", "!==", "'never'", ")", ";", "}", "param", "{", "Config", "}", "config", "public", "constructor", "(", "config", ")", "{", "super", "(", "config", ")", ";", "this", ".", "config", "=", "config", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "debug", "(", "log", ")", "{", "console", ".", "info", "(", "log", ".", "message", ")", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "info", "(", "log", ")", "{", "console", ".", "info", "(", "log", ".", "message", ")", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "warn", "(", "log", ")", "{", "console", ".", "warn", "(", "log", ".", "message", ")", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "error", "(", "log", ")", "{", "console", ".", "error", "(", "log", ".", "message", ")", ";", "}", "param", "{", "Level", "}", "level", "return", "{", "Boolean", "}", "protected", "allows", "(", "level", ")", "{", "if", "(", "this", ".", "config", ".", "has", "(", "'log.console'", ")", "===", "false", ")", "{", "return", "false", ";", "}", "const", "configLevel", "=", "parseLevel", "(", "this", ".", "config", ".", "get", "(", "'log.console'", ")", ")", ";", "if", "(", "level", ">=", "configLevel", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Level", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Level", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/outputs/console.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "console.ts"}
{"tokens": ["/**\n * houston/src/lib/log/services/sentry.ts\n * Handles logging errors to sentry\n */", "import", "{", "Config", "}", "from", "'../../config'", ";", "import", "{", "Log", "}", "from", "'../log'", ";", "import", "{", "Output", "}", "from", "'../output'", ";", "export", "class", "Sentry", "extends", "Output", "{", "var", "protected", "config", ":", "Config", ";", "var", "protected", "dns", ":", "string", ";", "var", "protected", "raven", ";", "return", "{", "boolean", "}", "public", "static", "enabled", "(", "config", ")", "{", "if", "(", "config", ".", "has", "(", "'log.sentry'", ")", "===", "false", ")", "{", "return", "false", ";", "}", "else", "if", "(", "config", ".", "has", "(", "'service.sentry.secret'", ")", "===", "false", ")", "{", "return", "false", ";", "}", "try", "{", "require", ".", "resolve", "(", "'raven'", ")", ";", "}", "catch", "(", "e", ")", "{", "return", "false", ";", "}", "return", "(", "config", ".", "get", "(", "'log.sentry'", ")", "!==", "'never'", ")", ";", "}", "param", "{", "Config", "}", "config", "public", "constructor", "(", "config", ")", "{", "super", "(", "config", ")", ";", "this", ".", "config", "=", "config", ";", "this", ".", "dns", "=", "config", ".", "get", "(", "'service.sentry.secret'", ")", ";", "this", ".", "raven", "=", "this", ".", "setup", "(", ")", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "void", "}", "public", "error", "(", "log", ")", "{", "this", ".", "raven", ".", "captureException", "(", "this", ".", "toError", "(", "log", ")", ")", ";", "}", "param", "{", "Log", "}", "log", "return", "{", "Error", "}", "public", "toError", "(", "log", ")", "{", "const", "error", "=", "new", "Error", "(", "log", ".", "message", ")", ";", "Error", ".", "captureStackTrace", "(", "error", ",", "this", ".", "toError", ")", ";", "Object", ".", "assign", "(", "error", ",", "log", ".", "data", ",", "{", "error", ":", "log", ".", "error", "}", ")", ";", "return", "error", ";", "}", "return", "{", "Raven", "}", "protected", "setup", "(", ")", "{", "return", "require", "(", "'raven'", ")", ".", "config", "(", "this", ".", "dns", ")", ".", "install", "(", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, "Log", null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/outputs/sentry.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "sentry.ts"}
{"tokens": ["/**\n * houston/src/lib/log/logger.ts\n * A manager of logs and third party logging services.\n */", "import", "{", "inject", ",", "injectable", ",", "multiInject", "}", "from", "'inversify'", ";", "import", "{", "Config", "}", "from", "'../config'", ";", "import", "{", "Level", ",", "levelString", "}", "from", "'./level'", ";", "import", "{", "Log", "}", "from", "'./log'", ";", "import", "{", "Output", ",", "OutputConstructor", "}", "from", "'./output'", ";", "import", "*", "as", "outputs", "from", "'./outputs'", ";", "/**\n * Log\n * A manager of logs and third party logging services\n */", "@", "injectable", "(", ")", "export", "class", "Logger", "{", "var", "protected", "config", ":", "Config", ";", "var", "protected", "outputs", ":", "Output", "[", "]", "=", "[", "]", ";", "param", "{", "Config", "}", "config", "public", "constructor", "(", "@", "inject", "(", "Config", ")", "config", ")", "{", "this", ".", "config", "=", "config", ";", "this", ".", "setupOutputs", "(", "Object", ".", "keys", "(", "outputs", ")", ".", "map", "(", "(", "key", ")", "=>", "outputs", "[", "key", "]", ")", ")", ";", "}", "return", "{", "Log", "}", "public", "create", "(", ")", "{", "return", "new", "Log", "(", "this", ")", ";", "}", "param", "{", "String", "}", "message", "return", "{", "Log", "}", "public", "debug", "(", "message", ")", "{", "return", "this", ".", "create", "(", ")", ".", "setLevel", "(", "Level", ".", "DEBUG", ")", ".", "setMessage", "(", "message", ")", ";", "}", "param", "{", "String", "}", "message", "return", "{", "Log", "}", "public", "info", "(", "message", ")", "{", "return", "this", ".", "create", "(", ")", ".", "setLevel", "(", "Level", ".", "INFO", ")", ".", "setMessage", "(", "message", ")", ";", "}", "param", "{", "String", "}", "message", "return", "{", "Log", "}", "public", "warn", "(", "message", ")", "{", "return", "this", ".", "create", "(", ")", ".", "setLevel", "(", "Level", ".", "WARN", ")", ".", "setMessage", "(", "message", ")", ";", "}", "param", "{", "String", "}", "message", "return", "{", "Log", "}", "public", "error", "(", "message", ")", "{", "return", "this", ".", "create", "(", ")", ".", "setLevel", "(", "Level", ".", "ERROR", ")", ".", "setMessage", "(", "message", ")", ";", "}", "param", "{", "Log", "}", "log", "public", "send", "(", "log", ")", "{", "this", ".", "outputs", ".", "forEach", "(", "(", "output", ")", "=>", "{", "output", "[", "levelString", "(", "log", ".", "level", ")", "]", "(", "log", ")", ";", "}", ")", ";", "}", "param", "{", "OutputConstructor", "}", "outputter", "return", "{", "Logger", "}", "protected", "setupOutput", "(", "outputter", ")", "{", "if", "(", "outputter", ".", "enabled", "(", "this", ".", "config", ")", ")", "{", "this", ".", "outputs", ".", "push", "(", "new", "outputter", "(", "this", ".", "config", ")", ")", ";", "}", "return", "this", ";", "}", "param", "{", "OutputConstructor", "[", "]", "}", "outputters", "return", "{", "Logger", "}", "protected", "setupOutputs", "(", "outputters", ")", "{", "outputters", ".", "forEach", "(", "(", "outputter", ")", "=>", "{", "this", ".", "setupOutput", "(", "outputter", ")", ";", "}", ")", ";", "return", "this", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Log", null, null, null, null, null, null, null, null, null, "Output", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/logger.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "logger.ts"}
{"tokens": ["exports", "import", "{", "injectable", "}", "from", "'inversify'", ";", "import", "{", "Level", "}", "from", "'./level'", ";", "import", "{", "Logger", "}", "from", "'./logger'", ";", "/**\n * Log\n * A single log line.\n */", "@", "injectable", "(", ")", "export", "class", "Log", "{", "var", "public", "level", ":", "Level", ";", "var", "public", "message", "?", ":", "string", ";", "var", "public", "data", ":", "object", ";", "var", "public", "error", "?", ":", "Error", ";", "var", "protected", "date", ":", "Date", ";", "var", "protected", "logger", ":", "Logger", ";", "param", "{", "Logger", "}", "logger", "public", "constructor", "(", "logger", ")", "{", "this", ".", "level", "=", "Level", ".", "DEBUG", ";", "this", ".", "data", "=", "{", "}", ";", "this", ".", "date", "=", "new", "Date", "(", ")", ";", "this", ".", "logger", "=", "logger", ";", "}", "param", "{", "Level", "}", "level", "return", "{", "Log", "}", "public", "setLevel", "(", "level", ")", "{", "this", ".", "level", "=", "level", ";", "return", "this", ";", "}", "param", "{", "String", "}", "message", "return", "{", "Log", "}", "public", "setMessage", "(", "message", ")", "{", "this", ".", "message", "=", "message", ";", "return", "this", ";", "}", "param", "{", "String", "}", "key", "param", "{", "*", "}", "value", "return", "{", "Log", "}", "public", "setData", "(", "key", ",", "value", ")", "{", "this", ".", "data", "[", "key", "]", "=", "value", ";", "return", "this", ";", "}", "param", "{", "Error", "}", "err", "return", "{", "Log", "}", "public", "setError", "(", "err", ")", "{", "this", ".", "error", "=", "err", ";", "return", "this", ";", "}", "return", "{", "Date", "}", "public", "getDate", "(", ")", "{", "return", "this", ".", "date", ";", "}", "return", "{", "void", "}", "public", "send", "(", ")", "{", "return", "this", ".", "logger", ".", "send", "(", "this", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Logger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Level", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Date", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/log.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "log.ts"}
{"tokens": ["/**\n * houston/src/lib/cache/type.d.ts\n * Types for the cache utility\n */", "export", "const", "Cache", "=", "Symbol", ".", "for", "(", "'Cache'", ")", ";", "export", "interface", "ICacheOptions", "{", "tty", "?", ":", "number", ";", "}", "export", "interface", "ICache", "{", "get", "(", "key", ")", ":", "Promise", "<", "string", "|", "null", ">", ";", "set", "(", "key", ",", "value", ")", ":", "Promise", "<", "void", ">", ";", "}", "export", "type", "ICacheFactory", "=", "(", "namespace", ":", "string", ",", "options", "?", ":", "ICacheOptions", ")", "=>", "ICache", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/cache/type.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "type.ts"}
{"tokens": ["/**\n * houston/src/lib/utility/rdnn.ts\n * Some higher level RDNN functions\n */", "see", "https", "param", "{", "string", "}", "rdnn", "param", "{", "string", "}", "normalizer", "return", "{", "string", "}", "export", "function", "sanitize", "(", "rdnn", ",", "normalizer", "=", "'_'", ")", "{", "return", "rdnn", ".", "replace", "(", "/\\s/gi", ",", "normalizer", ")", ".", "replace", "(", "/\\.([0-9])/gi", ",", "`.${", "normalizer", "}$1`", ")", ".", "replace", "(", "/\\_|\\-/gi", ",", "normalizer", ")", ".", "toLowerCase", "(", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/utility/rdnn.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "rdnn.ts"}
{"tokens": ["/**\n * houston/src/lib/service/github.ts\n * Handles interaction with GitHub repositories.\n *\n * NOTE: If you are using a personal auth token, the url should be like so:\n * \"https://x-access-token:asdf1234@github.com/elementary/houston\"\n */", "import", "*", "as", "fileType", "from", "'file-type'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "inject", ",", "injectable", ",", "LazyServiceIdentifer", "}", "from", "'inversify'", ";", "import", "*", "as", "jsonwebtoken", "from", "'jsonwebtoken'", ";", "import", "*", "as", "Git", "from", "'nodegit'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "agent", "from", "'superagent'", ";", "import", "*", "as", "URL", "from", "'url'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "App", "}", "from", "'../app'", ";", "import", "{", "Cache", ",", "ICache", ",", "ICacheFactory", "}", "from", "'../cache'", ";", "import", "{", "Config", "}", "from", "'../config'", ";", "import", "{", "sanitize", "}", "from", "'../utility/rdnn'", ";", "import", "*", "as", "type", "from", "'./type'", ";", "export", "const", "github", "=", "Symbol", "(", "'GitHub'", ")", ";", "export", "type", "IGitHubFactory", "=", "(", "url", ":", "string", ")", "=>", "GitHub", ";", "@", "injectable", "(", ")", "export", "class", "GitHub", "implements", "type", ".", "ICodeRepository", ",", "type", ".", "IPackageRepository", ",", "type", ".", "ILogRepository", "{", "var", "public", "tmpFolder", "=", "path", ".", "resolve", "(", "os", ".", "tmpdir", "(", ")", ",", "'houston'", ")", ";", "var", "public", "serviceName", "=", "'GitHub'", ";", "var", "public", "host", "=", "'github.com'", ";", "var", "public", "username", ":", "string", ";", "var", "public", "repository", ":", "string", ";", "var", "public", "authUsername", "?", ":", "string", ";", "var", "public", "authPassword", "?", ":", "string", ";", "var", "public", "reference", "=", "'refs/heads/master'", ";", "var", "protected", "config", ":", "Config", ";", "var", "protected", "cache", ":", "ICache", ";", "async", "param", "{", "String", "}", "p", "return", "{", "String", "}", "protected", "static", "async", "getFileType", "(", "p", ")", "{", "const", "buffer", "=", "await", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "fs", ".", "open", "(", "p", ",", "'r'", ",", "(", "openErr", ",", "fd", ")", "=>", "{", "if", "(", "openErr", "!=", "null", ")", "{", "return", "reject", "(", "openErr", ")", ";", "}", "fs", ".", "read", "(", "fd", ",", "Buffer", ".", "alloc", "(", "4100", ")", ",", "0", ",", "4100", ",", "0", ",", "(", "readErr", ",", "bytesRead", ",", "buff", ")", "=>", "{", "fs", ".", "close", "(", "fd", ")", ";", "if", "(", "readErr", "!=", "null", ")", "{", "return", "reject", "(", "readErr", ")", ";", "}", "if", "(", "bytesRead", "<", "4100", ")", "{", "return", "resolve", "(", "buff", ".", "slice", "(", "0", ",", "bytesRead", ")", ")", ";", "}", "else", "{", "return", "resolve", "(", "buff", ")", ";", "}", "}", ")", ";", "}", ")", ";", "}", ")", ";", "return", "fileType", "(", "buffer", ")", ".", "mime", ";", "}", "param", "{", "App", "}", "app", "constructor", "(", "@", "inject", "(", "new", "LazyServiceIdentifer", "(", "(", ")", "=>", "App", ")", ")", "app", ")", "{", "this", ".", "config", "=", "app", ".", "get", "(", "Config", ")", ";", "this", ".", "cache", "=", "app", ".", "get", "<", "ICacheFactory", ">", "(", "Cache", ")", "(", "'lib/service/github'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "rdnn", "(", ")", "{", "return", "sanitize", "(", "`com.github.${", "this", ".", "username", "}.${", "this", ".", "repository", "}`", ")", ";", "}", "return", "{", "string", "}", "public", "get", "url", "(", ")", ":", "string", "{", "let", "auth", "=", "null", ";", "if", "(", "this", ".", "authUsername", "!==", "'installation'", ")", "{", "if", "(", "this", ".", "authUsername", "!=", "null", "||", "this", ".", "authPassword", "!=", "null", ")", "{", "auth", "=", "`${", "this", ".", "authUsername", "}:${", "this", ".", "authPassword", "}`", ";", "}", "}", "return", "URL", ".", "format", "(", "{", "auth", ",", "host", ":", "this", ".", "host", ",", "pathname", ":", "`/${", "this", ".", "username", "}/${", "this", ".", "repository", "}.git`", ",", "protocol", ":", "'https'", "}", ")", ";", "}", "return", "{", "string", "}", "public", "set", "url", "(", "p", ")", "{", "if", "(", "p", ".", "indexOf", "(", "'github'", ")", "===", "-", "1", ")", "{", "throw", "new", "Error", "(", "'Given URL is not a GitHub repository'", ")", ";", "}", "const", "httpPath", "=", "(", "p", ".", "startsWith", "(", "'git@'", ")", "?", "p", ".", "replace", "(", "'git@'", ",", "'https://'", ")", ":", "p", ")", ".", "replace", "(", "'://github.com:'", ",", "'://github.com/'", ")", ".", "replace", "(", "/\\.git$/", ",", "''", ")", ";", "const", "url", "=", "new", "URL", ".", "URL", "(", "httpPath", ")", ";", "const", "[", "host", ",", "username", ",", "repository", "]", "=", "url", ".", "pathname", ".", "split", "(", "'/'", ")", ";", "this", ".", "host", "=", "url", ".", "host", ";", "this", ".", "username", "=", "username", ";", "this", ".", "repository", "=", "repository", ";", "this", ".", "authUsername", "=", "(", "url", ".", "username", "!==", "''", ")", "?", "url", ".", "username", ":", "null", ";", "this", ".", "authPassword", "=", "(", "url", ".", "password", "!==", "''", ")", "?", "url", ".", "password", ":", "null", ";", "if", "(", "this", ".", "authUsername", "!=", "null", "&&", "this", ".", "authPassword", "==", "null", ")", "{", "this", ".", "authPassword", "=", "this", ".", "authUsername", ";", "this", ".", "authUsername", "=", "'x-access-token'", ";", "}", "}", "async", "param", "{", "string", "}", "p", "param", "{", "string", "}", "reference", "return", "{", "void", "}", "public", "async", "clone", "(", "p", ",", "reference", "=", "this", ".", "reference", ")", "{", "const", "repo", "=", "await", "Git", ".", "Clone", "(", "this", ".", "url", ",", "p", ")", ";", "const", "ref", "=", "await", "repo", ".", "getReference", "(", "reference", ")", ";", "const", "commit", "=", "await", "ref", ".", "peel", "(", "Git", ".", "Object", ".", "TYPE", ".", "COMMIT", ")", ";", "const", "branch", "=", "await", "repo", ".", "createBranch", "(", "'houston'", ",", "commit", ",", "true", ")", ";", "await", "repo", ".", "checkoutBranch", "(", "branch", ",", "{", "}", ")", ";", "await", "this", ".", "recursiveClone", "(", "p", ")", ";", "await", "fs", ".", "remove", "(", "path", ".", "resolve", "(", "p", ",", "'.git'", ")", ")", ";", "}", "async", "return", "{", "string", "[", "]", "}", "public", "async", "references", "(", ")", "{", "const", "p", "=", "path", ".", "resolve", "(", "this", ".", "tmpFolder", ",", "uuid", "(", ")", ")", ";", "const", "repo", "=", "await", "Git", ".", "Clone", "(", "this", ".", "url", ",", "p", ")", ";", "const", "branches", "=", "await", "repo", ".", "getReferenceNames", "(", "Git", ".", "Reference", ".", "TYPE", ".", "LISTALL", ")", ";", "await", "fs", ".", "remove", "(", "p", ")", ";", "return", "branches", ";", "}", "async", "param", "{", "IPackage", "}", "pkg", "param", "{", "IStage", "}", "stage", "param", "{", "string", "}", "reference", "return", "{", "IPackage", "}", "public", "async", "uploadPackage", "(", "pkg", ",", "stage", ",", "reference", "?", ")", "{", "if", "(", "pkg", ".", "githubId", "!=", "null", ")", "{", "return", "pkg", ";", "}", "return", "pkg", ";", "const", "auth", "=", "await", "this", ".", "getAuthorization", "(", ")", ";", "const", "url", "=", "`${", "this", ".", "username", "}/${", "this", ".", "repository", "}/releases/tags/${", "reference", "}`", ";", "const", "{", "body", "}", "=", "await", "agent", ".", "get", "(", "`https://api.github.com/repos/${", "url", "}`", ")", ".", "set", "(", "'accept'", ",", "'application/vnd.github.v3+json'", ")", ".", "set", "(", "'user-agent'", ",", "'elementary-houston'", ")", ".", "set", "(", "'authorization'", ",", "auth", ")", ";", "if", "(", "body", ".", "upload_url", "==", "null", ")", "{", "throw", "new", "Error", "(", "'No Upload URL for GitHub release'", ")", ";", "}", "const", "mime", "=", "await", "GitHub", ".", "getFileType", "(", "pkg", ".", "path", ")", ";", "const", "stat", "=", "await", "fs", ".", "stat", "(", "pkg", ".", "path", ")", ";", "const", "file", "=", "await", "fs", ".", "createReadStream", "(", "pkg", ".", "path", ")", ";", "const", "res", "=", "await", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "let", "data", "=", "''", ";", "const", "req", "=", "agent", ".", "post", "(", "body", ".", "upload_url", ".", "replace", "(", "'{?name,label}'", ",", "''", ")", ")", ".", "set", "(", "'content-type'", ",", "mime", ")", ".", "set", "(", "'content-length'", ",", "stat", ".", "size", ")", ".", "set", "(", "'user-agent'", ",", "'elementary-houston'", ")", ".", "set", "(", "'authorization'", ",", "auth", ")", ".", "query", "(", "{", "name", ":", "pkg", ".", "name", "}", ")", ".", "query", "(", "(", "pkg", ".", "description", "!=", "null", ")", "?", "{", "label", ":", "pkg", ".", "description", "}", ":", "{", "}", ")", ".", "parse", "(", "(", "response", ",", "fn", ")", "=>", "{", "response", ".", "on", "(", "'data'", ",", "(", "chunk", ")", "=>", "{", "data", "+=", "chunk", ";", "}", ")", ";", "response", ".", "on", "(", "'end'", ",", "fn", ")", ";", "}", ")", ".", "on", "(", "'error'", ",", "reject", ")", ".", "on", "(", "'end'", ",", "(", "err", ",", "response", ")", "=>", "{", "if", "(", "err", "!=", "null", ")", "{", "return", "reject", "(", "err", ")", ";", "}", "try", "{", "return", "resolve", "(", "JSON", ".", "parse", "(", "data", ")", ")", ";", "}", "catch", "(", "err", ")", "{", "return", "reject", "(", "err", ")", ";", "}", "}", ")", ";", "file", ".", "pipe", "(", "req", ")", ".", "on", "(", "'error'", ",", "reject", ")", ".", "on", "(", "'close'", ",", "(", ")", "=>", "resolve", "(", "data", ")", ")", ";", "}", ")", ";", "return", "{", "...", "pkg", "}", ";", "}", "async", "param", "{", "ILog", "}", "log", "param", "{", "IStage", "}", "stage", "param", "{", "string", "}", "reference", "return", "{", "ILog", "}", "public", "async", "uploadLog", "(", "log", ",", "stage", ",", "reference", "?", ")", "{", "if", "(", "log", ".", "githubId", "!=", "null", ")", "{", "return", ";", "}", "const", "auth", "=", "await", "this", ".", "getAuthorization", "(", ")", ";", "const", "hasLabel", "=", "await", "agent", ".", "get", "(", "`https://api.github.com/repos/${", "this", ".", "username", "}/${", "this", ".", "repository", "}/labels/AppCenter`", ")", ".", "set", "(", "'user-agent'", ",", "'elementary-houston'", ")", ".", "set", "(", "'authorization'", ",", "auth", ")", ".", "then", "(", "(", ")", "=>", "true", ")", ".", "catch", "(", "(", ")", "=>", "false", ")", ";", "if", "(", "!", "hasLabel", ")", "{", "await", "agent", ".", "post", "(", "`https://api.github.com/repos/${", "this", ".", "username", "}/${", "this", ".", "repository", "}/labels`", ")", ".", "set", "(", "'user-agent'", ",", "'elementary-houston'", ")", ".", "set", "(", "'authorization'", ",", "auth", ")", ".", "send", "(", "{", "color", ":", "'4c158a'", ",", "description", ":", "'Issues related to releasing on AppCenter'", ",", "name", ":", "'AppCenter'", "}", ")", ";", "}", "const", "{", "body", "}", "=", "await", "agent", ".", "post", "(", "`https://api.github.com/repos/${", "this", ".", "username", "}/${", "this", ".", "repository", "}/issues`", ")", ".", "set", "(", "'user-agent'", ",", "'elementary-houston'", ")", ".", "set", "(", "'authorization'", ",", "auth", ")", ".", "send", "(", "{", "body", ":", "log", ".", "body", ",", "labels", ":", "[", "'AppCenter'", "]", ",", "title", ":", "log", ".", "title", "}", ")", ";", "return", "{", "...", "log", ",", "githubId", ":", "body", ".", "id", "}", ";", "}", "async", "return", "{", "string", "}", "public", "async", "getAuthorization", "(", ")", "{", "if", "(", "this", ".", "authUsername", "!==", "'installation'", ")", "{", "return", "`Bearer ${", "this", ".", "authPassword", "}`", ";", "}", "else", "{", "const", "cachedToken", "=", "await", "this", ".", "cache", ".", "get", "(", "this", ".", "authPassword", ")", ";", "if", "(", "cachedToken", "==", "null", ")", "{", "const", "token", "=", "await", "this", ".", "generateToken", "(", "Number", "(", "this", ".", "authPassword", ")", ")", ";", "await", "this", ".", "cache", ".", "set", "(", "this", ".", "authPassword", ",", "token", ")", ";", "return", "`token ${", "token", "}`", ";", "}", "else", "{", "return", "`token ${", "cachedToken", "}`", ";", "}", "}", "}", "async", "return", "{", "string", "}", "protected", "async", "generateJwt", "(", ")", "{", "const", "keyPath", "=", "this", ".", "config", ".", "get", "(", "'service.github.key'", ")", ";", "const", "key", "=", "await", "fs", ".", "readFile", "(", "keyPath", ",", "'utf-8'", ")", ";", "const", "payload", "=", "{", "iat", ":", "Math", ".", "floor", "(", "Date", ".", "now", "(", ")", "/", "1000", ")", ",", "iss", ":", "this", ".", "config", ".", "get", "(", "'service.github.app'", ")", "}", ";", "const", "options", "=", "{", "algorithm", ":", "'RS256'", ",", "expiresIn", ":", "'1m'", "}", ";", "return", "new", "Promise", "<", "string", ">", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "jsonwebtoken", ".", "sign", "(", "payload", ",", "key", ",", "options", ",", "(", "err", ",", "token", ")", "=>", "{", "if", "(", "err", "!=", "null", ")", "{", "return", "reject", "(", "err", ")", ";", "}", "else", "{", "return", "resolve", "(", "token", ")", ";", "}", "}", ")", ";", "}", ")", ";", "}", "async", "param", "{", "number", "}", "installation", "return", "{", "string", "}", "protected", "async", "generateToken", "(", "installation", ")", "{", "const", "jwt", "=", "await", "this", ".", "generateJwt", "(", ")", ";", "return", "agent", ".", "post", "(", "`https://api.github.com/app/installations/${", "installation", "}/access_tokens`", ")", ".", "set", "(", "'accept'", ",", "'application/vnd.github.machine-man-preview+json'", ")", ".", "set", "(", "'user-agent'", ",", "'elementary-houston'", ")", ".", "set", "(", "'authorization'", ",", "`Bearer ${", "jwt", "}`", ")", ".", "then", "(", "(", "res", ")", "=>", "res", ".", "body", ".", "token", ")", ";", "}", "async", "param", "{", "String", "}", "clonePath", "return", "{", "void", "}", "protected", "async", "recursiveClone", "(", "clonePath", ")", "{", "const", "repo", "=", "await", "Git", ".", "Repository", ".", "open", "(", "clonePath", ")", ";", "await", "Git", ".", "Submodule", ".", "foreach", "(", "repo", ",", "async", "(", "submodule", ")", "=>", "{", "await", "submodule", ".", "update", "(", "1", ",", "new", "Git", ".", "SubmoduleUpdateOptions", "(", ")", ")", ";", "await", "this", ".", "recursiveClone", "(", "path", ".", "join", "(", "clonePath", ",", "submodule", ".", "path", "(", ")", ")", ")", ";", "}", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "App", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "URL", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "number", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/service/github.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "github.ts"}
{"tokens": ["/**\n * houston/src/lib/service/aptly/package-repo.ts\n * Class for aptly package stuff\n */", "import", "*", "as", "crypto", "from", "'crypto'", ";", "import", "{", "inject", ",", "injectable", "}", "from", "'inversify'", ";", "import", "*", "as", "agent", "from", "'superagent'", ";", "import", "{", "Config", "}", "from", "'../config'", ";", "import", "{", "Logger", "}", "from", "'../log'", ";", "import", "*", "as", "type", "from", "'./type'", ";", "var", "const", "DEFAULT_ARCHITECTURES", "=", "[", "'amd64'", "]", ";", "var", "const", "DEFAULT_DISTRIBUTION", "=", "'bionic'", ";", "export", "interface", "IAptlyDetails", "{", "prefix", "?", ":", "string", ";", "distribution", ":", "string", ";", "architectures", ":", "string", "[", "]", ";", "}", "param", "{", "...", "String", "}", "args", "return", "{", "String", "}", "export", "function", "createUrl", "(", "...", "args", ")", "{", "return", "args", ".", "filter", "(", "(", "arg", ")", "=>", "(", "arg", "!=", "null", "&&", "arg", "!==", "undefined", ")", ")", ".", "join", "(", "'/'", ")", ".", "replace", "(", "/(?<!:)\\/{2,}/", ",", "'/'", ")", ";", "}", "@", "injectable", "(", ")", "export", "class", "Aptly", "implements", "type", ".", "IPackageRepository", "{", "var", "public", "serviceName", "=", "'elementary Package Repository'", ";", "var", "protected", "config", ":", "Config", ";", "var", "protected", "logger", ":", "Logger", ";", "param", "{", "Config", "}", "config", "constructor", "(", "@", "inject", "(", "Config", ")", "config", ",", "@", "inject", "(", "Logger", ")", "logger", ")", "{", "this", ".", "config", "=", "config", ";", "this", ".", "logger", "=", "logger", ";", "}", "async", "param", "{", "IPackage", "}", "pkg", "param", "{", "IStage", "}", "stage", "param", "{", "String", "}", "reference", "return", "{", "IPackage", "}", "public", "async", "uploadPackage", "(", "pkg", ",", "stage", "?", ",", "reference", "?", ")", "{", "const", "rootUrl", "=", "this", ".", "config", ".", "get", "(", "'service.aptly.url'", ")", ";", "const", "details", "=", "this", ".", "getAptlyDetails", "(", "pkg", ",", "stage", ")", ";", "if", "(", "pkg", ".", "aptlyId", "==", "null", ")", "{", "const", "fileHash", "=", "crypto", ".", "createHash", "(", "'md5'", ")", ".", "update", "(", "JSON", ".", "stringify", "(", "pkg", ")", ")", ".", "digest", "(", "'hex'", ")", ".", "substring", "(", "0", ",", "6", ")", ";", "const", "filePkgName", "=", "pkg", ".", "name", ".", "toLowerCase", "(", ")", ".", "replace", "(", "/[^0-9a-z-\\.]/gi", ",", "''", ")", ";", "const", "fileName", "=", "`${", "filePkgName", "}-${", "fileHash", "}.${", "pkg", ".", "type", "}`", ";", "await", "agent", ".", "post", "(", "createUrl", "(", "rootUrl", ",", "'files'", ",", "fileName", ")", ")", ".", "attach", "(", "'file'", ",", "pkg", ".", "path", ",", "fileName", ")", ";", "const", "aptlyFileName", "=", "await", "agent", ".", "post", "(", "createUrl", "(", "rootUrl", ",", "'repos'", ",", "details", ".", "prefix", ",", "'file'", ",", "fileName", ")", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "if", "(", "data", ".", "body", ".", "FailedFiles", "!=", "null", "&&", "data", ".", "body", ".", "FailedFiles", ".", "length", ">", "0", ")", "{", "throw", "new", "Error", "(", "'Unable to add package to Aptly'", ")", ";", "}", "else", "{", "return", "data", ".", "body", ".", "Report", ".", "Added", "[", "0", "]", ".", "split", "(", "' '", ")", "[", "0", "]", ";", "}", "}", ")", ";", "pkg", ".", "aptlyId", "=", "await", "agent", ".", "get", "(", "createUrl", "(", "rootUrl", ",", "'repos'", ",", "details", ".", "prefix", ",", "'packages'", ")", ")", ".", "query", "(", "{", "q", ":", "aptlyFileName", "}", ")", ".", "then", "(", "(", "data", ")", "=>", "{", "if", "(", "data", ".", "body", "==", "null", "||", "data", ".", "body", ".", "length", "<", "1", ")", "{", "throw", "new", "Error", "(", "'Unable to find uploaded Aptly package'", ")", ";", "}", "else", "{", "return", "data", ".", "body", "[", "0", "]", ";", "}", "}", ")", ";", "await", "agent", ".", "delete", "(", "createUrl", "(", "rootUrl", ",", "'files'", ",", "fileName", ")", ")", ";", "}", "await", "agent", ".", "post", "(", "createUrl", "(", "rootUrl", ",", "'repos'", ",", "details", ".", "prefix", ",", "'packages'", ")", ")", ".", "send", "(", "{", "PackageRefs", ":", "[", "pkg", ".", "aptlyId", "]", "}", ")", ";", "return", "pkg", ";", "}", "param", "{", "IPackage", "}", "pkg", "param", "{", "IStage", "}", "stage", "return", "{", "IAptlyDetails", "}", "public", "getAptlyDetails", "(", "pkg", ",", "stage", ")", "{", "const", "resolveFn", "=", "(", "value", ")", "=>", "{", "const", "defaultValue", "=", "{", "architectures", ":", "(", "(", "value", "||", "{", "}", ")", ".", "architectures", "||", "DEFAULT_ARCHITECTURES", ")", ",", "distribution", ":", "(", "(", "value", "||", "{", "}", ")", ".", "distribution", "||", "pkg", ".", "distribution", "||", "DEFAULT_DISTRIBUTION", ")", ",", "prefix", ":", "(", "value", "||", "{", "}", ")", ".", "prefix", "}", ";", "switch", "(", "typeof", "value", ")", "{", "case", "(", "'string'", ")", ":", "return", "{", "...", "defaultValue", ",", "prefix", ":", "value", "}", ";", "case", "(", "'function'", ")", ":", "return", "resolveFn", "(", "value", "(", "pkg", ")", ")", ";", "case", "(", "'object'", ")", ":", "case", "(", "'undefined'", ")", ":", "return", "defaultValue", ";", "default", ":", "throw", "new", "Error", "(", "'Aptly settings returned unknown value.'", ")", ";", "}", "}", ";", "return", "resolveFn", "(", "this", ".", "config", ".", "get", "(", "`service.aptly.${", "stage", "}`", ")", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, "Logger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, "UNK", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/service/aptly.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "aptly.ts"}
{"tokens": ["/**\n * houston/src/lib/service/index.ts\n * Entry file to all of the fun third party services we interact with\n */", "import", "*", "as", "type", "from", "'./type'", ";", "import", "{", "GitHub", "}", "from", "'./github'", ";", "export", "function", "isCodeRepository", "(", "value", ")", "{", "return", "(", "value", "!=", "null", "&&", "typeof", "value", ".", "clone", "===", "'function'", ")", ";", "}", "export", "function", "isPackageRepository", "(", "value", ")", "{", "return", "(", "value", "!=", "null", "&&", "typeof", "value", ".", "uploadPackage", "===", "'function'", ")", ";", "}", "export", "function", "isLogRepository", "(", "value", ")", "{", "return", "(", "value", "!=", "null", "&&", "typeof", "value", ".", "uploadLog", "===", "'function'", ")", ";", "}", "export", "{", "ICodeRepository", ",", "ICodeRepositoryFactory", ",", "ILog", ",", "IPackage", ",", "IPackageRepository", ",", "IServiceIds", "}", "from", "'./type'", ";", "export", "{", "Aptly", "}", "from", "'./aptly'", ";", "export", "{", "github", ",", "IGitHubFactory", "}", "from", "'./github'", ";", "export", "const", "codeRepository", "=", "Symbol", "(", "'codeRepository'", ")", ";", "export", "const", "packageRepository", "=", "Symbol", "(", "'packageRepository'", ")", ";", "export", "const", "logRepository", "=", "Symbol", "(", "'logRepository'", ")", ";", "export", "const", "codeRepositoryFactory", "=", "Symbol", "(", "'codeRepositoryFactory'", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/service/index.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "index.ts"}
{"tokens": ["/**\n * houston/src/lib/utility/eventemitter.ts\n * An event emitter based on eventemitter2 with some nice added features\n */", "import", "{", "EventEmitter2", "}", "from", "'eventemitter2'", ";", "import", "*", "as", "defaultsDeep", "from", "'lodash/defaultsDeep'", ";", "const", "DEFAULT_OPTS", "=", "{", "delimiter", ":", "':'", ",", "maxListeners", ":", "10", ",", "newListener", ":", "false", ",", "verboseMemoryLeak", ":", "true", ",", "wildcard", ":", "true", "}", ";", "export", "class", "EventEmitter", "extends", "EventEmitter2", "{", "param", "{", "Object", "}", "opts", "public", "constructor", "(", "opts", "=", "{", "}", ")", "{", "super", "(", "defaultsDeep", "(", "{", "}", ",", "DEFAULT_OPTS", ",", "opts", ")", ")", ";", "}", "param", "{", "string", "}", "event", "param", "{", "*", "}", "arg", "return", "{", "*", "}", "public", "async", "emitAsyncChain", "<", "T", ">", "(", "event", ",", "arg", ")", "{", "const", "listeners", "=", "this", ".", "listeners", "(", "event", ")", ";", "let", "value", "=", "arg", ";", "for", "(", "const", "listener", "of", "listeners", ")", "{", "await", "Promise", ".", "resolve", "(", "listener", "(", "value", ")", ")", ".", "then", "(", "(", "result", ")", "=>", "(", "value", "=", "result", ")", ")", ";", "}", "return", "value", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Listener", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/utility/eventemitter.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "eventemitter.ts"}
{"tokens": ["/**\n * houston/src/worker/type.ts\n * A bunch of type definitions for the worker process\n */", "import", "{", "App", "}", "from", "'../lib/app'", ";", "import", "{", "Level", "}", "from", "'../lib/log/level'", ";", "import", "*", "as", "service", "from", "'../lib/service'", ";", "import", "{", "EventEmitter", "}", "from", "'../lib/utility/eventemitter'", ";", "export", "type", "Type", "=", "'app'", "|", "'system-app'", "|", "'library'", "|", "'system-library'", "|", "'debug'", ";", "export", "{", "IPackage", "}", "from", "'../lib/service'", ";", "export", "interface", "IResult", "{", "failed", ":", "boolean", ";", "packages", ":", "service", ".", "IPackage", "[", "]", ";", "appcenter", "?", ":", "object", ";", "appstream", "?", ":", "string", ";", "logs", ":", "ILog", "[", "]", ";", "}", "export", "interface", "ILog", "extends", "service", ".", "ILog", "{", "level", ":", "Level", ";", "}", "export", "interface", "IChange", "{", "version", ":", "string", ";", "author", ":", "string", ";", "changes", ":", "string", ";", "date", ":", "Date", ";", "}", "export", "interface", "IContext", "{", "type", ":", "Type", ";", "nameDeveloper", ":", "string", ";", "nameDomain", ":", "string", ";", "nameHuman", ":", "string", ";", "version", ":", "string", ";", "architecture", ":", "string", ";", "distribution", ":", "string", ";", "references", ":", "string", "[", "]", ";", "changelog", ":", "IChange", "[", "]", ";", "package", "?", ":", "service", ".", "IPackage", ";", "appcenter", "?", ":", "object", ";", "appstream", "?", ":", "string", ";", "stripe", "?", ":", "string", ";", "logs", ":", "ILog", "[", "]", ";", "}", "export", "interface", "ITaskConstructor", "{", "new", "(", "worker", ")", ":", "ITask", ";", "}", "export", "interface", "ITask", "{", "run", "(", ")", ":", "Promise", "<", "void", ">", ";", "}", "export", "interface", "IWorker", "extends", "EventEmitter", "{", "app", ":", "App", ";", "context", ":", "IContext", ";", "fails", ":", "boolean", ";", "passes", ":", "boolean", ";", "postTasks", ":", "ITaskConstructor", "[", "]", ";", "repository", ":", "service", ".", "ICodeRepository", ";", "result", ":", "IResult", ";", "tasks", ":", "ITaskConstructor", "[", "]", ";", "workspace", ":", "string", ";", "setup", "(", ")", ";", "run", "(", ")", ";", "teardown", "(", ")", ";", "stop", "(", ")", ";", "report", "(", "err", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/type.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "type.ts"}
{"tokens": ["/**\n * houston/src/worker/log.ts\n * A log to be passed around during a worker role\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "Level", "}", "from", "'../lib/log/level'", ";", "import", "render", "from", "'../lib/utility/template'", ";", "import", "{", "ILog", "}", "from", "'./type'", ";", "export", "class", "Log", "extends", "Error", "implements", "ILog", "{", "var", "public", "static", "Level", "=", "Level", ";", "var", "public", "title", ":", "string", ";", "var", "public", "body", "?", ":", "string", ";", "var", "public", "level", ":", "Level", ";", "var", "public", "error", "?", ":", "Error", ";", "param", "{", "Level", "}", "level", "param", "{", "string", "}", "path", "param", "{", "object", "}", "data", "return", "{", "Log", "}", "public", "static", "template", "(", "level", ",", "path", ",", "data", "=", "{", "}", ")", "{", "const", "template", "=", "fs", ".", "readFileSync", "(", "path", ",", "'utf8'", ")", ";", "const", "raw", "=", "render", "(", "template", ",", "data", ")", ";", "let", "title", "=", "raw", ".", "trim", "(", ")", ".", "split", "(", "'\\n'", ")", "[", "0", "]", ".", "trim", "(", ")", ";", "if", "(", "title", ".", "startsWith", "(", "'#'", ")", ")", "{", "title", "=", "title", ".", "substring", "(", "2", ")", ";", "}", "const", "body", "=", "raw", ".", "trim", "(", ")", ".", "split", "(", "'\\n'", ")", ".", "slice", "(", "1", ")", ".", "join", "(", "'\\n'", ")", ".", "trim", "(", ")", ";", "return", "new", "Log", "(", "level", ",", "title", ",", "body", ")", ";", "}", "param", "{", "Level", "}", "level", "param", "{", "string", "}", "title", "param", "{", "string", "}", "body", "constructor", "(", "level", ",", "title", ",", "body", "?", ")", "{", "super", "(", "title", ")", ";", "Object", ".", "setPrototypeOf", "(", "this", ",", "Log", ".", "prototype", ")", ";", "this", ".", "name", "=", "this", ".", "constructor", ".", "name", ";", "Error", ".", "captureStackTrace", "(", "this", ",", "this", ".", "constructor", ")", ";", "this", ".", "level", "=", "level", ";", "this", ".", "title", "=", "title", ";", "this", ".", "body", "=", "body", ";", "}", "param", "{", "Error", "}", "error", "return", "{", "Log", "}", "public", "setError", "(", "error", ")", "{", "this", ".", "message", "=", "error", ".", "message", ";", "this", ".", "error", "=", "error", ";", "return", "this", ";", "}", "return", "{", "string", "}", "public", "toString", "(", ")", "{", "const", "out", "=", "[", "`# ${", "this", ".", "title", "}`", ",", "''", "]", ";", "if", "(", "this", ".", "body", "!=", "null", ")", "{", "out", ".", "push", "(", "...", "this", ".", "body", ".", "split", "(", "'\\n'", ")", ")", ";", "}", "else", "if", "(", "this", ".", "error", "!=", "null", ")", "{", "out", ".", "push", "(", "this", ".", "error", ".", "message", ")", ";", "out", ".", "push", "(", "...", "this", ".", "error", ".", "stack", ".", "split", "(", "'\\n'", ")", ")", ";", "}", "else", "if", "(", "this", ".", "stack", "!=", "null", ")", "{", "out", ".", "push", "(", "...", "this", ".", "stack", ".", "split", "(", "'\\n'", ")", ")", ";", "}", "return", "out", ".", "join", "(", "'\\n'", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, "Level", null, "string", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Level", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/log.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "log.ts"}
{"tokens": ["exports", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "clone", "}", "from", "'lodash'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "App", "}", "from", "'../lib/app'", ";", "import", "{", "Config", "}", "from", "'../lib/config'", ";", "import", "{", "ICodeRepository", "}", "from", "'../lib/service'", ";", "import", "{", "EventEmitter", "}", "from", "'../lib/utility/eventemitter'", ";", "import", "{", "Log", "}", "from", "'./log'", ";", "import", "*", "as", "type", "from", "'./type'", ";", "const", "tempDir", "=", "path", ".", "resolve", "(", "os", ".", "tmpdir", "(", ")", ",", "'houston'", ")", ";", "export", "class", "Worker", "extends", "EventEmitter", "implements", "type", ".", "IWorker", "{", "var", "public", "app", ":", "App", ";", "var", "public", "get", "config", "(", ")", ":", "Config", "{", "return", "this", ".", "app", ".", "get", "<", "Config", ">", "(", "Config", ")", ";", "}", "var", "public", "repository", ":", "ICodeRepository", ";", "var", "public", "context", ":", "type", ".", "IContext", ";", "var", "public", "workspace", ":", "string", ";", "var", "public", "tasks", ":", "type", ".", "ITaskConstructor", "[", "]", "=", "[", "]", ";", "var", "public", "postTasks", ":", "type", ".", "ITaskConstructor", "[", "]", "=", "[", "]", ";", "var", "public", "forks", ":", "Worker", "[", "]", "=", "[", "]", ";", "var", "public", "running", ":", "type", ".", "ITask", "|", "null", ";", "param", "{", "App", "}", "app", "param", "{", "ICodeRepository", "}", "repository", "param", "{", "IContext", "}", "context", "constructor", "(", "app", ",", "repository", ",", "context", ")", "{", "super", "(", ")", ";", "this", ".", "app", "=", "app", ";", "this", ".", "repository", "=", "repository", ";", "this", ".", "context", "=", "context", ";", "this", ".", "workspace", "=", "path", ".", "resolve", "(", "tempDir", ",", "uuid", "(", ")", ")", ";", "}", "return", "{", "boolean", "}", "public", "get", "fails", "(", ")", ":", "boolean", "{", "return", "this", ".", "result", ".", "failed", ";", "}", "return", "{", "boolean", "}", "public", "get", "passes", "(", ")", ":", "boolean", "{", "return", "(", "this", ".", "fails", "===", "false", ")", ";", "}", "return", "{", "IContext", "[", "]", "}", "public", "get", "contexts", "(", ")", ":", "type", ".", "IContext", "[", "]", "{", "return", "[", "this", ".", "context", ",", "...", "this", ".", "forks", ".", "map", "(", "(", "worker", ")", "=>", "worker", ".", "contexts", ")", ".", "reduce", "(", "(", "a", ",", "b", ")", "=>", "[", "...", "a", ",", "...", "b", "]", ",", "[", "]", ")", "]", ";", "}", "return", "{", "Number", "}", "protected", "get", "runningIndex", "(", ")", ":", "number", "{", "if", "(", "this", ".", "running", "!=", "null", ")", "{", "const", "tI", "=", "this", ".", "tasks", ".", "findIndex", "(", "(", "task", ")", "=>", "{", "return", "(", "this", ".", "running", "instanceof", "task", ")", ";", "}", ")", ";", "if", "(", "tI", "!==", "-", "1", ")", "{", "return", "tI", ";", "}", "else", "{", "return", "this", ".", "postTasks", ".", "findIndex", "(", "(", "task", ")", "=>", "{", "return", "(", "this", ".", "running", "instanceof", "task", ")", ";", "}", ")", ";", "}", "}", "}", "return", "{", "ILog", "[", "]", "}", "protected", "get", "resultLogs", "(", ")", ":", "type", ".", "ILog", "[", "]", "{", "return", "this", ".", "contexts", ".", "map", "(", "(", "ctx", ")", "=>", "ctx", ".", "logs", ")", ".", "reduce", "(", "(", "a", ",", "b", ")", "=>", "[", "...", "a", ",", "...", "b", "]", ",", "[", "]", ")", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", "!=", "null", ")", ")", ".", "reduce", "(", "(", "currentLogs", ",", "log", ",", "i", ",", "allLogs", ")", "=>", "{", "const", "allSimilarLogs", "=", "allLogs", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "title", "===", "log", ".", "title", ")", ")", ";", "const", "contexts", "=", "[", "...", "allSimilarLogs", ",", "log", "]", ".", "map", "(", "(", "l", ")", "=>", "this", ".", "getContextForLog", "(", "l", ")", ")", ".", "filter", "(", "(", "c", ")", "=>", "(", "c", "!=", "null", ")", ")", ";", "log", ".", "body", "=", "this", ".", "getContextLogBody", "(", "log", ",", "contexts", ")", ";", "const", "similarLogs", "=", "currentLogs", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "title", "===", "log", ".", "title", ")", ")", ";", "if", "(", "similarLogs", ".", "length", "===", "0", ")", "{", "return", "[", "...", "currentLogs", ",", "log", "]", ";", "}", "else", "{", "return", "currentLogs", ";", "}", "}", ",", "[", "]", ")", ";", "}", "return", "{", "IResult", "}", "public", "get", "result", "(", ")", ":", "type", ".", "IResult", "{", "const", "packages", "=", "this", ".", "contexts", ".", "map", "(", "(", "ctx", ")", "=>", "ctx", ".", "package", ")", ".", "filter", "(", "(", "p", ")", "=>", "(", "p", "!=", "null", ")", ")", ";", "const", "appcenters", "=", "this", ".", "contexts", ".", "map", "(", "(", "ctx", ")", "=>", "ctx", ".", "appcenter", ")", ".", "filter", "(", "(", "a", ")", "=>", "(", "a", "!=", "null", ")", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "(", "JSON", ".", "stringify", "(", "b", ")", ".", "length", "-", "JSON", ".", "stringify", "(", "a", ")", ".", "length", ")", ")", ";", "const", "appstreams", "=", "this", ".", "contexts", ".", "map", "(", "(", "ctx", ")", "=>", "ctx", ".", "appstream", ")", ".", "filter", "(", "(", "a", ")", "=>", "(", "a", "!=", "null", ")", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "(", "b", ".", "length", "-", "a", ".", "length", ")", ")", ";", "const", "logs", "=", "this", ".", "resultLogs", ";", "const", "failed", "=", "logs", ".", "some", "(", "(", "l", ")", "=>", "(", "l", ".", "level", "===", "Log", ".", "Level", ".", "ERROR", ")", ")", ";", "return", "{", "appcenter", ":", "appcenters", "[", "0", "]", ",", "appstream", ":", "appstreams", "[", "0", "]", ",", "failed", ",", "logs", ":", "(", "logs", "||", "[", "]", ")", ",", "packages", "}", ";", "}", "async", "return", "{", "void", "}", "public", "async", "setup", "(", ")", "{", "await", "this", ".", "emitAsync", "(", "'setup:start'", ")", ";", "await", "fs", ".", "ensureDir", "(", "this", ".", "workspace", ")", ";", "await", "this", ".", "emitAsync", "(", "'setup:end'", ")", ";", "}", "async", "public", "async", "run", "(", ")", "{", "await", "this", ".", "emitAsync", "(", "'run:start'", ")", ";", "for", "(", "const", "task", "of", "this", ".", "tasks", ")", "{", "try", "{", "const", "taskConstructor", "=", "await", "this", ".", "emitAsyncChain", "<", "type", ".", "ITaskConstructor", ">", "(", "'task:start'", ",", "task", ")", ";", "this", ".", "running", "=", "new", "taskConstructor", "(", "this", ")", ";", "await", "this", ".", "running", ".", "run", "(", ")", ";", "}", "catch", "(", "err", ")", "{", "this", ".", "report", "(", "err", ")", ";", "}", "if", "(", "this", ".", "running", "==", "null", ")", "{", "break", ";", "}", "if", "(", "this", ".", "forks", ".", "length", ">", "0", ")", "{", "const", "todoTasks", "=", "this", ".", "tasks", ".", "splice", "(", "this", ".", "runningIndex", "+", "1", ")", ";", "this", ".", "forks", ".", "forEach", "(", "(", "fork", ")", "=>", "{", "fork", ".", "tasks", "=", "todoTasks", ";", "}", ")", ";", "await", "Promise", ".", "all", "(", "this", ".", "forks", ".", "map", "(", "(", "fork", ")", "=>", "fork", ".", "run", "(", ")", ")", ")", ";", "}", "}", "for", "(", "const", "task", "of", "this", ".", "postTasks", ")", "{", "try", "{", "const", "taskConstructor", "=", "await", "this", ".", "emitAsyncChain", "<", "type", ".", "ITaskConstructor", ">", "(", "'task:start'", ",", "task", ")", ";", "this", ".", "running", "=", "new", "taskConstructor", "(", "this", ")", ";", "await", "this", ".", "running", ".", "run", "(", ")", ";", "}", "catch", "(", "err", ")", "{", "this", ".", "report", "(", "err", ")", ";", "}", "}", "await", "this", ".", "emitAsync", "(", "'run:end'", ")", ";", "this", ".", "stop", "(", ")", ";", "}", "example", "async", "param", "{", "Object", "}", "context", "return", "{", "Worker", "}", "public", "async", "fork", "(", "context", "=", "{", "}", ")", "{", "const", "newContext", "=", "Object", ".", "assign", "(", "{", "}", ",", "this", ".", "context", ",", "context", ",", "{", "logs", ":", "[", "]", "}", ")", ";", "const", "fork", "=", "new", "Worker", "(", "this", ".", "app", ",", "this", ".", "repository", ",", "newContext", ")", ";", "this", ".", "forks", ".", "push", "(", "fork", ")", ";", "return", "fork", ";", "}", "async", "return", "{", "void", "}", "public", "async", "teardown", "(", ")", "{", "await", "this", ".", "emitAsync", "(", "'teardown:start'", ")", ";", "await", "fs", ".", "remove", "(", "this", ".", "workspace", ")", ";", "await", "this", ".", "emitAsync", "(", "'teardown:end'", ")", ";", "}", "param", "{", "Error", "}", "err", "return", "{", "Worker", "}", "public", "report", "(", "err", ")", "{", "if", "(", "!", "(", "err", "instanceof", "Log", ")", ")", "{", "this", ".", "emit", "(", "'run:error'", ",", "err", ")", ";", "const", "log", "=", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Internal error while running'", ")", ".", "setError", "(", "err", ")", ";", "this", ".", "context", ".", "logs", ".", "push", "(", "log", ")", ";", "this", ".", "stop", "(", ")", ";", "}", "else", "{", "this", ".", "context", ".", "logs", ".", "push", "(", "err", ")", ";", "if", "(", "err", ".", "level", "===", "Log", ".", "Level", ".", "ERROR", ")", "{", "this", ".", "stop", "(", ")", ";", "}", "}", "return", "this", ";", "}", "return", "{", "IResult", "}", "public", "stop", "(", ")", "{", "this", ".", "running", "=", "null", ";", "return", "this", ".", "result", ";", "}", "param", "{", "ILog", "}", "log", "return", "{", "IContext", "|", "null", "}", "protected", "getContextForLog", "(", "log", ")", "{", "for", "(", "const", "l", "of", "this", ".", "context", ".", "logs", ")", "{", "if", "(", "l", "===", "log", ")", "{", "return", "this", ".", "context", ";", "}", "}", "for", "(", "const", "fork", "of", "this", ".", "forks", ")", "{", "const", "foundChildForkContext", "=", "fork", ".", "getContextForLog", "(", "log", ")", ";", "if", "(", "foundChildForkContext", "!=", "null", ")", "{", "return", "foundChildForkContext", ";", "}", "}", "return", "null", ";", "}", "param", "{", "type", ".", "ILog", "}", "log", "param", "{", "type", ".", "IContext", "[", "]", "}", "contexts", "return", "{", "string", "}", "protected", "getContextLogBody", "(", "log", ",", "contexts", ")", "{", "if", "(", "log", ".", "body", "==", "null", "||", "log", ".", "body", ".", "includes", "(", "'### Build Information'", ")", ")", "{", "return", "log", ".", "body", ";", "}", "const", "architectures", "=", "Array", ".", "from", "(", "new", "Set", "(", "contexts", ".", "map", "(", "(", "c", ")", "=>", "c", ".", "architecture", ")", ")", ")", ".", "filter", "(", "(", "a", ")", "=>", "(", "a", "!=", "null", ")", ")", ";", "const", "distributions", "=", "Array", ".", "from", "(", "new", "Set", "(", "contexts", ".", "map", "(", "(", "c", ")", "=>", "c", ".", "distribution", ")", ")", ")", ".", "filter", "(", "(", "d", ")", "=>", "(", "d", "!=", "null", ")", ")", ";", "const", "references", "=", "Array", ".", "from", "(", "new", "Set", "(", "this", ".", "getContextForLog", "(", "log", ")", ".", "references", ")", ")", ".", "filter", "(", "(", "r", ")", "=>", "(", "r", "!=", "null", ")", ")", ";", "let", "body", "=", "(", "log", ".", "body", "||", "''", ")", ".", "trim", "(", ")", ";", "body", "+=", "'\\n\\n### Build Information'", ";", "if", "(", "architectures", ".", "length", ">", "1", ")", "{", "body", "+=", "`\\nAffects Architectures: ${", "architectures", ".", "join", "(", "', '", ")", "}`", ";", "}", "else", "if", "(", "architectures", ".", "length", "===", "1", ")", "{", "body", "+=", "`\\nAffects Architecture: ${", "architectures", "[", "0", "]", "}`", ";", "}", "if", "(", "distributions", ".", "length", ">", "1", ")", "{", "body", "+=", "`\\nAffects Distributions: ${", "distributions", ".", "join", "(", "', '", ")", "}`", ";", "}", "else", "if", "(", "distributions", ".", "length", "===", "1", ")", "{", "body", "+=", "`\\nAffects Distribution: ${", "distributions", "[", "0", "]", "}`", ";", "}", "if", "(", "references", ".", "length", ">", "0", ")", "{", "body", "+=", "'\\nBuilt with the following references:'", ";", "for", "(", "const", "reference", "of", "references", ")", "{", "body", "+=", "`\\n- ${", "reference", "}`", ";", "}", "}", "return", "body", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "App", null, "UNK", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, "array", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, "array", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "ILog", null, "number", null, "array", null, null, null, null, "array", null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, "IPackage", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "UNK", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/worker.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "worker.ts"}
{"tokens": ["exports", "import", "{", "Log", "}", "from", "'../log'", ";", "import", "{", "ITask", ",", "ITaskConstructor", "}", "from", "'../type'", ";", "import", "{", "Worker", "}", "from", "'../worker'", ";", "export", "class", "Task", "implements", "ITask", "{", "var", "public", "worker", ":", "Worker", ";", "param", "{", "Worker", "}", "worker", "constructor", "(", "worker", ")", "{", "this", ".", "worker", "=", "worker", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "this", ".", "worker", ".", "emit", "(", "`task:${", "this", ".", "constructor", ".", "name", "}:start`", ")", ";", "this", ".", "worker", ".", "emit", "(", "`task:${", "this", ".", "constructor", ".", "name", "}:end`", ")", ";", "}", "param", "{", "Error", "}", "e", "return", "{", "Task", "}", "public", "report", "(", "e", ")", "{", "if", "(", "!", "(", "e", "instanceof", "Log", ")", ")", "{", "const", "log", "=", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Internal error while running'", ")", ".", "setError", "(", "e", ")", ";", "this", ".", "worker", ".", "report", "(", "log", ")", ";", "this", ".", "worker", ".", "stop", "(", ")", ";", "}", "else", "{", "this", ".", "worker", ".", "report", "(", "e", ")", ";", "if", "(", "e", ".", "level", "===", "Log", ".", "Level", ".", "ERROR", ")", "{", "this", ".", "worker", ".", "stop", "(", ")", ";", "}", "}", "return", "this", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/task.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "task.ts"}
{"tokens": ["/**\n * houston/src/worker/task/wrapperTask.ts\n * Runs a bunch of tasks in a row, collecting errors for later.\n */", "import", "{", "Log", "}", "from", "'../log'", ";", "import", "{", "ITaskConstructor", "}", "from", "'../type'", ";", "import", "{", "Task", "}", "from", "'./task'", ";", "export", "class", "WrapperTask", "extends", "Task", "{", "var", "public", "get", "tasks", "(", ")", ":", "ITaskConstructor", "[", "]", "{", "return", "[", "]", ";", "}", "public", "set", "tasks", "(", "tasks", ")", "{", "return", ";", "}", "var", "public", "logs", ":", "Log", "[", "]", "=", "[", "]", ";", "return", "{", "Log", "[", "]", "}", "protected", "get", "errorLogs", "(", ")", ":", "Log", "[", "]", "{", "return", "this", ".", "logs", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "level", "===", "Log", ".", "Level", ".", "ERROR", ")", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "await", "this", ".", "runTasks", "(", ")", ";", "this", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "this", ".", "worker", ".", "report", "(", "l", ")", ")", ";", "if", "(", "this", ".", "errorLogs", ".", "length", ">", "0", ")", "{", "this", ".", "worker", ".", "stop", "(", ")", ";", "}", "}", "async", "return", "{", "void", "}", "protected", "async", "runTasks", "(", ")", "{", "for", "(", "const", "T", "of", "this", ".", "tasks", ")", "{", "const", "task", "=", "new", "T", "(", "this", ".", "worker", ")", ";", "await", "task", ".", "run", "(", ")", ".", "catch", "(", "(", "e", ")", "=>", "this", ".", "catchError", "(", "e", ")", ")", ";", "}", "}", "param", "{", "Error", "}", "e", "return", "{", "void", "}", "throws", "protected", "catchError", "(", "e", ")", "{", "if", "(", "e", "instanceof", "Log", ")", "{", "this", ".", "logs", ".", "push", "(", "e", ")", ";", "}", "else", "{", "throw", "e", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, "ITask", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/wrapperTask.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "wrapperTask.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/description.ts\n * Checks we have a description.\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamDescription", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "const", "description", "=", "$", "(", "'component > description'", ")", ";", "if", "(", "description", ".", "length", "===", "0", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Missing \"description\" field'", ")", ";", "}", "const", "text", "=", "description", ".", "text", "(", ")", ";", "if", "(", "text", ".", "toLowerCase", "(", ")", ".", "replace", "(", "/\\W/", ",", "''", ")", ".", "indexOf", "(", "'elementaryos'", ")", "!==", "-", "1", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'\"description\" field calls out elementary OS'", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/description.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "description.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/id.ts\n * Tests the appstream ID matches correctly\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamId", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "const", "id", "=", "$", "(", "'component > id'", ")", ";", "if", "(", "id", ".", "length", "===", "0", ")", "{", "$", "(", "'component'", ")", ".", "prepend", "(", "`<id>${", "this", ".", "name", "}</id>`", ")", ";", "await", "fs", ".", "writeFile", "(", "this", ".", "path", ",", "$", ".", "xml", "(", ")", ")", ";", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "WARN", ",", "'Missing \"id\" field'", ")", ";", "}", "else", "if", "(", "id", ".", "text", "(", ")", "!==", "this", ".", "name", ")", "{", "id", ".", "text", "(", "this", ".", "name", ")", ";", "await", "fs", ".", "writeFile", "(", "this", ".", "path", ",", "$", ".", "xml", "(", ")", ")", ";", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "WARN", ",", "`\"id\" field should be \"${", "this", ".", "name", "}\"`", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/id.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "id.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/license.ts\n * Checks that a project_license is in the appstream file\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamLicense", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "const", "license", "=", "$", "(", "'component > project_license'", ")", ";", "if", "(", "license", ".", "length", "===", "0", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "WARN", ",", "'Missing \"project_license\" field'", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/license.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "license.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/name.ts\n * Checks that a name field exists in the appstream file\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamName", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "const", "name", "=", "$", "(", "'component > name'", ")", ";", "if", "(", "name", ".", "length", "===", "0", ")", "{", "$", "(", "'component'", ")", ".", "prepend", "(", "`<name>${", "this", ".", "worker", ".", "context", ".", "nameHuman", "}</name>`", ")", ";", "await", "fs", ".", "writeFile", "(", "this", ".", "path", ",", "$", ".", "xml", "(", ")", ")", ";", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "WARN", ",", "'Missing \"name\" field'", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/name.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "name.ts"}
{"tokens": ["example", "import", "{", "defaultsDeep", "}", "from", "'lodash'", ";", "import", "*", "as", "Markdown", "from", "'markdown-it'", ";", "const", "DEFAULT_OPTS", "=", "{", "breaks", ":", "true", ",", "html", ":", "false", ",", "linkify", ":", "true", ",", "quotes", ":", "'“”‘’'", ",", "typographer", ":", "true", ",", "xhtmlOut", ":", "true", "}", ";", "param", "{", "String", "}", "str", "param", "{", "Object", "}", "opts", "return", "{", "string", "}", "export", "default", "function", "(", "str", ",", "opts", "=", "{", "}", ")", "{", "const", "markdown", "=", "new", "Markdown", "(", "defaultsDeep", "(", "{", "}", ",", "DEFAULT_OPTS", ",", "opts", ")", ")", ";", "return", "markdown", ".", "render", "(", "str", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/utility/markdown.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "markdown.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/release.ts\n * Checks and updates the appstream releases section\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "sanitizeHtml", "from", "'sanitize-html'", ";", "import", "*", "as", "semver", "from", "'semver'", ";", "import", "markdown", "from", "'../../../lib/utility/markdown'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamRelease", "extends", "Task", "{", "var", "protected", "static", "WHITELISTED_TAGS", "=", "[", "'p'", ",", "'ul'", ",", "'li'", "]", ";", "var", "protected", "static", "CHEERIO_OPTS", "=", "{", "useHtmlParser2", ":", "true", ",", "xmlMode", ":", "true", "}", ";", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "AppstreamRelease", ".", "CHEERIO_OPTS", ")", ";", "const", "releases", "=", "$", "(", "'component > releases'", ")", ";", "if", "(", "releases", ".", "length", "===", "0", ")", "{", "await", "fs", ".", "writeFile", "(", "this", ".", "path", ",", "this", ".", "fill", "(", "$", ")", ")", ";", "}", "}", "param", "{", "Object", "}", "$", "return", "{", "string", "}", "protected", "fill", "(", "$", ")", "{", "if", "(", "$", "(", "'component > releases'", ")", ".", "length", "===", "0", ")", "{", "$", "(", "'component'", ")", ".", "append", "(", "'<releases></releases>'", ")", ";", "}", "this", ".", "worker", ".", "context", ".", "changelog", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "semver", ".", "rcompare", "(", "a", ".", "version", ",", "b", ".", "version", ")", ")", ".", "forEach", "(", "(", "change", ")", "=>", "{", "$", "(", "'component > releases'", ")", ".", "prepend", "(", "'<release></release>'", ")", ";", "const", "release", "=", "$", "(", "'component > releases > release:last-of-type'", ")", ";", "release", ".", "attr", "(", "'version'", ",", "change", ".", "version", ")", ";", "release", ".", "attr", "(", "'date'", ",", "change", ".", "date", ".", "toISOString", "(", ")", ")", ";", "release", ".", "attr", "(", "'urgency'", ",", "this", ".", "urgency", "(", "change", ".", "changes", ")", ")", ";", "release", ".", "html", "(", "`<description>${", "this", ".", "html", "(", "change", ".", "changes", ")", "}</description>`", ")", ";", "}", ")", ";", "return", "$", ".", "xml", "(", ")", ";", "}", "param", "{", "String", "}", "change", "return", "{", "String", "}", "protected", "urgency", "(", "change", ")", "{", "const", "grepable", "=", "change", ".", "toLowerCase", "(", ")", ".", "replace", "(", "/\\W\\s/img", ",", "''", ")", ".", "replace", "(", "/\\s+/img", ",", "' '", ")", ";", "const", "CRITICAL_WORDS", "=", "[", "'security'", ",", "'critical'", "]", ";", "CRITICAL_WORDS", ".", "forEach", "(", "(", "word", ")", "=>", "{", "if", "(", "grepable", ".", "indexOf", "(", "word", ")", "!==", "-", "1", ")", "{", "return", "'critical'", ";", "}", "}", ")", ";", "return", "'medium'", ";", "}", "param", "{", "String", "}", "change", "return", "{", "String", "}", "protected", "html", "(", "change", ")", "{", "const", "html", "=", "markdown", "(", "change", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "html", ",", "AppstreamRelease", ".", "CHEERIO_OPTS", ")", ";", "const", "lists", "=", "$", "(", "'ul'", ")", ";", "const", "paragraphs", "=", "$", "(", "'p'", ")", ";", "if", "(", "lists", ".", "length", "===", "0", "&&", "paragraphs", ".", "length", "===", "1", ")", "{", "const", "items", "=", "paragraphs", ".", "text", "(", ")", ".", "split", "(", "'\\n'", ")", ".", "join", "(", "'</li><li>'", ")", ";", "$", ".", "root", "(", ")", ".", "html", "(", "`<ul><li>${", "items", "}</li></ul>`", ")", ";", "}", "return", "this", ".", "sanitize", "(", "$", ".", "xml", "(", ")", ")", ";", "}", "param", "{", "String", "}", "change", "return", "{", "String", "}", "protected", "sanitize", "(", "change", ")", "{", "const", "$el", "=", "cheerio", ".", "load", "(", "change", ",", "AppstreamRelease", ".", "CHEERIO_OPTS", ")", ";", "const", "sanitized", "=", "sanitizeHtml", "(", "$el", ".", "xml", "(", ")", ",", "{", "allowedTags", ":", "AppstreamRelease", ".", "WHITELISTED_TAGS", ",", "parser", ":", "AppstreamRelease", ".", "CHEERIO_OPTS", "}", ")", ";", "return", "cheerio", ".", "load", "(", "sanitized", ",", "AppstreamRelease", ".", "CHEERIO_OPTS", ")", ".", "xml", "(", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IChange", null, "IChange", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IChange", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/release.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "release.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/screenshot.ts\n * Ensures the developer includes a screenshot\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamScreenshot", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "const", "screenshots", "=", "$", "(", "'component > screenshots > screenshot'", ")", ";", "if", "(", "screenshots", ".", "length", "<", "1", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Missing screenshots'", ")", ";", "}", "screenshots", ".", "each", "(", "(", "i", ",", "elem", ")", "=>", "this", ".", "checkTag", "(", "$", ",", "elem", ")", ")", ";", "}", "param", "{", "Object", "}", "elem", "return", "{", "void", "}", "protected", "checkTag", "(", "$", ",", "elem", ")", "{", "const", "screenshot", "=", "$", "(", "elem", ")", ";", "const", "image", "=", "$", "(", "'image'", ",", "screenshot", ")", ";", "if", "(", "image", ".", "length", "<", "1", ")", "{", "this", ".", "worker", ".", "report", "(", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Missing image tag in screenshot'", ")", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Element", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/screenshot.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "screenshot.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/stripe.ts\n * Adds stripe data to appstream file\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamStripe", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "if", "(", "this", ".", "worker", ".", "context", ".", "stripe", "==", "null", ")", "{", "return", ";", "}", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "raw", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "if", "(", "$", "(", "'component > custom'", ")", ".", "length", "===", "0", ")", "{", "$", "(", "'component'", ")", ".", "append", "(", "'<custom></custom>'", ")", ";", "}", "$", "(", "'component > custom'", ")", ".", "append", "(", "'<value></value>'", ")", ";", "const", "$el", "=", "$", "(", "'component > custom > value:last-of-type'", ")", ";", "$el", ".", "attr", "(", "'key'", ",", "'x-appcenter-stripe'", ")", ";", "$el", ".", "text", "(", "this", ".", "worker", ".", "context", ".", "stripe", ")", ";", "await", "fs", ".", "writeFile", "(", "this", ".", "path", ",", "$", ".", "xml", "(", ")", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/stripe.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "stripe.ts"}
{"tokens": ["exports", "import", "*", "as", "Dockerode", "from", "'dockerode'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "Stream", "from", "'stream'", ";", "import", "{", "Config", "}", "from", "'../lib/config'", ";", "export", "class", "Docker", "{", "var", "public", "log", "?", ":", "string", ";", "var", "protected", "config", ":", "Config", ";", "var", "protected", "docker", ":", "Dockerode", ";", "var", "protected", "name", ":", "string", ";", "/**\n     * tag\n     * The docker image tag\n     */", "protected", "tag", "=", "'latest'", ";", "var", "protected", "mounts", "=", "{", "}", ";", "param", "{", "Config", "}", "config", "param", "{", "string", "}", "name", "constructor", "(", "config", ",", "name", ")", "{", "this", ".", "config", "=", "config", ";", "this", ".", "docker", "=", "new", "Dockerode", "(", "config", ".", "get", "(", "'docker'", ")", ")", ";", "this", ".", "name", "=", "`houston-${", "name", "}`", ";", "}", "return", "{", "object", "}", "public", "get", "options", "(", ")", "{", "const", "options", "=", "{", "Binds", ":", "[", "]", "as", "string", "[", "]", "}", ";", "Object", ".", "keys", "(", "this", ".", "mounts", ")", ".", "forEach", "(", "(", "local", ")", "=>", "{", "options", ".", "Binds", ".", "push", "(", "`${", "local", "}:${", "this", ".", "mounts", "[", "local", "]", "}:rw`", ")", ";", "}", ")", ";", "return", "options", ";", "}", "param", "{", "string", "}", "from", "param", "{", "string", "}", "to", "return", "{", "Docker", "}", "public", "mount", "(", "from", ",", "to", ")", "{", "this", ".", "mounts", "[", "from", "]", "=", "to", ";", "return", "this", ";", "}", "async", "param", "{", "string", "}", "tag", "return", "{", "boolean", "}", "public", "async", "exists", "(", "tag", "=", "this", ".", "tag", ")", "{", "const", "images", "=", "await", "this", ".", "docker", ".", "listImages", "(", ")", ";", "const", "foundImages", "=", "images", ".", "filter", "(", "(", "image", ")", "=>", "{", "if", "(", "image", ".", "RepoTags", "==", "null", ")", "{", "return", "false", ";", "}", "let", "found", "=", "false", ";", "image", ".", "RepoTags", ".", "forEach", "(", "(", "imageTag", ")", "=>", "{", "if", "(", "imageTag", "===", "`${", "this", ".", "name", "}:${", "tag", "}`", ")", "{", "found", "=", "true", ";", "}", "}", ")", ";", "return", "found", ";", "}", ")", ";", "return", "(", "foundImages", ".", "length", "!==", "0", ")", ";", "}", "async", "param", "{", "string", "}", "folder", "return", "{", "void", "}", "public", "async", "create", "(", "folder", ")", "{", "const", "files", "=", "await", "fs", ".", "readdir", "(", "folder", ")", ";", "await", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "docker", ".", "buildImage", "(", "{", "context", ":", "folder", ",", "src", ":", "files", "}", ",", "{", "t", ":", "this", ".", "name", "}", ",", "(", "err", ",", "stream", ")", "=>", "{", "if", "(", "err", "!=", "null", ")", "{", "return", "reject", "(", "err", ")", ";", "}", "this", ".", "docker", ".", "modem", ".", "followProgress", "(", "stream", ",", "resolve", ")", ";", "}", ")", ";", "}", ")", ";", "}", "param", "{", "string", "}", "cmd", "param", "{", "object", "}", "opts", "return", "{", "number", "}", "public", "async", "run", "(", "cmd", ",", "opts", "=", "{", "}", ")", "{", "const", "log", "=", "await", "this", ".", "setupLog", "(", ")", ";", "const", "commands", "=", "cmd", ".", "split", "(", "' '", ")", ";", "const", "options", "=", "Object", ".", "assign", "(", "{", "}", ",", "this", ".", "options", ",", "opts", ")", ";", "const", "container", "=", "await", "this", ".", "docker", ".", "run", "(", "this", ".", "name", ",", "commands", ",", "log", ",", "options", ")", ";", "await", "container", ".", "remove", "(", ")", ";", "return", "container", ".", "output", ".", "StatusCode", ";", "}", "async", "return", "{", "Stream", "|", "null", "}", "protected", "async", "setupLog", "(", ")", "{", "if", "(", "this", ".", "log", "==", "null", ")", "{", "return", "null", ";", "}", "await", "fs", ".", "ensureFile", "(", "this", ".", "log", ")", ";", "return", "fs", ".", "createWriteStream", "(", "this", ".", "log", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "object", null, null, null, null, null, null, "internal", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/docker.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "docker.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/validate.ts\n * Runs appstreamcli to validate appstream file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Docker", "}", "from", "'../../docker'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "AppstreamValidate", "extends", "Task", "{", "return", "{", "string", "}", "protected", "get", "logPath", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'appstream.log'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "docker", "=", "await", "this", ".", "docker", "(", ")", ";", "const", "file", "=", "`${", "this", ".", "name", "}.appdata.xml`", ";", "const", "cmd", "=", "`validate ${", "file", "} --no-color`", ";", "const", "exit", "=", "await", "docker", ".", "run", "(", "cmd", ")", ";", "if", "(", "exit", "!==", "0", ")", "{", "throw", "await", "this", ".", "log", "(", ")", ";", "}", "}", "async", "return", "{", "Log", "}", "protected", "async", "log", "(", ")", "{", "const", "p", "=", "path", ".", "resolve", "(", "__dirname", ",", "'validate.md'", ")", ";", "const", "log", "=", "await", "fs", ".", "readFile", "(", "this", ".", "logPath", ",", "'utf8'", ")", ";", "return", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "p", ",", "{", "log", ",", "storage", ":", "this", ".", "worker", ".", "context", "}", ")", ";", "}", "async", "return", "{", "Docker", "}", "protected", "async", "docker", "(", ")", "{", "const", "docker", "=", "new", "Docker", "(", "this", ".", "worker", ".", "config", ",", "'appstream-validate'", ")", ";", "const", "exists", "=", "await", "docker", ".", "exists", "(", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "const", "folder", "=", "path", ".", "resolve", "(", "__dirname", ",", "'validate'", ")", ";", "await", "docker", ".", "create", "(", "folder", ")", ";", "}", "docker", ".", "log", "=", "this", ".", "logPath", ";", "docker", ".", "mount", "(", "this", ".", "path", ",", "'/tmp/houston'", ")", ";", "return", "docker", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/validate.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "validate.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/index.ts\n * Runs a bunch of appstream tests\n * TODO: Only reports error and warn logs instead of all\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "WrapperTask", "}", "from", "'../wrapperTask'", ";", "import", "{", "AppstreamDescription", "}", "from", "'./description'", ";", "import", "{", "AppstreamId", "}", "from", "'./id'", ";", "import", "{", "AppstreamLicense", "}", "from", "'./license'", ";", "import", "{", "AppstreamName", "}", "from", "'./name'", ";", "import", "{", "AppstreamRelease", "}", "from", "'./release'", ";", "import", "{", "AppstreamScreenshot", "}", "from", "'./screenshot'", ";", "import", "{", "AppstreamStripe", "}", "from", "'./stripe'", ";", "import", "{", "AppstreamSummary", "}", "from", "'./summary'", ";", "import", "{", "AppstreamValidate", "}", "from", "'./validate'", ";", "export", "class", "Appstream", "extends", "WrapperTask", "{", "var", "public", "get", "tasks", "(", ")", "{", "switch", "(", "this", ".", "worker", ".", "context", ".", "type", ")", "{", "case", "'system-app'", ":", "return", "[", "AppstreamId", ",", "AppstreamName", ",", "AppstreamDescription", ",", "AppstreamSummary", ",", "AppstreamLicense", ",", "AppstreamScreenshot", ",", "AppstreamRelease", ",", "AppstreamValidate", "]", ";", "default", ":", "return", "[", "AppstreamId", ",", "AppstreamName", ",", "AppstreamDescription", ",", "AppstreamSummary", ",", "AppstreamLicense", ",", "AppstreamScreenshot", ",", "AppstreamRelease", ",", "AppstreamStripe", ",", "AppstreamValidate", "]", ";", "}", "}", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/metainfo'", ",", "`${", "this", ".", "name", "}.appdata.xml`", ")", ";", "}", "return", "{", "Log", "[", "]", "}", "public", "get", "errorPartials", "(", ")", "{", "return", "this", ".", "logs", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "level", "===", "Log", ".", "Level", ".", "ERROR", ")", ")", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "body", "==", "null", ")", ")", ";", "}", "return", "{", "Log", "[", "]", "}", "public", "get", "warnPartials", "(", ")", "{", "return", "this", ".", "logs", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "level", "===", "Log", ".", "Level", ".", "WARN", ")", ")", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "body", "==", "null", ")", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "exists", "=", "await", "fs", ".", "exists", "(", "this", ".", "path", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "const", "template", "=", "path", ".", "resolve", "(", "__dirname", ",", "'exist.md'", ")", ";", "throw", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "template", ",", "{", "name", ":", "this", ".", "name", ",", "storage", ":", "this", ".", "worker", ".", "context", "}", ")", ";", "}", "await", "this", ".", "runTasks", "(", ")", ";", "if", "(", "this", ".", "errorPartials", ".", "length", ">", "0", "||", "this", ".", "warnPartials", ".", "length", ">", "0", ")", "{", "this", ".", "concatLogs", "(", ")", ";", "}", "this", ".", "logs", ".", "filter", "(", "(", "l", ")", "=>", "(", "l", ".", "body", "!=", "null", ")", ")", ".", "forEach", "(", "(", "l", ")", "=>", "this", ".", "worker", ".", "report", "(", "l", ")", ")", ";", "if", "(", "this", ".", "errorLogs", ".", "length", ">", "0", ")", "{", "this", ".", "worker", ".", "stop", "(", ")", ";", "}", "this", ".", "worker", ".", "context", ".", "appstream", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ",", "'utf-8'", ")", ";", "}", "return", "{", "void", "}", "protected", "concatLogs", "(", ")", "{", "const", "topLevel", "=", "(", "this", ".", "errorPartials", ".", "length", ">", "0", ")", "?", "Log", ".", "Level", ".", "ERROR", ":", "Log", ".", "Level", ".", "WARN", ";", "const", "template", "=", "path", ".", "resolve", "(", "__dirname", ",", "'index.md'", ")", ";", "const", "log", "=", "Log", ".", "template", "(", "topLevel", ",", "template", ",", "{", "errors", ":", "this", ".", "errorPartials", ",", "storage", ":", "this", ".", "worker", ".", "context", ",", "warnings", ":", "this", ".", "warnPartials", "}", ")", ";", "this", ".", "worker", ".", "report", "(", "log", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/appstream/index.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "index.ts"}
{"tokens": ["/**\n * houston/src/lib/utility/glob.ts\n * Promiseifies the glob package function\n */", "import", "*", "as", "Glob", "from", "'glob'", ";", "async", "param", "{", "String", "}", "pattern", "param", "{", "Object", "}", "options", "return", "{", "String", "[", "]", "}", "export", "function", "glob", "(", "pattern", ",", "options", "=", "{", "}", ")", "{", "return", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "Glob", "(", "pattern", ",", "options", ",", "(", "err", ",", "res", ")", "=>", "{", "if", "(", "err", "!=", "null", ")", "{", "return", "reject", "(", "err", ")", ";", "}", "else", "{", "return", "resolve", "(", "res", ")", ";", "}", "}", ")", ";", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, "Error", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/utility/glob.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "glob.ts"}
{"tokens": ["/**\n * houston/src/worker/task/build/deb.ts\n * Builds a debian package\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "glob", "}", "from", "'../../../lib/utility/glob'", ";", "import", "render", "from", "'../../../lib/utility/template'", ";", "import", "{", "Docker", "}", "from", "'../../docker'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "IPackage", "}", "from", "'../../type'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "BuildDeb", "extends", "Task", "{", "return", "{", "string", "}", "protected", "get", "logPath", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'build.log'", ")", ";", "}", "return", "{", "string", "}", "protected", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'build'", ")", ";", "}", "return", "{", "string", "}", "protected", "get", "distribution", "(", ")", "{", "switch", "(", "this", ".", "worker", ".", "context", ".", "distribution", ")", "{", "case", "(", "'loki'", ")", ":", "return", "'xenial'", ";", "case", "(", "'juno'", ")", ":", "case", "(", "'hera'", ")", ":", "return", "'bionic'", ";", "default", ":", "return", "this", ".", "worker", ".", "context", ".", "distribution", ";", "}", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "await", "this", ".", "setup", "(", ")", ";", "const", "docker", "=", "await", "this", ".", "docker", "(", ")", ";", "const", "arch", "=", "this", ".", "worker", ".", "context", ".", "architecture", ";", "const", "dist", "=", "this", ".", "distribution", ";", "const", "cmd", "=", "`-a ${", "arch", "} -d ${", "dist", "} -o /tmp/houston`", ";", "const", "exit", "=", "await", "docker", ".", "run", "(", "cmd", ",", "{", "Privileged", ":", "true", "}", ")", ";", "if", "(", "exit", "!==", "0", ")", "{", "throw", "await", "this", ".", "log", "(", ")", ";", "}", "await", "this", ".", "teardown", "(", ")", ";", "}", "async", "return", "{", "void", "}", "protected", "async", "setup", "(", ")", "{", "const", "from", "=", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'dirty'", ")", ";", "await", "fs", ".", "ensureDir", "(", "this", ".", "path", ")", ";", "await", "fs", ".", "copy", "(", "from", ",", "this", ".", "path", ")", ";", "}", "async", "return", "{", "IPackage", "|", "null", "}", "protected", "async", "package", "(", ")", "{", "const", "context", "=", "this", ".", "worker", ".", "context", ";", "const", "domainName", "=", "`${", "context", ".", "nameDomain", "}_${", "context", ".", "version", "}_${", "context", ".", "architecture", "}.${", "context", ".", "package", ".", "type", "}`", ";", "const", "domainNamed", "=", "await", "glob", "(", "path", ".", "resolve", "(", "this", ".", "path", ",", "domainName", ")", ")", ";", "if", "(", "domainNamed", "[", "0", "]", "!=", "null", ")", "{", "return", "{", "name", ":", "domainName", ",", "path", ":", "domainNamed", "[", "0", "]", ",", "type", ":", "'deb'", "}", ";", "}", "const", "allNames", "=", "await", "glob", "(", "path", ".", "resolve", "(", "this", ".", "path", ",", "`*.${", "context", ".", "package", ".", "type", "}`", ")", ")", ";", "const", "filteredNames", "=", "allNames", ".", "map", "(", "(", "n", ")", "=>", "path", ".", "basename", "(", "n", ")", ")", ".", "filter", "(", "(", "n", ")", "=>", "!", "n", ".", "startsWith", "(", "'lib'", ")", ")", ".", "filter", "(", "(", "n", ")", "=>", "(", "n", ".", "indexOf", "(", "'-dev'", ")", "===", "-", "1", ")", ")", ".", "filter", "(", "(", "n", ")", "=>", "(", "n", ".", "indexOf", "(", "'-dbg'", ")", "===", "-", "1", ")", ")", ";", "if", "(", "filteredNames", "[", "0", "]", "!=", "null", ")", "{", "return", "{", "name", ":", "filteredNames", "[", "0", "]", ",", "path", ":", "path", ".", "resolve", "(", "this", ".", "path", ",", "filteredNames", "[", "0", "]", ")", ",", "type", ":", "'deb'", "}", ";", "}", "const", "sortedNames", "=", "allNames", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "(", "a", ".", "length", "-", "b", ".", "length", ")", ")", ";", "if", "(", "sortedNames", "[", "0", "]", "!=", "null", ")", "{", "return", "{", "name", ":", "path", ".", "basename", "(", "sortedNames", "[", "0", "]", ")", ",", "path", ":", "sortedNames", "[", "0", "]", ",", "type", ":", "'deb'", "}", ";", "}", "}", "async", "return", "{", "void", "}", "protected", "async", "teardown", "(", ")", "{", "const", "deb", "=", "await", "this", ".", "package", "(", ")", ";", "if", "(", "deb", "==", "null", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Build completed but no Debian package was found'", ")", ";", "}", "const", "to", "=", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package.deb'", ")", ";", "await", "fs", ".", "copy", "(", "deb", ".", "path", ",", "to", ")", ";", "this", ".", "worker", ".", "context", ".", "package", "=", "deb", ";", "this", ".", "worker", ".", "context", ".", "package", ".", "path", "=", "to", ";", "await", "fs", ".", "remove", "(", "this", ".", "path", ")", ";", "}", "async", "return", "{", "Log", "}", "protected", "async", "log", "(", ")", "{", "const", "p", "=", "path", ".", "resolve", "(", "__dirname", ",", "'deb.md'", ")", ";", "const", "log", "=", "await", "fs", ".", "readFile", "(", "this", ".", "logPath", ",", "'utf8'", ")", ";", "return", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "p", ",", "{", "log", ",", "storage", ":", "this", ".", "worker", ".", "context", "}", ")", ";", "}", "async", "return", "{", "Docker", "}", "protected", "async", "docker", "(", ")", "{", "const", "docker", "=", "new", "Docker", "(", "this", ".", "worker", ".", "config", ",", "'build-deb'", ")", ";", "const", "exists", "=", "await", "docker", ".", "exists", "(", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "const", "folder", "=", "path", ".", "resolve", "(", "__dirname", ",", "'deb'", ")", ";", "await", "docker", ".", "create", "(", "folder", ")", ";", "}", "docker", ".", "log", "=", "this", ".", "logPath", ";", "docker", ".", "mount", "(", "this", ".", "path", ",", "'/tmp/houston'", ")", ";", "return", "docker", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "IContext", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "IPackage", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/build/deb.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "deb.ts"}
{"tokens": ["/**\n * houston/src/worker/task/debian/changelog.ts\n * Updates, lints, and validates the Debian changelog file.\n */", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "markdown", "from", "'../../../lib/utility/markdown'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "template", "from", "'../../../lib/utility/template'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "IChange", ",", "IContext", "}", "from", "'../../type'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "DebianChangelog", "extends", "Task", "{", "var", "public", "static", "path", "=", "'debian/changelog'", ";", "var", "public", "static", "templatePath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'changelogTemplate.ejs'", ")", ";", "async", "param", "{", "IContext", "}", "context", "return", "{", "string", "}", "public", "static", "async", "template", "(", "context", ")", "{", "const", "changelogs", "=", "context", ".", "changelog", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "(", "b", ".", "date", ".", "getTime", "(", ")", "-", "a", ".", "date", ".", "getTime", "(", ")", ")", ")", ";", "const", "changes", "=", "(", "await", "this", ".", "getChanges", "(", "changelogs", ")", ")", ";", "const", "name", "=", "sanitize", "(", "context", ".", "nameDomain", ",", "'-'", ")", ";", "const", "file", "=", "await", "fs", ".", "readFile", "(", "this", ".", "templatePath", ",", "'utf8'", ")", ";", "const", "changelog", "=", "template", "(", "file", ",", "{", "changelogs", ",", "context", ",", "changes", ",", "name", "}", ")", ";", "return", "changelog", ".", "replace", "(", "/^\\s*$/img", ",", "''", ")", ".", "trim", "(", ")", ";", "}", "async", "param", "{", "Object", "[", "]", "}", "changelogs", "return", "{", "Array", "[", "]", "}", "protected", "static", "async", "getChanges", "(", "changelogs", "=", "[", "]", ")", "{", "const", "changes", "=", "[", "]", ";", "for", "(", "const", "version", "of", "changelogs", ")", "{", "changes", ".", "push", "(", "await", "this", ".", "parseMarkdown", "(", "version", ".", "changes", ")", ")", ";", "}", "return", "changes", ";", "}", "param", "{", "string", "}", "changes", "return", "{", "string", "[", "]", "}", "protected", "static", "async", "parseMarkdown", "(", "changes", ")", "{", "const", "html", "=", "markdown", "(", "changes", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "html", ")", ";", "const", "values", "=", "[", "]", ";", "if", "(", "$", "(", "'ul'", ")", ".", "length", ">", "0", ")", "{", "$", "(", "'ul > li'", ")", ".", "each", "(", "function", "(", ")", "{", "values", ".", "push", "(", "$", "(", "this", ")", ".", "text", "(", ")", ")", ";", "}", ")", ";", "}", "else", "if", "(", "$", "(", "'p'", ")", ".", "length", ">", "0", ")", "{", "$", "(", "'p'", ")", ".", "each", "(", "function", "(", ")", "{", "values", ".", "push", "(", "$", "(", "this", ")", ".", "text", "(", ")", ")", ";", "}", ")", ";", "}", "if", "(", "values", ".", "length", "<", "1", ")", "{", "values", ".", "push", "(", "'Version Bump'", ")", ";", "}", "return", "values", ";", "}", "return", "{", "String", "}", "protected", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'dirty'", ",", "DebianChangelog", ".", "path", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "await", "this", ".", "fill", "(", ")", ";", "}", "return", "{", "void", "}", "public", "async", "fill", "(", ")", "{", "await", "fs", ".", "ensureFile", "(", "this", ".", "path", ")", ";", "if", "(", "this", ".", "worker", ".", "context", ".", "changelog", ".", "length", "===", "0", ")", "{", "this", ".", "worker", ".", "context", ".", "changelog", ".", "push", "(", "this", ".", "noopChange", "(", ")", ")", ";", "}", "const", "changelog", "=", "await", "DebianChangelog", ".", "template", "(", "this", ".", "worker", ".", "context", ")", ";", "await", "fs", ".", "writeFile", "(", "this", ".", "path", ",", "changelog", ",", "'utf8'", ")", ";", "}", "return", "{", "Object", "}", "protected", "noopChange", "(", ")", "{", "return", "{", "author", ":", "this", ".", "worker", ".", "context", ".", "nameDeveloper", ",", "changes", ":", "'Version Bump'", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "this", ".", "worker", ".", "context", ".", "version", "}", "as", "IChange", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "IContext", null, null, null, "array", null, null, null, null, null, null, null, null, "IChange", null, "IChange", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "array", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IChange", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/debian/changelog.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "changelog.ts"}
{"tokens": ["/**\n * houston/src/worker/task/debian/control.ts\n * Updates, lints, and validates the Debian control file.\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "get", ",", "set", "}", "from", "'lodash'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "DebianControl", "extends", "Task", "{", "var", "public", "static", "path", "=", "'debian/control'", ";", "return", "{", "String", "}", "protected", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "String", "}", "protected", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'dirty'", ",", "DebianControl", ".", "path", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "exists", "=", "fs", ".", "pathExists", "(", "this", ".", "path", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Missing debian control file'", ")", ";", "}", "const", "file", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ",", "'utf8'", ")", ";", "const", "errors", "=", "[", "]", "as", "string", "[", "]", ";", "if", "(", "file", ".", "indexOf", "(", "`Source: ${", "this", ".", "name", "}`", ")", "===", "-", "1", ")", "{", "errors", ".", "push", "(", "`Source should be \"${", "this", ".", "name", "}\"`", ")", ";", "}", "if", "(", "file", ".", "indexOf", "(", "`Package: ${", "this", ".", "name", "}`", ")", "===", "-", "1", ")", "{", "errors", ".", "push", "(", "`Package should be \"${", "this", ".", "name", "}\"`", ")", ";", "}", "if", "(", "!", "file", ".", "match", "(", "/^Maintainer: .* <.*@.*>$/gm", ")", ")", "{", "errors", ".", "push", "(", "'Maintainer should be in the form of \"name <email@example.com\"'", ")", ";", "}", "if", "(", "errors", ".", "length", ">", "0", ")", "{", "const", "template", "=", "path", ".", "resolve", "(", "__dirname", ",", "'control.md'", ")", ";", "throw", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "template", ",", "{", "context", ":", "this", ".", "worker", ".", "context", ",", "errors", "}", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/debian/control.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "control.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/exec.ts\n * Checks that a exec field starts with app name in the desktop file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "ini", "from", "'ini'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "DesktopExec", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/applications'", ",", "`${", "this", ".", "name", "}.desktop`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ",", "'utf8'", ")", ";", "const", "data", "=", "ini", ".", "parse", "(", "raw", ")", ";", "if", "(", "data", "[", "'Desktop Entry'", "]", "==", "null", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Missing application data'", ")", ";", "}", "const", "execValue", "=", "(", "typeof", "data", "[", "'Desktop Entry'", "]", ".", "Exec", "===", "'string'", ")", "?", "data", "[", "'Desktop Entry'", "]", ".", "Exec", ":", "''", ";", "if", "(", "execValue", ".", "startsWith", "(", "this", ".", "name", ")", "===", "false", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Exec field does not start with binary name'", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/desktop/exec.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "exec.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/icon.ts\n * Checks that a icon field is matches app name in the desktop file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "ini", "from", "'ini'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "DesktopIcon", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/applications'", ",", "`${", "this", ".", "name", "}.desktop`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "raw", "=", "await", "fs", ".", "readFile", "(", "this", ".", "path", ",", "'utf8'", ")", ";", "const", "data", "=", "ini", ".", "parse", "(", "raw", ")", ";", "if", "(", "data", "[", "'Desktop Entry'", "]", "==", "null", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Missing application data'", ")", ";", "}", "if", "(", "data", "[", "'Desktop Entry'", "]", ".", "Icon", "!==", "this", ".", "name", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Incorrect desktop file icon value'", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/desktop/icon.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "icon.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/validate.ts\n * Runs desktop files through the `desktop-file-validate` command\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "glob", "}", "from", "'../../../lib/utility/glob'", ";", "import", "{", "Docker", "}", "from", "'../../docker'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "DesktopValidate", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/applications'", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "files", "=", "await", "glob", "(", "path", ".", "resolve", "(", "this", ".", "path", ",", "'*'", ")", ")", ";", "const", "logFiles", "=", "[", "]", ";", "for", "(", "const", "file", "of", "files", ")", "{", "const", "fileName", "=", "path", ".", "basename", "(", "file", ")", ";", "const", "docker", "=", "await", "this", ".", "docker", "(", "fileName", ")", ";", "const", "localFile", "=", "path", ".", "relative", "(", "this", ".", "path", ",", "file", ")", ";", "const", "exit", "=", "await", "docker", ".", "run", "(", "localFile", ")", ";", "if", "(", "exit", "!==", "0", ")", "{", "logFiles", ".", "push", "(", "fileName", ")", ";", "}", "}", "if", "(", "logFiles", ".", "length", ">", "0", ")", "{", "throw", "await", "this", ".", "log", "(", "logFiles", ")", ";", "}", "}", "return", "{", "string", "}", "protected", "logPath", "(", "file", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "`appstream-${", "file", "}.log`", ")", ";", "}", "async", "param", "{", "string", "[", "]", "}", "files", "return", "{", "Log", "}", "protected", "async", "log", "(", "files", ")", "{", "const", "p", "=", "path", ".", "resolve", "(", "__dirname", ",", "'validate.md'", ")", ";", "const", "logs", "=", "{", "}", ";", "for", "(", "const", "file", "of", "files", ")", "{", "logs", "[", "file", "]", "=", "await", "fs", ".", "readFile", "(", "this", ".", "logPath", "(", "file", ")", ",", "'utf8'", ")", ";", "}", "return", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "p", ",", "{", "logs", ",", "storage", ":", "this", ".", "worker", ".", "context", "}", ")", ";", "}", "async", "param", "{", "string", "}", "file", "return", "{", "Docker", "}", "protected", "async", "docker", "(", "file", ")", "{", "const", "docker", "=", "new", "Docker", "(", "this", ".", "worker", ".", "config", ",", "'desktop-validate'", ")", ";", "const", "exists", "=", "await", "docker", ".", "exists", "(", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "const", "folder", "=", "path", ".", "resolve", "(", "__dirname", ",", "'validate'", ")", ";", "await", "docker", ".", "create", "(", "folder", ")", ";", "}", "docker", ".", "log", "=", "this", ".", "logPath", "(", "file", ")", ";", "docker", ".", "mount", "(", "this", ".", "path", ",", "'/tmp/houston'", ")", ";", "return", "docker", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "array", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/desktop/validate.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "validate.ts"}
{"tokens": ["/**\n * houston/src/worker/task/desktop/index.ts\n * Runs a bunch of tests around the desktop file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "WrapperTask", "}", "from", "'../wrapperTask'", ";", "import", "{", "DesktopExec", "}", "from", "'./exec'", ";", "import", "{", "DesktopIcon", "}", "from", "'./icon'", ";", "import", "{", "DesktopValidate", "}", "from", "'./validate'", ";", "export", "class", "Desktop", "extends", "WrapperTask", "{", "var", "public", "get", "tasks", "(", ")", "{", "switch", "(", "this", ".", "worker", ".", "context", ".", "type", ")", "{", "case", "'system-app'", ":", "return", "[", "DesktopExec", ",", "DesktopValidate", "]", ";", "default", ":", "return", "[", "DesktopExec", ",", "DesktopIcon", ",", "DesktopValidate", "]", ";", "}", "}", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "public", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/share/applications'", ",", "`${", "this", ".", "name", "}.desktop`", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "exists", "=", "await", "fs", ".", "exists", "(", "this", ".", "path", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Desktop file does not exist'", ")", ";", "}", "await", "this", ".", "runTasks", "(", ")", ";", "this", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "this", ".", "worker", ".", "report", "(", "l", ")", ")", ";", "if", "(", "this", ".", "errorLogs", ".", "length", ">", "0", ")", "{", "this", ".", "worker", ".", "stop", "(", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/desktop/index.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "index.ts"}
{"tokens": ["/**\n * houston/src/worker/task/file/deb/binary.ts\n * Tests debian packages for needed binary file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "glob", "}", "from", "'../../../../lib/utility/glob'", ";", "import", "{", "sanitize", "}", "from", "'../../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../../log'", ";", "import", "{", "Task", "}", "from", "'../../task'", ";", "export", "class", "FileDebBinary", "extends", "Task", "{", "return", "{", "string", "}", "public", "get", "name", "(", ")", "{", "return", "sanitize", "(", "this", ".", "worker", ".", "context", ".", "nameDomain", ",", "'-'", ")", ";", "}", "return", "{", "string", "}", "protected", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package/usr/bin'", ",", "this", ".", "name", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "exists", "=", "await", "fs", ".", "exists", "(", "this", ".", "path", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "throw", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "path", ".", "resolve", "(", "__dirname", ",", "'binary.md'", ")", ",", "{", "context", ":", "this", ".", "worker", ".", "context", ",", "files", ":", "await", "this", ".", "files", "(", ")", ",", "name", ":", "this", ".", "name", "}", ")", ";", "}", "}", "async", "return", "{", "string", "[", "]", "}", "protected", "async", "files", "(", ")", "{", "const", "root", "=", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package'", ")", ";", "const", "files", "=", "await", "glob", "(", "path", ".", "resolve", "(", "root", ",", "'**/*'", ")", ",", "{", "nodir", ":", "true", "}", ")", ";", "return", "files", ".", "filter", "(", "(", "p", ")", "=>", "!", "p", ".", "startsWith", "(", "path", ".", "resolve", "(", "root", ",", "'DEBIAN'", ")", ")", ")", ".", "filter", "(", "(", "p", ")", "=>", "(", "p", "!==", "path", ".", "resolve", "(", "root", ",", "'FILES'", ")", ")", ")", ".", "map", "(", "(", "p", ")", "=>", "p", ".", "substring", "(", "root", ".", "length", ")", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/file/deb/binary.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "binary.ts"}
{"tokens": ["/**\n * houston/src/worker/task/file/deb/binary.ts\n * Tests debian packages for needed binary file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "glob", "}", "from", "'../../../../lib/utility/glob'", ";", "import", "{", "Log", "}", "from", "'../../../log'", ";", "import", "{", "Task", "}", "from", "'../../task'", ";", "export", "class", "FileDebNonexistent", "extends", "Task", "{", "return", "{", "string", "}", "protected", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package'", ")", ";", "}", "return", "{", "string", "}", "protected", "get", "files", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "path", ",", "'package/nonexistent/**/*'", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "files", "=", "await", "glob", "(", "this", ".", "files", ")", ";", "if", "(", "files", ".", "length", "<", "1", ")", "{", "return", ";", "}", "const", "relativePaths", "=", "files", ".", "map", "(", "(", "file", ")", "=>", "file", ".", "replace", "(", "`${", "this", ".", "path", "}/`", ",", "''", ")", ")", ";", "const", "p", "=", "path", ".", "resolve", "(", "__dirname", ",", "'nonexistentLog.md'", ")", ";", "const", "log", "=", "await", "fs", ".", "readFile", "(", "p", ",", "'utf8'", ")", ";", "throw", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "p", ",", "{", "files", ":", "relativePaths", ",", "storage", ":", "this", ".", "worker", ".", "context", "}", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/file/deb/nonexistent.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "nonexistent.ts"}
{"tokens": ["/**\n * houston/src/worker/task/pack/deb.ts\n * Packages up an extracted deb file\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Docker", "}", "from", "'../../docker'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "PackDeb", "extends", "Task", "{", "return", "{", "string", "}", "protected", "get", "path", "(", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "worker", ".", "workspace", ",", "'package'", ")", ";", "}", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "docker", "=", "await", "this", ".", "docker", "(", "this", ".", "worker", ".", "workspace", ")", ";", "const", "exit", "=", "await", "docker", ".", "run", "(", "'pack-deb'", ",", "{", "Privileged", ":", "true", "}", ")", ";", "if", "(", "exit", "!==", "0", ")", "{", "throw", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'Unable to pack Debian package'", ")", ";", "}", "}", "async", "param", "{", "string", "}", "p", "return", "{", "Docker", "}", "protected", "async", "docker", "(", "p", ")", "{", "const", "docker", "=", "new", "Docker", "(", "this", ".", "worker", ".", "config", ",", "'pack-deb'", ")", ";", "const", "exists", "=", "await", "docker", ".", "exists", "(", ")", ";", "if", "(", "exists", "===", "false", ")", "{", "const", "folder", "=", "path", ".", "resolve", "(", "__dirname", ",", "'deb'", ")", ";", "await", "docker", ".", "create", "(", "folder", ")", ";", "}", "docker", ".", "mount", "(", "this", ".", "worker", ".", "workspace", ",", "'/tmp/houston'", ")", ";", "return", "docker", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/pack/deb.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "deb.ts"}
{"tokens": ["/**\n * houston/src/worker/task/workspace/setup.ts\n * Fills the workspace with files from git\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "get", ",", "isEqual", ",", "set", "}", "from", "'lodash'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "IWorker", "}", "from", "'../../type'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "/**\n * Everything that makes a build unique. All of these can be derived from\n * reference names in the repository.\n */", "export", "interface", "IBuildConfiguration", "{", "architecture", ":", "string", ";", "distribution", ":", "string", ";", "packageType", ":", "string", ";", "}", "var", "const", "POSSIBLE_ARCHITECTURES", "=", "[", "'amd64'", "]", ";", "const", "POSSIBLE_DISTRIBUTIONS", "=", "[", "'loki'", ",", "'juno'", ",", "'hera'", "]", ";", "const", "POSSIBLE_PACKAGE_TYPES", "=", "[", "'deb'", "]", ";", "var", "const", "DEFAULT_BUILDS", "=", "[", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'hera'", ",", "packageType", ":", "'deb'", "}", "]", ";", "export", "class", "WorkspaceSetup", "extends", "Task", "{", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "await", "this", ".", "worker", ".", "emitAsync", "(", "`task:WorkspaceSetup:start`", ")", ";", "for", "(", "const", "build", "of", "await", "this", ".", "possibleBuilds", "(", ")", ")", "{", "await", "this", ".", "setupBuild", "(", "build", ")", ";", "}", "await", "this", ".", "worker", ".", "emitAsync", "(", "`task:WorkspaceSetup:end`", ")", ";", "}", "async", "return", "{", "IBuildConfiguration", "[", "]", "}", "public", "async", "possibleBuilds", "(", ")", "{", "const", "repositoryReferences", "=", "await", "this", ".", "worker", ".", "repository", ".", "references", "(", ")", ";", "const", "referenceShorthands", "=", "repositoryReferences", ".", "map", "(", "(", "ref", ")", "=>", "ref", ".", "split", "(", "'/'", ")", ".", "reverse", "(", ")", "[", "0", "]", ")", ";", "const", "builds", "=", "[", "]", ";", "for", "(", "const", "packageType", "of", "POSSIBLE_PACKAGE_TYPES", ")", "{", "for", "(", "const", "architecture", "of", "POSSIBLE_ARCHITECTURES", ")", "{", "for", "(", "const", "distribution", "of", "POSSIBLE_DISTRIBUTIONS", ")", "{", "const", "foundExactReference", "=", "referenceShorthands", ".", "find", "(", "(", "ref", ")", "=>", "(", "ref", "===", "`${", "packageType", "}-packaging-${", "distribution", "}`", ")", ")", ";", "if", "(", "foundExactReference", "!=", "null", ")", "{", "builds", ".", "push", "(", "{", "architecture", ",", "distribution", ",", "packageType", "}", ")", ";", "}", "}", "}", "const", "foundShortReference", "=", "referenceShorthands", ".", "find", "(", "(", "ref", ")", "=>", "(", "ref", "===", "`${", "packageType", "}-packaging`", ")", ")", ";", "if", "(", "foundShortReference", "!=", "null", ")", "{", "const", "latestDistro", "=", "[", "...", "POSSIBLE_DISTRIBUTIONS", "]", ".", "reverse", "(", ")", "[", "0", "]", ";", "const", "shortBuild", "=", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "latestDistro", ",", "packageType", "}", ";", "if", "(", "builds", ".", "find", "(", "(", "b", ")", "=>", "(", "isEqual", "(", "b", ",", "shortBuild", ")", ")", ")", "==", "null", ")", "{", "builds", ".", "push", "(", "shortBuild", ")", ";", "}", "}", "}", "if", "(", "builds", ".", "length", "===", "0", ")", "{", "builds", ".", "push", "(", "...", "DEFAULT_BUILDS", ")", ";", "}", "return", "builds", ";", "}", "async", "param", "{", "IBuildConfiguration", "}", "build", "return", "{", "String", "[", "]", "}", "public", "async", "buildReferences", "(", "build", ")", "{", "const", "repositoryReferences", "=", "await", "this", ".", "worker", ".", "repository", ".", "references", "(", ")", ";", "const", "mergableReferences", "=", "[", "`${", "build", ".", "distribution", "}`", ",", "`${", "build", ".", "packageType", "}-packaging`", ",", "`${", "build", ".", "packageType", "}-packaging-${", "build", ".", "distribution", "}`", "]", ";", "this", ".", "worker", ".", "context", ".", "references", ".", "map", "(", "(", "ref", ")", "=>", "ref", ".", "split", "(", "'/'", ")", ".", "reverse", "(", ")", "[", "0", "]", ")", ".", "filter", "(", "(", "ref", ")", "=>", "(", "ref", "!=", "null", "&&", "ref", "!==", "''", ")", ")", ".", "forEach", "(", "(", "shortRef", ")", "=>", "{", "mergableReferences", ".", "push", "(", "`${", "build", ".", "packageType", "}-packaging-${", "shortRef", "}`", ")", ";", "mergableReferences", ".", "push", "(", "`${", "build", ".", "packageType", "}-packaging-${", "build", ".", "distribution", "}-${", "shortRef", "}`", ")", ";", "}", ")", ";", "return", "repositoryReferences", ".", "filter", "(", "(", "rref", ")", "=>", "mergableReferences", ".", "some", "(", "(", "ref", ")", "=>", "rref", ".", "endsWith", "(", "ref", ")", ")", ")", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "{", "const", "aIndex", "=", "mergableReferences", ".", "findIndex", "(", "(", "ref", ")", "=>", "(", "a", ".", "indexOf", "(", "ref", ")", "!==", "-", "1", ")", ")", ";", "const", "bIndex", "=", "mergableReferences", ".", "findIndex", "(", "(", "ref", ")", "=>", "(", "b", ".", "indexOf", "(", "ref", ")", "!==", "-", "1", ")", ")", ";", "return", "(", "aIndex", "-", "bIndex", ")", ";", "}", ")", ";", "}", "async", "param", "{", "IBuildConfiguration", "}", "build", "return", "{", "void", "}", "protected", "async", "setupBuild", "(", "build", ")", "{", "const", "basicFork", "=", "await", "this", ".", "worker", ".", "fork", "(", "{", "architecture", ":", "build", ".", "architecture", ",", "distribution", ":", "build", ".", "distribution", ",", "package", ":", "{", "type", ":", "build", ".", "packageType", "}", "}", ")", ";", "const", "worker", "=", "await", "this", ".", "worker", ".", "emitAsyncChain", "<", "IWorker", ">", "(", "`task:WorkspaceSetup:fork`", ",", "basicFork", ")", ";", "await", "fs", ".", "ensureDir", "(", "worker", ".", "workspace", ")", ";", "const", "references", "=", "[", "...", "worker", ".", "context", ".", "references", ",", "...", "(", "await", "this", ".", "buildReferences", "(", "build", ")", ")", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "references", ".", "length", ";", "i", "++", ")", "{", "const", "gitFolder", "=", "path", ".", "resolve", "(", "worker", ".", "workspace", ",", "'repository'", ",", "`${", "i", "}`", ")", ";", "await", "worker", ".", "repository", ".", "clone", "(", "gitFolder", ",", "references", "[", "i", "]", ")", ";", "}", "for", "(", "let", "i", "=", "0", ";", "i", "<", "references", ".", "length", ";", "i", "++", ")", "{", "const", "from", "=", "path", ".", "resolve", "(", "worker", ".", "workspace", ",", "'repository'", ",", "`${", "i", "}`", ")", ";", "const", "to", "=", "path", ".", "resolve", "(", "worker", ".", "workspace", ",", "'clean'", ")", ";", "await", "fs", ".", "copy", "(", "from", ",", "to", ",", "{", "overwrite", ":", "true", "}", ")", ";", "}", "const", "clean", "=", "path", ".", "resolve", "(", "worker", ".", "workspace", ",", "'clean'", ")", ";", "const", "dirty", "=", "path", ".", "resolve", "(", "worker", ".", "workspace", ",", "'dirty'", ")", ";", "await", "fs", ".", "ensureDir", "(", "clean", ")", ";", "await", "fs", ".", "ensureDir", "(", "dirty", ")", ";", "await", "fs", ".", "copy", "(", "clean", ",", "dirty", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, "number", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/workspace/setup.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "setup.ts"}
{"tokens": ["/**\n * houston/src/worker/preset/build.ts\n * Builds a package and edits contents for appcenter.\n */", "import", "{", "App", "}", "from", "'../../lib/app'", ";", "import", "{", "ICodeRepository", "}", "from", "'../../lib/service'", ";", "import", "*", "as", "type", "from", "'../type'", ";", "import", "{", "Worker", "}", "from", "'../worker'", ";", "import", "{", "Appstream", "}", "from", "'../task/appstream'", ";", "import", "{", "BuildDeb", "}", "from", "'../task/build/deb'", ";", "import", "{", "DebianChangelog", "}", "from", "'../task/debian/changelog'", ";", "import", "{", "DebianControl", "}", "from", "'../task/debian/control'", ";", "import", "{", "Desktop", "}", "from", "'../task/desktop'", ";", "import", "{", "ExtractDeb", "}", "from", "'../task/extract/deb'", ";", "import", "{", "FileDeb", "}", "from", "'../task/file/deb'", ";", "import", "{", "PackDeb", "}", "from", "'../task/pack/deb'", ";", "import", "{", "WorkspaceSetup", "}", "from", "'../task/workspace/setup'", ";", "function", "buildTasks", "(", "t", ")", "{", "switch", "(", "t", ")", "{", "case", "'library'", ":", "case", "'system-library'", ":", "return", "[", "WorkspaceSetup", ",", "DebianChangelog", ",", "DebianControl", ",", "BuildDeb", "]", ";", "case", "'system-app'", ":", "return", "[", "WorkspaceSetup", ",", "BuildDeb", "]", ";", "default", ":", "return", "[", "WorkspaceSetup", ",", "DebianChangelog", ",", "DebianControl", ",", "BuildDeb", ",", "ExtractDeb", ",", "FileDeb", ",", "Appstream", ",", "Desktop", ",", "PackDeb", "]", ";", "}", "}", "export", "function", "Build", "(", "app", ",", "repository", ",", "context", ")", "{", "const", "worker", "=", "new", "Worker", "(", "app", ",", "repository", ",", "context", ")", ";", "for", "(", "const", "task", "of", "buildTasks", "(", "context", ".", "type", ")", ")", "{", "worker", ".", "tasks", ".", "push", "(", "task", ")", ";", "}", "return", "worker", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "App", null, "UNK", null, "UNK", null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/preset/build.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "build.ts"}
{"tokens": ["/**\n * houston/src/worker/task/upload/log.ts\n * Uploads end error logs to third party services\n */", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Logger", "}", "from", "'../../../lib/log'", ";", "import", "{", "isLogRepository", "}", "from", "'../../../lib/service'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "ILog", "}", "from", "'../../type'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "export", "class", "UploadLog", "extends", "Task", "{", "var", "protected", "errors", ":", "{", "error", ":", "Error", ";", "service", ":", "string", ";", "}", "[", "]", "=", "[", "]", ";", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "let", "logs", "=", "this", ".", "worker", ".", "result", ".", "logs", ";", "const", "ref", "=", "this", ".", "worker", ".", "context", ".", "references", "[", "this", ".", "worker", ".", "context", ".", "references", ".", "length", "-", "1", "]", ";", "logs", "=", "await", "this", ".", "uploadToCodeRepository", "(", "logs", ",", "ref", ")", ";", "this", ".", "worker", ".", "context", ".", "logs", "=", "logs", ";", "if", "(", "this", ".", "errors", ".", "length", "!==", "0", ")", "{", "this", ".", "reportErrors", "(", ")", ";", "}", "}", "async", "param", "{", "ILog", "[", "]", "}", "logs", "param", "{", "string", "}", "ref", "return", "{", "ILog", "[", "]", "}", "protected", "async", "uploadToCodeRepository", "(", "logs", ",", "ref", ")", "{", "if", "(", "!", "isLogRepository", "(", "this", ".", "worker", ".", "repository", ")", ")", "{", "return", ";", "}", "const", "newLogs", "=", "[", "]", ";", "try", "{", "for", "(", "const", "log", "of", "logs", ")", "{", "newLogs", ".", "push", "(", "await", "this", ".", "worker", ".", "repository", ".", "uploadLog", "(", "log", ",", "'review'", ",", "ref", ")", ")", ";", "}", "}", "catch", "(", "error", ")", "{", "this", ".", "errors", ".", "push", "(", "{", "error", ",", "service", ":", "this", ".", "worker", ".", "repository", ".", "serviceName", "}", ")", ";", "}", "return", "newLogs", ";", "}", "throws", "protected", "reportErrors", "(", ")", "{", "const", "logger", "=", "this", ".", "worker", ".", "app", ".", "get", "<", "Logger", ">", "(", "Logger", ")", ";", "this", ".", "errors", ".", "map", "(", "(", "e", ")", "=>", "logger", ".", "error", "(", "'Error uploading logs'", ")", ".", "setError", "(", "e", ".", "error", ")", ")", ";", "if", "(", "this", ".", "errors", ".", "length", "!==", "0", ")", "{", "const", "logPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'log.md'", ")", ";", "throw", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "logPath", ",", "{", "services", ":", "this", ".", "errors", ".", "map", "(", "(", "e", ")", "=>", "e", ".", "service", ")", "}", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "Logger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/upload/log.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "log.ts"}
{"tokens": ["/**\n * houston/src/worker/task/upload/package.ts\n * Responsible for uploading all the end results to third party services\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Logger", "}", "from", "'../../../lib/log'", ";", "import", "{", "sanitize", "}", "from", "'../../../lib/utility/rdnn'", ";", "import", "{", "Log", "}", "from", "'../../log'", ";", "import", "{", "Task", "}", "from", "'../task'", ";", "import", "{", "IPackage", ",", "IPackageRepository", ",", "isPackageRepository", ",", "packageRepository", "}", "from", "'../../../lib/service'", ";", "export", "class", "UploadPackage", "extends", "Task", "{", "var", "protected", "errors", ":", "{", "error", ":", "Error", ";", "service", ":", "string", ";", "}", "[", "]", "=", "[", "]", ";", "async", "return", "{", "void", "}", "public", "async", "run", "(", ")", "{", "const", "packages", "=", "this", ".", "worker", ".", "result", ".", "packages", ";", "for", "(", "const", "context", "of", "this", ".", "worker", ".", "contexts", ")", "{", "if", "(", "context", ".", "package", "==", "null", "||", "context", ".", "package", ".", "path", "==", "null", ")", "{", "continue", ";", "}", "if", "(", "!", "(", "await", "fs", ".", "pathExists", "(", "context", ".", "package", ".", "path", ")", ")", ")", "{", "continue", ";", "}", "const", "ref", "=", "context", ".", "references", "[", "context", ".", "references", ".", "length", "-", "1", "]", ";", "context", ".", "package", ".", "name", "=", "`${", "context", ".", "nameHuman", "} ${", "context", ".", "version", "}`", ";", "context", ".", "package", ".", "description", "=", "[", "sanitize", "(", "context", ".", "nameDomain", ",", "'-'", ")", ",", "context", ".", "architecture", ",", "context", ".", "distribution", ",", "context", ".", "version", "]", ".", "join", "(", "' '", ")", ";", "if", "(", "context", ".", "architecture", ")", "{", "context", ".", "package", ".", "architecture", "=", "context", ".", "architecture", ";", "}", "switch", "(", "context", ".", "distribution", ")", "{", "case", "(", "null", ")", ":", "break", ";", "case", "(", "'loki'", ")", ":", "context", ".", "package", ".", "distribution", "=", "'loki'", ";", "break", ";", "case", "(", "'juno'", ")", ":", "case", "(", "'hera'", ")", ":", "context", ".", "package", ".", "distribution", "=", "'juno'", ";", "break", ";", "default", ":", "context", ".", "package", ".", "distribution", "=", "context", ".", "distribution", ";", "break", ";", "}", "context", ".", "package", "=", "await", "this", ".", "uploadToCodeRepository", "(", "context", ".", "package", ",", "ref", ")", ";", "context", ".", "package", "=", "await", "this", ".", "uploadToPackageRepositories", "(", "context", ".", "package", ",", "ref", ")", ";", "}", "if", "(", "this", ".", "errors", ".", "length", "!==", "0", ")", "{", "this", ".", "reportErrors", "(", ")", ";", "}", "}", "async", "param", "{", "IPackage", "}", "pkg", "param", "{", "string", "}", "ref", "return", "{", "IPackage", "}", "protected", "async", "uploadToCodeRepository", "(", "pkg", ",", "ref", ")", "{", "if", "(", "!", "isPackageRepository", "(", "this", ".", "worker", ".", "repository", ")", ")", "{", "return", ";", "}", "try", "{", "pkg", "=", "await", "this", ".", "worker", ".", "repository", ".", "uploadPackage", "(", "pkg", ",", "'review'", ",", "ref", ")", ";", "}", "catch", "(", "error", ")", "{", "this", ".", "errors", ".", "push", "(", "{", "error", ",", "service", ":", "this", ".", "worker", ".", "repository", ".", "serviceName", "}", ")", ";", "}", "return", "pkg", ";", "}", "async", "param", "{", "IPackage", "}", "pkg", "param", "{", "string", "}", "ref", "return", "{", "IPackage", "}", "protected", "async", "uploadToPackageRepositories", "(", "pkg", ",", "ref", ")", "{", "if", "(", "!", "this", ".", "worker", ".", "app", ".", "isBound", "(", "packageRepository", ")", ")", "{", "return", ";", "}", "const", "packageRepositories", "=", "this", ".", "worker", ".", "app", ".", "getAll", "<", "IPackageRepository", ">", "(", "packageRepository", ")", ";", "for", "(", "const", "repo", "of", "packageRepositories", ")", "{", "try", "{", "pkg", "=", "await", "repo", ".", "uploadPackage", "(", "pkg", ",", "'review'", ",", "ref", ")", ";", "}", "catch", "(", "error", ")", "{", "this", ".", "errors", ".", "push", "(", "{", "error", ",", "service", ":", "repo", ".", "serviceName", "}", ")", ";", "}", "}", "return", "pkg", ";", "}", "throws", "protected", "reportErrors", "(", ")", "{", "const", "logger", "=", "this", ".", "worker", ".", "app", ".", "get", "<", "Logger", ">", "(", "Logger", ")", ";", "this", ".", "errors", ".", "forEach", "(", "(", "e", ")", "=>", "{", "logger", ".", "error", "(", "'Error uploading package'", ")", ".", "setError", "(", "e", ".", "error", ")", ".", "send", "(", ")", ";", "}", ")", ";", "if", "(", "this", ".", "errors", ".", "length", "!==", "0", ")", "{", "const", "logPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'package.md'", ")", ";", "throw", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "logPath", ",", "{", "services", ":", "this", ".", "errors", ".", "map", "(", "(", "e", ")", "=>", "e", ".", "service", ")", "}", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "Logger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/upload/package.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "package.ts"}
{"tokens": ["/**\n * houston/src/worker/preset/release.ts\n * Releases a package to all able endpoints.\n */", "import", "{", "App", "}", "from", "'../../lib/app'", ";", "import", "{", "ICodeRepository", "}", "from", "'../../lib/service'", ";", "import", "*", "as", "type", "from", "'../type'", ";", "import", "{", "Build", "}", "from", "'./build'", ";", "import", "{", "Upload", "}", "from", "'../task/upload'", ";", "export", "function", "Release", "(", "app", ",", "repository", ",", "context", ")", "{", "const", "worker", "=", "Build", "(", "app", ",", "repository", ",", "context", ")", ";", "worker", ".", "postTasks", ".", "push", "(", "Upload", ")", ";", "return", "worker", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "App", null, "UNK", null, "UNK", null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/preset/release.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "release.ts"}
{"tokens": ["/**\n * houston/src/cli/utilities.ts\n * Some utilities for command line stuff\n */", "import", "{", "App", "}", "from", "'../lib/app'", ";", "import", "{", "Config", ",", "getConfig", "}", "from", "'../lib/config'", ";", "import", "{", "Logger", "}", "from", "'../lib/log'", ";", "param", "{", "Object", "}", "argv", "return", "{", "Object", "}", "export", "function", "setup", "(", "argv", ")", "{", "const", "config", "=", "getConfig", "(", "argv", ".", "config", ")", ";", "const", "app", "=", "new", "App", "(", "config", ")", ";", "const", "logger", "=", "app", ".", "get", "(", "Logger", ")", ";", "process", ".", "on", "(", "'unhandledRejection'", ",", "(", "reason", ")", "=>", "console", ".", "error", "(", "reason", ")", ")", ";", "return", "{", "app", ",", "config", ",", "logger", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, "App", null, null, null, null, null, null, null, null, "Logger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/utilities.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "utilities.ts"}
{"tokens": ["/**\n * houston/src/cli/commands/build.ts\n * Builds a project with the worker\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "isEqual", "from", "'lodash/isEqual'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "semver", "from", "'semver'", ";", "import", "{", "Config", "}", "from", "'../../lib/config'", ";", "import", "{", "levelIndex", "}", "from", "'../../lib/log/level'", ";", "import", "{", "codeRepositoryFactory", ",", "ICodeRepositoryFactory", "}", "from", "'../../lib/service'", ";", "import", "{", "sanitize", "}", "from", "'../../lib/utility/rdnn'", ";", "import", "{", "Build", "}", "from", "'../../worker/preset/build'", ";", "import", "{", "IContext", "}", "from", "'../../worker/type'", ";", "import", "{", "Worker", "}", "from", "'../../worker/worker'", ";", "import", "{", "setup", "}", "from", "'../utilities'", ";", "export", "const", "command", "=", "'build <repo> <version>'", ";", "export", "const", "describe", "=", "'Builds a repository with the worker process'", ";", "export", "const", "builder", "=", "(", "yargs", ")", "=>", "{", "return", "yargs", ".", "positional", "(", "'repo'", ",", "{", "describe", ":", "'Full repository URL'", ",", "type", ":", "'string'", "}", ")", ".", "positional", "(", "'version'", ",", "{", "coerce", ":", "semver", ".", "valid", ",", "default", ":", "'0.0.1'", ",", "describe", ":", "'Semver version to build for'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'type'", ",", "{", "choices", ":", "[", "'app'", ",", "'system-app'", ",", "'library'", "]", ",", "default", ":", "'app'", ",", "describe", ":", "'The type of project'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'name-developer'", ",", "{", "describe", ":", "'Developer\\'s name'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'name-domain'", ",", "{", "alias", ":", "'n'", ",", "coerce", ":", "sanitize", ",", "describe", ":", "'Reverse Domain Name Notation'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'name-human'", ",", "{", "describe", ":", "'Human readable name'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'references'", ",", "{", "describe", ":", "'References to pull'", ",", "type", ":", "'array'", "}", ")", ";", "}", ";", "param", "{", "object", "}", "argv", "param", "{", "Repository", "}", "repository", "return", "{", "IContext", "}", "function", "buildContext", "(", "argv", ",", "repository", ")", "{", "const", "nameDomain", "=", "argv", "[", "'name-domain'", "]", "||", "repository", ".", "rdnn", ";", "const", "nameDeveloper", "=", "argv", "[", "'name-developer'", "]", "||", "'Rabbitbot'", ";", "const", "nameHuman", "=", "argv", "[", "'name-human'", "]", "||", "'Application'", ";", "const", "references", "=", "argv", ".", "references", "||", "[", "`refs/tags/${", "argv", ".", "version", "}`", "]", ";", "const", "obj", "=", "{", "appcenter", ":", "{", "}", ",", "appstream", ":", "''", ",", "architecture", ":", "''", ",", "changelog", ":", "[", "]", ",", "distribution", ":", "''", ",", "logs", ":", "[", "]", ",", "nameDeveloper", ",", "nameDomain", ",", "nameHuman", ",", "references", ",", "type", ":", "argv", ".", "type", ",", "version", ":", "argv", ".", "version", "}", ";", "return", "obj", ";", "}", "function", "logSpacer", "(", ")", "{", "console", ".", "log", "(", "''", ")", ";", "console", ".", "log", "(", "'='", ".", "repeat", "(", "80", ")", ")", ";", "console", ".", "log", "(", "''", ")", ";", "}", "param", "{", "Log", "[", "]", "}", "logs", "return", "{", "void", "}", "function", "logLogs", "(", "logs", ")", "{", "for", "(", "const", "log", "of", "logs", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "(", "b", ".", "level", "-", "a", ".", "level", ")", ")", ")", "{", "logSpacer", "(", ")", ";", "console", ".", "log", "(", "log", ".", "toString", "(", ")", ")", ";", "}", "}", "param", "{", "Object", "}", "argv", "param", "{", "Worker", "}", "worker", "return", "{", "void", "}", "function", "logResult", "(", "argv", ",", "worker", ")", "{", "if", "(", "worker", ".", "fails", ")", "{", "console", ".", "error", "(", "`Error while running build for ${", "argv", ".", "repo", "} for ${", "argv", ".", "version", "}`", ")", ";", "logLogs", "(", "worker", ".", "result", ".", "logs", ")", ";", "logSpacer", "(", ")", ";", "}", "else", "{", "console", ".", "log", "(", "`Built ${", "argv", ".", "repo", "} for version ${", "argv", ".", "version", "}`", ")", ";", "const", "builds", "=", "worker", ".", "contexts", ".", "map", "(", "(", "{", "architecture", ",", "distribution", "}", ")", "=>", "(", "{", "architecture", ",", "distribution", "}", ")", ")", ".", "filter", "(", "(", "{", "architecture", "}", ")", "=>", "(", "architecture", "!==", "''", ")", ")", ".", "filter", "(", "(", "{", "distribution", "}", ")", "=>", "(", "distribution", "!==", "''", ")", ")", ".", "filter", "(", "(", "b", ",", "i", ",", "a", ")", "=>", "(", "a", ".", "findIndex", "(", "(", "mb", ")", "=>", "isEqual", "(", "b", ",", "mb", ")", ")", "===", "i", ")", ")", ";", "for", "(", "const", "build", "of", "builds", ")", "{", "console", ".", "log", "(", "`Built ${", "build", ".", "architecture", "} ${", "build", ".", "distribution", "}`", ")", ";", "}", "logLogs", "(", "worker", ".", "result", ".", "logs", ")", ";", "logSpacer", "(", ")", ";", "}", "}", "export", "async", "function", "handler", "(", "argv", ")", "{", "const", "{", "app", "}", "=", "setup", "(", "argv", ")", ";", "const", "repoFactory", "=", "app", ".", "get", "<", "ICodeRepositoryFactory", ">", "(", "codeRepositoryFactory", ")", ";", "const", "repository", "=", "await", "repoFactory", "(", "argv", ".", "repo", ")", ";", "const", "context", "=", "buildContext", "(", "argv", ",", "repository", ")", ";", "const", "worker", "=", "Build", "(", "app", ",", "repository", ",", "context", ")", ";", "console", ".", "log", "(", "`Running build for ${", "argv", ".", "repo", "} version ${", "argv", ".", "version", "}`", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "for", "(", "const", "pkg", "of", "worker", ".", "result", ".", "packages", ")", "{", "if", "(", "pkg", ".", "path", "!=", "null", "&&", "await", "fs", ".", "exists", "(", "pkg", ".", "path", ")", ")", "{", "const", "fileName", "=", "path", ".", "resolve", "(", "process", ".", "cwd", "(", ")", ",", "path", ".", "basename", "(", "pkg", ".", "path", ")", ")", ";", "await", "fs", ".", "copy", "(", "pkg", ".", "path", ",", "fileName", ",", "{", "overwrite", ":", "true", "}", ")", ";", "}", "}", "logResult", "(", "argv", ",", "worker", ")", ";", "if", "(", "worker", ".", "fails", ")", "{", "process", ".", "exit", "(", "1", ")", ";", "}", "else", "{", "process", ".", "exit", "(", "0", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IPackage", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/commands/build.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "build.ts"}
{"tokens": ["/**\n * houston/src/cli/commands/ci.ts\n * Tests a project with the worker. Used when a code base is local.\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "isEqual", "from", "'lodash/isEqual'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "semver", "from", "'semver'", ";", "import", "{", "Config", "}", "from", "'../../lib/config'", ";", "import", "{", "levelIndex", "}", "from", "'../../lib/log/level'", ";", "import", "{", "codeRepositoryFactory", ",", "ICodeRepositoryFactory", "}", "from", "'../../lib/service'", ";", "import", "{", "sanitize", "}", "from", "'../../lib/utility/rdnn'", ";", "import", "{", "Build", "}", "from", "'../../worker/preset/build'", ";", "import", "{", "IContext", "}", "from", "'../../worker/type'", ";", "import", "{", "Worker", "}", "from", "'../../worker/worker'", ";", "import", "{", "setup", "}", "from", "'../utilities'", ";", "export", "const", "command", "=", "'ci [directory]'", ";", "export", "const", "describe", "=", "'Tests a local project with the worker process'", ";", "const", "SLUG", "=", "process", ".", "env", ".", "TRAVIS_REPO_SLUG", ";", "const", "REPO", "=", "`https://github.com/${", "SLUG", "}`", ";", "const", "BRANCH", "=", "process", ".", "env", ".", "TRAVIS_BRANCH", ";", "export", "const", "builder", "=", "(", "yargs", ")", "=>", "{", "return", "yargs", ".", "positional", "(", "'directory'", ",", "{", "coerce", ":", "(", "v", ")", "=>", "path", ".", "resolve", "(", "process", ".", "cwd", "(", ")", ",", "v", ")", ",", "default", ":", "'.'", ",", "describe", ":", "'The project directory to build'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'type'", ",", "{", "choices", ":", "[", "'app'", ",", "'system-app'", ",", "'library'", "]", ",", "default", ":", "'app'", ",", "describe", ":", "'The type of project'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'repo'", ",", "{", "...", "(", "SLUG", "!=", "null", ")", "?", "{", "default", ":", "REPO", "}", ":", "{", "}", ",", "demandOption", ":", "true", ",", "describe", ":", "'Full repository URL'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'version'", ",", "{", "coerce", ":", "semver", ".", "valid", ",", "default", ":", "'0.0.1'", ",", "describe", ":", "'Semver version to build for'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'name-developer'", ",", "{", "describe", ":", "'Developer\\'s name'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'name-domain'", ",", "{", "alias", ":", "'n'", ",", "coerce", ":", "sanitize", ",", "describe", ":", "'Reverse Domain Name Notation'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'name-human'", ",", "{", "describe", ":", "'Human readable name'", ",", "type", ":", "'string'", "}", ")", ".", "option", "(", "'references'", ",", "{", "default", ":", "[", "]", ",", "describe", ":", "'References to pull'", ",", "type", ":", "'array'", "}", ")", ";", "}", ";", "param", "{", "object", "}", "argv", "param", "{", "Repository", "}", "repository", "return", "{", "object", "}", "function", "buildStorage", "(", "argv", ",", "repository", ")", "{", "const", "nameDomain", "=", "argv", "[", "'name-domain'", "]", "||", "repository", ".", "rdnn", ";", "const", "nameDeveloper", "=", "argv", "[", "'name-developer'", "]", "||", "'Rabbitbot'", ";", "const", "nameHuman", "=", "argv", "[", "'name-human'", "]", "||", "'Application'", ";", "const", "obj", "=", "{", "appcenter", ":", "{", "}", ",", "appstream", ":", "''", ",", "architecture", ":", "''", ",", "changelog", ":", "[", "]", ",", "distribution", ":", "''", ",", "logs", ":", "[", "]", ",", "nameDeveloper", ",", "nameDomain", ",", "nameHuman", ",", "references", ":", "argv", ".", "references", ",", "type", ":", "argv", ".", "type", ",", "version", ":", "argv", ".", "version", "}", ";", "return", "obj", ";", "}", "function", "logSpacer", "(", ")", "{", "console", ".", "log", "(", "''", ")", ";", "console", ".", "log", "(", "'='", ".", "repeat", "(", "80", ")", ")", ";", "console", ".", "log", "(", "''", ")", ";", "}", "param", "{", "Log", "[", "]", "}", "logs", "return", "{", "void", "}", "function", "logLogs", "(", "logs", ")", "{", "for", "(", "const", "log", "of", "logs", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "(", "b", ".", "level", "-", "a", ".", "level", ")", ")", ")", "{", "logSpacer", "(", ")", ";", "console", ".", "log", "(", "log", ".", "toString", "(", ")", ")", ";", "}", "}", "param", "{", "Object", "}", "argv", "param", "{", "Worker", "}", "worker", "return", "{", "void", "}", "function", "logResult", "(", "argv", ",", "worker", ")", "{", "if", "(", "worker", ".", "fails", ")", "{", "console", ".", "error", "(", "`Error while running build for ${", "argv", ".", "repo", "} for ${", "argv", ".", "version", "}`", ")", ";", "logLogs", "(", "worker", ".", "result", ".", "logs", ")", ";", "logSpacer", "(", ")", ";", "}", "else", "{", "console", ".", "log", "(", "`Built ${", "argv", ".", "repo", "} for version ${", "argv", ".", "version", "}`", ")", ";", "const", "builds", "=", "worker", ".", "contexts", ".", "map", "(", "(", "{", "architecture", ",", "distribution", "}", ")", "=>", "(", "{", "architecture", ",", "distribution", "}", ")", ")", ".", "filter", "(", "(", "{", "architecture", "}", ")", "=>", "(", "architecture", "!==", "''", ")", ")", ".", "filter", "(", "(", "{", "distribution", "}", ")", "=>", "(", "distribution", "!==", "''", ")", ")", ".", "filter", "(", "(", "b", ",", "i", ",", "a", ")", "=>", "(", "a", ".", "findIndex", "(", "(", "mb", ")", "=>", "isEqual", "(", "b", ",", "mb", ")", ")", "===", "i", ")", ")", ";", "for", "(", "const", "build", "of", "builds", ")", "{", "console", ".", "log", "(", "`Built ${", "build", ".", "architecture", "} ${", "build", ".", "distribution", "}`", ")", ";", "}", "logLogs", "(", "worker", ".", "result", ".", "logs", ")", ";", "logSpacer", "(", ")", ";", "}", "}", "export", "async", "function", "handler", "(", "argv", ")", "{", "console", ".", "warn", "(", "'THIS COMMAND IS NOT FULLY COMPLETE'", ")", ";", "console", ".", "warn", "(", "'IT ONLY WORKS ON GITHUB WITH TRAVIS AT THIS TIME'", ")", ";", "const", "{", "app", "}", "=", "setup", "(", "argv", ")", ";", "const", "repoFactory", "=", "app", ".", "get", "<", "ICodeRepositoryFactory", ">", "(", "codeRepositoryFactory", ")", ";", "const", "repository", "=", "await", "repoFactory", "(", "argv", ".", "repo", ")", ";", "const", "context", "=", "buildStorage", "(", "argv", ",", "repository", ")", ";", "const", "worker", "=", "Build", "(", "app", ",", "repository", ",", "context", ")", ";", "const", "projectDir", "=", "path", ".", "resolve", "(", "process", ".", "cwd", "(", ")", ",", "argv", ".", "directory", ")", ";", "console", ".", "log", "(", "`Testing \"${", "projectDir", "}\" project for \"${", "argv", ".", "repo", "}\"`", ")", ";", "worker", ".", "on", "(", "'task:WorkspaceSetup:fork'", ",", "async", "(", "w", ")", "=>", "{", "await", "fs", ".", "copy", "(", "projectDir", ",", "path", ".", "resolve", "(", "w", ".", "workspace", ",", "'clean'", ")", ",", "{", "overwrite", ":", "true", "}", ")", ";", "await", "fs", ".", "copy", "(", "projectDir", ",", "path", ".", "resolve", "(", "w", ".", "workspace", ",", "'dirty'", ")", ",", "{", "overwrite", ":", "true", "}", ")", ";", "return", "w", ";", "}", ")", ";", "const", "interval", "=", "setInterval", "(", "(", ")", "=>", "process", ".", "stdout", ".", "write", "(", "'.'", ")", ",", "10000", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "clearInterval", "(", "interval", ")", ";", "console", ".", "log", "(", "'.'", ")", ";", "logResult", "(", "argv", ",", "worker", ")", ";", "if", "(", "worker", ".", "fails", ")", "{", "process", ".", "exit", "(", "1", ")", ";", "}", "else", "{", "process", ".", "exit", "(", "0", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Timeout", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/commands/ci.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "ci.ts"}
{"tokens": ["exports", "import", "{", "inject", ",", "injectable", "}", "from", "'inversify'", ";", "import", "*", "as", "Knex", "from", "'knex'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Config", "}", "from", "'../config'", ";", "import", "{", "Log", "}", "from", "'../log'", ";", "property", "@", "injectable", "(", ")", "export", "class", "Database", "{", "public", "knex", ":", "Knex", ";", "protected", "config", ":", "Config", ";", "protected", "log", ":", "Log", ";", "param", "{", "Config", "}", "config", "param", "{", "Log", "}", "log", "constructor", "(", "@", "inject", "(", "Config", ")", "config", ",", "@", "inject", "(", "Log", ")", "log", ")", "{", "const", "migrationPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'migration'", ")", ";", "const", "seedPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'seed'", ")", ";", "const", "databaseConfig", "=", "Object", ".", "assign", "(", "{", "}", ",", "config", ".", "get", "(", "'database'", ")", ",", "{", "migrations", ":", "{", "directory", ":", "migrationPath", ",", "tableName", ":", "'migrations'", "}", ",", "seeds", ":", "{", "directory", ":", "seedPath", "}", ",", "useNullAsDefault", ":", "false", "}", ")", ";", "this", ".", "config", "=", "config", ";", "this", ".", "log", "=", "log", ";", "this", ".", "knex", "=", "Knex", "(", "databaseConfig", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, "Log", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/database.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "database.ts"}
{"tokens": ["/**\n * houston/src/cli/commands/migrate.ts\n * Runs database migration scripts\n */", "import", "{", "Database", "}", "from", "'../../lib/database'", ";", "import", "{", "setup", "}", "from", "'../utilities'", ";", "export", "const", "command", "=", "'migrate'", ";", "export", "const", "describe", "=", "'Changes database tables based on houston schemas'", ";", "export", "const", "builder", "=", "(", "yargs", ")", "=>", "{", "return", "yargs", ".", "option", "(", "'direction'", ",", "{", "describe", ":", "'The direction to migrate'", ",", "type", ":", "'string'", ",", "default", ":", "'up'", "}", ")", ";", "}", ";", "export", "async", "function", "handler", "(", "argv", ")", "{", "const", "{", "app", ",", "config", "}", "=", "setup", "(", "argv", ")", ";", "const", "database", "=", "app", ".", "get", "<", "Database", ">", "(", "Database", ")", ";", "if", "(", "argv", ".", "direction", "===", "'up'", ")", "{", "const", "version", "=", "config", ".", "get", "(", "'houston.version'", ",", "'latest'", ")", ";", "console", ".", "log", "(", "`Updating database tables to ${", "version", "} version`", ")", ";", "}", "else", "if", "(", "argv", ".", "direction", "===", "'down'", ")", "{", "console", ".", "log", "(", "`Downgrading database tables 1 version`", ")", ";", "}", "else", "{", "console", ".", "error", "(", "`Incorrect non-option arguments: got ${", "argv", ".", "direction", "}, need at be up or down`", ")", ";", "process", ".", "exit", "(", "1", ")", ";", "}", "try", "{", "if", "(", "argv", ".", "direction", "===", "'up'", ")", "{", "await", "database", ".", "knex", ".", "migrate", ".", "latest", "(", ")", ";", "}", "else", "if", "(", "argv", ".", "direction", "===", "'down'", ")", "{", "await", "database", ".", "knex", ".", "migrate", ".", "rollback", "(", ")", ";", "}", "}", "catch", "(", "e", ")", "{", "console", ".", "error", "(", "'Error updating database tables'", ")", ";", "console", ".", "error", "(", "e", ".", "message", ")", ";", "process", ".", "exit", "(", "1", ")", ";", "}", "console", ".", "log", "(", "'Updated database tables'", ")", ";", "process", ".", "exit", "(", "0", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Database", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/commands/migrate.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "migrate.ts"}
{"tokens": ["exports", "import", "*", "as", "dgram", "from", "'dgram'", ";", "import", "{", "inject", ",", "injectable", "}", "from", "'inversify'", ";", "import", "{", "Config", "}", "from", "'../lib/config'", ";", "import", "{", "Database", "}", "from", "'../lib/database/database'", ";", "import", "{", "Logger", "}", "from", "'../lib/log'", ";", "property", "property", "@", "injectable", "(", ")", "export", "class", "Repo", "{", "public", "server", ":", "dgram", ".", "Socket", ";", "public", "port", ":", "number", ";", "protected", "config", ":", "Config", ";", "protected", "database", ":", "Database", ";", "protected", "logger", ":", "Logger", ";", "param", "{", "Config", "}", "config", "param", "{", "Database", "}", "database", "param", "{", "Logger", "}", "logger", "constructor", "(", "@", "inject", "(", "Config", ")", "config", ",", "@", "inject", "(", "Database", ")", "database", ",", "@", "inject", "(", "Logger", ")", "logger", ")", "{", "this", ".", "config", "=", "config", ";", "this", ".", "database", "=", "database", ";", "this", ".", "logger", "=", "logger", ";", "}", "param", "{", "Error", "}", "err", "return", "{", "void", "}", "public", "onError", "(", "err", ")", "{", "this", ".", "logger", ".", "error", "(", "'Internal server error'", ")", ".", "setError", "(", "err", ")", ".", "send", "(", ")", ";", "}", "async", "param", "{", "Buffer", "}", "buf", "return", "{", "void", "}", "public", "async", "onMessage", "(", "buf", ")", "{", "const", "message", "=", "buf", ".", "toString", "(", "'utf8'", ")", ".", "split", "(", "': '", ")", "[", "1", "]", ";", "if", "(", "message", "==", "null", "||", "message", "===", "''", ")", "{", "return", ";", "}", "const", "[", ",", "status", "]", "=", "message", ".", "split", "(", "'|'", ")", ";", "if", "(", "Number", "(", "status", ")", ">=", "400", ")", "{", "return", ";", "}", "}", "async", "param", "{", "number", "}", "port", "throws", "return", "{", "Server", "}", "public", "async", "listen", "(", "port", "=", "0", ")", "{", "const", "env", "=", "this", ".", "config", ".", "get", "(", "'environment'", ")", ";", "this", ".", "server", "=", "dgram", ".", "createSocket", "(", "'udp4'", ")", ";", "this", ".", "server", ".", "on", "(", "'error'", ",", "(", "err", ")", "=>", "this", ".", "onError", "(", "err", ")", ")", ";", "this", ".", "server", ".", "on", "(", "'message'", ",", "(", "msg", ")", "=>", "this", ".", "onMessage", "(", "msg", ")", ")", ";", "try", "{", "await", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "server", ".", "bind", "(", "{", "port", "}", ",", "(", "err", ")", "=>", "{", "if", "(", "err", ")", "{", "return", "reject", "(", "err", ")", ";", "}", "return", "resolve", "(", ")", ";", "}", ")", ";", "}", ")", ";", "}", "catch", "(", "err", ")", "{", "this", ".", "logger", ".", "error", "(", "`Server unable to listen on port ${", "port", "} with ${", "env", "} configuration`", ")", ".", "setError", "(", "err", ")", ".", "send", "(", ")", ";", "throw", "err", ";", "}", "const", "address", "=", "this", ".", "server", ".", "address", "(", ")", ";", "if", "(", "typeof", "address", "!==", "'string'", ")", "{", "this", ".", "port", "=", "address", ".", "port", ";", "}", "this", ".", "logger", ".", "info", "(", "`Server listening on port ${", "this", ".", "port", "} with ${", "env", "} configuration`", ")", ".", "send", "(", ")", ";", "return", "this", ";", "}", "async", "throws", "return", "{", "Server", "}", "public", "async", "close", "(", ")", "{", "if", "(", "this", ".", "server", "!=", "null", ")", "{", "await", "new", "Promise", "(", "(", "resolve", ")", "=>", "{", "this", ".", "server", ".", "close", "(", "(", ")", "=>", "resolve", "(", ")", ")", ";", "}", ")", ";", "this", ".", "port", "=", "0", ";", "}", "return", "this", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, "Database", null, null, null, null, null, null, "Logger", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Buffer", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Buffer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/repo/repo.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "repo.ts"}
{"tokens": ["/**\n * houston/src/cli/commands/repo.ts\n * Runs the repository syslogd server\n */", "import", "{", "Repo", "as", "Server", "}", "from", "'../../repo/repo'", ";", "import", "{", "setup", "}", "from", "'../utilities'", ";", "export", "const", "command", "=", "'repo'", ";", "export", "const", "describe", "=", "'Starts the repository syslogd server'", ";", "export", "const", "builder", "=", "(", "yargs", ")", "=>", "{", "return", "yargs", ".", "option", "(", "'port'", ",", "{", "alias", ":", "'p'", ",", "describe", ":", "'The port to run the server on'", ",", "type", ":", "'number'", ",", "default", ":", "0", "}", ")", ";", "}", ";", "export", "async", "function", "handler", "(", "argv", ")", "{", "const", "{", "app", "}", "=", "setup", "(", "argv", ")", ";", "const", "server", "=", "app", ".", "get", "<", "Server", ">", "(", "Server", ")", ";", "await", "server", ".", "listen", "(", "argv", ".", "port", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Repo", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/commands/repo.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "repo.ts"}
{"tokens": ["/**\n * houston/src/cli/commands/seed.ts\n * Runs database seed scripts\n */", "import", "{", "Database", "}", "from", "'../../lib/database/database'", ";", "import", "{", "setup", "}", "from", "'../utilities'", ";", "export", "const", "command", "=", "'seed'", ";", "export", "const", "describe", "=", "'Seeds the database tables with fake data'", ";", "export", "async", "function", "handler", "(", "argv", ")", "{", "const", "{", "app", "}", "=", "setup", "(", "argv", ")", ";", "const", "database", "=", "app", ".", "get", "<", "Database", ">", "(", "Database", ")", ";", "console", ".", "log", "(", "`Seeding database tables`", ")", ";", "try", "{", "await", "database", ".", "knex", ".", "seed", ".", "run", "(", ")", ";", "}", "catch", "(", "e", ")", "{", "console", ".", "error", "(", "'Error seeding database tables'", ")", ";", "console", ".", "error", "(", "e", ".", "message", ")", ";", "process", ".", "exit", "(", "1", ")", ";", "}", "console", ".", "log", "(", "'Seeded database tables'", ")", ";", "process", ".", "exit", "(", "0", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Database", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/commands/seed.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "seed.ts"}
{"tokens": ["/**\n * houston/src/cli/commands/seed.ts\n * Runs database seed scripts\n */", "import", "{", "Database", "}", "from", "'../../lib/database/database'", ";", "import", "{", "setup", "}", "from", "'../utilities'", ";", "export", "const", "command", "=", "'version'", ";", "export", "const", "describe", "=", "'Displays Houston version information'", ";", "export", "async", "function", "handler", "(", "argv", ")", "{", "const", "{", "config", "}", "=", "setup", "(", "argv", ")", ";", "console", ".", "log", "(", "`Release: ${", "config", ".", "get", "(", "'houston.version'", ")", "}`", ")", ";", "if", "(", "config", ".", "has", "(", "'houston.commit'", ")", ")", "{", "console", ".", "log", "(", "`Commit: ${", "config", ".", "get", "(", "'houston.commit'", ")", "}`", ")", ";", "}", "else", "{", "console", ".", "log", "(", "'Commit: Unknown'", ")", ";", "}", "process", ".", "exit", "(", "0", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/cli/commands/version.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "version.ts"}
{"tokens": ["/**\n * houston/src/lib/cache/provider.ts\n * Registers a basic cache factory.\n * TODO: Build this out a bit more with redis support\n */", "import", "{", "ContainerModule", ",", "interfaces", "}", "from", "'inversify'", ";", "import", "*", "as", "Cache", "from", "'lru-cache'", ";", "import", "*", "as", "type", "from", "'./type'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "const", "instances", "=", "{", "}", ";", "bind", "<", "interfaces", ".", "Factory", "<", "type", ".", "ICacheFactory", ">", ">", "(", "type", ".", "Cache", ")", ".", "toFactory", "(", "(", "context", ")", "=>", "(", "namespace", ",", "options", "=", "{", "}", ")", "=>", "{", "if", "(", "instances", "[", "namespace", "]", ")", "{", "return", "instances", "[", "namespace", "]", ";", "}", "else", "{", "instances", "[", "namespace", "]", "=", "new", "Cache", "(", "{", "maxAge", ":", "(", "options", ".", "maxAge", "||", "3600", ")", "}", ")", ";", "return", "instances", "[", "namespace", "]", ";", "}", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Context", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/cache/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["/**\n * houston/src/lib/database/provider.ts\n * Provides the app with the needed Log classes\n */", "import", "{", "ContainerModule", "}", "from", "'inversify'", ";", "import", "{", "Database", "}", "from", "'./database'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "bind", "<", "Database", ">", "(", "Database", ")", ".", "toSelf", "(", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'github_releases'", ",", "(", "table", ")", "=>", "{", "table", ".", "uuid", "(", "'id'", ")", ".", "primary", "(", ")", ";", "table", ".", "integer", "(", "'key'", ")", ".", "notNullable", "(", ")", ".", "unique", "(", ")", ";", "table", ".", "string", "(", "'tag'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "uuid", "(", "'github_repository'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "foreign", "(", "'github_repository'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'github_repositories'", ")", ";", "table", ".", "timestamp", "(", "'created_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'updated_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'deleted_at'", ")", ".", "nullable", "(", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'github_releases'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-002-github_releases.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-002-github_releases.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'github_users'", ",", "(", "table", ")", "=>", "{", "table", ".", "uuid", "(", "'id'", ")", ".", "primary", "(", ")", ";", "table", ".", "integer", "(", "'key'", ")", ".", "notNullable", "(", ")", ".", "unique", "(", ")", ";", "table", ".", "string", "(", "'login'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "string", "(", "'name'", ")", ".", "nullable", "(", ")", ";", "table", ".", "string", "(", "'email'", ")", ".", "nullable", "(", ")", ";", "table", ".", "string", "(", "'company'", ")", ".", "nullable", "(", ")", ";", "table", ".", "string", "(", "'avatar'", ")", ".", "nullable", "(", ")", ";", "table", ".", "string", "(", "'access_key'", ")", ".", "nullable", "(", ")", ";", "table", ".", "string", "(", "'scopes'", ")", ".", "nullable", "(", ")", ";", "table", ".", "uuid", "(", "'user_id'", ")", ".", "nullable", "(", ")", ";", "table", ".", "foreign", "(", "'user_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'users'", ")", ";", "table", ".", "timestamp", "(", "'created_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'updated_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'deleted_at'", ")", ".", "nullable", "(", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'github_users'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-004-github_users.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-004-github_users.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'github_repositories_github_users'", ",", "(", "table", ")", "=>", "{", "table", ".", "increments", "(", ")", ";", "table", ".", "uuid", "(", "'github_repository_id'", ")", ".", "nullable", "(", ")", ";", "table", ".", "foreign", "(", "'github_repository_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'github_repositories'", ")", ";", "table", ".", "uuid", "(", "'github_user_id'", ")", ".", "nullable", "(", ")", ";", "table", ".", "foreign", "(", "'github_user_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'github_users'", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'github_repositories_github_users'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-005-github_repositories_github_users.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-005-github_repositories_github_users.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'projects'", ",", "(", "table", ")", "=>", "{", "table", ".", "uuid", "(", "'id'", ")", ".", "primary", "(", ")", ";", "table", ".", "string", "(", "'name_domain'", ")", ".", "unique", "(", ")", ".", "index", "(", ")", ";", "table", ".", "string", "(", "'name_human'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "string", "(", "'name_developer'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "enu", "(", "'type'", ",", "[", "'application'", "]", ")", ".", "defaultTo", "(", "'application'", ")", ";", "table", ".", "uuid", "(", "'projectable_id'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "string", "(", "'projectable_type'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "uuid", "(", "'stripe_id'", ")", ".", "nullable", "(", ")", ";", "table", ".", "foreign", "(", "'stripe_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'stripe_accounts'", ")", ";", "table", ".", "timestamp", "(", "'created_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'updated_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'deleted_at'", ")", ".", "nullable", "(", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'projects'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-007-projects.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-007-projects.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'releases'", ",", "(", "table", ")", "=>", "{", "table", ".", "uuid", "(", "'id'", ")", ".", "primary", "(", ")", ";", "table", ".", "string", "(", "'version'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "integer", "(", "'version_major'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "integer", "(", "'version_minor'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "integer", "(", "'version_patch'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "integer", "(", "'version_build'", ")", ".", "nullable", "(", ")", ";", "table", ".", "boolean", "(", "'is_prerelease'", ")", ".", "defaultTo", "(", "false", ")", ";", "table", ".", "uuid", "(", "'releaseable_id'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "string", "(", "'releaseable_type'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "uuid", "(", "'project_id'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "foreign", "(", "'project_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'projects'", ")", ";", "table", ".", "timestamp", "(", "'created_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'updated_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'deleted_at'", ")", ".", "nullable", "(", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'releases'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-008-releases.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-008-releases.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'builds'", ",", "(", "table", ")", "=>", "{", "table", ".", "uuid", "(", "'id'", ")", ".", "primary", "(", ")", ";", "table", ".", "enum", "(", "'status'", ",", "[", "'queue'", ",", "'build'", ",", "'test'", ",", "'review'", ",", "'publish'", ",", "'fail'", ",", "'error'", "]", ")", ".", "nullable", "(", ")", ";", "table", ".", "json", "(", "'appcenter'", ")", ".", "nullable", "(", ")", ";", "table", ".", "json", "(", "'appstream'", ")", ".", "nullable", "(", ")", ";", "table", ".", "uuid", "(", "'release_id'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "foreign", "(", "'release_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'releases'", ")", ";", "table", ".", "timestamp", "(", "'created_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'updated_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'deleted_at'", ")", ".", "nullable", "(", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'builds'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-009-builds.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-009-builds.ts"}
{"tokens": ["exports", "exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "up", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "createTable", "(", "'build_logs'", ",", "(", "table", ")", "=>", "{", "table", ".", "uuid", "(", "'id'", ")", ".", "primary", "(", ")", ";", "table", ".", "string", "(", "'title'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "string", "(", "'body'", ")", ".", "notNullable", "(", ")", ";", "table", ".", "string", "(", "'test'", ")", ".", "nullable", "(", ")", ";", "table", ".", "json", "(", "'metadata'", ")", ".", "nullable", "(", ")", ";", "table", ".", "uuid", "(", "'build_id'", ")", ".", "nullable", "(", ")", ";", "table", ".", "foreign", "(", "'build_id'", ")", ".", "references", "(", "'id'", ")", ".", "inTable", "(", "'builds'", ")", ";", "table", ".", "timestamp", "(", "'created_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'updated_at'", ")", ".", "notNullable", "(", ")", ".", "defaultTo", "(", "knex", ".", "fn", ".", "now", "(", ")", ")", ";", "table", ".", "timestamp", "(", "'deleted_at'", ")", ".", "nullable", "(", ")", ";", "}", ")", ";", "}", "param", "{", "Object", "}", "knex", "return", "{", "Promise", "}", "export", "function", "down", "(", "knex", ")", "{", "return", "knex", ".", "schema", ".", "dropTable", "(", "'build_logs'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, "CreateTableBuilder", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SchemaBuilder", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/migration/2.0.0-010-build_logs.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "2.0.0-010-build_logs.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'github_repositories'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'github_repositories'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'b272a75e-5263-4133-b2e1-c8894b29493c'", ",", "is_private", ":", "false", ",", "key", ":", "891357", ",", "name", ":", "'keymaker'", ",", "owner", ":", "'btkostner'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_repositories'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "is_private", ":", "false", ",", "key", ":", "8234623", ",", "name", ":", "'appcenter'", ",", "owner", ":", "'elementary'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_repositories'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'b353ee74-596a-4ec8-8b1c-11589bb8eb36'", ",", "is_private", ":", "false", ",", "key", ":", "48913751", ",", "name", ":", "'code'", ",", "owner", ":", "'elementary'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_repositories'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'274b1d3e-85bd-4ee4-88d9-5ec18f4e87c4'", ",", "is_private", ":", "false", ",", "key", ":", "49876157", ",", "name", ":", "'terminal'", ",", "owner", ":", "'elementary'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/001-github_repositories.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "001-github_repositories.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'github_releases'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'b272a75e-5263-4133-b2e1-c8894b29493c'", ",", "id", ":", "'fed7651d-be81-4035-98bd-efa08e95a948'", ",", "key", ":", "946542", ",", "tag", ":", "'0.0.1'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'b272a75e-5263-4133-b2e1-c8894b29493c'", ",", "id", ":", "'b1a4e61c-d10b-4bcd-b18a-f7469bfd4df1'", ",", "key", ":", "102154", ",", "tag", ":", "'0.0.2'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'b272a75e-5263-4133-b2e1-c8894b29493c'", ",", "id", ":", "'01645e34-1f00-4416-9734-030ea5dd9b48'", ",", "key", ":", "121548", ",", "tag", ":", "'0.0.3'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'2f9b8637-de48-4c84-a2dc-2149f4bc8c89'", ",", "key", ":", "324815", ",", "tag", ":", "'0.0.1'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'65294735-5f37-414f-ba38-8e91fa3bfb3d'", ",", "key", ":", "354861", ",", "tag", ":", "'0.0.2'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'b8a76b76-a559-4d48-893c-8781a4f9d043'", ",", "key", ":", "356124", ",", "tag", ":", "'0.3'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'9c521021-ff54-4b5b-a51c-ddc86906afe8'", ",", "key", ":", "384576", ",", "tag", ":", "'0.4.0'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'97f6303e-ea3b-4bf9-b3cc-025ed3476be2'", ",", "key", ":", "458942", ",", "tag", ":", "'0.4.5'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'f21db1fe-938a-47c9-81dd-3049d671f80a'", ",", "key", ":", "481245", ",", "tag", ":", "'0.5'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'34683670-b589-49d2-923d-857e753bc76e'", ",", "key", ":", "532486", ",", "tag", ":", "'0.55'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "id", ":", "'e364398a-8604-4601-8ab8-079816624653'", ",", "key", ":", "541867", ",", "tag", ":", "'1.0.0'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'b353ee74-596a-4ec8-8b1c-11589bb8eb36'", ",", "id", ":", "'ad09512f-91a3-451e-8b9c-462f4a42df88'", ",", "key", ":", "451874", ",", "tag", ":", "'0.1'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'274b1d3e-85bd-4ee4-88d9-5ec18f4e87c4'", ",", "id", ":", "'0876e8a5-6f23-4c3e-a061-5eb3c8da5d33'", ",", "key", ":", "381275", ",", "tag", ":", "'1.0.0'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'github_releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "github_repository", ":", "'274b1d3e-85bd-4ee4-88d9-5ec18f4e87c4'", ",", "id", ":", "'99b0b6ac-bdce-4ad6-aea0-7e471719d616'", ",", "key", ":", "687512", ",", "tag", ":", "'2.0.0'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/002-github_releases.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "002-github_releases.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'users'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'users'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", ")", ",", "deleted_at", ":", "null", ",", "email", ":", "'blake@elementary.io'", ",", "id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", ",", "name", ":", "'Blake Kostner'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/003-users.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "003-users.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'github_users'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'github_users'", ")", ".", "insert", "(", "{", "access_key", ":", "'u9r0nuq083ru880589rnyq29nyvaw4etbaw34vtr'", ",", "company", ":", "'elementary'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "email", ":", "'blake@elementary.io'", ",", "id", ":", "'da527f7e-b865-46e1-a47e-99542d838298'", ",", "key", ":", "6423154", ",", "login", ":", "'btkostner'", ",", "name", ":", "'Blake Kostner'", ",", "scopes", ":", "'public_repo,repo'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "user_id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/004-github_users.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "004-github_users.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'github_repositories_github_users'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'github_repositories_github_users'", ")", ".", "insert", "(", "{", "github_repository_id", ":", "'b272a75e-5263-4133-b2e1-c8894b29493c'", ",", "github_user_id", ":", "'da527f7e-b865-46e1-a47e-99542d838298'", "}", ")", ";", "await", "knex", "(", "'github_repositories_github_users'", ")", ".", "insert", "(", "{", "github_repository_id", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "github_user_id", ":", "'da527f7e-b865-46e1-a47e-99542d838298'", "}", ")", ";", "await", "knex", "(", "'github_repositories_github_users'", ")", ".", "insert", "(", "{", "github_repository_id", ":", "'b353ee74-596a-4ec8-8b1c-11589bb8eb36'", ",", "github_user_id", ":", "'da527f7e-b865-46e1-a47e-99542d838298'", "}", ")", ";", "await", "knex", "(", "'github_repositories_github_users'", ")", ".", "insert", "(", "{", "github_repository_id", ":", "'274b1d3e-85bd-4ee4-88d9-5ec18f4e87c4'", ",", "github_user_id", ":", "'da527f7e-b865-46e1-a47e-99542d838298'", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/005-github_repositories_github_users.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "005-github_repositories_github_users.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'stripe_accounts'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'stripe_accounts'", ")", ".", "insert", "(", "{", "color", ":", "'FFA500'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'326599e7-97ed-455a-9c38-122651a12be6'", ",", "key", ":", "4235823", ",", "name", ":", "'btkostner'", ",", "public_key", ":", "'pk_test_uj0fjv0a9u9302fawfa2rasd'", ",", "secret_key", ":", "'sk_test_j89j2098vah803cnb83v298r'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "url", ":", "'https://btkostner.io'", ",", "user_id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/006-stripe_accounts.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "006-stripe_accounts.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'projects'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'projects'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "1", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", ",", "name_developer", ":", "'Blake Kostner'", ",", "name_domain", ":", "'com.github.btkostner.keymaker'", ",", "name_human", ":", "'Keymaker'", ",", "projectable_id", ":", "'b272a75e-5263-4133-b2e1-c8894b29493c'", ",", "projectable_type", ":", "'github'", ",", "stripe_id", ":", "'326599e7-97ed-455a-9c38-122651a12be6'", ",", "type", ":", "'application'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'projects'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "2", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'75fa37dc-888d-4905-97bd-73cc9e39be2a'", ",", "name_developer", ":", "'elementary LLC'", ",", "name_domain", ":", "'com.github.elementary.appcenter'", ",", "name_human", ":", "'AppCenter'", ",", "projectable_id", ":", "'14f2dc0d-9648-498e-b06e-a8479e0a7b26'", ",", "projectable_type", ":", "'github'", ",", "stripe_id", ":", "null", ",", "type", ":", "'application'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'projects'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "3", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'0086b0d2-be43-45fc-8619-989104705c8a'", ",", "name_developer", ":", "'elementary LLC'", ",", "name_domain", ":", "'com.github.elementary.code'", ",", "name_human", ":", "'Code'", ",", "projectable_id", ":", "'b353ee74-596a-4ec8-8b1c-11589bb8eb36'", ",", "projectable_type", ":", "'github'", ",", "stripe_id", ":", "null", ",", "type", ":", "'application'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'projects'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "4", ")", ",", "deleted_at", ":", "null", ",", "id", ":", "'4a9e027d-c27e-483a-a0fc-b2724a19491b'", ",", "name_developer", ":", "'elementary LLC'", ",", "name_domain", ":", "'com.github.elementary.terminal'", ",", "name_human", ":", "'Terminal'", ",", "projectable_id", ":", "'274b1d3e-85bd-4ee4-88d9-5ec18f4e87c4'", ",", "projectable_type", ":", "'github'", ",", "stripe_id", ":", "null", ",", "type", ":", "'application'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/007-projects.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "007-projects.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'releases'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "1", ")", ",", "id", ":", "'6fea3714-60cb-45f8-b56e-760745cfd95c'", ",", "project_id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", ",", "releaseable_id", ":", "'fed7651d-be81-4035-98bd-efa08e95a948'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.1'", ",", "version_major", ":", "0", ",", "version_minor", ":", "0", ",", "version_patch", ":", "1", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "4", ")", ",", "id", ":", "'acc81084-5759-493a-b9d7-969edc69d913'", ",", "project_id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", ",", "releaseable_id", ":", "'b1a4e61c-d10b-4bcd-b18a-f7469bfd4df1'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.2'", ",", "version_major", ":", "0", ",", "version_minor", ":", "0", ",", "version_patch", ":", "2", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "8", ")", ",", "id", ":", "'6f3b3345-1b6d-457a-b6ca-5b5a067c4d6c'", ",", "project_id", ":", "'24ef2115-67e7-4ea9-8e18-ae6c44b63a71'", ",", "releaseable_id", ":", "'01645e34-1f00-4416-9734-030ea5dd9b48'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.3'", ",", "version_major", ":", "0", ",", "version_minor", ":", "0", ",", "version_patch", ":", "3", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "2", ")", ",", "id", ":", "'3d49def5-779a-4e2b-9e8e-2ededdbd9bbe'", ",", "project_id", ":", "'75fa37dc-888d-4905-97bd-73cc9e39be2a'", ",", "releaseable_id", ":", "'2f9b8637-de48-4c84-a2dc-2149f4bc8c89'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.1'", ",", "version_major", ":", "0", ",", "version_minor", ":", "0", ",", "version_patch", ":", "1", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "3", ")", ",", "id", ":", "'762b072f-2c15-4413-9ab8-8e878a9e47ed'", ",", "project_id", ":", "'75fa37dc-888d-4905-97bd-73cc9e39be2a'", ",", "releaseable_id", ":", "'65294735-5f37-414f-ba38-8e91fa3bfb3d'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.2'", ",", "version_major", ":", "0", ",", "version_minor", ":", "0", ",", "version_patch", ":", "2", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "9", ")", ",", "id", ":", "'393c3985-f743-4daf-b868-73ce6458f4e0'", ",", "project_id", ":", "'75fa37dc-888d-4905-97bd-73cc9e39be2a'", ",", "releaseable_id", ":", "'9c521021-ff54-4b5b-a51c-ddc86906afe8'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.4.0'", ",", "version_major", ":", "0", ",", "version_minor", ":", "4", ",", "version_patch", ":", "0", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "5", ")", ",", "id", ":", "'9e889f37-370f-4929-a12d-50faa53bb225'", ",", "project_id", ":", "'75fa37dc-888d-4905-97bd-73cc9e39be2a'", ",", "releaseable_id", ":", "'97f6303e-ea3b-4bf9-b3cc-025ed3476be2'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.4.5'", ",", "version_major", ":", "0", ",", "version_minor", ":", "4", ",", "version_patch", ":", "5", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "10", ")", ",", "id", ":", "'79988df7-60c8-4356-acef-745b8108dfa4'", ",", "project_id", ":", "'75fa37dc-888d-4905-97bd-73cc9e39be2a'", ",", "releaseable_id", ":", "'e364398a-8604-4601-8ab8-079816624653'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'1.0.0'", ",", "version_major", ":", "1", ",", "version_minor", ":", "0", ",", "version_patch", ":", "0", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "6", ")", ",", "id", ":", "'1dc97f10-9de5-4c99-808a-0364939d6a96'", ",", "project_id", ":", "'4a9e027d-c27e-483a-a0fc-b2724a19491b'", ",", "releaseable_id", ":", "'0876e8a5-6f23-4c3e-a061-5eb3c8da5d33'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'1.0.0'", ",", "version_major", ":", "1", ",", "version_minor", ":", "0", ",", "version_patch", ":", "0", "}", ")", ";", "await", "knex", "(", "'releases'", ")", ".", "insert", "(", "{", "created_at", ":", "new", "Date", "(", "7", ")", ",", "id", ":", "'877b86e8-9b96-4bf7-8243-fe1905cdd00f'", ",", "project_id", ":", "'4a9e027d-c27e-483a-a0fc-b2724a19491b'", ",", "releaseable_id", ":", "'99b0b6ac-bdce-4ad6-aea0-7e471719d616'", ",", "releaseable_type", ":", "'github'", ",", "updated_at", ":", "new", "Date", "(", ")", ",", "version", ":", "'2.0.0'", ",", "version_major", ":", "2", ",", "version_minor", ":", "0", ",", "version_patch", ":", "0", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/008-releases.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "008-releases.ts"}
{"tokens": ["exports", "import", "*", "as", "Knex", "from", "'knex'", ";", "param", "{", "Object", "}", "knex", "export", "async", "function", "seed", "(", "knex", ")", "{", "await", "knex", "(", "'builds'", ")", ".", "del", "(", ")", ";", "await", "knex", "(", "'builds'", ")", ".", "insert", "(", "{", "appcenter", ":", "'{}'", ",", "appstream", ":", "'{}'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'dd792007-489f-4742-9f22-bf3eea9c1794'", ",", "release_id", ":", "'6f3b3345-1b6d-457a-b6ca-5b5a067c4d6c'", ",", "status", ":", "'publish'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'builds'", ")", ".", "insert", "(", "{", "appcenter", ":", "'{}'", ",", "appstream", ":", "'{}'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'c575d74a-1402-41ed-85a3-de4ebc5f557c'", ",", "release_id", ":", "'3d49def5-779a-4e2b-9e8e-2ededdbd9bbe'", ",", "status", ":", "'fail'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'builds'", ")", ".", "insert", "(", "{", "appcenter", ":", "'{}'", ",", "appstream", ":", "'{}'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'67dc9947-0519-4471-8951-a89426c63963'", ",", "release_id", ":", "'393c3985-f743-4daf-b868-73ce6458f4e0'", ",", "status", ":", "'error'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'builds'", ")", ".", "insert", "(", "{", "appcenter", ":", "'{}'", ",", "appstream", ":", "'{}'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'d63120d9-405e-48e2-91d1-9986730c7ff0'", ",", "release_id", ":", "'79988df7-60c8-4356-acef-745b8108dfa4'", ",", "status", ":", "'publish'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'builds'", ")", ".", "insert", "(", "{", "appcenter", ":", "'{}'", ",", "appstream", ":", "'{}'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'3dc34b70-521c-46fd-990f-3f4c9ad17e4b'", ",", "release_id", ":", "'1dc97f10-9de5-4c99-808a-0364939d6a96'", ",", "status", ":", "'publish'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "await", "knex", "(", "'builds'", ")", ".", "insert", "(", "{", "appcenter", ":", "'{}'", ",", "appstream", ":", "'{}'", ",", "created_at", ":", "new", "Date", "(", ")", ",", "id", ":", "'fb2ab4e9-1596-40fd-8453-92bd4cc7965c'", ",", "release_id", ":", "'877b86e8-9b96-4bf7-8243-fe1905cdd00f'", ",", "status", ":", "'review'", ",", "updated_at", ":", "new", "Date", "(", ")", "}", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Knex", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/database/seed/009-builds.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "009-builds.ts"}
{"tokens": ["/**\n * houston/src/lib/log/provider.ts\n * Provides the app with the needed Log classes\n */", "import", "{", "ContainerModule", "}", "from", "'inversify'", ";", "import", "{", "Log", "}", "from", "'./log'", ";", "import", "{", "Logger", "}", "from", "'./logger'", ";", "import", "{", "Output", "}", "from", "'./output'", ";", "import", "{", "Console", "}", "from", "'./outputs/console'", ";", "import", "{", "Sentry", "}", "from", "'./outputs/sentry'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "bind", "<", "Output", ">", "(", "Output", ")", ".", "toConstructor", "(", "Console", ")", ";", "bind", "<", "Output", ">", "(", "Output", ")", ".", "toConstructor", "(", "Sentry", ")", ";", "bind", "<", "Log", ">", "(", "Log", ")", ".", "toConstructor", "(", "Log", ")", ";", "bind", "<", "Logger", ">", "(", "Logger", ")", ".", "toSelf", "(", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/log/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["/**\n * houston/src/lib/queue/type.ts\n * Some typescript types for a queue system.\n */", "import", "{", "EventEmitter", "}", "from", "'events'", ";", "export", "type", "Status", "=", "'waiting'", "|", "'active'", "|", "'completed'", "|", "'failed'", "|", "'delayed'", ";", "export", "type", "HandleCallback", "=", "(", "job", ":", "IJob", ")", "=>", "Promise", "<", "object", ">", ";", "export", "type", "OnActiveCallback", "=", "(", "job", ":", "IJob", ")", "=>", "void", ";", "export", "type", "OnProgressCallback", "=", "(", "job", ":", "IJob", ",", "amount", ":", "number", ")", "=>", "void", ";", "export", "type", "OnFailedCallback", "=", "(", "job", ":", "IJob", ",", "error", ":", "Error", ")", "=>", "void", ";", "export", "type", "OnCompletedCallback", "=", "(", "job", ":", "IJob", ",", "result", ":", "object", ")", "=>", "void", ";", "export", "type", "IQueueConstructor", "=", "(", "name", ":", "string", ")", "=>", "IQueue", ";", "export", "interface", "IQueue", "{", "send", "(", "data", ",", "opts", "?", ")", ":", "Promise", "<", "IJob", ">", ";", "handle", "(", "fn", ")", ";", "pause", "(", "local", ")", ":", "Promise", "<", "void", ">", ";", "resume", "(", "local", ")", ":", "Promise", "<", "void", ">", ";", "empty", "(", ")", ":", "Promise", "<", "void", ">", ";", "close", "(", ")", ":", "Promise", "<", "void", ">", ";", "count", "(", "state", "?", ")", ":", "Promise", "<", "number", ">", ";", "jobs", "(", "state", ")", ":", "Promise", "<", "IJob", "[", "]", ">", ";", "onActive", "(", "fn", ")", ";", "onProgress", "(", "fn", ")", ";", "onFailed", "(", "fn", ")", ";", "onCompleted", "(", "fn", ")", ";", "}", "export", "interface", "IJobOptions", "{", "priority", "?", ":", "number", ";", "delay", "?", ":", "number", ";", "attempts", "?", ":", "number", ";", "timeout", "?", ":", "number", ";", "}", "export", "interface", "IJob", "{", "status", "(", ")", ":", "Promise", "<", "Status", ">", ";", "progress", "(", "amount", ")", ";", "remove", "(", ")", ":", "Promise", "<", "void", ">", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "UNK", null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Status", null, null, null, null, null, null, null, null, null, null, "Status", null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, "UNK", null, null, null, null, "UNK", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/queue/type.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "type.ts"}
{"tokens": ["/**\n * houston/src/lib/queue/providers/redis/job.ts\n * Wraps `bull` package in types for use in our queue system.\n */", "import", "*", "as", "BaseBull", "from", "'bull'", ";", "import", "{", "EventEmitter", "}", "from", "'events'", ";", "import", "*", "as", "type", "from", "'../../type'", ";", "export", "class", "Job", "extends", "EventEmitter", "implements", "type", ".", "IJob", "{", "var", "protected", "bull", ":", "BaseBull", ".", "Job", ";", "param", "{", "String", "}", "name", "constructor", "(", "job", ")", "{", "super", "(", ")", ";", "this", ".", "bull", "=", "job", ";", "}", "public", "async", "status", "(", ")", "{", "const", "state", "=", "await", "this", ".", "bull", ".", "getState", "(", ")", ";", "switch", "(", "state", ")", "{", "case", "(", "'waiting'", ")", ":", "return", "'waiting'", ";", "case", "(", "'active'", ")", ":", "return", "'active'", ";", "case", "(", "'completed'", ")", ":", "return", "'completed'", ";", "case", "(", "'failed'", ")", ":", "return", "'failed'", ";", "case", "(", "'delayed'", ")", ":", "return", "'delayed'", ";", "default", ":", "return", "'failed'", ";", "}", "}", "public", "async", "progress", "(", "amount", ")", "{", "return", "this", ".", "bull", ".", "progress", "(", "amount", ")", ";", "}", "public", "async", "remove", "(", ")", "{", "return", "this", ".", "bull", ".", "remove", "(", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/queue/providers/redis/job.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "job.ts"}
{"tokens": ["/**\n * houston/src/lib/queue/providers/redis/queue.ts\n * Wraps `bull` package in types for use in our queue system.\n */", "import", "*", "as", "BaseBull", "from", "'bull'", ";", "import", "{", "inject", ",", "injectable", "}", "from", "'inversify'", ";", "import", "{", "Config", "}", "from", "'../../../config'", ";", "import", "*", "as", "type", "from", "'../../type'", ";", "import", "{", "Job", "}", "from", "'./job'", ";", "@", "injectable", "(", ")", "export", "class", "Queue", "implements", "type", ".", "IQueue", "{", "var", "protected", "bull", ":", "BaseBull", ".", "Queue", ";", "param", "{", "String", "}", "name", "constructor", "(", "@", "inject", "(", "Config", ")", "config", ",", "name", ")", "{", "const", "connection", "=", "config", ".", "get", "(", "'queue.connection'", ")", ";", "if", "(", "typeof", "config", "===", "'object'", ")", "{", "this", ".", "bull", "=", "new", "BaseBull", "(", "name", ",", "{", "redis", ":", "connection", "}", ")", ";", "}", "else", "{", "this", ".", "bull", "=", "new", "BaseBull", "(", "name", ",", "config", ")", ";", "}", "}", "public", "async", "send", "(", "data", ",", "opts", ")", "{", "const", "job", "=", "await", "this", ".", "bull", ".", "add", "(", "data", ",", "opts", ")", ";", "return", "new", "Job", "(", "job", ")", ";", "}", "public", "async", "handle", "(", "fn", ")", "{", "return", "this", ".", "bull", ".", "process", "(", "fn", ")", ";", "}", "public", "async", "pause", "(", "local", ")", "{", "return", "this", ".", "bull", ".", "pause", "(", "local", ")", ";", "}", "public", "async", "resume", "(", "local", ")", "{", "return", "this", ".", "bull", ".", "resume", "(", "local", ")", ";", "}", "public", "async", "empty", "(", ")", "{", "return", "this", ".", "bull", ".", "empty", "(", ")", ";", "}", "public", "async", "close", "(", ")", "{", "return", "this", ".", "bull", ".", "close", "(", ")", ";", "}", "public", "async", "count", "(", "state", "=", "null", ")", "{", "switch", "(", "state", ")", "{", "case", "(", "null", ")", ":", "return", "this", ".", "bull", ".", "count", "(", ")", ";", "case", "(", "'waiting'", ")", ":", "return", "this", ".", "bull", ".", "getWaitingCount", "(", ")", ";", "case", "(", "'active'", ")", ":", "return", "this", ".", "bull", ".", "getActiveCount", "(", ")", ";", "case", "(", "'completed'", ")", ":", "return", "this", ".", "bull", ".", "getCompletedCount", "(", ")", ";", "case", "(", "'failed'", ")", ":", "return", "this", ".", "bull", ".", "getFailedCount", "(", ")", ";", "case", "(", "'delayed'", ")", ":", "return", "this", ".", "bull", ".", "getDelayedCount", "(", ")", ";", "default", ":", "return", "0", ";", "}", "}", "public", "async", "jobs", "(", "state", ")", "{", "const", "bullJobs", "=", "await", "this", ".", "bullJobs", "(", "state", ")", ";", "return", "bullJobs", ".", "map", "(", "(", "j", ")", "=>", "new", "Job", "(", "j", ")", ")", ";", "}", "public", "onActive", "(", "fn", ")", "{", "this", ".", "bull", ".", "on", "(", "'active'", ",", "fn", ")", ";", "}", "public", "onProgress", "(", "fn", ")", "{", "this", ".", "bull", ".", "on", "(", "'progress'", ",", "fn", ")", ";", "}", "public", "onFailed", "(", "fn", ")", "{", "this", ".", "bull", ".", "on", "(", "'failed'", ",", "fn", ")", ";", "}", "public", "onCompleted", "(", "fn", ")", "{", "this", ".", "bull", ".", "on", "(", "'completed'", ",", "fn", ")", ";", "}", "protected", "async", "bullJobs", "(", "state", ")", "{", "switch", "(", "state", ")", "{", "case", "(", "'waiting'", ")", ":", "return", "this", ".", "bull", ".", "getWaiting", "(", ")", ";", "case", "(", "'active'", ")", ":", "return", "this", ".", "bull", ".", "getActive", "(", ")", ";", "case", "(", "'completed'", ")", ":", "return", "this", ".", "bull", ".", "getCompleted", "(", ")", ";", "case", "(", "'failed'", ")", ":", "return", "this", ".", "bull", ".", "getFailed", "(", ")", ";", "case", "(", "'delayed'", ")", ":", "return", "this", ".", "bull", ".", "getDelayed", "(", ")", ";", "default", ":", "return", "[", "]", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, "Job", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Job", null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/queue/providers/redis/queue.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "queue.ts"}
{"tokens": ["/**\n * houston/src/lib/queue/provider.ts\n * Sets up the needed providers for the Queue system\n */", "import", "{", "ContainerModule", ",", "interfaces", "}", "from", "'inversify'", ";", "import", "{", "Config", "}", "from", "'../config'", ";", "import", "{", "Queue", ",", "workerQueue", "}", "from", "'./index'", ";", "import", "{", "Queue", "as", "RedisQueue", "}", "from", "'./providers/redis'", ";", "import", "{", "IQueue", ",", "IQueueConstructor", "}", "from", "'./type'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "bind", "<", "IQueueConstructor", ">", "(", "Queue", ")", ".", "toFactory", "<", "IQueue", ">", "(", "(", "context", ")", "=>", "{", "return", "function", "QueueFactory", "(", "name", ")", "{", "const", "config", "=", "context", ".", "container", ".", "get", "<", "Config", ">", "(", "Config", ")", ";", "if", "(", "config", ".", "get", "(", "'queue.client'", ")", "===", "'redis'", ")", "{", "try", "{", "require", ".", "resolve", "(", "'bull'", ")", ";", "}", "catch", "(", "e", ")", "{", "throw", "new", "Error", "(", "'Package \"bull\" is not installed. Please install it.'", ")", ";", "}", "return", "new", "RedisQueue", "(", "config", ",", "name", ")", ";", "}", "if", "(", "config", ".", "has", "(", "'queue.client'", ")", "===", "false", ")", "{", "throw", "new", "Error", "(", "'No queue client configured'", ")", ";", "}", "else", "{", "throw", "new", "Error", "(", "`Unknown queue client of \"${", "config", ".", "get", "(", "'queue.client'", ")", "}\" configured`", ")", ";", "}", "}", ";", "}", ")", ";", "bind", "<", "IQueue", ">", "(", "workerQueue", ")", ".", "toDynamicValue", "(", "(", "context", ")", "=>", "{", "const", "queueConstructor", "=", "context", ".", "container", ".", "get", "<", "IQueueConstructor", ">", "(", "Queue", ")", ";", "return", "queueConstructor", "(", "'WorkerQueue'", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "interfaces.Context", null, null, null, null, null, null, null, "string", null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "interfaces.Context", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/queue/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["/**\n * houston/src/lib/service/provider.ts\n * Registers all the fun third party services that require the IoC container\n */", "import", "{", "ContainerModule", ",", "interfaces", "}", "from", "'inversify'", ";", "import", "{", "codeRepository", ",", "codeRepositoryFactory", ",", "logRepository", ",", "packageRepository", "}", "from", "'./index'", ";", "import", "{", "Aptly", "}", "from", "'./aptly'", ";", "import", "{", "GitHub", ",", "github", ",", "IGitHubFactory", "}", "from", "'./github'", ";", "import", "*", "as", "type", "from", "'./type'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "bind", "<", "interfaces", ".", "Factory", "<", "GitHub", ">", ">", "(", "github", ")", ".", "toFactory", "(", "(", "context", ")", "=>", "(", "url", ")", "=>", "{", "const", "instance", "=", "context", ".", "container", ".", "resolve", "(", "GitHub", ")", ";", "instance", ".", "url", "=", "url", ";", "return", "instance", ";", "}", ")", ";", "bind", "(", "codeRepositoryFactory", ")", ".", "toProvider", "(", "(", "context", ")", "=>", "(", "url", ")", "=>", "{", "return", "new", "Promise", "<", "type", ".", "ICodeRepository", ">", "(", "(", "resolve", ")", "=>", "{", "return", "resolve", "(", "context", ".", "container", ".", "get", "<", "IGitHubFactory", ">", "(", "github", ")", "(", "url", ")", ")", ";", "}", ")", ";", "}", ")", ";", "bind", "<", "Aptly", ">", "(", "Aptly", ")", ".", "toSelf", "(", ")", ";", "bind", "<", "Aptly", ">", "(", "packageRepository", ")", ".", "to", "(", "Aptly", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Context", null, null, null, null, null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Context", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/lib/service/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["/**\n * houston/src/repo/provider.ts\n * Provides the app with the needed Repo server classes\n */", "import", "{", "ContainerModule", "}", "from", "'inversify'", ";", "import", "{", "Repo", "}", "from", "'./repo'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "bind", "<", "Repo", ">", "(", "Repo", ")", ".", "toSelf", "(", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/repo/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["/**\n * houston/src/worker/provider.ts\n * Provides the app with the main worker classes\n */", "import", "{", "ContainerModule", "}", "from", "'inversify'", ";", "import", "{", "Worker", "}", "from", "'./index'", ";", "export", "const", "provider", "=", "new", "ContainerModule", "(", "(", "bind", ")", "=>", "{", "bind", "<", "Worker", ">", "(", "Worker", ")", ".", "toConstructor", "(", "Worker", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ContainerModule", null, null, null, null, null, "Bind", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["exports", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "param", "{", "string", "}", "file", "return", "{", "string", "}", "export", "function", "fixture", "(", "file", "=", "''", ")", "{", "return", "path", ".", "resolve", "(", "__dirname", ",", "'../fixture'", ",", "file", ")", ";", "}", "async", "param", "{", "string", "}", "dir", "return", "{", "string", "}", "export", "async", "function", "tmp", "(", "dir", "=", "''", ")", "{", "const", "directory", "=", "path", ".", "resolve", "(", "os", ".", "tmpdir", "(", ")", ",", "'houston-test'", ",", "dir", ",", "uuid", "(", ")", ")", ";", "await", "fs", ".", "ensureDir", "(", "directory", ")", ";", "return", "directory", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/fs.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "fs.ts"}
{"tokens": ["/**\n * houston/test/utililty/worker/context.ts\n * Helpful functions to test the worker process context\n */", "import", "{", "defaultsDeep", "}", "from", "'lodash'", ";", "import", "{", "IContext", "}", "from", "'../../../src/worker/type'", ";", "param", "{", "Object", "}", "override", "return", "{", "IContext", "}", "export", "function", "context", "(", "override", "=", "{", "}", ")", "{", "const", "def", "=", "{", "appcenter", ":", "{", "}", ",", "appstream", ":", "''", ",", "architecture", ":", "'amd64'", ",", "changelog", ":", "[", "]", ",", "distribution", ":", "'loki'", ",", "logs", ":", "[", "]", ",", "nameDeveloper", ":", "'elementary'", ",", "nameDomain", ":", "'io.elementary.houston'", ",", "nameHuman", ":", "'Houston'", ",", "references", ":", "[", "'refs/heads/master'", "]", ",", "type", ":", "'app'", ",", "version", ":", "'0.0.1'", "}", ";", "return", "defaultsDeep", "(", "{", "}", ",", "override", ",", "def", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, "IContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/worker/context.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "context.ts"}
{"tokens": ["exports", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Config", "}", "from", "'../../src/lib/config'", ";", "import", "{", "getFileConfig", "}", "from", "'../../src/lib/config/loader'", ";", "async", "return", "{", "Config", "}", "export", "async", "function", "setup", "(", ")", "{", "const", "configPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'../fixture/config.js'", ")", ";", "return", "getFileConfig", "(", "configPath", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/config.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "config.ts"}
{"tokens": ["/**\n * houston/test/utility/app.ts\n * Utility for setting up a new app for testing.\n */", "import", "{", "App", "}", "from", "'../../src/app'", ";", "import", "{", "setup", "as", "setupConfig", "}", "from", "'./config'", ";", "return", "{", "App", "}", "export", "async", "function", "create", "(", ")", "{", "const", "config", "=", "await", "setupConfig", "(", ")", ";", "return", "new", "App", "(", "config", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/app.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "app.ts"}
{"tokens": ["/**\n * houston/test/utility/worker/repository.ts\n * A third party repository that implements all of our needed interfaces.\n * Used for testing without any side effects.\n */", "import", "*", "as", "type", "from", "'../../../src/lib/service/type'", ";", "import", "{", "sanitize", "}", "from", "'../../../src/lib/utility/rdnn'", ";", "export", "class", "Repository", "implements", "type", ".", "ICodeRepository", ",", "type", ".", "IPackageRepository", ",", "type", ".", "ILogRepository", "{", "public", "url", ":", "string", ";", "public", "serviceName", "=", "'mock Repository'", ";", "constructor", "(", "url", ")", "{", "this", ".", "url", "=", "url", ";", "}", "public", "get", "rdnn", "(", ")", "{", "const", "[", "host", ",", "...", "paths", "]", "=", "this", ".", "url", ".", "split", "(", "'://'", ")", "[", "1", "]", ".", "split", "(", "'/'", ")", ";", "const", "h", "=", "host", ".", "split", "(", "'.'", ")", ".", "reverse", "(", ")", ".", "join", "(", "'.'", ")", ";", "const", "p", "=", "paths", ".", "join", "(", "'.'", ")", ";", "return", "sanitize", "(", "`${", "h", "}${", "p", "}`", ")", ";", "}", "public", "async", "clone", "(", "p", ",", "reference", ")", "{", "throw", "new", "Error", "(", "'Unimplimented in mock repository'", ")", ";", "}", "public", "async", "references", "(", ")", "{", "return", "[", "'refs/origin/master'", "]", ";", "}", "public", "async", "uploadPackage", "(", "pkg", ",", "stage", ",", "reference", "?", ")", "{", "throw", "new", "Error", "(", "'Unimplimented in mock repository'", ")", ";", "}", "public", "async", "uploadLog", "(", "log", ",", "stage", ",", "reference", "?", ")", "{", "throw", "new", "Error", "(", "'Unimplimented in mock repository'", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/worker/repository.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "repository.ts"}
{"tokens": ["/**\n * houston/test/utililty/worker/worker.ts\n * Helpful functions to test the worker process\n */", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid'", ";", "import", "{", "Worker", "}", "from", "'../../../src/worker/worker'", ";", "export", "class", "TestWorker", "extends", "Worker", "{", "param", "{", "Config", "}", "config", "param", "{", "Repository", "}", "repository", "param", "{", "IContext", "}", "context", "constructor", "(", "config", ",", "repository", ",", "storage", ")", "{", "super", "(", "config", ",", "repository", ",", "storage", ")", ";", "this", ".", "workspace", "=", "path", ".", "resolve", "(", "os", ".", "tmpdir", "(", ")", ",", "'houston-test/worker'", ",", "uuid", "(", ")", ")", ";", "}", "param", "{", "string", "}", "p", "return", "{", "string", "}", "public", "get", "(", "p", ")", "{", "return", "path", ".", "resolve", "(", "this", ".", "workspace", ",", "p", ")", ";", "}", "async", "param", "{", "String", "}", "from", "param", "{", "String", "}", "to", "return", "{", "void", "}", "public", "async", "mock", "(", "from", ",", "to", ")", "{", "const", "fullFrom", "=", "path", ".", "resolve", "(", "__dirname", ",", "'../../fixture/worker'", ",", "from", ")", ";", "return", "fs", ".", "copy", "(", "fullFrom", ",", "this", ".", "get", "(", "to", ")", ",", "{", "overwrite", ":", "true", "}", ")", ";", "}", "async", "param", "{", "string", "}", "p", "return", "{", "string", "}", "public", "async", "readFile", "(", "p", ")", "{", "return", "fs", ".", "readFile", "(", "this", ".", "get", "(", "p", ")", ",", "'utf8'", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/worker/worker.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "worker.ts"}
{"tokens": ["/**\n * houston/test/utililty/worker.ts\n * Helpful functions to test the worker process\n */", "import", "{", "create", "}", "from", "'../app'", ";", "import", "{", "context", "}", "from", "'./context'", ";", "import", "{", "Repository", "}", "from", "'./repository'", ";", "import", "{", "TestWorker", "}", "from", "'./worker'", ";", "export", "async", "function", "mock", "(", "values", "=", "{", "}", ")", "{", "const", "app", "=", "await", "create", "(", ")", ";", "const", "store", "=", "context", "(", "values", ")", ";", "const", "repo", "=", "new", "Repository", "(", "'testrepo'", ")", ";", "return", "new", "TestWorker", "(", "app", ",", "repo", ",", "store", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "object", null, null, null, null, null, null, "App", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Repository", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/worker/mock.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "mock.ts"}
{"tokens": ["/**\n * houston/src/worker/task/upload/log.spec.ts\n * Tests uploading logs to third party services\n */", "import", "*", "as", "sinon", "from", "'sinon'", ";", "import", "{", "packageRepository", "}", "from", "'../../../lib/service'", ";", "import", "{", "UploadLog", "}", "from", "'./log'", ";", "import", "{", "fixture", "}", "from", "'../../../../test/utility/fs'", ";", "import", "{", "mock", "}", "from", "'../../../../test/utility/worker'", ";", "test", "(", "'uploads logs to codeRepository if also logRepository'", ",", "async", "(", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "distribution", ":", "'loki'", ",", "logs", ":", "[", "{", "title", ":", "'test'", ",", "body", ":", "'testy test test'", "}", "]", ",", "nameDomain", ":", "'com.github.elementary.houston'", ",", "package", ":", "{", "type", ":", "'deb'", "}", ",", "references", ":", "[", "'refs/heads/loki'", "]", "}", ")", ";", "worker", ".", "repository", ".", "uploadLog", "=", "sinon", ".", "fake", ".", "resolves", "(", ")", ";", "const", "setup", "=", "new", "UploadLog", "(", "worker", ")", ";", "await", "setup", ".", "run", "(", ")", ";", "expect", "(", "worker", ".", "repository", ".", "uploadLog", ".", "callCount", ")", ".", "not", ".", "toBe", "(", "0", ")", ";", "}", ",", "300000", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/upload/log.spec.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "log.spec.ts"}
{"tokens": ["/**\n * houston/src/worker/task/upload/package.spec.ts\n * Tests uploading package assets\n */", "import", "*", "as", "sinon", "from", "'sinon'", ";", "import", "{", "packageRepository", "}", "from", "'../../../lib/service'", ";", "import", "{", "UploadPackage", "}", "from", "'./package'", ";", "import", "{", "fixture", "}", "from", "'../../../../test/utility/fs'", ";", "import", "{", "mock", "}", "from", "'../../../../test/utility/worker'", ";", "test", "(", "'uploads package to codeRepository if also packageRepository'", ",", "async", "(", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "distribution", ":", "'loki'", ",", "nameDomain", ":", "'com.github.elementary.houston'", ",", "package", ":", "{", "path", ":", "fixture", "(", "'worker/docker/image1/Dockerfile'", ")", ",", "type", ":", "'deb'", "}", ",", "references", ":", "[", "'refs/heads/loki'", "]", "}", ")", ";", "const", "setup", "=", "new", "UploadPackage", "(", "worker", ")", ";", "worker", ".", "repository", ".", "uploadPackage", "=", "sinon", ".", "fake", ".", "resolves", "(", ")", ";", "setup", ".", "uploadToPackageRepositories", "=", "sinon", ".", "fake", ".", "resolves", "(", ")", ";", "await", "setup", ".", "run", "(", ")", ";", "expect", "(", "worker", ".", "repository", ".", "uploadPackage", ".", "callCount", ")", ".", "not", ".", "toBe", "(", "0", ")", ";", "}", ",", "300000", ")", ";", "test", "(", "'concats error logs to something easy to read'", ",", "async", "(", ")", "=>", "{", "expect", ".", "assertions", "(", "1", ")", ";", "const", "worker", "=", "await", "mock", "(", "{", "distribution", ":", "'loki'", ",", "nameDomain", ":", "'com.github.elementary.houston'", ",", "package", ":", "{", "path", ":", "fixture", "(", "'worker/docker/image1/Dockerfile'", ")", ",", "type", ":", "'deb'", "}", ",", "references", ":", "[", "'refs/heads/loki'", "]", "}", ")", ";", "worker", ".", "app", ".", "unbind", "(", "packageRepository", ")", ";", "const", "setup", "=", "new", "UploadPackage", "(", "worker", ")", ";", "try", "{", "await", "setup", ".", "run", "(", ")", ";", "}", "catch", "(", "err", ")", "{", "expect", "(", "err", ".", "body", ")", ".", "toMatch", "(", "/mock Repository/", ")", ";", "}", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/src/worker/task/upload/package.spec.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "package.spec.ts"}
{"tokens": ["/**\n * houston/test/e2e/lib/log/outputs/console.ts\n * Tests console out logging. End to End testing due to mocks of the console\n */", "import", "baseTest", ",", "{", "Macro", ",", "TestInterface", "}", "from", "'ava'", ";", "import", "{", "stub", "}", "from", "'sinon'", ";", "import", "{", "create", "}", "from", "'../../../../utility/app'", ";", "import", "{", "App", "}", "from", "'../../../../../src/app'", ";", "import", "{", "Config", "}", "from", "'../../../../../src/lib/config'", ";", "import", "{", "Level", "}", "from", "'../../../../../src/lib/log/level'", ";", "import", "{", "Log", "}", "from", "'../../../../../src/lib/log/log'", ";", "import", "{", "Logger", "}", "from", "'../../../../../src/lib/log/logger'", ";", "import", "{", "Console", "}", "from", "'../../../../../src/lib/log/outputs/console'", ";", "interface", "IContext", "{", "app", ":", "App", ";", "config", ":", "Config", ";", "logger", ":", "Logger", ";", "output", ":", "Console", ";", "info", ":", "stub", ";", "warn", ":", "stub", ";", "error", ":", "stub", ";", "}", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "IContext", ">", ";", "const", "testOutput", "=", "(", "t", ",", "input", ",", "fn", ",", "expected", ")", "=>", "{", "const", "log", "=", "new", "Log", "(", "t", ".", "context", ".", "logger", ")", ".", "setLevel", "(", "input", ")", ";", "t", ".", "context", ".", "output", "[", "fn", "]", "(", "log", ")", ";", "t", ".", "true", "(", "t", ".", "context", "[", "expected", "]", ".", "called", ")", ";", "}", ";", "testOutput", ".", "title", "=", "(", "_", ",", "input", ",", "fn", ",", "expected", ")", "=>", "{", "return", "`${", "fn", "} gets outputted to console ${", "expected", "}`", ";", "}", ";", "test", ".", "beforeEach", "(", "'setup application'", ",", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "app", "=", "await", "create", "(", ")", ";", "t", ".", "context", ".", "config", "=", "t", ".", "context", ".", "app", ".", "get", "<", "Config", ">", "(", "Config", ")", ";", "t", ".", "context", ".", "config", ".", "unfreeze", "(", ")", ";", "t", ".", "context", ".", "config", ".", "set", "(", "'log.console'", ",", "'debug'", ")", ";", "t", ".", "context", ".", "config", ".", "freeze", "(", ")", ";", "t", ".", "context", ".", "logger", "=", "new", "Logger", "(", "t", ".", "context", ".", "config", ")", ";", "t", ".", "context", ".", "output", "=", "new", "Console", "(", "t", ".", "context", ".", "config", ")", ";", "}", ")", ";", "test", ".", "beforeEach", "(", "'setup console stubs'", ",", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "info", "=", "stub", "(", "console", ",", "'info'", ")", ";", "t", ".", "context", ".", "warn", "=", "stub", "(", "console", ",", "'warn'", ")", ";", "t", ".", "context", ".", "error", "=", "stub", "(", "console", ",", "'error'", ")", ";", "}", ")", ";", "test", ".", "afterEach", ".", "always", "(", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "info", ".", "restore", "(", ")", ";", "t", ".", "context", ".", "warn", ".", "restore", "(", ")", ";", "t", ".", "context", ".", "error", ".", "restore", "(", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "testOutput", ",", "Level", ".", "DEBUG", ",", "'debug'", ",", "'info'", ")", ";", "test", ".", "serial", "(", "testOutput", ",", "Level", ".", "INFO", ",", "'info'", ",", "'info'", ")", ";", "test", ".", "serial", "(", "testOutput", ",", "Level", ".", "WARN", ",", "'warn'", ",", "'warn'", ")", ";", "test", ".", "serial", "(", "testOutput", ",", "Level", ".", "ERROR", ",", "'error'", ",", "'error'", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, "Macro", null, null, "ExecutionContext", null, "Level", null, "string", null, "string", null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Level", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/e2e/lib/log/outputs/console.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "console.ts"}
{"tokens": ["/**\n * houston/test/utility/http.ts\n * Utilities for when you are testing http related things\n */", "import", "*", "as", "nock", "from", "'nock'", ";", "import", "*", "as", "path", "from", "'path'", ";", "nock", ".", "back", ".", "fixtures", "=", "path", ".", "resolve", "(", "__dirname", ",", "'../fixture'", ")", ";", "export", "interface", "INockOptions", "{", "ignoreBody", "?", ":", "boolean", ";", "}", "param", "{", "String", "}", "p", "param", "{", "INockOptions", "}", "opts", "return", "{", "Object", "}", "return", "{", "Function", "}", "export", "async", "function", "record", "(", "p", ",", "opts", "?", ")", "{", "const", "options", "=", "{", "}", ";", "if", "(", "opts", "!=", "null", "&&", "opts", ".", "ignoreBody", "===", "true", ")", "{", "options", ".", "before", "=", "(", "scope", ")", "=>", "{", "scope", ".", "filteringRequestBody", "=", "(", ")", "=>", "'*'", ";", "}", ";", "}", "const", "{", "nockDone", "}", "=", "await", "nock", ".", "back", "(", "p", ",", "options", ")", ";", "return", "{", "done", ":", "nockDone", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/http.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "http.ts"}
{"tokens": ["/**\n * houston/test/e2e/lib/service/aptly.ts\n * Tests the Aptly package repository class.\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "App", "}", "from", "'../../../../src/lib/app'", ";", "import", "{", "Config", "}", "from", "'../../../../src/lib/config'", ";", "import", "*", "as", "Log", "from", "'../../../../src/lib/log'", ";", "import", "{", "Aptly", "}", "from", "'../../../../src/lib/service/aptly'", ";", "import", "*", "as", "type", "from", "'../../../../src/lib/service/type'", ";", "import", "{", "tmp", "}", "from", "'../../../utility/fs'", ";", "import", "{", "record", "}", "from", "'../../../utility/http'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "app", ":", "App", ";", "}", ">", ";", "const", "DEFAULT_PKG", "=", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'xenial'", ",", "name", ":", "'package'", ",", "path", ":", "path", ".", "resolve", "(", "__dirname", ",", "'../../../test/fixture/lib/service/github/vocal.deb'", ")", ",", "type", ":", "'deb'", "}", ";", "test", ".", "failing", "(", "'can upload a package to aptly'", ",", "async", "(", "t", ")", "=>", "{", "const", "{", "done", "}", "=", "await", "record", "(", "'lib/service/aptly/asset.json'", ",", "{", "ignoreBody", ":", "true", "}", ")", ";", "const", "config", "=", "t", ".", "context", ".", "app", ".", "get", "(", "Config", ")", ";", "config", ".", "unfreeze", "(", ")", ";", "config", ".", "set", "(", "'service.aptly.review'", ",", "'testing'", ")", ";", "config", ".", "freeze", "(", ")", ";", "const", "aptly", "=", "t", ".", "context", ".", "app", ".", "get", "(", "Aptly", ")", ";", "const", "details", "=", "await", "aptly", ".", "uploadPackage", "(", "DEFAULT_PKG", ",", "'review'", ")", ";", "t", ".", "is", "(", "details", ".", "aptlyId", ",", "'Pamd64 com.github.needle-and-thread.vocal 2.1.6 9a6a0ef178f67a1e'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "IPackage", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/e2e/lib/service/aptly.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "aptly.ts"}
{"tokens": ["/**\n * houston/test/e2e/lib/service/github.ts\n * Tests the GitHub repository class.\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "*", "as", "Log", "from", "'../../../../src/lib/log'", ";", "import", "{", "github", ",", "IGitHubFactory", "}", "from", "'../../../../src/lib/service/github'", ";", "import", "*", "as", "type", "from", "'../../../../src/lib/service/type'", ";", "import", "{", "create", "as", "createApp", "}", "from", "'../../../utility/app'", ";", "import", "{", "tmp", "}", "from", "'../../../utility/fs'", ";", "import", "{", "record", "}", "from", "'../../../utility/http'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "folder", ":", "string", ";", "factory", ":", "IGitHubFactory", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "const", "app", "=", "await", "createApp", "(", ")", ";", "t", ".", "context", ".", "folder", "=", "await", "tmp", "(", "`lib/service/github/${", "uuid", "(", ")", "}`", ")", ";", "t", ".", "context", ".", "factory", "=", "(", "url", ")", "=>", "{", "const", "instance", "=", "app", ".", "get", "<", "IGitHubFactory", ">", "(", "github", ")", "(", "url", ")", ";", "instance", ".", "tmpFolder", "=", "t", ".", "context", ".", "folder", ";", "return", "instance", ";", "}", ";", "}", ")", ";", "test", ".", "afterEach", ".", "always", "(", "async", "(", "t", ")", "=>", "{", "await", "fs", ".", "remove", "(", "t", ".", "context", ".", "folder", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "'can clone a repository'", ",", "async", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/elementary/houston'", ")", ";", "const", "folder", "=", "path", ".", "resolve", "(", "t", ".", "context", ".", "folder", ",", "uuid", "(", ")", ")", ";", "await", "fs", ".", "mkdirs", "(", "folder", ")", ";", "await", "repo", ".", "clone", "(", "folder", ",", "'refs/remotes/origin/master'", ")", ";", "const", "stat", "=", "await", "fs", ".", "stat", "(", "folder", ")", ";", "t", ".", "true", "(", "stat", ".", "isDirectory", "(", ")", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "'can clone a repository with tag'", ",", "async", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/elementary/houston'", ")", ";", "const", "folder", "=", "path", ".", "resolve", "(", "t", ".", "context", ".", "folder", ",", "uuid", "(", ")", ")", ";", "await", "fs", ".", "mkdirs", "(", "folder", ")", ";", "await", "repo", ".", "clone", "(", "folder", ",", "'refs/tags/0.2.0'", ")", ";", "const", "stat", "=", "await", "fs", ".", "stat", "(", "folder", ")", ";", "t", ".", "true", "(", "stat", ".", "isDirectory", "(", ")", ")", ";", "const", "pkg", "=", "require", "(", "path", ".", "resolve", "(", "folder", ",", "'package.json'", ")", ")", ";", "t", ".", "is", "(", "pkg", ".", "version", ",", "'0.1.8'", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "'can clone a repository with a non-annotated tag (#511)'", ",", "async", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/fluks-eos/gdice'", ")", ";", "const", "folder", "=", "path", ".", "resolve", "(", "t", ".", "context", ".", "folder", ",", "uuid", "(", ")", ")", ";", "await", "fs", ".", "mkdirs", "(", "folder", ")", ";", "await", "repo", ".", "clone", "(", "folder", ",", "'refs/tags/v1.0.1'", ")", ";", "const", "stat", "=", "await", "fs", ".", "stat", "(", "folder", ")", ";", "t", ".", "true", "(", "stat", ".", "isDirectory", "(", ")", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "'can list all references for a repository'", ",", "async", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/elementary/houston'", ")", ";", "const", "references", "=", "await", "repo", ".", "references", "(", ")", ";", "t", ".", "not", "(", "references", ".", "indexOf", "(", "'refs/remotes/origin/master'", ")", ",", "-", "1", ")", ";", "t", ".", "not", "(", "references", ".", "indexOf", "(", "'refs/remotes/origin/v2'", ")", ",", "-", "1", ")", ";", "}", ")", ";", "test", ".", "serial", ".", "failing", "(", "'can post assets to reference'", ",", "async", "(", "t", ")", "=>", "{", "const", "{", "done", "}", "=", "await", "record", "(", "'lib/service/github/asset.json'", ")", ";", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/btkostner/vocal'", ")", ";", "const", "pkg", "=", "{", "architecture", ":", "'amd64'", ",", "description", ":", "'Vocal 3.2.6 Loki (amd64)'", ",", "distribution", ":", "'xenial'", ",", "name", ":", "'package.deb'", ",", "path", ":", "path", ".", "resolve", "(", "__dirname", ",", "'../../../fixture/lib/service/github/vocal.deb'", ")", ",", "type", ":", "'deb'", "}", "as", "type", ".", "IPackage", ";", "const", "newPkg", "=", "await", "repo", ".", "uploadPackage", "(", "pkg", ",", "'review'", ",", "'3.2.6'", ")", ";", "t", ".", "is", "(", "newPkg", ".", "githubId", ",", "6174740", ")", ";", "await", "done", "(", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "'can post an log'", ",", "async", "(", "t", ")", "=>", "{", "const", "{", "done", "}", "=", "await", "record", "(", "'lib/service/github/log.json'", ")", ";", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/btkostner/vocal'", ")", ";", "const", "log", "=", "{", "body", ":", "'testy test test'", ",", "level", ":", "Log", ".", "Level", ".", "ERROR", ",", "title", ":", "'test'", "}", "as", "type", ".", "ILog", ";", "const", "newLog", "=", "await", "repo", ".", "uploadLog", "(", "log", ",", "'review'", ",", "'3.2.6'", ")", ";", "t", ".", "is", "(", "newLog", ".", "githubId", ",", "326839748", ")", ";", "await", "done", "(", ")", ";", "}", ")", ";", "test", ".", "serial", "(", "'generates authentication with installation number'", ",", "async", "(", "t", ")", "=>", "{", "const", "{", "done", "}", "=", "await", "record", "(", "'lib/service/github/installation.json'", ")", ";", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://installation:341025@github.com/btkostner/vocal'", ")", ";", "const", "auth", "=", "await", "repo", ".", "getAuthorization", "(", ")", ";", "t", ".", "is", "(", "auth", ",", "'token v1.2474f2e312406721d0f20ef317948573101e6144'", ")", ";", "await", "done", "(", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "App", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, "IPackage", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IPackage", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/e2e/lib/service/github.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "github.ts"}
{"tokens": ["exports", "import", "*", "as", "Dockerode", "from", "'dockerode'", ";", "import", "{", "Config", "}", "from", "'../../src/lib/config'", ";", "async", "param", "{", "Config", "}", "config", "param", "{", "string", "}", "image", "return", "{", "void", "}", "export", "async", "function", "removeImages", "(", "config", ",", "image", ")", "{", "const", "docker", "=", "new", "Dockerode", "(", "config", ".", "get", "(", "'docker'", ")", ")", ";", "const", "images", "=", "await", "docker", ".", "listImages", "(", ")", ".", "then", "(", "(", "imageInfos", ")", "=>", "{", "return", "imageInfos", ".", "filter", "(", "(", "imageInfo", ")", "=>", "{", "return", "(", "imageInfo", ".", "RepoTags", "||", "[", "]", ")", ".", "some", "(", "(", "tag", ")", "=>", "tag", ".", "startsWith", "(", "image", ")", ")", ";", "}", ")", ";", "}", ")", ".", "then", "(", "(", "imageInfos", ")", "=>", "{", "return", "imageInfos", ".", "map", "(", "(", "imageInfo", ")", "=>", "docker", ".", "getImage", "(", "imageInfo", ".", "Id", ")", ")", ";", "}", ")", ";", "await", "Promise", ".", "all", "(", "images", ".", "map", "(", "(", "i", ")", "=>", "{", "i", ".", "remove", "(", "{", "force", ":", "true", "}", ")", ".", "catch", "(", "(", "err", ")", "=>", "{", "if", "(", "err", ".", "statusCode", "!==", "404", "&&", "err", ".", "statusCode", "!==", "409", ")", "{", "console", ".", "error", "(", "'Unable to remove docker image'", ",", "err", ")", ";", "}", "}", ")", ";", "}", ")", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Config", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/docker.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "docker.ts"}
{"tokens": ["/**\n * houston/test/e2e/worker/docker.ts\n * Tests docker usage ability\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "Config", "}", "from", "'../../../src/lib/config'", ";", "import", "{", "Docker", "}", "from", "'../../../src/worker/docker'", ";", "import", "{", "setup", "as", "setupConfig", "}", "from", "'../../utility/config'", ";", "import", "*", "as", "dockerUtility", "from", "'../../utility/docker'", ";", "interface", "IContext", "{", "config", ":", "Config", ";", "images", ":", "string", "[", "]", ";", "}", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "IContext", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "config", "=", "await", "setupConfig", "(", ")", ";", "t", ".", "context", ".", "images", "=", "[", "]", ";", "}", ")", ";", "test", ".", "afterEach", "(", "async", "(", "t", ")", "=>", "{", "await", "Promise", ".", "all", "(", "t", ".", "context", ".", "images", ".", "map", "(", "(", "image", ")", "=>", "{", "return", "dockerUtility", ".", "removeImages", "(", "t", ".", "context", ".", "config", ",", "image", ")", ";", "}", ")", ")", ";", "}", ")", ";", "test", "(", "'can check if image exists'", ",", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "images", "=", "[", "`houston-${", "uuid", "(", ")", "}`", "]", ";", "const", "docker", "=", "new", "Docker", "(", "t", ".", "context", ".", "config", ",", "t", ".", "context", ".", "images", "[", "0", "]", ")", ";", "t", ".", "false", "(", "await", "docker", ".", "exists", "(", ")", ")", ";", "}", ")", ";", "test", "(", "'can create a docker image'", ",", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "images", "=", "[", "`houston-${", "uuid", "(", ")", "}`", "]", ";", "const", "docker", "=", "new", "Docker", "(", "t", ".", "context", ".", "config", ",", "t", ".", "context", ".", "images", "[", "0", "]", ")", ";", "const", "imageDirectory", "=", "path", ".", "resolve", "(", "__dirname", ",", "'../../fixture/worker/docker/image1'", ")", ";", "await", "docker", ".", "create", "(", "imageDirectory", ")", ";", "t", ".", "true", "(", "await", "docker", ".", "exists", "(", ")", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Docker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/e2e/worker/docker.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "docker.ts"}
{"tokens": ["/**\n * houston/test/e2e/worker/worker.ts\n * Runs some repositories through tests for end to end testing\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "App", "}", "from", "'../../../src/lib/app'", ";", "import", "{", "Config", "}", "from", "'../../../src/lib/config'", ";", "import", "{", "codeRepositoryFactory", ",", "ICodeRepositoryFactory", "}", "from", "'../../../src/lib/service'", ";", "import", "{", "Build", "}", "from", "'../../../src/worker/preset/build'", ";", "import", "*", "as", "type", "from", "'../../../src/worker/type'", ";", "import", "{", "create", "}", "from", "'../../utility/app'", ";", "import", "{", "tmp", "}", "from", "'../../utility/fs'", ";", "interface", "IContext", "{", "app", ":", "App", ";", "config", ":", "Config", ";", "directory", ":", "string", ";", "factory", ":", "ICodeRepositoryFactory", ";", "}", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "IContext", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "app", "=", "await", "create", "(", ")", ";", "t", ".", "context", ".", "config", "=", "t", ".", "context", ".", "app", ".", "get", "<", "Config", ">", "(", "Config", ")", ";", "t", ".", "context", ".", "directory", "=", "await", "tmp", "(", "'worker'", ")", ";", "t", ".", "context", ".", "factory", "=", "t", ".", "context", ".", "app", ".", "get", "<", "ICodeRepositoryFactory", ">", "(", "codeRepositoryFactory", ")", ";", "}", ")", ";", "test", "(", "'cassidyjames/palette passes build process'", ",", "async", "(", "t", ")", "=>", "{", "const", "repo", "=", "await", "t", ".", "context", ".", "factory", "(", "'https://github.com/cassidyjames/palette'", ")", ";", "const", "context", "=", "{", "appcenter", ":", "{", "}", ",", "appstream", ":", "''", ",", "architecture", ":", "''", ",", "changelog", ":", "[", "]", ",", "distribution", ":", "''", ",", "logs", ":", "[", "]", ",", "nameDeveloper", ":", "'Palette'", ",", "nameDomain", ":", "'com.github.cassidyjames.palette'", ",", "nameHuman", ":", "'Palette'", ",", "references", ":", "[", "'refs/tags/2.2.0'", "]", ",", "type", ":", "'app'", ",", "version", ":", "'2.2.0'", "}", ";", "const", "proc", "=", "Build", "(", "t", ".", "context", ".", "app", ",", "repo", ",", "context", ")", ";", "proc", ".", "workspace", "=", "path", ".", "resolve", "(", "t", ".", "context", ".", "directory", ",", "uuid", "(", ")", ")", ";", "proc", ".", "on", "(", "'run:error'", ",", "(", "e", ")", "=>", "t", ".", "log", "(", "e", ")", ")", ";", "await", "proc", ".", "setup", "(", ")", ";", "await", "proc", ".", "run", "(", ")", ";", "await", "proc", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "proc", ".", "passes", ")", ";", "t", ".", "is", "(", "proc", ".", "result", ".", "packages", ".", "length", ",", "1", ")", ";", "t", ".", "is", "(", "proc", ".", "result", ".", "packages", "[", "0", "]", ".", "name", ",", "'com.github.cassidyjames.palette_2.2.0_amd64.deb'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/e2e/worker/worker.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "worker.ts"}
{"tokens": ["/**\n * houston/test/e2e/worker/task/debian/changelog.ts\n * Tests that the changelog task works as needed\n */", "import", "test", "from", "'ava'", ";", "import", "{", "DebianChangelog", "}", "from", "'../../../../../src/worker/task/debian/changelog'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'changelog renders correctly'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'updated some fun things'", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.1'", "}", ",", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'resion release'", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'1.0.0'", "}", "]", ",", "nameDomain", ":", "'com.github.elementary.houston'", "}", ")", ";", "worker", ".", "tasks", ".", "push", "(", "DebianChangelog", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "const", "changelog", "=", "await", "worker", ".", "readFile", "(", "'dirty/debian/changelog'", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "not", "(", "changelog", ".", "indexOf", "(", "'resion release'", ")", ",", "-", "1", ")", ";", "t", ".", "not", "(", "changelog", ".", "indexOf", "(", "'updated some fun things'", ")", ",", "-", "1", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/e2e/worker/task/debian/changelog.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "changelog.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/config/index.ts\n * Tests the configuration class\n */", "import", "test", "from", "'ava'", ";", "import", "{", "Config", "}", "from", "'../../../../src/lib/config/index'", ";", "test", "(", "'can be created with an object'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key'", ")", ",", "'value'", ")", ";", "}", ")", ";", "test", "(", "'can get a value'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key'", ")", ",", "'value'", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'noop'", ")", ",", "undefined", ")", ";", "}", ")", ";", "test", "(", "'get uses a default value'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'noop'", ",", "'value'", ")", ",", "'value'", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key'", ",", "'invalid'", ")", ",", "'value'", ")", ";", "}", ")", ";", "test", "(", "'has returns boolean for existing value'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'key'", ")", ")", ";", "t", ".", "false", "(", "config", ".", "has", "(", "'noop'", ")", ")", ";", "}", ")", ";", "test", "(", "'set sets new values'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "set", "(", "'key'", ",", "'value'", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key'", ")", ",", "'value'", ")", ";", "}", ")", ";", "test", "(", "'set sets nested values'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", ")", ";", "config", ".", "set", "(", "'key.nested'", ",", "'value'", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key.nested'", ")", ",", "'value'", ")", ";", "}", ")", ";", "test", "(", "'merge sets values'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "config", ".", "merge", "(", "{", "key", ":", "{", "nested", ":", "'value'", "}", "}", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key.nested'", ")", ",", "'value'", ")", ";", "}", ")", ";", "test", "(", "'freeze makes the config immutable'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "config", ".", "freeze", "(", ")", ";", "t", ".", "throws", "(", "(", ")", "=>", "config", ".", "set", "(", "'key'", ",", "'bad'", ")", ",", "/immutable/", ")", ";", "}", ")", ";", "test", "(", "'unfreeze makes the config editable'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "config", ".", "unfreeze", "(", ")", ";", "t", ".", "notThrows", "(", "(", ")", "=>", "config", ".", "set", "(", "'key'", ",", "'good'", ")", ")", ";", "}", ")", ";", "test", "(", "'freeze does not mess up with a null value'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "null", "}", ")", ";", "config", ".", "freeze", "(", ")", ";", "t", ".", "throws", "(", "(", ")", "=>", "config", ".", "set", "(", "'key'", ",", "'bad'", ")", ",", "/immutable/", ")", ";", "}", ")", ";", "test", "(", "'merge fails on immutable tree'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "new", "Config", "(", "{", "key", ":", "'value'", "}", ")", ";", "config", ".", "freeze", "(", ")", ";", "t", ".", "throws", "(", "(", ")", "=>", "config", ".", "merge", "(", "{", "more", ":", "'value'", "}", ")", ",", "/immutable/", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/config/index.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "index.ts"}
{"tokens": ["exports", "return", "{", "boolean", "}", "export", "function", "isCi", "(", ")", "{", "if", "(", "process", ".", "env", ".", "CI", "===", "'true'", "||", "process", ".", "env", ".", "CI", "===", "'1'", ")", "{", "return", "true", ";", "}", "return", "false", ";", "}"], "labels": [null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/ci.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "ci.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/config/loader.ts\n * Tests configuration loading functions.\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "loader", "from", "'../../../../src/lib/config/loader'", ";", "import", "{", "isCi", "}", "from", "'../../../utility/ci'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "testingConfigPath", ":", "string", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "testingConfigPath", "=", "path", ".", "resolve", "(", "__dirname", ",", "'..'", ",", "'..'", ",", "'..'", ",", "'fixture'", ",", "'config.js'", ")", ";", "}", ")", ";", "test", "(", "'can convert houston environment variables to dot notation'", ",", "(", "t", ")", "=>", "{", "t", ".", "is", "(", "loader", ".", "stringToDot", "(", "'HOUSTON_SERVER_PORT'", ")", ",", "'server.port'", ")", ";", "}", ")", ";", "test", "(", "'converts env to environment'", ",", "(", "t", ")", "=>", "{", "t", ".", "is", "(", "loader", ".", "stringToDot", "(", "'HOUSTON_ENV'", ")", ",", "'environment'", ")", ";", "}", ")", ";", "test", "(", "'can find houston environment variables'", ",", "(", "t", ")", "=>", "{", "process", ".", "env", ".", "HOUSTON_SERVER_PORT", "=", "'3000'", ";", "const", "config", "=", "loader", ".", "getEnvironmentConfig", "(", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'server.port'", ")", ",", "3000", ")", ";", "}", ")", ";", "test", "(", "'assigns environment based on NODE_ENV'", ",", "(", "t", ")", "=>", "{", "process", ".", "env", ".", "NODE_ENV", "=", "'development'", ";", "const", "config", "=", "loader", ".", "getEnvironmentConfig", "(", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'environment'", ")", ",", "'development'", ")", ";", "}", ")", ";", "test", "(", "'assigns console log based on NODE_DEBUG'", ",", "(", "t", ")", "=>", "{", "process", ".", "env", ".", "NODE_DEBUG", "=", "'true'", ";", "const", "config", "=", "loader", ".", "getEnvironmentConfig", "(", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'log.console'", ")", ",", "'debug'", ")", ";", "}", ")", ";", "test", "(", "'can find the package version'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "loader", ".", "getProgramConfig", "(", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'houston.version'", ")", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'houston.major'", ")", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'houston.minor'", ")", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'houston.patch'", ")", ")", ";", "}", ")", ";", "if", "(", "isCi", "(", ")", "===", "false", ")", "{", "test", "(", "'can find the git commit'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "loader", ".", "getProgramConfig", "(", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'houston.commit'", ")", ")", ";", "}", ")", ";", "test", "(", "'can find the git change'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "loader", ".", "getProgramConfig", "(", ")", ";", "t", ".", "true", "(", "config", ".", "has", "(", "'houston.change'", ")", ")", ";", "}", ")", ";", "}", "test", "(", "'can read configuration from file'", ",", "(", "t", ")", "=>", "{", "const", "{", "testingConfigPath", "}", "=", "t", ".", "context", ";", "const", "config", "=", "loader", ".", "getFileConfig", "(", "testingConfigPath", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'environment'", ")", ",", "'testing'", ")", ";", "}", ")", ";", "test", "(", "'can read configuration from relative path'", ",", "(", "t", ")", "=>", "{", "const", "{", "testingConfigPath", "}", "=", "t", ".", "context", ";", "const", "relativeConfigPath", "=", "path", ".", "relative", "(", "process", ".", "cwd", "(", ")", ",", "testingConfigPath", ")", ";", "const", "config", "=", "loader", ".", "getFileConfig", "(", "relativeConfigPath", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'environment'", ")", ",", "'testing'", ")", ";", "}", ")", ";", "test", "(", "'getConfig loads environment variables'", ",", "(", "t", ")", "=>", "{", "process", ".", "env", ".", "HOUSTON_KEY", "=", "'value'", ";", "const", "{", "testingConfigPath", "}", "=", "t", ".", "context", ";", "const", "config", "=", "loader", ".", "getConfig", "(", "testingConfigPath", ")", ";", "t", ".", "is", "(", "config", ".", "get", "(", "'key'", ")", ",", "'value'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/config/loader.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "loader.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/log/log.ts\n * Tests the log class.\n * NOTE: Because of typescript enum values, we compare the enum index value\n */", "import", "test", ",", "{", "Macro", "}", "from", "'ava'", ";", "import", "*", "as", "Level", "from", "'../../../../src/lib/log/level'", ";", "const", "testParseLevel", "=", "(", "t", ",", "input", ",", "expected", ")", "=>", "{", "t", ".", "is", "(", "Level", ".", "parseLevel", "(", "input", ")", ",", "expected", ")", ";", "}", ";", "testParseLevel", ".", "title", "=", "(", "_", ",", "input", ",", "expected", ")", "=>", "{", "return", "`parseLevel ${", "input", "} = ${", "expected", "}`", ";", "}", ";", "const", "testLevelString", "=", "(", "t", ",", "input", ",", "expected", ")", "=>", "{", "t", ".", "is", "(", "Level", ".", "levelString", "(", "input", ")", ",", "expected", ")", ";", "}", ";", "testLevelString", ".", "title", "=", "(", "_", ",", "input", ",", "expected", ")", "=>", "{", "return", "`levelString ${", "input", "} = ${", "expected", "}`", ";", "}", ";", "test", "(", "testParseLevel", ",", "'DEBUG'", ",", "0", ")", ";", "test", "(", "testParseLevel", ",", "'debug'", ",", "0", ")", ";", "test", "(", "testParseLevel", ",", "'info'", ",", "1", ")", ";", "test", "(", "testParseLevel", ",", "'warn'", ",", "2", ")", ";", "test", "(", "testParseLevel", ",", "'error'", ",", "3", ")", ";", "test", "(", "testLevelString", ",", "0", ",", "'debug'", ")", ";", "test", "(", "testLevelString", ",", "1", ",", "'info'", ")", ";", "test", "(", "testLevelString", ",", "2", ",", "'warn'", ")", ";", "test", "(", "testLevelString", ",", "3", ",", "'error'", ")", ";", "test", "(", "'returns a default value if no matching level found'", ",", "(", "t", ")", "=>", "{", "t", ".", "is", "(", "Level", ".", "parseLevel", "(", "'noop'", ")", ",", "1", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Macro", null, null, "ExecutionContext", null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "Macro", null, null, "ExecutionContext", null, "number", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "number", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/log/level.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "level.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/log/log.ts\n * Tests the log class.\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "{", "create", "}", "from", "'../../../utility/app'", ";", "import", "{", "App", "}", "from", "'../../../../src/app'", ";", "import", "{", "Level", "}", "from", "'../../../../src/lib/log/level'", ";", "import", "{", "Log", "}", "from", "'../../../../src/lib/log/log'", ";", "import", "{", "Logger", "}", "from", "'../../../../src/lib/log/logger'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "app", ":", "App", ";", "logger", ":", "Logger", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "app", "=", "await", "create", "(", ")", ";", "t", ".", "context", ".", "logger", "=", "t", ".", "context", ".", "app", ".", "get", "<", "Logger", ">", "(", "Logger", ")", ";", "}", ")", ";", "test", "(", "'log can set level'", ",", "(", "t", ")", "=>", "{", "const", "log", "=", "new", "Log", "(", "t", ".", "context", ".", "logger", ")", ".", "setLevel", "(", "Level", ".", "ERROR", ")", ";", "t", ".", "is", "(", "log", ".", "level", ",", "Level", ".", "ERROR", ")", ";", "}", ")", ";", "test", "(", "'log can set message'", ",", "(", "t", ")", "=>", "{", "const", "log", "=", "new", "Log", "(", "t", ".", "context", ".", "logger", ")", ".", "setMessage", "(", "'testing log message'", ")", ";", "t", ".", "is", "(", "log", ".", "message", ",", "'testing log message'", ")", ";", "}", ")", ";", "test", "(", "'log can attach arbitrary data to error'", ",", "(", "t", ")", "=>", "{", "const", "log", "=", "new", "Log", "(", "t", ".", "context", ".", "logger", ")", ".", "setData", "(", "'user'", ",", "'me!'", ")", ";", "t", ".", "deepEqual", "(", "log", ".", "data", ",", "{", "user", ":", "'me!'", "}", ")", ";", "}", ")", ";", "test", "(", "'log can attach an error'", ",", "(", "t", ")", "=>", "{", "const", "error", "=", "new", "Error", "(", "'testing'", ")", ";", "const", "log", "=", "new", "Log", "(", "t", ".", "context", ".", "logger", ")", ".", "setError", "(", "error", ")", ";", "t", ".", "is", "(", "log", ".", "error", ",", "error", ")", ";", "}", ")", ";", "test", "(", "'log sets date on creation'", ",", "(", "t", ")", "=>", "{", "const", "log", "=", "new", "Log", "(", "t", ".", "context", ".", "logger", ")", ";", "t", ".", "true", "(", "log", ".", "getDate", "(", ")", "instanceof", "Date", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Error", null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/log/log.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "log.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/queue/provider.ts\n * Tests out the container system for the queue. I'm sorry am a IoC noob\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "{", "App", "}", "from", "'../../../../src/lib/app'", ";", "import", "{", "Config", "}", "from", "'../../../../src/lib/config'", ";", "import", "{", "IQueue", ",", "IQueueConstructor", ",", "Queue", ",", "workerQueue", "}", "from", "'../../../../src/lib/queue'", ";", "import", "{", "create", "}", "from", "'../../../utility/app'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "app", ":", "App", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "'setup app container'", ",", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "app", "=", "await", "create", "(", ")", ";", "}", ")", ";", "test", "(", "'Queue throws error if configuration is unset'", ",", "(", "t", ")", "=>", "{", "const", "{", "app", "}", "=", "t", ".", "context", ";", "const", "config", "=", "app", ".", "get", "<", "Config", ">", "(", "Config", ")", ";", "const", "queueFactory", "=", "app", ".", "get", "<", "IQueueConstructor", ">", "(", "Queue", ")", ";", "config", ".", "unfreeze", "(", ")", ";", "config", ".", "set", "(", "'queue.client'", ",", "null", ")", ";", "t", ".", "throws", "(", "(", ")", "=>", "queueFactory", "(", "'testing'", ")", ",", "/config/", ")", ";", "}", ")", ";", "test", "(", "'Queue resolves to a factory function'", ",", "(", "t", ")", "=>", "{", "const", "{", "app", "}", "=", "t", ".", "context", ";", "const", "queueFactory", "=", "app", ".", "get", "<", "IQueueConstructor", ">", "(", "Queue", ")", ";", "t", ".", "is", "(", "typeof", "queueFactory", ",", "'function'", ")", ";", "}", ")", ";", "test", "(", "'workerQueue is a resolved Queue instance'", ",", "(", "t", ")", "=>", "{", "const", "{", "app", "}", "=", "t", ".", "context", ";", "const", "queue", "=", "app", ".", "get", "<", "IQueue", ">", "(", "workerQueue", ")", ";", "t", ".", "is", "(", "typeof", "queue", ".", "send", ",", "'function'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/queue/provider.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "provider.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/service/aptly.ts\n * Tests the Aptly class.\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "App", "}", "from", "'../../../../src/lib/app'", ";", "import", "{", "Config", "}", "from", "'../../../../src/lib/config'", ";", "import", "{", "Aptly", ",", "createUrl", "}", "from", "'../../../../src/lib/service/aptly'", ";", "import", "*", "as", "type", "from", "'../../../../src/lib/service/type'", ";", "import", "{", "create", "}", "from", "'../../../utility/app'", ";", "import", "{", "record", "}", "from", "'../../../utility/http'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "app", ":", "App", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "app", "=", "await", "create", "(", ")", ";", "}", ")", ";", "const", "DEFAULT_PKG", "=", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'xenial'", ",", "name", ":", "'package'", ",", "path", ":", "path", ".", "resolve", "(", "__dirname", ",", "'../../../test/fixture/lib/service/github/vocal.deb'", ")", ",", "type", ":", "'deb'", "}", ";", "test", "(", "'createUrl removes undefined values'", ",", "(", "t", ")", "=>", "{", "t", ".", "is", "(", "createUrl", "(", "'test'", ",", "null", ",", "'things'", ",", "undefined", ",", "5", ")", ",", "'test/things/5'", ")", ";", "}", ")", ";", "test", "(", "'resolves aptly details from a config string'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "t", ".", "context", ".", "app", ".", "get", "(", "Config", ")", ";", "config", ".", "unfreeze", "(", ")", ";", "config", ".", "set", "(", "'service.aptly.review'", ",", "'prefix'", ")", ";", "config", ".", "freeze", "(", ")", ";", "const", "aptly", "=", "t", ".", "context", ".", "app", ".", "get", "(", "Aptly", ")", ";", "const", "details", "=", "aptly", ".", "getAptlyDetails", "(", "DEFAULT_PKG", ",", "'review'", ")", ";", "t", ".", "is", "(", "details", ".", "prefix", ",", "'prefix'", ")", ";", "}", ")", ";", "test", "(", "'resolves aptly details from a config function'", ",", "(", "t", ")", "=>", "{", "const", "config", "=", "t", ".", "context", ".", "app", ".", "get", "(", "Config", ")", ";", "config", ".", "unfreeze", "(", ")", ";", "config", ".", "set", "(", "'service.aptly.review'", ",", "(", ")", "=>", "(", "{", "architectures", ":", "[", "'architecture'", "]", ",", "distribution", ":", "'distribution'", ",", "prefix", ":", "'prefix'", "}", ")", ")", ";", "config", ".", "freeze", "(", ")", ";", "const", "aptly", "=", "t", ".", "context", ".", "app", ".", "get", "(", "Aptly", ")", ";", "const", "details", "=", "aptly", ".", "getAptlyDetails", "(", "DEFAULT_PKG", ",", "'review'", ")", ";", "t", ".", "true", "(", "details", ".", "architectures", ".", "indexOf", "(", "'architecture'", ")", "!==", "-", "1", ")", ";", "t", ".", "is", "(", "details", ".", "distribution", ",", "'distribution'", ")", ";", "t", ".", "is", "(", "details", ".", "prefix", ",", "'prefix'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Config", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/service/aptly.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "aptly.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/service/github.ts\n * Tests the GitHub class.\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "github", ",", "IGitHubFactory", "}", "from", "'../../../../src/lib/service'", ";", "import", "*", "as", "type", "from", "'../../../../src/lib/service/type'", ";", "import", "{", "create", "as", "createApp", "}", "from", "'../../../utility/app'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "factory", ":", "IGitHubFactory", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "const", "app", "=", "await", "createApp", "(", ")", ";", "t", ".", "context", ".", "factory", "=", "app", ".", "get", "<", "IGitHubFactory", ">", "(", "github", ")", ";", "}", ")", ";", "test", "(", "'url returns correct string without authentication'", ",", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/elementary/houston'", ")", ";", "t", ".", "is", "(", "repo", ".", "url", ",", "'https://github.com/elementary/houston.git'", ")", ";", "}", ")", ";", "test", "(", "'url returns correct string with authentication'", ",", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://x-access-token:fakeauthcode@github.com/elementary/houston'", ")", ";", "t", ".", "is", "(", "repo", ".", "url", ",", "'https://x-access-token:fakeauthcode@github.com/elementary/houston.git'", ")", ";", "}", ")", ";", "test", "(", "'can set values based on url'", ",", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://github.com/noop/repo'", ")", ";", "repo", ".", "url", "=", "'https://github.com/elementary/houston'", ";", "t", ".", "is", "(", "repo", ".", "username", ",", "'elementary'", ")", ";", "t", ".", "is", "(", "repo", ".", "repository", ",", "'houston'", ")", ";", "}", ")", ";", "test", "(", "'can set values based on url with auth'", ",", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://test@github.com/test/test'", ")", ";", "repo", ".", "url", "=", "'https://auth@github.com/elementary/houston'", ";", "t", ".", "is", "(", "repo", ".", "username", ",", "'elementary'", ")", ";", "t", ".", "is", "(", "repo", ".", "repository", ",", "'houston'", ")", ";", "t", ".", "is", "(", "repo", ".", "authUsername", ",", "'x-access-token'", ")", ";", "t", ".", "is", "(", "repo", ".", "authPassword", ",", "'auth'", ")", ";", "}", ")", ";", "test", "(", "'can set values based on ssh url'", ",", "(", "t", ")", "=>", "{", "const", "repo", "=", "t", ".", "context", ".", "factory", "(", "'https://test@github.com/test/test'", ")", ";", "repo", ".", "url", "=", "'git@github.com:elementary/houston.git'", ";", "t", ".", "is", "(", "repo", ".", "username", ",", "'elementary'", ")", ";", "t", ".", "is", "(", "repo", ".", "repository", ",", "'houston'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "App", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "GitHub", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/service/github.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "github.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/utility/eventemitter.ts\n * Tests we can do the things we need to do in fun node event like fashion\n */", "import", "test", "from", "'ava'", ";", "import", "{", "EventEmitter", "}", "from", "'../../../../src/lib/utility/eventemitter'", ";", "test", "(", "'it can modify a value with sync listeners'", ",", "async", "(", "t", ")", "=>", "{", "const", "em", "=", "new", "EventEmitter", "(", ")", ";", "em", ".", "on", "(", "'test'", ",", "(", "v", ")", "=>", "(", "v", "+", "2", ")", ")", ";", "const", "value", "=", "await", "em", ".", "emitAsyncChain", "(", "'test'", ",", "1", ")", ";", "t", ".", "is", "(", "value", ",", "3", ")", ";", "}", ")", ";", "test", "(", "'it can modify a value with async listeners'", ",", "async", "(", "t", ")", "=>", "{", "const", "em", "=", "new", "EventEmitter", "(", ")", ";", "em", ".", "on", "(", "'test'", ",", "async", "(", "v", ")", "=>", "(", "v", "+", "1", ")", ")", ";", "em", ".", "on", "(", "'test'", ",", "async", "(", "v", ")", "=>", "(", "v", "+", "2", ")", ")", ";", "const", "value", "=", "await", "em", ".", "emitAsyncChain", "(", "'test'", ",", "1", ")", ";", "t", ".", "is", "(", "value", ",", "4", ")", ";", "}", ")", ";", "test", "(", "'thrown errors in listeners appear on emitter'", ",", "async", "(", "t", ")", "=>", "{", "const", "em", "=", "new", "EventEmitter", "(", ")", ";", "const", "err", "=", "new", "Error", "(", "'this is an error!'", ")", ";", "em", ".", "on", "(", "'test'", ",", "async", "(", "v", ")", "=>", "(", "v", "+", "1", ")", ")", ";", "em", ".", "on", "(", "'test'", ",", "async", "(", "v", ")", "=>", "{", "throw", "err", ";", "}", ")", ";", "await", "t", ".", "throwsAsync", "(", "em", ".", "emitAsyncChain", "(", "'test'", ",", "1", ")", ",", "err", ".", "message", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "EventEmitter", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "EventEmitter", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "EventEmitter", null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/utility/eventemitter.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "eventemitter.ts"}
{"tokens": ["/**\n * houston/src/lib/utility/glob.spec.ts\n * Tests glob functions\n */", "import", "*", "as", "path", "from", "'path'", ";", "import", "test", "from", "'ava'", ";", "import", "{", "glob", "}", "from", "'../../../../src/lib/utility/glob'", ";", "test", "(", "'it returns a promise from globbing'", ",", "async", "(", "t", ")", "=>", "{", "const", "files", "=", "await", "glob", "(", "path", ".", "resolve", "(", "__dirname", ",", "'**'", ")", ")", ";", "t", ".", "not", "(", "files", ".", "indexOf", "(", "__filename", ")", ",", "-", "1", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/utility/glob.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "glob.ts"}
{"tokens": ["/**\n * houston/test/spec/lib/utility/rdnn.ts\n * Tests RDNN functions\n */", "import", "test", ",", "{", "Macro", "}", "from", "'ava'", ";", "import", "*", "as", "rdnn", "from", "'../../../../src/lib/utility/rdnn'", ";", "const", "sanitize", "=", "(", "t", ",", "input", ",", "expected", ")", "=>", "{", "t", ".", "is", "(", "rdnn", ".", "sanitize", "(", "input", ")", ",", "expected", ")", ";", "}", ";", "sanitize", ".", "title", "=", "(", "t", ",", "input", ",", "expected", ")", "=>", "{", "return", "`sanitize converts \"${", "input", "}\" to \"${", "expected", "}\"`", ";", "}", ";", "test", "(", "sanitize", ",", "'com.github.btkostner.this is a repo'", ",", "'com.github.btkostner.this_is_a_repo'", ")", ";", "test", "(", "sanitize", ",", "'com.github.btkostner.this-is-a-repo'", ",", "'com.github.btkostner.this_is_a_repo'", ")", ";", "test", "(", "sanitize", ",", "'com.github.4u.2test'", ",", "'com.github._4u._2test'", ")", ";", "test", "(", "sanitize", ",", "'org.7-zip.archiver'", ",", "'org._7_zip.archiver'", ")", ";", "test", "(", "sanitize", ",", "'com.github.Username.RePoSiToRy'", ",", "'com.github.username.repository'", ")", ";", "test", "(", "'sanitize uses normalizer string'", ",", "(", "t", ")", "=>", "{", "const", "input", "=", "'com.github.testing.this-domain'", ";", "const", "expected", "=", "'com.github.testing.thisisadomain'", ";", "t", ".", "is", "(", "rdnn", ".", "sanitize", "(", "input", ",", "'isa'", ")", ",", "expected", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Macro", null, null, "ExecutionContext", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/lib/utility/rdnn.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "rdnn.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/log.ts\n * Tests the worker Log can do log related things :shrug:\n */", "import", "test", "from", "'ava'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "Log", "}", "from", "'../../../src/worker/log'", ";", "test", "(", "'it can render a template'", ",", "(", "t", ")", "=>", "{", "const", "test1", "=", "path", ".", "resolve", "(", "__dirname", ",", "'../../fixture/worker/log/test1.md'", ")", ";", "const", "log", "=", "Log", ".", "template", "(", "Log", ".", "Level", ".", "ERROR", ",", "test1", ",", "{", "body", ":", "'## This is a subheader'", ",", "title", ":", "'testing'", "}", ")", ";", "t", ".", "is", "(", "log", ".", "title", ",", "'testing'", ")", ";", "t", ".", "is", "(", "log", ".", "body", ",", "'This is a basic test1 Log template.\\n\\n## This is a subheader'", ")", ";", "}", ")", ";", "test", "(", "'setError will change the error message'", ",", "(", "t", ")", "=>", "{", "const", "error", "=", "new", "Error", "(", "'this is a test'", ")", ";", "const", "log", "=", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'test'", ",", "'body'", ")", ";", "log", ".", "setError", "(", "error", ")", ";", "t", ".", "is", "(", "log", ".", "message", ",", "error", ".", "message", ")", ";", "}", ")", ";", "test", "(", "'setError will add error object to the log'", ",", "(", "t", ")", "=>", "{", "const", "error", "=", "new", "Error", "(", "'this is a test'", ")", ";", "const", "log", "=", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'test'", ",", "'body'", ")", ";", "log", ".", "setError", "(", "error", ")", ";", "t", ".", "is", "(", "log", ".", "error", ",", "error", ")", ";", "}", ")", ";", "test", "(", "'toString returns a nice templated log'", ",", "(", "t", ")", "=>", "{", "const", "err", "=", "new", "Log", "(", "Log", ".", "Level", ".", "ERROR", ",", "'title'", ",", "'body'", ")", ";", "t", ".", "is", "(", "err", ".", "toString", "(", ")", ",", "'# title\\n\\nbody'", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Error", null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Error", null, null, null, null, null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Log", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/log.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "log.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/preset/release.ts\n * Tests that the release preset has all the tasks we need\n */", "import", "baseTest", ",", "{", "TestInterface", "}", "from", "'ava'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "{", "App", "}", "from", "'../../../../src/lib/app'", ";", "import", "{", "Release", "}", "from", "'../../../../src/worker/preset/release'", ";", "import", "{", "Upload", "}", "from", "'../../../../src/worker/task/upload'", ";", "import", "{", "IContext", "}", "from", "'../../../../src/worker/type'", ";", "import", "{", "create", "as", "createApp", "}", "from", "'../../../utility/app'", ";", "import", "{", "context", "as", "createContext", "}", "from", "'../../../utility/worker'", ";", "import", "{", "Repository", "}", "from", "'../../../utility/worker/repository'", ";", "const", "test", "=", "baseTest", "as", "TestInterface", "<", "{", "app", ":", "App", ";", "repo", ":", "Repository", ";", "context", ":", "IContext", ";", "}", ">", ";", "test", ".", "beforeEach", "(", "async", "(", "t", ")", "=>", "{", "t", ".", "context", ".", "app", "=", "await", "createApp", "(", ")", ";", "t", ".", "context", ".", "repo", "=", "new", "Repository", "(", "'https://github.com/elementary/houston'", ")", ";", "t", ".", "context", ".", "context", "=", "await", "createContext", "(", ")", ";", "}", ")", ";", "test", "(", "'includes regular tasks from Build preset'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "Release", "(", "t", ".", "context", ".", "app", ",", "t", ".", "context", ".", "repo", ",", "t", ".", "context", ".", "context", ")", ";", "t", ".", "not", "(", "worker", ".", "tasks", ".", "length", ",", "0", ")", ";", "}", ")", ";", "test", "(", "'includes upload post task'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "Release", "(", "t", ".", "context", ".", "app", ",", "t", ".", "context", ".", "repo", ",", "t", ".", "context", ".", "context", ")", ";", "t", ".", "not", "(", "worker", ".", "postTasks", ".", "indexOf", "(", "Upload", ")", ",", "-", "1", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TestInterface", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "Worker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/preset/release.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "release.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/appstream/id.ts\n * Tests the appstream id test\n */", "import", "test", "from", "'ava'", ";", "import", "{", "AppstreamId", "}", "from", "'../../../../../src/worker/task/appstream/id'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'passes with a matching ID'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/spice-up.xml'", ",", "'package/usr/share/metainfo/com.github.philip-scott.spice-up.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamId", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "}", ")", ";", "test", "(", "'fails with an incorrect ID'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/spice-up.xml'", ",", "'package/usr/share/metainfo/com.github.elementary.houston.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamId", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "fails", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/appstream/id.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "id.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/appstream/index.ts\n * Tests that known good appstream files pass appstream testing\n */", "import", "test", "from", "'ava'", ";", "import", "{", "Appstream", "}", "from", "'../../../../../src/worker/task/appstream/index'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'failures stop the build'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", ")", ";", "worker", ".", "tasks", ".", "push", "(", "Appstream", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "worker", ".", "fails", ")", ";", "}", ")", ";", "test", "(", "'com.github.philip-scott.spice-up passes appstream tests'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/spice-up.xml'", ",", "'package/usr/share/metainfo/com.github.philip-scott.spice-up.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "Appstream", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "}", ")", ";", "test", "(", "'basic errors get concated to single log'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/blank.xml'", ",", "'package/usr/share/metainfo/com.github.philip-scott.spice-up.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "Appstream", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "const", "combinedLog", "=", "worker", ".", "context", ".", "logs", ".", "find", "(", "(", "log", ")", "=>", "(", "log", ".", "title", ".", "match", "(", "/appstream tests/i", ")", "!=", "null", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "fails", ")", ";", "t", ".", "regex", "(", "combinedLog", ".", "body", ",", "/description/", ")", ";", "t", ".", "regex", "(", "combinedLog", ".", "body", ",", "/summary/", ")", ";", "t", ".", "regex", "(", "combinedLog", ".", "body", ",", "/screenshots/", ")", ";", "t", ".", "regex", "(", "combinedLog", ".", "body", ",", "/id/", ")", ";", "t", ".", "regex", "(", "combinedLog", ".", "body", ",", "/name/", ")", ";", "t", ".", "regex", "(", "combinedLog", ".", "body", ",", "/project_license/", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/appstream/index.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "index.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/appstream/release.ts\n * Tests we can insert markdown changelogs to the appstream file\n */", "import", "test", "from", "'ava'", ";", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "AppstreamRelease", "}", "from", "'../../../../../src/worker/task/appstream/release'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "param", "{", "Context", "}", "t", "param", "{", "string", "}", "data", "param", "{", "string", "}", "expected", "throws", "return", "{", "void", "}", "function", "expectChangelog", "(", "t", ",", "data", ",", "expected", ")", "{", "const", "parseOptions", "=", "{", "decodeEntities", ":", "true", ",", "normalizeWhitespace", ":", "true", ",", "xmlMode", ":", "true", "}", ";", "const", "$d", "=", "cheerio", ".", "load", "(", "data", ",", "parseOptions", ")", ";", "const", "$e", "=", "cheerio", ".", "load", "(", "expected", ",", "parseOptions", ")", ";", "const", "$release", "=", "$d", "(", "'component > releases > release:first-of-type'", ")", ";", "t", ".", "log", "(", "$release", ".", "toString", "(", ")", ")", ";", "t", ".", "is", "(", "$release", ".", "attr", "(", "'version'", ")", ",", "$e", "(", "'release'", ")", ".", "attr", "(", "'version'", ")", ")", ";", "t", ".", "is", "(", "$release", ".", "attr", "(", "'urgency'", ")", ",", "$e", "(", "'release'", ")", ".", "attr", "(", "'urgency'", ")", ")", ";", "const", "dRelease", "=", "$release", ".", "html", "(", ")", ".", "replace", "(", "/\\s/img", ",", "''", ")", ";", "const", "eRelease", "=", "$e", "(", "'release'", ")", ".", "html", "(", ")", ".", "replace", "(", "/\\s/img", ",", "''", ")", ";", "t", ".", "is", "(", "dRelease", ",", "eRelease", ")", ";", "}", "test", "(", "'can insert a basic list of changes'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "`This is a change I made\nThis is another change I made`", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'1.0.0'", "}", "]", ",", "nameDomain", ":", "'com.github.elementary.houston'", "}", ")", ";", "const", "p", "=", "'package/usr/share/metainfo/com.github.elementary.houston.appdata.xml'", ";", "await", "worker", ".", "mock", "(", "'task/appstream/blank.xml'", ",", "p", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamRelease", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "const", "file", "=", "await", "fs", ".", "readFile", "(", "worker", ".", "get", "(", "p", ")", ",", "'utf8'", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "expectChangelog", "(", "t", ",", "file", ",", "`\n    <release version=\"1.0.0\" urgency=\"medium\">\n      <description>\n        <ul>\n          <li>This is a change I made</li>\n          <li>This is another change I made</li>\n        </ul>\n      </description>\n    </release>\n  `", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "}", ")", ";", "test", "(", "'it strips out bad html tags from changes'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "`# All about my changes\n\nThis is a bunch of cool things that are updated.\n\n* More fun stuff\n* Even cooler stuff\n\n<script>evil shenanigans</script>\n\n    A sample code block`", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'1.0.0'", "}", "]", ",", "nameDomain", ":", "'com.github.elementary.houston'", "}", ")", ";", "const", "p", "=", "'package/usr/share/metainfo/com.github.elementary.houston.appdata.xml'", ";", "await", "worker", ".", "mock", "(", "'task/appstream/blank.xml'", ",", "p", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamRelease", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "const", "file", "=", "await", "fs", ".", "readFile", "(", "worker", ".", "get", "(", "p", ")", ",", "'utf8'", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "expectChangelog", "(", "t", ",", "file", ",", "`\n    <release version=\"1.0.0\" urgency=\"medium\">\n      <description>\n        All about my changes\n        <p>This is a bunch of cool things that are updated.</p>\n        <ul>\n          <li>More fun stuff</li>\n          <li>Even cooler stuff</li>\n        </ul>\n        <p>&lt;script&gt;evil shenanigans&lt;/script&gt;</p>\n        A sample code block\n      </description>\n    </release>\n  `", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, "Cheerio", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/appstream/release.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "release.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/appstream/screenshot.ts\n * Tests the appstream screenshot test\n */", "import", "test", "from", "'ava'", ";", "import", "{", "AppstreamScreenshot", "}", "from", "'../../../../../src/worker/task/appstream/screenshot'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'passes with screenshots specified'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/spice-up.xml'", ",", "'package/usr/share/metainfo/com.github.philip-scott.spice-up.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamScreenshot", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/appstream/screenshot.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "screenshot.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/appstream/stripe.ts\n * Tests inserting stripe keys into appstream file\n */", "import", "test", "from", "'ava'", ";", "import", "*", "as", "cheerio", "from", "'cheerio'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "AppstreamStripe", "}", "from", "'../../../../../src/worker/task/appstream/stripe'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'can insert a basic list of changes'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.elementary.houston'", ",", "stripe", ":", "'testingvaluehere'", "}", ")", ";", "const", "p", "=", "'package/usr/share/metainfo/com.github.elementary.houston.appdata.xml'", ";", "await", "worker", ".", "mock", "(", "'task/appstream/blank.xml'", ",", "p", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamStripe", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "const", "file", "=", "await", "fs", ".", "readFile", "(", "worker", ".", "get", "(", "p", ")", ",", "'utf8'", ")", ";", "const", "$", "=", "cheerio", ".", "load", "(", "file", ",", "{", "xmlMode", ":", "true", "}", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "t", ".", "is", "(", "$", "(", "'component > custom > value'", ")", ".", "text", "(", ")", ",", "'testingvaluehere'", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CheerioAPI", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/appstream/stripe.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "stripe.ts"}
{"tokens": ["/**\n * houston/src/worker/task/appstream/validate.spec.ts\n * Tests the validatecli docker test\n */", "import", "test", "from", "'ava'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "{", "AppstreamValidate", "}", "from", "'../../../../../src/worker/task/appstream/validate'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'passes with a valid appstream file'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/spice-up.xml'", ",", "'package/usr/share/metainfo/com.github.philip-scott.spice-up.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamValidate", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "}", ")", ";", "test", "(", "'fails with a blank appstream file'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/appstream/blank.xml'", ",", "'package/usr/share/metainfo/com.github.philip-scott.spice-up.appdata.xml'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "AppstreamValidate", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "worker", ".", "context", ".", "logs", ".", "forEach", "(", "(", "l", ")", "=>", "t", ".", "log", "(", "l", ")", ")", ";", "t", ".", "true", "(", "worker", ".", "fails", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ILog", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/appstream/validate.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "validate.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/debian/changelog.ts\n * Tests writing debian changelog files\n */", "import", "test", "from", "'ava'", ";", "import", "*", "as", "fs", "from", "'fs-extra'", ";", "import", "*", "as", "os", "from", "'os'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "uuid", "from", "'uuid/v4'", ";", "import", "{", "DebianChangelog", "}", "from", "'../../../../../src/worker/task/debian/changelog'", ";", "import", "{", "IContext", "}", "from", "'../../../../../src/worker/type'", ";", "import", "{", "context", "as", "createContext", "}", "from", "'../../../../utility/worker'", ";", "param", "{", "Date", "}", "return", "{", "string", "}", "function", "debianDate", "(", "date", ")", "{", "return", "date", ".", "toUTCString", "(", ")", ".", "replace", "(", "'GMT'", ",", "'+0000'", ")", ";", "}", "test", "(", "'can pull a list out of a markdown changelog'", ",", "async", "(", "t", ")", "=>", "{", "const", "context", "=", "createContext", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "`\n# This is a title\n### Example markdown changelog\n\nFixes:\n  * Fix #1234 stuff doesnt work\n  * Another Fix\n\nFeatures:\n  * Added some cool thing\n      `", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.1'", "}", "]", "}", ")", ";", "const", "changelogDate", "=", "debianDate", "(", "context", ".", "changelog", "[", "0", "]", ".", "date", ")", ";", "t", ".", "is", "(", "await", "DebianChangelog", ".", "template", "(", "context", ")", ",", "`\nio.elementary.houston (0.0.1) loki; urgency=low\n\n  * Fix #1234 stuff doesnt work\n  * Another Fix\n  * Added some cool thing\n\n -- Blake Kostner <developer@elementary.io>  ${", "changelogDate", "}\n  `", ".", "trim", "(", ")", ")", ";", "}", ")", ";", "test", "(", "'templates multiple changelogs correctly'", ",", "async", "(", "t", ")", "=>", "{", "const", "context", "=", "createContext", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'0.0.3 release whoooo'", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.3'", "}", ",", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'Fix some weird issues with building'", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.2'", "}", ",", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'init 1'", ",", "date", ":", "new", "Date", "(", ")", ",", "version", ":", "'0.0.1'", "}", "]", "}", ")", ";", "const", "changelogDate1", "=", "debianDate", "(", "context", ".", "changelog", "[", "0", "]", ".", "date", ")", ";", "const", "changelogDate2", "=", "debianDate", "(", "context", ".", "changelog", "[", "1", "]", ".", "date", ")", ";", "const", "changelogDate3", "=", "debianDate", "(", "context", ".", "changelog", "[", "2", "]", ".", "date", ")", ";", "t", ".", "is", "(", "await", "DebianChangelog", ".", "template", "(", "context", ")", ",", "`\nio.elementary.houston (0.0.3) loki; urgency=low\n\n  * 0.0.3 release whoooo\n\n -- Blake Kostner <developer@elementary.io>  ${", "changelogDate1", "}\n\nio.elementary.houston (0.0.2) loki; urgency=low\n\n  * Fix some weird issues with building\n\n -- Blake Kostner <developer@elementary.io>  ${", "changelogDate2", "}\n\nio.elementary.houston (0.0.1) loki; urgency=low\n\n  * init 1\n\n -- Blake Kostner <developer@elementary.io>  ${", "changelogDate3", "}\n  `", ".", "trim", "(", ")", ")", ";", "}", ")", ";", "test", "(", "'sorts changes based on date'", ",", "async", "(", "t", ")", "=>", "{", "const", "context", "=", "createContext", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'init'", ",", "date", ":", "new", "Date", "(", "2010", ",", "0", ",", "1", ")", ",", "version", ":", "'0.0.1'", "}", ",", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'release'", ",", "date", ":", "new", "Date", "(", "2020", ",", "0", ",", "1", ")", ",", "version", ":", "'1.0.0'", "}", "]", "}", ")", ";", "const", "changelogDate1", "=", "debianDate", "(", "context", ".", "changelog", "[", "1", "]", ".", "date", ")", ";", "const", "changelogDate2", "=", "debianDate", "(", "context", ".", "changelog", "[", "0", "]", ".", "date", ")", ";", "t", ".", "is", "(", "await", "DebianChangelog", ".", "template", "(", "context", ")", ",", "`\nio.elementary.houston (1.0.0) loki; urgency=low\n\n  * release\n\n -- Blake Kostner <developer@elementary.io>  ${", "changelogDate1", "}\n\nio.elementary.houston (0.0.1) loki; urgency=low\n\n  * init\n\n -- Blake Kostner <developer@elementary.io>  ${", "changelogDate2", "}\n  `", ".", "trim", "(", ")", ")", ";", "}", ")", ";", "test", "(", "'uses dash package name in the changelog'", ",", "async", "(", "t", ")", "=>", "{", "const", "context", "=", "createContext", "(", "{", "changelog", ":", "[", "{", "author", ":", "'Blake Kostner'", ",", "changes", ":", "'init'", ",", "date", ":", "new", "Date", "(", "2010", ",", "0", ",", "1", ")", ",", "version", ":", "'1.0.0'", "}", "]", ",", "nameDomain", ":", "'com.github.btkostner.this_is_invalid_debian_package_name'", "}", ")", ";", "const", "changelogDate", "=", "debianDate", "(", "context", ".", "changelog", "[", "0", "]", ".", "date", ")", ";", "const", "template", "=", "await", "DebianChangelog", ".", "template", "(", "context", ")", ";", "t", ".", "log", "(", "template", ")", ";", "t", ".", "is", "(", "template", ".", "indexOf", "(", "'com.github.btkostner.this_is_invalid_debian_package_name'", ")", ",", "-", "1", ")", ";", "t", ".", "not", "(", "template", ".", "indexOf", "(", "'com.github.btkostner.this-is-invalid-debian-package-name'", ")", ",", "-", "1", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Date", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/debian/changelog.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "changelog.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/desktop/index.ts\n * Tests that known good appstream files pass appstream testing\n */", "import", "test", "from", "'ava'", ";", "import", "{", "DesktopIcon", "}", "from", "'../../../../../src/worker/task/desktop/icon'", ";", "import", "{", "Desktop", "}", "from", "'../../../../../src/worker/task/desktop/index'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'failures stop the build'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", ")", ";", "worker", ".", "tasks", ".", "push", "(", "Desktop", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "worker", ".", "fails", ")", ";", "}", ")", ";", "test", "(", "'com.github.philip-scott.spice-up passes desktop tests'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/desktop/spice-up.desktop'", ",", "'package/usr/share/applications/com.github.philip-scott.spice-up.desktop'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "Desktop", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "}", ")", ";", "test", "(", "'system apps do not have icon validation #590'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'io.elementary.appcenter'", ",", "type", ":", "'system-app'", "}", ")", ";", "const", "desktop", "=", "new", "Desktop", "(", "worker", ")", ";", "t", ".", "is", "(", "desktop", ".", "tasks", ".", "indexOf", "(", "DesktopIcon", ")", ",", "-", "1", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Desktop", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/desktop/index.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "index.ts"}
{"tokens": ["/**\n * houston/src/worker/task/desktop/validate.spec.ts\n * Tests the desktop-file-validate docker test\n */", "import", "test", "from", "'ava'", ";", "import", "{", "DesktopValidate", "}", "from", "'../../../../../src/worker/task/desktop/validate'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'validates files besides default desktop file'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/desktop/blank.desktop'", ",", "'package/usr/share/applications/blank.desktop'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "DesktopValidate", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "is", "(", "worker", ".", "context", ".", "logs", ".", "length", ",", "1", ")", ";", "t", ".", "regex", "(", "worker", ".", "context", ".", "logs", "[", "0", "]", ".", "toString", "(", ")", ",", "/errors/", ")", ";", "t", ".", "regex", "(", "worker", ".", "context", ".", "logs", "[", "0", "]", ".", "toString", "(", ")", ",", "/blank\\.desktop/", ")", ";", "}", ")", ";", "test", "(", "'validate concats logs to single issue'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.philip-scott.spice-up'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/desktop/blank.desktop'", ",", "'package/usr/share/applications/blank.desktop'", ")", ";", "await", "worker", ".", "mock", "(", "'task/desktop/blank.desktop'", ",", "'package/usr/share/applications/another-blank.desktop'", ")", ";", "await", "worker", ".", "mock", "(", "'task/desktop/spice-up.desktop'", ",", "'package/usr/share/applications/com.github.philip-scott.spice-up.desktop'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "DesktopValidate", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "is", "(", "worker", ".", "context", ".", "logs", ".", "length", ",", "1", ")", ";", "t", ".", "regex", "(", "worker", ".", "context", ".", "logs", "[", "0", "]", ".", "toString", "(", ")", ",", "/blank\\.desktop/", ")", ";", "t", ".", "regex", "(", "worker", ".", "context", ".", "logs", "[", "0", "]", ".", "toString", "(", ")", ",", "/another-blank\\.desktop/", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/desktop/validate.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "validate.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/file/deb/binary.ts\n * Tests the deb file binary test\n */", "import", "test", "from", "'ava'", ";", "import", "{", "FileDebBinary", "}", "from", "'../../../../../../src/worker/task/file/deb/binary'", ";", "import", "{", "mock", "}", "from", "'../../../../../utility/worker'", ";", "test", "(", "'matches a correctly named bin file'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.elementary.houston'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/empty'", ",", "'package/usr/bin/com.github.elementary.houston'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "FileDebBinary", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "worker", ".", "passes", ")", ";", "}", ")", ";", "test", "(", "'includes project files in error log'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "nameDomain", ":", "'com.github.elementary.houston'", "}", ")", ";", "await", "worker", ".", "mock", "(", "'task/empty'", ",", "'package/usr/share/docs/com.github.elementary.desktop'", ")", ";", "await", "worker", ".", "mock", "(", "'task/empty'", ",", "'package/usr/n00p/test'", ")", ";", "worker", ".", "tasks", ".", "push", "(", "FileDebBinary", ")", ";", "await", "worker", ".", "setup", "(", ")", ";", "await", "worker", ".", "run", "(", ")", ";", "await", "worker", ".", "teardown", "(", ")", ";", "t", ".", "true", "(", "worker", ".", "fails", ")", ";", "t", ".", "regex", "(", "worker", ".", "context", ".", "logs", "[", "0", "]", ".", "body", ",", "/usr\\/share\\/docs\\/com\\.github\\.elementary\\.desktop/", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/file/deb/binary.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "binary.ts"}
{"tokens": ["/**\n * houston/test/spec/worker/task/workspace/setup.ts\n * Tests building out workspaces\n */", "import", "test", "from", "'ava'", ";", "import", "{", "WorkspaceSetup", "}", "from", "'../../../../../src/worker/task/workspace/setup'", ";", "import", "{", "mock", "}", "from", "'../../../../utility/worker'", ";", "test", "(", "'builds workspace from all matching branches'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "distribution", ":", "'loki'", ",", "nameDomain", ":", "'com.github.elementary.houston'", ",", "references", ":", "[", "'refs/heads/loki'", "]", "}", ")", ";", "worker", ".", "repository", ".", "references", "=", "async", "(", ")", "=>", "(", "[", "'refs/heads/deb-packaging-loki'", ",", "'refs/heads/deb-packaging-juno'", ",", "'refs/heads/deb-packaging'", ",", "'refs/heads/juno'", ",", "'refs/heads/loki'", ",", "'refs/heads/master'", "]", ")", ";", "const", "setup", "=", "new", "WorkspaceSetup", "(", "worker", ")", ";", "const", "setups", "=", "await", "setup", ".", "possibleBuilds", "(", ")", ";", "t", ".", "deepEqual", "(", "setups", ",", "[", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'loki'", ",", "packageType", ":", "'deb'", "}", ",", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'juno'", ",", "packageType", ":", "'deb'", "}", "]", ")", ";", "}", ")", ";", "test", "(", "'deb-packaging adds the latest version even if builds exist'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "distribution", ":", "'loki'", ",", "nameDomain", ":", "'com.github.elementary.houston'", ",", "references", ":", "[", "'refs/heads/loki'", "]", "}", ")", ";", "worker", ".", "repository", ".", "references", "=", "async", "(", ")", "=>", "(", "[", "'refs/heads/deb-packaging-loki'", ",", "'refs/heads/deb-packaging'", ",", "'refs/heads/master'", "]", ")", ";", "const", "setup", "=", "new", "WorkspaceSetup", "(", "worker", ")", ";", "const", "setups", "=", "await", "setup", ".", "possibleBuilds", "(", ")", ";", "t", ".", "deepEqual", "(", "setups", ",", "[", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'loki'", ",", "packageType", ":", "'deb'", "}", ",", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'juno'", ",", "packageType", ":", "'deb'", "}", "]", ")", ";", "}", ")", ";", "test", "(", "'builds workspace defaults to latest version'", ",", "async", "(", "t", ")", "=>", "{", "const", "worker", "=", "await", "mock", "(", "{", "distribution", ":", "'loki'", ",", "nameDomain", ":", "'com.github.elementary.houston'", ",", "references", ":", "[", "'refs/heads/loki'", "]", "}", ")", ";", "worker", ".", "repository", ".", "references", "=", "async", "(", ")", "=>", "(", "[", "'refs/heads/deb-packaging'", ",", "'refs/heads/master'", "]", ")", ";", "const", "setup", "=", "new", "WorkspaceSetup", "(", "worker", ")", ";", "const", "setups", "=", "await", "setup", ".", "possibleBuilds", "(", ")", ";", "t", ".", "deepEqual", "(", "setups", ",", "[", "{", "architecture", ":", "'amd64'", ",", "distribution", ":", "'juno'", ",", "packageType", ":", "'deb'", "}", "]", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionContext", null, null, null, null, "TestWorker", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/spec/worker/task/workspace/setup.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "setup.ts"}
{"tokens": ["exports", "exports", "exports", "import", "{", "create", "}", "from", "'./app'", ";", "import", "{", "Config", "}", "from", "'../../src/lib/config'", ";", "import", "{", "Database", "}", "from", "'../../src/lib/database/database'", ";", "async", "param", "{", "Database", "}", "database", "return", "{", "void", "}", "export", "async", "function", "migrate", "(", "database", ")", "{", "await", "database", ".", "knex", ".", "migrate", ".", "latest", "(", ")", ";", "}", "async", "param", "{", "Database", "}", "database", "return", "{", "void", "}", "export", "async", "function", "seed", "(", "database", ")", "{", "await", "database", ".", "knex", ".", "seed", ".", "run", "(", ")", ";", "}", "async", "param", "{", "Config", "}", "config", "return", "{", "Database", "}", "export", "async", "function", "setup", "(", "config", ")", "{", "const", "app", "=", "await", "create", "(", ")", ";", "const", "database", "=", "app", ".", "get", "<", "Database", ">", "(", "Database", ")", ";", "await", "migrate", "(", "database", ")", ";", "await", "seed", "(", "database", ")", ";", "return", "database", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Database", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Database", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Config", null, null, null, "App", null, null, null, null, null, null, null, "Database", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/elementary/houston", "path": "houston/test/utility/database.ts", "commit_hash": "4686ce520e1e319125ce948184ebad0a3c56c4cf", "file": "database.ts"}
{"tokens": ["import", "{", "Profile", ",", "ExporterOptions", ",", "BaseExporter", "}", "from", "'@openprofiling/core'", ";", "import", "*", "as", "fs", "from", "'fs'", ";", "import", "{", "tmpdir", "}", "from", "'os'", ";", "import", "{", "resolve", "}", "from", "'path'", ";", "export", "interface", "FileExporterConfig", "extends", "ExporterOptions", "{", "path", ":", "string", ";", "}", "const", "defaultFileExporterConfig", "=", "{", "path", ":", "tmpdir", "(", ")", "}", ";", "export", "const", "fileExtensions", "=", "{", "'HEAP_PROFILE'", ":", "'heapprofile'", ",", "'CPU_PROFILE'", ":", "'cpuprofile'", ",", "'PERFECTO'", ":", "'json'", "}", ";", "export", "class", "FileExporter", "extends", "BaseExporter", "{", "private", "config", ":", "FileExporterConfig", "=", "defaultFileExporterConfig", ";", "constructor", "(", "options", "?", ")", "{", "super", "(", "'file'", ",", "options", ")", ";", "if", "(", "typeof", "options", "===", "'object'", ")", "{", "this", ".", "config", "=", "options", ";", "}", "}", "async", "onProfileStart", "(", "profile", ")", "{", "return", ";", "}", "async", "onProfileEnd", "(", "profile", ")", "{", "const", "extension", "=", "fileExtensions", "[", "profile", ".", "kind", "]", ";", "const", "filename", "=", "`${", "profile", ".", "kind", ".", "toLowerCase", "(", ")", "}-${", "profile", ".", "startTime", ".", "toISOString", "(", ")", "}.${", "extension", "}`", ";", "const", "targetPath", "=", "resolve", "(", "this", ".", "config", ".", "path", ",", "filename", ")", ";", "fs", ".", "writeFile", "(", "targetPath", ",", "profile", ".", "data", ",", "(", "err", ")", "=>", "{", "if", "(", "err", ")", "{", "this", ".", "logger", ".", "error", "(", "`Error while writing profile to disk`", ",", "err", ".", "message", ")", ";", "}", "else", "{", "this", ".", "logger", ".", "info", "(", "`File written to ${", "filename", "}`", ")", ";", "}", "}", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Profile", null, null, null, null, null, null, "Promise", null, "Profile", null, null, null, "string", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ErrnoException", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/vmarchaud/openprofiling-node", "path": "openprofiling-node/packages/openprofiling-exporter-file/src/file-exporter.ts", "commit_hash": "aa0fa86fa13e398b533f28a93f9d4ee1e8f419ee", "file": "file-exporter.ts"}
{"tokens": ["import", "{", "SyntaxNode", ",", "Argument", ",", "Parameter", "}", "from", "'./python-parser'", ";", "const", "comma", "=", "', '", ";", "function", "printTabbed", "(", "node", ",", "tabLevel", ")", "{", "const", "tabs", "=", "' '", ".", "repeat", "(", "4", "*", "tabLevel", ")", ";", "switch", "(", "node", ".", "type", ")", "{", "case", "'assert'", ":", "return", "tabs", "+", "'assert '", "+", "printNode", "(", "node", ".", "cond", ")", ";", "case", "'assign'", ":", "return", "(", "tabs", "+", "commaSep", "(", "node", ".", "targets", ")", "+", "' '", "+", "(", "node", ".", "op", "||", "'='", ")", "+", "' '", "+", "commaSep", "(", "node", ".", "sources", ")", ")", ";", "case", "'binop'", ":", "return", "'('", "+", "printNode", "(", "node", ".", "left", ")", "+", "node", ".", "op", "+", "printNode", "(", "node", ".", "right", ")", "+", "')'", ";", "case", "'break'", ":", "return", "tabs", "+", "'break'", ";", "case", "'call'", ":", "return", "printNode", "(", "node", ".", "func", ")", "+", "'('", "+", "node", ".", "args", ".", "map", "(", "printArg", ")", "+", "')'", ";", "case", "'class'", ":", "return", "(", "tabs", "+", "'class '", "+", "node", ".", "name", "+", "(", "node", ".", "extends", "?", "'('", "+", "commaSep", "(", "node", ".", "extends", ")", "+", "')'", ":", "''", ")", "+", "':'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", ")", ";", "case", "'comp_for'", ":", "case", "'comp_if'", ":", "throw", "'not implemented'", ";", "case", "'continue'", ":", "return", "tabs", "+", "'continue'", ";", "case", "'decorator'", ":", "return", "(", "'@'", "+", "node", ".", "decorator", "+", "(", "node", ".", "args", "?", "'('", "+", "commaSep", "(", "node", ".", "args", ")", "+", "')'", ":", "''", ")", ")", ";", "case", "'decorate'", ":", "return", "(", "tabs", "+", "lines", "(", "node", ".", "decorators", ",", "tabLevel", ")", "+", "printTabbed", "(", "node", ".", "def", ",", "tabLevel", ")", ")", ";", "case", "'def'", ":", "return", "(", "tabs", "+", "'def '", "+", "node", ".", "name", "+", "'('", "+", "node", ".", "params", ".", "map", "(", "printParam", ")", ".", "join", "(", "comma", ")", "+", "'):'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", ")", ";", "case", "'dict'", ":", "return", "'{'", "+", "node", ".", "entries", ".", "map", "(", "e", "=>", "e", ".", "k", "+", "':'", "+", "e", ".", "v", ")", "+", "'}'", ";", "case", "'dot'", ":", "return", "printNode", "(", "node", ".", "value", ")", "+", "'.'", "+", "node", ".", "name", ";", "case", "'else'", ":", "return", "tabs", "+", "'else:'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", ";", "case", "'for'", ":", "return", "(", "tabs", "+", "'for '", "+", "commaSep", "(", "node", ".", "target", ")", "+", "' in '", "+", "commaSep", "(", "node", ".", "iter", ")", "+", "':'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", "+", "(", "node", ".", "else", "?", "lines", "(", "node", ".", "else", ",", "tabLevel", "+", "1", ")", ":", "''", ")", ")", ";", "case", "'from'", ":", "return", "(", "tabs", "+", "'from '", "+", "node", ".", "base", "+", "' import '", "+", "node", ".", "imports", ".", "map", "(", "im", "=>", "im", ".", "path", "+", "(", "im", ".", "name", "?", "' as '", "+", "im", ".", "name", ":", "''", ")", ")", ".", "join", "(", "comma", ")", ")", ";", "case", "'global'", ":", "return", "tabs", "+", "'global '", "+", "node", ".", "names", ".", "join", "(", "comma", ")", ";", "case", "'if'", ":", "return", "(", "tabs", "+", "'if '", "+", "printNode", "(", "node", ".", "cond", ")", "+", "':'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", "+", "(", "node", ".", "elif", "?", "node", ".", "elif", ".", "map", "(", "elif", "=>", "tabs", "+", "'elif '", "+", "elif", ".", "cond", "+", "':'", "+", "lines", "(", "elif", ".", "code", ",", "tabLevel", "+", "1", ")", ")", ":", "''", ")", "+", "(", "node", ".", "else", "?", "tabs", "+", "'else:'", "+", "lines", "(", "node", ".", "else", ".", "code", ",", "tabLevel", "+", "1", ")", ":", "''", ")", ")", ";", "case", "'ifexpr'", ":", "return", "(", "printNode", "(", "node", ".", "then", ")", "+", "' if '", "+", "printNode", "(", "node", ".", "test", ")", "+", "' else '", "+", "printNode", "(", "node", ".", "else", ")", ")", ";", "case", "'import'", ":", "return", "(", "tabs", "+", "'import '", "+", "node", ".", "names", ".", "map", "(", "n", "=>", "n", ".", "path", "+", "(", "n", ".", "name", "?", "' as '", "+", "n", ".", "name", ":", "''", ")", ")", ".", "join", "(", "comma", ")", ")", ";", "case", "'index'", ":", "return", "printNode", "(", "node", ".", "value", ")", "+", "'['", "+", "commaSep", "(", "node", ".", "args", ")", "+", "']'", ";", "case", "'lambda'", ":", "return", "(", "'lambda '", "+", "node", ".", "args", ".", "map", "(", "printParam", ")", ".", "join", "(", "comma", ")", "+", "': '", "+", "printNode", "(", "node", ".", "code", ")", ")", ";", "case", "'list'", ":", "return", "'['", "+", "node", ".", "items", ".", "map", "(", "item", "=>", "printNode", "(", "item", ")", ")", ".", "join", "(", "comma", ")", "+", "']'", ";", "case", "'literal'", ":", "return", "typeof", "node", ".", "value", "===", "'string'", "&&", "node", ".", "value", ".", "indexOf", "(", "'\\n'", ")", ">=", "0", "?", "'\"\"'", "+", "node", ".", "value", "+", "'\"\"'", ":", "node", ".", "value", ".", "toString", "(", ")", ";", "case", "'module'", ":", "return", "lines", "(", "node", ".", "code", ",", "tabLevel", ")", ";", "case", "'name'", ":", "return", "node", ".", "id", ";", "case", "'nonlocal'", ":", "return", "tabs", "+", "'nonlocal '", "+", "node", ".", "names", ".", "join", "(", "comma", ")", ";", "case", "'raise'", ":", "return", "tabs", "+", "'raise '", "+", "printNode", "(", "node", ".", "err", ")", ";", "case", "'return'", ":", "return", "tabs", "+", "'return '", "+", "(", "node", ".", "values", "?", "commaSep", "(", "node", ".", "values", ")", ":", "''", ")", ";", "case", "'set'", ":", "return", "'{'", "+", "commaSep", "(", "node", ".", "entries", ")", "+", "'}'", ";", "case", "'slice'", ":", "return", "(", "(", "node", ".", "start", "?", "printNode", "(", "node", ".", "start", ")", ":", "''", ")", "+", "':'", "+", "(", "node", ".", "stop", "?", "printNode", "(", "node", ".", "stop", ")", ":", "''", ")", "+", "(", "node", ".", "step", "?", "':'", "+", "printNode", "(", "node", ".", "step", ")", ":", "''", ")", ")", ";", "case", "'starred'", ":", "return", "'*'", "+", "printNode", "(", "node", ".", "value", ")", ";", "case", "'try'", ":", "return", "(", "tabs", "+", "'try:'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", "+", "(", "node", ".", "excepts", "?", "node", ".", "excepts", ".", "map", "(", "ex", "=>", "tabs", "+", "'except '", "+", "(", "ex", ".", "cond", "?", "printNode", "(", "ex", ".", "cond", ")", "+", "(", "ex", ".", "name", "?", "' as '", "+", "ex", ".", "name", ":", "''", ")", ":", "''", ")", "+", "':'", "+", "lines", "(", "ex", ".", "code", ",", "tabLevel", "+", "1", ")", ")", ":", "''", ")", "+", "(", "node", ".", "else", "?", "tabs", "+", "'else:'", "+", "lines", "(", "node", ".", "else", ",", "tabLevel", "+", "1", ")", ":", "''", ")", "+", "(", "node", ".", "finally", "?", "tabs", "+", "'finally:'", "+", "lines", "(", "node", ".", "finally", ",", "tabLevel", "+", "1", ")", ":", "''", ")", ")", ";", "case", "'tuple'", ":", "return", "'('", "+", "commaSep", "(", "node", ".", "items", ")", "+", "')'", ";", "case", "'unop'", ":", "return", "node", ".", "op", "+", "'('", "+", "printNode", "(", "node", ".", "operand", ")", "+", "')'", ";", "case", "'while'", ":", "return", "(", "tabs", "+", "'while '", "+", "printNode", "(", "node", ".", "cond", ")", "+", "':'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", ")", ";", "case", "'with'", ":", "return", "(", "tabs", "+", "'with '", "+", "node", ".", "items", ".", "map", "(", "w", "=>", "w", ".", "with", "+", "(", "w", ".", "as", "?", "' as '", "+", "w", ".", "as", ":", "''", ")", ")", ".", "join", "(", "comma", ")", "+", "':'", "+", "lines", "(", "node", ".", "code", ",", "tabLevel", "+", "1", ")", ")", ";", "case", "'yield'", ":", "return", "(", "tabs", "+", "'yield '", "+", "(", "node", ".", "from", "?", "printNode", "(", "node", ".", "from", ")", ":", "''", ")", "+", "(", "node", ".", "value", "?", "commaSep", "(", "node", ".", "value", ")", ":", "''", ")", ")", ";", "}", "}", "function", "printParam", "(", "param", ")", "{", "return", "(", "(", "param", ".", "star", "?", "'*'", ":", "''", ")", "+", "(", "param", ".", "starstar", "?", "'**'", ":", "''", ")", "+", "param", ".", "name", "+", "(", "param", ".", "default_value", "?", "'='", "+", "printNode", "(", "param", ".", "default_value", ")", ":", "''", ")", "+", "(", "param", ".", "anno", "?", "printNode", "(", "param", ".", "anno", ")", ":", "''", ")", ")", ";", "}", "function", "printArg", "(", "arg", ")", "{", "return", "(", "(", "arg", ".", "kwargs", "?", "'**'", ":", "''", ")", "+", "(", "arg", ".", "varargs", "?", "'*'", ":", "''", ")", "+", "(", "arg", ".", "keyword", "?", "printNode", "(", "arg", ".", "keyword", ")", "+", "'='", ":", "''", ")", "+", "printNode", "(", "arg", ".", "actual", ")", "+", "(", "arg", ".", "loop", "?", "' for '", "+", "arg", ".", "loop", ".", "for", "+", "' in '", "+", "arg", ".", "loop", ".", "in", ":", "''", ")", ")", ";", "}", "function", "commaSep", "(", "items", ")", "{", "return", "items", ".", "map", "(", "printNode", ")", ".", "join", "(", "comma", ")", ";", "}", "function", "lines", "(", "items", ",", "tabLevel", ")", "{", "return", "items", ".", "map", "(", "i", "=>", "printTabbed", "(", "i", ",", "tabLevel", ")", ")", ".", "join", "(", "tabLevel", "===", "0", "?", "'\\n\\n'", ":", "'\\n'", ")", ";", "}", "export", "function", "printNode", "(", "node", ")", "{", "return", "printTabbed", "(", "node", ",", "0", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, "string", null, "SyntaxNode", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Parameter", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Argument", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "array", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/printNode.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "printNode.ts"}
{"tokens": ["import", "{", "parse", "as", "python3Parse", ",", "parser", "}", "from", "'./python3'", ";", "import", "{", "printNode", "}", "from", "'./printNode'", ";", "/**\n * Reset the lexer state after an error. Otherwise, parses after a failed parse can fail too.\n */", "let", "yy", "=", "parser", ".", "yy", "as", "any", ";", "let", "oldParseError", "=", "yy", ".", "parseError", ";", "oldParseError", "=", "function", "(", "text", ",", "hash", ")", "{", "this", ".", "indents", "=", "[", "0", "]", ";", "this", ".", "indent", "=", "0", ";", "this", ".", "dedents", "=", "0", ";", "this", ".", "brackets_count", "=", "0", ";", "oldParseError", ".", "call", "(", "this", ",", "text", ",", "hash", ")", ";", "}", ";", "/**\n * This is the main interface for parsing code.\n * Call this instead of the `parse` method in python3.js.\n * If the `parse` method gets an error, all later calls will throw an error.\n * This method resets the state of the `parse` method so that doesn't happen.\n */", "export", "function", "parse", "(", "program", ")", "{", "if", "(", "program", ".", "charCodeAt", "(", "0", ")", "===", "65279", ")", "{", "program", "=", "program", ".", "slice", "(", "1", ")", ";", "}", "return", "python3Parse", "(", "program", ".", "replace", "(", "/\\r/g", ",", "''", ")", "+", "'\\n'", ")", ";", "}", "export", "type", "SyntaxNode", "=", "Module", "|", "Import", "|", "From", "|", "Decorator", "|", "Decorate", "|", "Def", "|", "Parameter", "|", "Assignment", "|", "Assert", "|", "Pass", "|", "Return", "|", "Yield", "|", "Raise", "|", "Continue", "|", "Break", "|", "Global", "|", "Nonlocal", "|", "If", "|", "Else", "|", "While", "|", "For", "|", "Try", "|", "With", "|", "Call", "|", "Index", "|", "Slice", "|", "Dot", "|", "IfExpr", "|", "CompFor", "|", "CompIf", "|", "Lambda", "|", "UnaryOperator", "|", "BinaryOperator", "|", "Starred", "|", "Tuple", "|", "ListExpr", "|", "SetExpr", "|", "DictExpr", "|", "Name", "|", "Literal", "|", "Class", ";", "interface", "JisonLocation", "{", "first_line", ":", "number", ";", "first_column", ":", "number", ";", "last_line", ":", "number", ";", "last_column", ":", "number", ";", "}", "export", "interface", "Location", "extends", "JisonLocation", "{", "path", "?", ":", "string", ";", "}", "export", "function", "locationString", "(", "loc", ")", "{", "return", "`${", "loc", ".", "path", "}${", "loc", ".", "last_line", "}:${", "loc", ".", "first_column", "}-${", "loc", ".", "last_line", "}:${", "loc", ".", "last_column", "}`", ";", "}", "export", "function", "locationContains", "(", "loc1", ",", "loc2", ")", "{", "function", "contains", "(", "loc", ",", "line", ",", "col", ")", "{", "return", "(", "(", "loc", ".", "first_line", "<", "line", "||", "(", "loc", ".", "first_line", "===", "line", "&&", "loc", ".", "first_column", "<=", "col", ")", ")", "&&", "(", "line", "<", "loc", ".", "last_line", "||", "(", "line", "===", "loc", ".", "last_line", "&&", "col", "<=", "loc", ".", "last_column", ")", ")", ")", ";", "}", "return", "(", "contains", "(", "loc1", ",", "loc2", ".", "first_line", ",", "loc2", ".", "first_column", ")", "&&", "contains", "(", "loc1", ",", "loc2", ".", "last_line", ",", "loc2", ".", "last_column", ")", ")", ";", "}", "export", "interface", "Locatable", "{", "location", "?", ":", "Location", ";", "cellId", "?", ":", "string", ";", "executionCount", "?", ":", "number", ";", "}", "const", "LocatableFields", "=", "[", "'location'", ",", "'cellId'", ",", "'executionCount'", "]", ";", "export", "const", "MODULE", "=", "'module'", ";", "export", "interface", "Module", "extends", "Locatable", "{", "type", ":", "typeof", "MODULE", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "IMPORT", "=", "'import'", ";", "export", "interface", "Import", "extends", "Locatable", "{", "type", ":", "typeof", "IMPORT", ";", "names", ":", "{", "path", ":", "string", ";", "name", "?", ":", "string", ";", "location", ":", "Location", ";", "}", "[", "]", ";", "}", "export", "const", "FROM", "=", "'from'", ";", "export", "interface", "From", "extends", "Locatable", "{", "type", ":", "typeof", "FROM", ";", "base", ":", "string", ";", "imports", ":", "{", "path", ":", "string", ";", "name", ":", "string", ";", "location", ":", "Location", ";", "}", "[", "]", ";", "}", "export", "const", "DECORATOR", "=", "'decorator'", ";", "export", "interface", "Decorator", "extends", "Locatable", "{", "type", ":", "typeof", "DECORATOR", ";", "decorator", ":", "string", ";", "args", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "DECORATE", "=", "'decorate'", ";", "export", "interface", "Decorate", "extends", "Locatable", "{", "type", ":", "typeof", "DECORATE", ";", "decorators", ":", "Decorator", "[", "]", ";", "def", ":", "SyntaxNode", ";", "}", "export", "const", "DEF", "=", "'def'", ";", "export", "interface", "Def", "extends", "Locatable", "{", "type", ":", "typeof", "DEF", ";", "name", ":", "string", ";", "params", ":", "Parameter", "[", "]", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "PARAMETER", "=", "'parameter'", ";", "export", "interface", "Parameter", "extends", "Locatable", "{", "type", ":", "typeof", "PARAMETER", ";", "name", ":", "string", ";", "anno", ":", "SyntaxNode", ";", "default_value", ":", "SyntaxNode", ";", "star", ":", "boolean", ";", "starstar", ":", "boolean", ";", "}", "export", "const", "ASSIGN", "=", "'assign'", ";", "export", "interface", "Assignment", "extends", "Locatable", "{", "type", ":", "typeof", "ASSIGN", ";", "op", ":", "string", "|", "undefined", ";", "targets", ":", "SyntaxNode", "[", "]", ";", "sources", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "ASSERT", "=", "'assert'", ";", "export", "interface", "Assert", "extends", "Locatable", "{", "type", ":", "typeof", "ASSERT", ";", "cond", ":", "SyntaxNode", ";", "err", ":", "SyntaxNode", ";", "}", "export", "const", "PASS", "=", "'pass'", ";", "export", "interface", "Pass", "extends", "Locatable", "{", "type", ":", "typeof", "PASS", ";", "}", "export", "const", "RETURN", "=", "'return'", ";", "export", "interface", "Return", "extends", "Locatable", "{", "type", ":", "typeof", "RETURN", ";", "values", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "YIELD", "=", "'yield'", ";", "export", "interface", "Yield", "extends", "Locatable", "{", "type", ":", "typeof", "YIELD", ";", "value", ":", "SyntaxNode", "[", "]", ";", "from", "?", ":", "SyntaxNode", ";", "}", "export", "const", "RAISE", "=", "'raise'", ";", "export", "interface", "Raise", "extends", "Locatable", "{", "type", ":", "typeof", "RAISE", ";", "err", ":", "SyntaxNode", ";", "}", "export", "const", "BREAK", "=", "'break'", ";", "export", "interface", "Break", "extends", "Locatable", "{", "type", ":", "typeof", "BREAK", ";", "}", "export", "const", "CONTINUE", "=", "'continue'", ";", "export", "interface", "Continue", "extends", "Locatable", "{", "type", ":", "typeof", "CONTINUE", ";", "}", "export", "const", "GLOBAL", "=", "'global'", ";", "export", "interface", "Global", "extends", "Locatable", "{", "type", ":", "typeof", "GLOBAL", ";", "names", ":", "string", "[", "]", ";", "}", "export", "const", "NONLOCAL", "=", "'nonlocal'", ";", "export", "interface", "Nonlocal", "extends", "Locatable", "{", "type", ":", "typeof", "NONLOCAL", ";", "names", ":", "string", "[", "]", ";", "}", "export", "const", "IF", "=", "'if'", ";", "export", "interface", "If", "extends", "Locatable", "{", "type", ":", "typeof", "IF", ";", "cond", ":", "SyntaxNode", ";", "code", ":", "SyntaxNode", "[", "]", ";", "elif", ":", "{", "cond", ":", "SyntaxNode", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "[", "]", ";", "else", ":", "Else", ";", "}", "export", "const", "WHILE", "=", "'while'", ";", "export", "interface", "While", "extends", "Locatable", "{", "type", ":", "typeof", "WHILE", ";", "cond", ":", "SyntaxNode", ";", "code", ":", "SyntaxNode", "[", "]", ";", "else", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "ELSE", "=", "'else'", ";", "export", "interface", "Else", "extends", "Locatable", "{", "type", ":", "typeof", "ELSE", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "FOR", "=", "'for'", ";", "export", "interface", "For", "extends", "Locatable", "{", "type", ":", "typeof", "FOR", ";", "target", ":", "SyntaxNode", "[", "]", ";", "iter", ":", "SyntaxNode", "[", "]", ";", "code", ":", "SyntaxNode", "[", "]", ";", "else", "?", ":", "SyntaxNode", "[", "]", ";", "decl_location", ":", "Location", ";", "}", "export", "const", "COMPFOR", "=", "'comp_for'", ";", "export", "interface", "CompFor", "extends", "Locatable", "{", "type", ":", "typeof", "COMPFOR", ";", "for", ":", "SyntaxNode", "[", "]", ";", "in", ":", "SyntaxNode", ";", "}", "export", "const", "COMPIF", "=", "'comp_if'", ";", "export", "interface", "CompIf", "extends", "Locatable", "{", "type", ":", "typeof", "COMPIF", ";", "test", ":", "SyntaxNode", ";", "}", "export", "const", "TRY", "=", "'try'", ";", "export", "interface", "Try", "extends", "Locatable", "{", "type", ":", "typeof", "TRY", ";", "code", ":", "SyntaxNode", "[", "]", ";", "excepts", ":", "{", "cond", ":", "SyntaxNode", ";", "name", ":", "string", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "[", "]", ";", "else", ":", "SyntaxNode", "[", "]", ";", "finally", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "WITH", "=", "'with'", ";", "export", "interface", "With", "extends", "Locatable", "{", "type", ":", "typeof", "WITH", ";", "items", ":", "{", "with", ":", "SyntaxNode", ";", "as", ":", "SyntaxNode", ";", "}", "[", "]", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "CALL", "=", "'call'", ";", "export", "interface", "Call", "extends", "Locatable", "{", "type", ":", "typeof", "CALL", ";", "func", ":", "SyntaxNode", ";", "args", ":", "Argument", "[", "]", ";", "}", "export", "const", "ARG", "=", "'arg'", ";", "export", "interface", "Argument", "extends", "Locatable", "{", "type", ":", "typeof", "ARG", ";", "actual", ":", "SyntaxNode", ";", "keyword", "?", ":", "SyntaxNode", ";", "loop", "?", ":", "CompFor", ";", "varargs", "?", ":", "boolean", ";", "kwargs", "?", ":", "boolean", ";", "}", "export", "const", "INDEX", "=", "'index'", ";", "export", "interface", "Index", "extends", "Locatable", "{", "type", ":", "typeof", "INDEX", ";", "value", ":", "SyntaxNode", ";", "args", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "SLICE", "=", "'slice'", ";", "export", "interface", "Slice", "extends", "Locatable", "{", "type", ":", "typeof", "SLICE", ";", "start", "?", ":", "SyntaxNode", ";", "stop", "?", ":", "SyntaxNode", ";", "step", "?", ":", "SyntaxNode", ";", "}", "export", "const", "DOT", "=", "'dot'", ";", "export", "interface", "Dot", "extends", "Locatable", "{", "type", ":", "typeof", "DOT", ";", "value", ":", "SyntaxNode", ";", "name", ":", "string", ";", "}", "export", "const", "IFEXPR", "=", "'ifexpr'", ";", "export", "interface", "IfExpr", "extends", "Locatable", "{", "type", ":", "typeof", "IFEXPR", ";", "test", ":", "SyntaxNode", ";", "then", ":", "SyntaxNode", ";", "else", ":", "SyntaxNode", ";", "}", "export", "const", "LAMBDA", "=", "'lambda'", ";", "export", "interface", "Lambda", "extends", "Locatable", "{", "type", ":", "typeof", "LAMBDA", ";", "args", ":", "Parameter", "[", "]", ";", "code", ":", "SyntaxNode", ";", "}", "export", "const", "UNOP", "=", "'unop'", ";", "export", "interface", "UnaryOperator", "extends", "Locatable", "{", "type", ":", "typeof", "UNOP", ";", "op", ":", "string", ";", "operand", ":", "SyntaxNode", ";", "}", "export", "const", "BINOP", "=", "'binop'", ";", "export", "interface", "BinaryOperator", "extends", "Locatable", "{", "type", ":", "typeof", "BINOP", ";", "op", ":", "string", ";", "left", ":", "SyntaxNode", ";", "right", ":", "SyntaxNode", ";", "}", "export", "const", "STARRED", "=", "'starred'", ";", "export", "interface", "Starred", "extends", "Locatable", "{", "type", ":", "typeof", "STARRED", ";", "value", ":", "SyntaxNode", ";", "}", "export", "const", "TUPLE", "=", "'tuple'", ";", "export", "interface", "Tuple", "extends", "Locatable", "{", "type", ":", "typeof", "TUPLE", ";", "items", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "LIST", "=", "'list'", ";", "export", "interface", "ListExpr", "extends", "Locatable", "{", "type", ":", "typeof", "LIST", ";", "items", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "SET", "=", "'set'", ";", "export", "interface", "SetExpr", "extends", "Locatable", "{", "type", ":", "typeof", "SET", ";", "entries", ":", "SyntaxNode", "[", "]", ";", "comp_for", "?", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "DICT", "=", "'dict'", ";", "export", "interface", "DictExpr", "extends", "Locatable", "{", "type", ":", "typeof", "DICT", ";", "entries", ":", "{", "k", ":", "SyntaxNode", ";", "v", ":", "SyntaxNode", ";", "}", "[", "]", ";", "comp_for", "?", ":", "SyntaxNode", "[", "]", ";", "}", "export", "const", "NAME", "=", "'name'", ";", "export", "interface", "Name", "extends", "Locatable", "{", "type", ":", "typeof", "NAME", ";", "id", ":", "string", ";", "}", "export", "const", "LITERAL", "=", "'literal'", ";", "export", "interface", "Literal", "extends", "Locatable", "{", "type", ":", "typeof", "LITERAL", ";", "value", ":", "any", ";", "}", "export", "const", "CLASS", "=", "'class'", ";", "export", "interface", "Class", "extends", "Locatable", "{", "type", ":", "typeof", "CLASS", ";", "name", ":", "string", ";", "extends", ":", "SyntaxNode", "[", "]", ";", "code", ":", "SyntaxNode", "[", "]", ";", "}", "/**\n * returns whether two syntax nodes are semantically equivalent\n */", "export", "function", "isEquivalent", "(", "node1", ",", "node2", ")", "{", "if", "(", "!", "node1", "||", "!", "node2", ")", "{", "return", "node1", "===", "node2", ";", "}", "return", "printNode", "(", "node1", ")", "===", "printNode", "(", "node2", ")", ";", "}", "export", "function", "flatten", "<", "T", ">", "(", "arrayArrays", ")", "{", "return", "[", "]", ".", "concat", "(", "...", "arrayArrays", ")", ";", "}", "/**\n * Listener for pre-order traversal of the parse tree.\n */", "export", "interface", "WalkListener", "{", "/**\n     * Called whenever a node is entered.\n     */", "onEnterNode", "?", "(", "node", ",", "ancestors", ")", ":", "void", ";", "/**\n     * Called whenever a node is exited.\n     */", "onExitNode", "?", "(", "node", ",", "ancestors", ")", ":", "void", ";", "}", "/**\n * Preorder tree traversal with optional listener.\n */", "export", "function", "walk", "(", "node", ",", "walkListener", "?", ")", "{", "return", "walkRecursive", "(", "node", ",", "[", "]", ",", "walkListener", ")", ";", "}", "/**\n * Recursive implementation of pre-order tree walk.\n */", "function", "walkRecursive", "(", "node", ",", "ancestors", "?", ",", "walkListener", "?", ")", "{", "if", "(", "!", "node", ")", "{", "console", ".", "error", "(", "'Node undefined. Ancestors:'", ",", "ancestors", ")", ";", "return", "[", "]", ";", "}", "ancestors", ".", "push", "(", "node", ")", ";", "if", "(", "walkListener", "&&", "walkListener", ".", "onEnterNode", ")", "{", "walkListener", ".", "onEnterNode", "(", "node", ",", "ancestors", ")", ";", "}", "let", "children", "=", "[", "]", ";", "switch", "(", "node", ".", "type", ")", "{", "case", "MODULE", ":", "case", "DEF", ":", "case", "CLASS", ":", "children", "=", "node", ".", "code", ";", "break", ";", "case", "IF", ":", "children", "=", "[", "node", ".", "cond", "]", ".", "concat", "(", "node", ".", "code", ")", ".", "concat", "(", "node", ".", "elif", "?", "flatten", "(", "node", ".", "elif", ".", "map", "(", "e", "=>", "[", "e", ".", "cond", "]", ".", "concat", "(", "e", ".", "code", ")", ")", ")", ":", "[", "]", ")", ".", "concat", "(", "node", ".", "else", "?", "[", "node", ".", "else", "]", ":", "[", "]", ")", ";", "break", ";", "case", "ELSE", ":", "children", "=", "node", ".", "code", ";", "break", ";", "case", "WHILE", ":", "children", "=", "[", "node", ".", "cond", "]", ".", "concat", "(", "node", ".", "code", ")", ";", "break", ";", "case", "WITH", ":", "children", "=", "flatten", "(", "node", ".", "items", ".", "map", "(", "r", "=>", "[", "r", ".", "with", ",", "r", ".", "as", "]", ")", ")", ".", "concat", "(", "node", ".", "code", ")", ";", "break", ";", "case", "FOR", ":", "children", "=", "node", ".", "iter", ".", "concat", "(", "node", ".", "target", ")", ".", "concat", "(", "node", ".", "code", ")", ";", "break", ";", "case", "TRY", ":", "children", "=", "node", ".", "code", ".", "concat", "(", "flatten", "(", "(", "node", ".", "excepts", "||", "[", "]", ")", ".", "map", "(", "e", "=>", "(", "e", ".", "cond", "?", "[", "e", ".", "cond", "]", ":", "[", "]", ")", ".", "concat", "(", "e", ".", "code", ")", ")", ")", ")", ".", "concat", "(", "node", ".", "else", "||", "[", "]", ")", ".", "concat", "(", "node", ".", "finally", "||", "[", "]", ")", ";", "break", ";", "case", "DECORATE", ":", "children", "=", "[", "node", ".", "def", "]", ";", "break", ";", "case", "LAMBDA", ":", "children", "=", "[", "node", ".", "code", "]", ";", "break", ";", "case", "CALL", ":", "children", "=", "[", "node", ".", "func", "]", ".", "concat", "(", "node", ".", "args", ".", "map", "(", "a", "=>", "a", ".", "actual", ")", ")", ";", "break", ";", "case", "IFEXPR", ":", "children", "=", "[", "node", ".", "test", ",", "node", ".", "then", ",", "node", ".", "else", "]", ";", "break", ";", "case", "COMPFOR", ":", "children", "=", "node", ".", "for", ".", "concat", "(", "[", "node", ".", "in", "]", ")", ";", "break", ";", "case", "UNOP", ":", "children", "=", "[", "node", ".", "operand", "]", ";", "break", ";", "case", "BINOP", ":", "children", "=", "[", "node", ".", "left", ",", "node", ".", "right", "]", ";", "break", ";", "case", "STARRED", ":", "children", "=", "[", "node", ".", "value", "]", ";", "break", ";", "case", "SET", ":", "children", "=", "node", ".", "entries", ".", "concat", "(", "node", ".", "comp_for", "?", "node", ".", "comp_for", ":", "[", "]", ")", ";", "break", ";", "case", "LIST", ":", "children", "=", "node", ".", "items", ";", "break", ";", "case", "TUPLE", ":", "children", "=", "node", ".", "items", ";", "break", ";", "case", "DICT", ":", "children", "=", "flatten", "(", "node", ".", "entries", ".", "map", "(", "p", "=>", "[", "p", ".", "k", ",", "p", ".", "v", "]", ")", ")", ".", "concat", "(", "node", ".", "comp_for", "?", "node", ".", "comp_for", ":", "[", "]", ")", ";", "break", ";", "case", "ASSIGN", ":", "if", "(", "!", "node", ".", "sources", ")", "console", ".", "log", "(", "node", ")", ";", "children", "=", "node", ".", "sources", ".", "concat", "(", "node", ".", "targets", ")", ";", "break", ";", "case", "ASSERT", ":", "children", "=", "[", "node", ".", "cond", "]", ".", "concat", "(", "node", ".", "err", "?", "[", "node", ".", "err", "]", ":", "[", "]", ")", ";", "break", ";", "case", "DOT", ":", "children", "=", "[", "node", ".", "value", "]", ";", "break", ";", "case", "INDEX", ":", "children", "=", "[", "node", ".", "value", "]", ".", "concat", "(", "node", ".", "args", ")", ";", "break", ";", "case", "SLICE", ":", "children", "=", "(", "node", ".", "start", "?", "[", "node", ".", "start", "]", ":", "[", "]", ")", ".", "concat", "(", "node", ".", "stop", "?", "[", "node", ".", "stop", "]", ":", "[", "]", ")", ".", "concat", "(", "node", ".", "step", "?", "[", "node", ".", "step", "]", ":", "[", "]", ")", ";", "break", ";", "case", "COMPFOR", ":", "children", "=", "node", ".", "for", ".", "concat", "(", "[", "node", ".", "in", "]", ")", ";", "break", ";", "case", "COMPIF", ":", "children", "=", "[", "node", ".", "test", "]", ";", "break", ";", "case", "YIELD", ":", "children", "=", "node", ".", "value", "?", "node", ".", "value", ":", "[", "]", ";", "break", ";", "case", "RETURN", ":", "children", "=", "node", ".", "values", "?", "node", ".", "values", ":", "[", "]", ";", "break", ";", "case", "RAISE", ":", "children", "=", "node", ".", "err", "?", "[", "node", ".", "err", "]", ":", "[", "]", ";", "break", ";", "case", "IFEXPR", ":", "children", "=", "[", "node", ".", "test", ",", "node", ".", "then", ",", "node", ".", "else", "]", ";", "break", ";", "}", "let", "nodes", "=", "[", "node", "]", ";", "if", "(", "children", ".", "some", "(", "c", "=>", "!", "c", ")", ")", "{", "console", ".", "log", "(", "'BAD CHILDREN'", ",", "node", ")", ";", "}", "let", "subtreeNodes", "=", "flatten", "(", "children", ".", "map", "(", "node", "=>", "walkRecursive", "(", "node", ",", "ancestors", ",", "walkListener", ")", ")", ")", ";", "nodes", "=", "nodes", ".", "concat", "(", "subtreeNodes", ")", ";", "if", "(", "walkListener", "&&", "walkListener", ".", "onExitNode", ")", "{", "walkListener", ".", "onExitNode", "(", "node", ",", "ancestors", ")", ";", "}", "ancestors", ".", "pop", "(", ")", ";", "return", "nodes", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "String", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Module", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "Location", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Location", null, "Location", null, null, null, "boolean", null, "Location", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "SyntaxNode", null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SyntaxNode", null, "array", null, null, null, null, null, null, null, null, "SyntaxNode", null, "array", null, null, null, null, null, null, null, null, "array", null, "SyntaxNode", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "SyntaxNode", null, "array", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/python-parser.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "python-parser.ts"}
{"tokens": ["export", "class", "Set", "<", "T", ">", "{", "private", "_items", ":", "{", "[", "index", "]", ":", "T", ";", "}", "=", "{", "}", ";", "constructor", "(", "private", "getIdentifier", ",", "...", "items", ")", "{", "this", ".", "getIdentifier", "=", "getIdentifier", ";", "this", ".", "_items", "=", "{", "}", ";", "this", ".", "add", "(", "...", "items", ")", ";", "}", "public", "get", "size", "(", ")", "{", "return", "this", ".", "items", ".", "length", ";", "}", "public", "add", "(", "...", "items", ")", "{", "items", ".", "forEach", "(", "item", "=>", "(", "this", ".", "_items", "[", "this", ".", "getIdentifier", "(", "item", ")", "]", "=", "item", ")", ")", ";", "}", "public", "remove", "(", "item", ")", "{", "if", "(", "this", ".", "has", "(", "item", ")", ")", "{", "delete", "this", ".", "_items", "[", "this", ".", "getIdentifier", "(", "item", ")", "]", ";", "}", "}", "public", "pop", "(", ")", "{", "if", "(", "this", ".", "empty", ")", "{", "throw", "'empty'", ";", "}", "const", "someKey", "=", "Object", ".", "keys", "(", "this", ".", "_items", ")", "[", "0", "]", ";", "const", "result", "=", "this", ".", "_items", "[", "someKey", "]", ";", "this", ".", "remove", "(", "result", ")", ";", "return", "result", ";", "}", "public", "has", "(", "item", ")", "{", "return", "this", ".", "_items", "[", "this", ".", "getIdentifier", "(", "item", ")", "]", "!=", "undefined", ";", "}", "public", "get", "items", "(", ")", ":", "T", "[", "]", "{", "return", "Object", ".", "keys", "(", "this", ".", "_items", ")", ".", "map", "(", "k", "=>", "this", ".", "_items", "[", "k", "]", ")", ";", "}", "public", "equals", "(", "that", ")", "{", "return", "(", "this", ".", "size", "==", "that", ".", "size", "&&", "this", ".", "items", ".", "every", "(", "item", "=>", "that", ".", "has", "(", "item", ")", ")", ")", ";", "}", "public", "get", "empty", "(", ")", ":", "boolean", "{", "return", "Object", ".", "keys", "(", "this", ".", "_items", ")", ".", "length", "==", "0", ";", "}", "public", "union", "(", "...", "those", ")", "{", "return", "new", "Set", "(", "this", ".", "getIdentifier", ",", "...", "this", ".", "items", ".", "concat", "(", "...", "those", ".", "map", "(", "that", "=>", "that", ".", "items", ")", ")", ")", ";", "}", "public", "intersect", "(", "that", ")", "{", "return", "new", "Set", "(", "this", ".", "getIdentifier", ",", "...", "this", ".", "items", ".", "filter", "(", "item", "=>", "that", ".", "has", "(", "item", ")", ")", ")", ";", "}", "public", "filter", "(", "predicate", ")", "{", "return", "new", "Set", "(", "this", ".", "getIdentifier", ",", "...", "this", ".", "items", ".", "filter", "(", "predicate", ")", ")", ";", "}", "public", "map", "<", "U", ">", "(", "getIdentifier", ",", "transform", ")", "{", "return", "new", "Set", "(", "getIdentifier", ",", "...", "this", ".", "items", ".", "map", "(", "transform", ")", ")", ";", "}", "public", "mapSame", "(", "transform", ")", "{", "return", "new", "Set", "(", "this", ".", "getIdentifier", ",", "...", "this", ".", "items", ".", "map", "(", "transform", ")", ")", ";", "}", "public", "some", "(", "predicate", ")", "{", "return", "this", ".", "items", ".", "some", "(", "predicate", ")", ";", "}", "public", "minus", "(", "that", ")", "{", "return", "new", "Set", "(", "this", ".", "getIdentifier", ",", "...", "this", ".", "items", ".", "filter", "(", "x", "=>", "!", "that", ".", "has", "(", "x", ")", ")", ")", ";", "}", "public", "take", "(", ")", "{", "if", "(", "this", ".", "empty", ")", "{", "throw", "'cannot take from an empty set'", ";", "}", "const", "first", "=", "parseInt", "(", "Object", ".", "keys", "(", "this", ".", "_items", ")", "[", "0", "]", ")", ";", "const", "result", "=", "this", ".", "_items", "[", "first", "]", ";", "this", ".", "remove", "(", "result", ")", ";", "return", "result", ";", "}", "public", "product", "(", "that", ")", "{", "return", "new", "Set", "(", "(", "[", "x", ",", "y", "]", ")", "=>", "this", ".", "getIdentifier", "(", "x", ")", "+", "that", ".", "getIdentifier", "(", "y", ")", ",", "...", "flatten", "(", "...", "this", ".", "items", ".", "map", "(", "x", "=>", "flatten", "(", "that", ".", "items", ".", "map", "<", "[", "T", ",", "T", "]", ">", "(", "y", "=>", "[", "x", ",", "y", "]", ")", ")", ")", ")", ")", ";", "}", "}", "export", "class", "StringSet", "extends", "Set", "<", "string", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "s", "=>", "s", ",", "...", "items", ")", ";", "}", "}", "export", "class", "NumberSet", "extends", "Set", "<", "number", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "n", "=>", "n", ".", "toString", "(", ")", ",", "...", "items", ")", ";", "}", "}", "export", "function", "range", "(", "min", ",", "max", ")", "{", "const", "numbers", "=", "[", "]", ";", "for", "(", "var", "i", "=", "min", ";", "i", "<", "max", ";", "i", "++", ")", "{", "numbers", ".", "push", "(", "i", ")", ";", "}", "return", "new", "NumberSet", "(", "...", "numbers", ")", ";", "}", "function", "flatten", "<", "T", ">", "(", "...", "items", ")", "{", "return", "[", "]", ".", "concat", "(", "...", "items", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, null, null, "string", null, "U", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "number", null, "number", null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/set.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "set.ts"}
{"tokens": ["import", "*", "as", "builtins", "from", "\"./__builtins__.json\"", ";", "import", "*", "as", "random", "from", "\"./random.json\"", ";", "import", "*", "as", "matplotlib", "from", "\"./matplotlib.json\"", ";", "import", "*", "as", "pandas", "from", "\"./pandas.json\"", ";", "import", "*", "as", "sklearn", "from", "\"./sklearn.json\"", ";", "import", "*", "as", "numpy", "from", "\"./numpy.json\"", ";", "export", "interface", "FunctionSpec", "{", "name", ":", "string", ";", "updates", "?", ":", "(", "string", "|", "number", ")", "[", "]", ";", "reads", "?", ":", "string", "[", "]", ";", "returns", "?", ":", "string", ";", "returnsType", "?", ":", "TypeSpec", "<", "FunctionSpec", ">", ";", "higherorder", "?", ":", "number", ";", "}", "export", "type", "FunctionDescription", "=", "string", "|", "FunctionSpec", ";", "export", "interface", "TypeSpec", "<", "FD", ">", "{", "methods", "?", ":", "FD", "[", "]", ";", "}", "export", "interface", "ModuleSpec", "<", "FD", ">", "extends", "TypeSpec", "<", "FD", ">", "{", "functions", "?", ":", "FD", "[", "]", ";", "modules", "?", ":", "ModuleMap", "<", "FD", ">", ";", "types", "?", ":", "{", "[", "typeName", "]", ":", "TypeSpec", "<", "FD", ">", ";", "}", ";", "}", "export", "interface", "ModuleMap", "<", "FD", ">", "{", "[", "moduleName", "]", ":", "ModuleSpec", "<", "FD", ">", ";", "}", "export", "type", "JsonSpecs", "=", "ModuleMap", "<", "FunctionDescription", ">", ";", "export", "const", "DefaultSpecs", "=", "{", "...", "builtins", ",", "...", "random", ",", "...", "matplotlib", ",", "...", "pandas", ",", "...", "sklearn", ",", "...", "numpy", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/specs/index.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "index.ts"}
{"tokens": ["/**\n * Result of rewriting a magic line.\n */", "export", "type", "Rewrite", "=", "{", "text", "?", ":", "string", ";", "annotations", "?", ":", "MagicAnnotation", "[", "]", ";", "}", ";", "/**\n * An annotation to hold metadata about what a magic is doing.\n */", "export", "type", "MagicAnnotation", "=", "{", "key", ":", "string", ";", "value", ":", "string", ";", "}", ";", "/**\n * Position of a text match for magics.\n */", "export", "type", "MatchPosition", "=", "[", "{", "line", ":", "number", ";", "col", ":", "number", ";", "}", ",", "{", "line", ":", "number", ";", "col", ":", "number", ";", "}", "]", ";", "/**\n * Interface for command-specific magic rewrites.\n */", "export", "interface", "LineMagicRewriter", "{", "/**\n     * Name of the magic command this will apply to.\n     */", "commandName", ":", "string", ";", "param", "matchedText", "param", "magicStmt", "param", "postion", "return", "rewrite", "(", "matchedText", ",", "magicStmt", ",", "position", ")", ":", "Rewrite", ";", "}", "/**\n * Utility to rewrite IPython code to remove magics.\n * Should be applied at to cells, not the entire program, to properly handle cell magics.\n * One of the most important aspects of the rewriter is that it shouldn't change the line number\n * of any of the statements in the program. If it does, this will make it impossible to\n * map back from the results of code analysis to the relevant code in the editor.\n */", "export", "class", "MagicsRewriter", "{", "/**\n     * Construct a magics rewriter.\n     */", "constructor", "(", "lineMagicRewriters", "?", ")", "{", "this", ".", "_lineMagicRewriters", "=", "lineMagicRewriters", "||", "this", ".", "_defaultLineMagicRewriters", ";", "}", "/**\n     * Rewrite code so that it doesn't contain magics.\n     */", "rewrite", "(", "text", ",", "lineMagicRewriters", "?", ")", "{", "text", "=", "this", ".", "rewriteCellMagic", "(", "text", ")", ";", "text", "=", "this", ".", "rewriteLineMagic", "(", "text", ",", "this", ".", "_lineMagicRewriters", ")", ";", "return", "text", ";", "}", "/**\n     * Default rewrite rule for cell magics.\n     */", "rewriteCellMagic", "(", "text", ")", "{", "if", "(", "text", ".", "match", "(", "/^[^#\\s]*\\s*%%/gm", ")", ")", "{", "return", "text", ".", "split", "(", "'\\n'", ")", ".", "map", "(", "l", "=>", "'##'", "+", "l", ")", ".", "join", "(", "'\\n'", ")", ";", "}", "return", "text", ";", "}", "/**\n     * Default rewrite rule for line magics.\n     */", "rewriteLineMagic", "(", "text", ",", "lineMagicRewriters", "?", ")", "{", "let", "lines", "=", "text", ".", "split", "(", "'\\n'", ")", ";", "let", "lastLineStart", "=", "0", ";", "let", "lineStarts", "=", "lines", ".", "map", "(", "(", "line", ",", "i", ")", "=>", "{", "if", "(", "i", "==", "0", ")", "{", "return", "0", ";", "}", "let", "lineStart", "=", "lastLineStart", "+", "lines", "[", "i", "-", "1", "]", ".", "length", "+", "1", ";", "lastLineStart", "=", "lineStart", ";", "return", "lineStart", ";", "}", ")", ";", "return", "text", ".", "replace", "(", "/^\\s*(%(?:\\\\\\s*\\n|[^\\n])+)/gm", ",", "(", "match", ",", "magicStmt", ")", "=>", "{", "let", "startLine", "=", "-", "1", ",", "startCol", "=", "-", "1", ";", "let", "endLine", "=", "-", "1", ",", "endCol", "=", "-", "1", ";", "let", "offset", "=", "match", ".", "length", "-", "magicStmt", ".", "length", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "lineStarts", ".", "length", ";", "i", "++", ")", "{", "if", "(", "offset", ">=", "lineStarts", "[", "i", "]", ")", "{", "startLine", "=", "i", ";", "startCol", "=", "offset", "-", "lineStarts", "[", "i", "]", ";", "}", "if", "(", "offset", "+", "magicStmt", ".", "length", ">=", "lineStarts", "[", "i", "]", ")", "{", "endLine", "=", "i", ";", "endCol", "=", "offset", "+", "magicStmt", ".", "length", "-", "lineStarts", "[", "i", "]", ";", "}", "}", "let", "position", "=", "[", "{", "line", ":", "startLine", ",", "col", ":", "startCol", "}", ",", "{", "line", ":", "endLine", ",", "col", ":", "endCol", "}", ",", "]", ";", "let", "magicStmtCleaned", "=", "magicStmt", ".", "replace", "(", "/\\\\\\s*\\n/g", ",", "''", ")", ";", "let", "commandMatch", "=", "magicStmtCleaned", ".", "match", "(", "/^%(\\w+).*/", ")", ";", "let", "rewriteText", ";", "let", "annotations", "=", "[", "]", ";", "if", "(", "commandMatch", "&&", "commandMatch", ".", "length", ">=", "2", ")", "{", "let", "command", "=", "commandMatch", "[", "1", "]", ";", "if", "(", "lineMagicRewriters", ")", "{", "for", "(", "let", "lineMagicRewriter", "of", "lineMagicRewriters", ")", "{", "if", "(", "lineMagicRewriter", ".", "commandName", "==", "command", ")", "{", "let", "rewrite", "=", "lineMagicRewriter", ".", "rewrite", "(", "match", ",", "magicStmtCleaned", ",", "position", ")", ";", "if", "(", "rewrite", ".", "text", ")", "{", "rewriteText", "=", "rewrite", ".", "text", ";", "}", "if", "(", "rewrite", ".", "annotations", ")", "{", "annotations", "=", "annotations", ".", "concat", "(", "rewrite", ".", "annotations", ")", ";", "}", "break", ";", "}", "}", "}", "}", "if", "(", "!", "rewriteText", ")", "{", "rewriteText", "=", "match", ".", "split", "(", "'\\n'", ")", ".", "map", "(", "s", "=>", "'#'", "+", "s", ")", ".", "join", "(", "'\\n'", ")", ";", "}", "for", "(", "let", "annotation", "of", "annotations", ")", "{", "rewriteText", "=", "\"'''\"", "+", "annotation", ".", "key", "+", "': '", "+", "annotation", ".", "value", "+", "\"'''\"", "+", "' '", "+", "rewriteText", ";", "}", "return", "rewriteText", ";", "}", ")", ";", "}", "private", "_lineMagicRewriters", ":", "LineMagicRewriter", "[", "]", ";", "private", "_defaultLineMagicRewriters", "=", "[", "new", "TimeLineMagicRewriter", "(", ")", ",", "new", "PylabLineMagicRewriter", "(", ")", ",", "]", ";", "}", "/**\n * Line magic rewriter for the \"time\" magic.\n */", "export", "class", "TimeLineMagicRewriter", "implements", "LineMagicRewriter", "{", "commandName", ":", "string", "=", "'time'", ";", "rewrite", "(", "matchedText", ",", "magicStmt", ",", "position", ")", "{", "return", "{", "text", ":", "matchedText", ".", "replace", "(", "/^\\s*%time/", ",", "match", "=>", "{", "return", "'\"'", "+", "' '", ".", "repeat", "(", "match", ".", "length", "-", "2", ")", "+", "'\"'", ";", "}", ")", ",", "}", ";", "}", "}", "/**\n * Line magic rewriter for the \"pylab\" magic.\n */", "export", "class", "PylabLineMagicRewriter", "implements", "LineMagicRewriter", "{", "commandName", ":", "string", "=", "'pylab'", ";", "rewrite", "(", "matchedText", ",", "magicStmt", ",", "position", ")", "{", "let", "defData", "=", "[", "'numpy'", ",", "'matplotlib'", ",", "'pylab'", ",", "'mlab'", ",", "'pyplot'", ",", "'np'", ",", "'plt'", ",", "'display'", ",", "'figsize'", ",", "'getfigs'", ",", "]", ".", "map", "(", "symbolName", "=>", "{", "return", "{", "name", ":", "symbolName", ",", "pos", ":", "[", "[", "position", "[", "0", "]", ".", "line", ",", "position", "[", "0", "]", ".", "col", "]", ",", "[", "position", "[", "1", "]", ".", "line", ",", "position", "[", "1", "]", ".", "col", "]", ",", "]", ",", "}", ";", "}", ")", ";", "return", "{", "annotations", ":", "[", "{", "key", ":", "'defs'", ",", "value", ":", "JSON", ".", "stringify", "(", "defData", ")", "}", "]", ",", "}", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/rewrite-magics.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "rewrite-magics.ts"}
{"tokens": ["import", "{", "Set", "}", "from", "\".\"", ";", "export", "class", "Graph", "<", "T", ">", "{", "private", "outgoing", "=", "new", "Map", "<", "T", ",", "Set", "<", "T", ">", ">", "(", ")", ";", "private", "incoming", "=", "new", "Map", "<", "T", ",", "Set", "<", "T", ">", ">", "(", ")", ";", "private", "_nodes", ":", "Set", "<", "T", ">", ";", "constructor", "(", "private", "getIdentifier", ")", "{", "this", ".", "_nodes", "=", "new", "Set", "(", "getIdentifier", ")", ";", "}", "public", "addEdge", "(", "fromNode", ",", "toNode", ")", "{", "this", ".", "_nodes", ".", "add", "(", "fromNode", ")", ";", "this", ".", "_nodes", ".", "add", "(", "toNode", ")", ";", "if", "(", "!", "this", ".", "outgoing", ".", "has", "(", "fromNode", ")", ")", "{", "this", ".", "outgoing", ".", "set", "(", "fromNode", ",", "new", "Set", "<", "T", ">", "(", "this", ".", "getIdentifier", ")", ")", ";", "}", "if", "(", "!", "this", ".", "incoming", ".", "has", "(", "toNode", ")", ")", "{", "this", ".", "incoming", ".", "set", "(", "toNode", ",", "new", "Set", "<", "T", ">", "(", "this", ".", "getIdentifier", ")", ")", ";", "}", "this", ".", "outgoing", ".", "get", "(", "fromNode", ")", ".", "add", "(", "toNode", ")", ";", "this", ".", "incoming", ".", "get", "(", "toNode", ")", ".", "add", "(", "fromNode", ")", ";", "}", "public", "get", "nodes", "(", ")", "{", "return", "this", ".", "_nodes", ".", "items", ";", "}", "public", "topoSort", "(", ")", "{", "const", "sorted", "=", "[", "]", ";", "const", "work", "=", "new", "Set", "(", "this", ".", "getIdentifier", ",", "...", "this", ".", "nodes", ".", "filter", "(", "n", "=>", "!", "this", ".", "incoming", ".", "has", "(", "n", ")", ")", ")", ";", "while", "(", "!", "work", ".", "empty", ")", "{", "const", "n", "=", "work", ".", "pop", "(", ")", ";", "sorted", ".", "push", "(", "n", ")", ";", "if", "(", "this", ".", "outgoing", ".", "has", "(", "n", ")", ")", "{", "this", ".", "outgoing", ".", "get", "(", "n", ")", ".", "items", ".", "forEach", "(", "m", "=>", "{", "this", ".", "outgoing", ".", "get", "(", "n", ")", ".", "remove", "(", "m", ")", ";", "this", ".", "incoming", ".", "get", "(", "m", ")", ".", "remove", "(", "n", ")", ";", "if", "(", "this", ".", "incoming", ".", "get", "(", "m", ")", ".", "empty", ")", "{", "work", ".", "add", "(", "m", ")", ";", "}", "}", ")", ";", "}", "}", "return", "sorted", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "T", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/graph.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "graph.ts"}
{"tokens": ["import", "{", "Cell", "}", "from", "'./cell'", ";", "import", "*", "as", "ast", "from", "'./python-parser'", ";", "import", "{", "DataflowAnalyzer", ",", "Ref", ",", "RefSet", "}", "from", "'./data-flow'", ";", "import", "{", "MagicsRewriter", "}", "from", "'./rewrite-magics'", ";", "import", "{", "Set", ",", "NumberSet", ",", "StringSet", "}", "from", "'./set'", ";", "import", "{", "Graph", "}", "from", "'./graph'", ";", "/**\n * Maps to find out what line numbers over a program correspond to what cells.\n */", "export", "type", "CellToLineMap", "=", "{", "[", "cellExecutionEventId", "]", ":", "NumberSet", ";", "}", ";", "export", "type", "LineToCellMap", "=", "{", "[", "line", "]", ":", "Cell", ";", "}", ";", "const", "magicsRewriter", "=", "new", "MagicsRewriter", "(", ")", ";", "/**\n * A program built from cells.\n */", "export", "class", "Program", "{", "/**\n     * Construct a program.\n     */", "constructor", "(", "cellPrograms", ")", "{", "let", "currentLine", "=", "1", ";", "this", ".", "tree", "=", "{", "code", ":", "[", "]", ",", "type", ":", "ast", ".", "MODULE", "}", ";", "cellPrograms", ".", "forEach", "(", "cp", "=>", "{", "let", "cell", "=", "cp", ".", "cell", ";", "let", "cellLength", "=", "cell", ".", "text", ".", "split", "(", "'\\n'", ")", ".", "length", ";", "let", "cellLines", "=", "[", "]", ";", "for", "(", "let", "l", "=", "0", ";", "l", "<", "cellLength", ";", "l", "++", ")", "{", "cellLines", ".", "push", "(", "currentLine", "+", "l", ")", ";", "}", "cellLines", ".", "forEach", "(", "l", "=>", "{", "this", ".", "lineToCellMap", "[", "l", "]", "=", "cell", ";", "if", "(", "!", "this", ".", "cellToLineMap", "[", "cell", ".", "executionEventId", "]", ")", "{", "this", ".", "cellToLineMap", "[", "cell", ".", "executionEventId", "]", "=", "new", "NumberSet", "(", ")", ";", "}", "this", ".", "cellToLineMap", "[", "cell", ".", "executionEventId", "]", ".", "add", "(", "l", ")", ";", "}", ")", ";", "currentLine", "+=", "cellLength", ";", "this", ".", "tree", ".", "code", ".", "push", "(", "...", "shiftStatementLines", "(", "cp", ".", "statements", ",", "Math", ".", "min", "(", "...", "cellLines", ")", "-", "1", ")", ")", ";", "}", ")", ";", "this", ".", "text", "=", "cellPrograms", ".", "map", "(", "cp", "=>", "magicsRewriter", ".", "rewrite", "(", "cp", ".", "cell", ".", "text", "+", "'\\n'", ")", ")", ".", "join", "(", "''", ")", ";", "}", "readonly", "text", ":", "string", ";", "readonly", "tree", ":", "ast", ".", "Module", ";", "readonly", "cellToLineMap", ":", "CellToLineMap", "=", "{", "}", ";", "readonly", "lineToCellMap", ":", "LineToCellMap", "=", "{", "}", ";", "}", "function", "shiftStatementLines", "(", "stmts", ",", "delta", ")", "{", "return", "stmts", ".", "map", "(", "statement", "=>", "{", "let", "statementCopy", "=", "JSON", ".", "parse", "(", "JSON", ".", "stringify", "(", "statement", ")", ")", ";", "for", "(", "let", "node", "of", "ast", ".", "walk", "(", "statementCopy", ")", ")", "{", "if", "(", "node", ".", "location", ")", "{", "node", ".", "location", "=", "shiftLines", "(", "node", ".", "location", ",", "delta", ")", ";", "}", "if", "(", "node", ".", "type", "==", "ast", ".", "FOR", ")", "{", "node", ".", "decl_location", "=", "shiftLines", "(", "node", ".", "decl_location", ",", "delta", ")", ";", "}", "}", "return", "statementCopy", ";", "}", ")", ";", "}", "function", "shiftLines", "(", "loc", ",", "delta", ")", "{", "return", "Object", ".", "assign", "(", "{", "}", ",", "loc", ",", "{", "first_line", ":", "loc", ".", "first_line", "+", "delta", ",", "first_column", ":", "loc", ".", "first_column", ",", "last_line", ":", "loc", ".", "last_line", "+", "delta", ",", "last_column", ":", "loc", ".", "last_column", "}", ")", ";", "}", "/**\n * Program fragment for a cell. Used to cache parsing results.\n */", "export", "class", "CellProgram", "{", "/**\n     * Construct a cell program\n     */", "constructor", "(", "cell", ",", "statements", ",", "defs", ",", "uses", ",", "hasError", ")", "{", "this", ".", "cell", "=", "cell", ";", "this", ".", "statements", "=", "statements", ";", "this", ".", "defs", "=", "defs", ";", "this", ".", "uses", "=", "uses", ";", "this", ".", "hasError", "=", "hasError", ";", "}", "readonly", "cell", ":", "Cell", ";", "readonly", "statements", ":", "ast", ".", "SyntaxNode", "[", "]", ";", "readonly", "defs", ":", "Ref", "[", "]", ";", "readonly", "uses", ":", "Ref", "[", "]", ";", "readonly", "hasError", ":", "boolean", ";", "public", "usesSomethingFrom", "(", "that", ")", "{", "return", "this", ".", "uses", ".", "some", "(", "use", "=>", "that", ".", "defs", ".", "some", "(", "def", "=>", "use", ".", "name", "===", "def", ".", "name", ")", ")", ";", "}", "}", "/**\n * Builds programs from a list of executed cells.\n */", "export", "class", "ProgramBuilder", "{", "/**\n     * Construct a program builder.\n     */", "constructor", "(", "dataflowAnalyzer", "?", ")", "{", "this", ".", "_dataflowAnalyzer", "=", "dataflowAnalyzer", ";", "this", ".", "_cellPrograms", "=", "[", "]", ";", "}", "/**\n     * Add cells to the program builder.\n     */", "public", "add", "(", "...", "cells", ")", "{", "for", "(", "let", "cell", "of", "cells", ")", "{", "let", "statements", "=", "[", "]", ";", "let", "defs", "=", "undefined", ";", "let", "uses", "=", "undefined", ";", "let", "hasError", "=", "cell", ".", "hasError", ";", "try", "{", "let", "tree", "=", "ast", ".", "parse", "(", "magicsRewriter", ".", "rewrite", "(", "cell", ".", "text", ")", "+", "'\\n'", ")", ";", "statements", "=", "tree", ".", "code", ";", "for", "(", "let", "node", "of", "ast", ".", "walk", "(", "tree", ")", ")", "{", "if", "(", "node", ".", "hasOwnProperty", "(", "'type'", ")", ")", "{", "node", ".", "location", ".", "path", "=", "cell", ".", "executionEventId", ";", "}", "}", "if", "(", "this", ".", "_dataflowAnalyzer", ")", "{", "defs", "=", "[", "]", ";", "uses", "=", "[", "]", ";", "for", "(", "let", "stmt", "of", "tree", ".", "code", ")", "{", "let", "defsUses", "=", "this", ".", "_dataflowAnalyzer", ".", "getDefUseForStatement", "(", "stmt", ",", "new", "RefSet", "(", ")", ")", ";", "defs", ".", "push", "(", "...", "defsUses", ".", "DEFINITION", ".", "union", "(", "defsUses", ".", "UPDATE", ")", ".", "items", ")", ";", "uses", ".", "push", "(", "...", "defsUses", ".", "USE", ".", "items", ")", ";", "}", "}", "else", "{", "defs", "=", "[", "]", ";", "uses", "=", "[", "]", ";", "}", "}", "catch", "(", "e", ")", "{", "console", ".", "log", "(", "\"Couldn't analyze block\"", ",", "cell", ".", "text", ",", "', error encountered, '", ",", "e", ",", "', not adding to programs.'", ")", ";", "hasError", "=", "true", ";", "}", "this", ".", "_cellPrograms", ".", "push", "(", "new", "CellProgram", "(", "cell", ",", "statements", ",", "defs", ",", "uses", ",", "hasError", ")", ")", ";", "}", "}", "/**\n     * Reset (removing all cells).\n     */", "public", "reset", "(", ")", "{", "this", ".", "_cellPrograms", "=", "[", "]", ";", "}", "/**\n     * Build a program from the list of cells. Program will include the cells' contents in\n     * the order they were added to the log. It will omit cells that raised errors (syntax or\n     * runtime, except for the last cell).\n     */", "public", "buildTo", "(", "cellExecutionEventId", ")", "{", "let", "cellPrograms", "=", "[", "]", ";", "let", "i", ";", "for", "(", "i", "=", "this", ".", "_cellPrograms", ".", "length", "-", "1", ";", "i", ">=", "0", "&&", "this", ".", "_cellPrograms", "[", "i", "]", ".", "cell", ".", "executionEventId", "!==", "cellExecutionEventId", ";", "i", "--", ")", ";", "cellPrograms", ".", "unshift", "(", "this", ".", "_cellPrograms", "[", "i", "]", ")", ";", "let", "lastExecutionCountSeen", "=", "this", ".", "_cellPrograms", "[", "i", "]", ".", "cell", ".", "executionCount", ";", "for", "(", "i", "--", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "let", "cellProgram", "=", "this", ".", "_cellPrograms", "[", "i", "]", ";", "let", "cell", "=", "cellProgram", ".", "cell", ";", "if", "(", "cell", ".", "executionCount", ">=", "lastExecutionCountSeen", ")", "{", "break", ";", "}", "if", "(", "!", "cellProgram", ".", "hasError", ")", "{", "cellPrograms", ".", "unshift", "(", "cellProgram", ")", ";", "}", "lastExecutionCountSeen", "=", "cell", ".", "executionCount", ";", "}", "return", "new", "Program", "(", "cellPrograms", ")", ";", "}", "public", "buildFrom", "(", "executionEventId", ")", "{", "const", "cellProgram", "=", "this", ".", "getCellProgram", "(", "executionEventId", ")", ";", "if", "(", "!", "cellProgram", ")", "{", "return", "null", ";", "}", "const", "i", "=", "this", ".", "_cellPrograms", ".", "findIndex", "(", "cp", "=>", "cp", ".", "cell", ".", "persistentId", "===", "cellProgram", ".", "cell", ".", "persistentId", ")", ";", "return", "new", "Program", "(", "this", ".", "_cellPrograms", ".", "slice", "(", "i", ")", ")", ";", "}", "public", "getCellProgram", "(", "executionEventId", ")", "{", "let", "matchingPrograms", "=", "this", ".", "_cellPrograms", ".", "filter", "(", "cp", "=>", "cp", ".", "cell", ".", "executionEventId", "==", "executionEventId", ")", ";", "if", "(", "matchingPrograms", ".", "length", ">=", "1", ")", "{", "return", "matchingPrograms", ".", "pop", "(", ")", ";", "}", "return", "null", ";", "}", "public", "getCellProgramsWithSameId", "(", "executionEventId", ")", "{", "const", "cellProgram", "=", "this", ".", "getCellProgram", "(", "executionEventId", ")", ";", "return", "this", ".", "_cellPrograms", ".", "filter", "(", "cp", "=>", "cp", ".", "cell", ".", "persistentId", "===", "cellProgram", ".", "cell", ".", "persistentId", ")", ";", "}", "private", "_cellPrograms", ":", "CellProgram", "[", "]", ";", "private", "_dataflowAnalyzer", ":", "DataflowAnalyzer", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "array", null, "number", null, null, null, null, null, null, null, null, null, null, null, "ast.SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, "array", null, "array", null, "array", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DefUse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, "Program", null, "string", null, null, null, "array", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Program", null, "string", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/program-builder.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "program-builder.ts"}
{"tokens": ["import", "{", "Cell", "}", "from", "'./cell'", ";", "import", "{", "CellSlice", "}", "from", "'./cellslice'", ";", "import", "{", "DataflowAnalyzer", "}", "from", "'./data-flow'", ";", "import", "{", "CellProgram", ",", "ProgramBuilder", "}", "from", "'./program-builder'", ";", "import", "{", "LocationSet", ",", "slice", ",", "SliceDirection", "}", "from", "'./slice'", ";", "import", "{", "Set", ",", "NumberSet", "}", "from", "'./set'", ";", "/**\n * A record of when a cell was executed.\n */", "export", "class", "CellExecution", "<", "TCell", "extends", "Cell", ">", "{", "readonly", "cell", ":", "TCell", ";", "readonly", "executionTime", ":", "Date", ";", "constructor", "(", "cell", ",", "executionTime", ")", "{", "this", ".", "cell", "=", "cell", ";", "this", ".", "executionTime", "=", "executionTime", ";", "}", "/**\n     * Update this method if at some point we only want to save some about a CellExecution when\n     * serializing it and saving history.\n     */", "toJSON", "(", ")", "{", "return", "JSON", ".", "parse", "(", "JSON", ".", "stringify", "(", "this", ")", ")", ";", "}", "}", "/**\n * A slice over a version of executed code.\n */", "export", "class", "SlicedExecution", "{", "constructor", "(", "public", "executionTime", ",", "public", "cellSlices", ")", "{", "}", "merge", "(", "...", "slicedExecutions", ")", "{", "let", "cellSlices", "=", "{", "}", ";", "let", "mergedCellSlices", "=", "[", "]", ";", "for", "(", "let", "slicedExecution", "of", "slicedExecutions", ".", "concat", "(", "this", ")", ")", "{", "for", "(", "let", "cellSlice", "of", "slicedExecution", ".", "cellSlices", ")", "{", "let", "cell", "=", "cellSlice", ".", "cell", ";", "if", "(", "!", "cellSlices", "[", "cell", ".", "executionEventId", "]", ")", "{", "let", "newCellSlice", "=", "new", "CellSlice", "(", "cell", ".", "deepCopy", "(", ")", ",", "new", "LocationSet", "(", ")", ",", "cellSlice", ".", "executionTime", ")", ";", "cellSlices", "[", "cell", ".", "executionEventId", "]", "=", "newCellSlice", ";", "mergedCellSlices", ".", "push", "(", "newCellSlice", ")", ";", "}", "let", "mergedCellSlice", "=", "cellSlices", "[", "cell", ".", "executionEventId", "]", ";", "mergedCellSlice", ".", "slice", "=", "mergedCellSlice", ".", "slice", ".", "union", "(", "cellSlice", ".", "slice", ")", ";", "}", "}", "return", "new", "SlicedExecution", "(", "new", "Date", "(", ")", ",", "mergedCellSlices", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "a", ".", "cell", ".", "executionCount", "-", "b", ".", "cell", ".", "executionCount", ")", ")", ";", "}", "}", "export", "type", "CellExecutionCallback", "<", "TCell", "extends", "Cell", ">", "=", "(", "exec", ":", "CellExecution", "<", "TCell", ">", ")", "=>", "void", ";", "/**\n * Makes slice on a log of executed cells.\n */", "export", "class", "ExecutionLogSlicer", "<", "TCell", "extends", "Cell", ">", "{", "public", "executionLog", ":", "CellExecution", "<", "TCell", ">", "[", "]", "=", "[", "]", ";", "public", "readonly", "programBuilder", ":", "ProgramBuilder", ";", "/**\n     * Signal emitted when a cell's execution has been completely processed.\n     */", "readonly", "executionLogged", ":", "CellExecutionCallback", "<", "TCell", ">", "[", "]", "=", "[", "]", ";", "/**\n     * Construct a new execution log slicer.\n     */", "constructor", "(", "private", "dataflowAnalyzer", ")", "{", "this", ".", "programBuilder", "=", "new", "ProgramBuilder", "(", "dataflowAnalyzer", ")", ";", "}", "/**\n     * Log that a cell has just been executed. The execution time for this cell will be stored\n     * as the moment at which this method is called.\n     */", "public", "logExecution", "(", "cell", ")", "{", "let", "cellExecution", "=", "new", "CellExecution", "<", "TCell", ">", "(", "cell", ",", "new", "Date", "(", ")", ")", ";", "this", ".", "addExecutionToLog", "(", "cellExecution", ")", ";", "}", "/**\n     * Use logExecution instead if a cell has just been run to annotate it with the current time\n     * as the execution time. This function is intended to be used only to initialize history\n     * when a notebook is reloaded. However, any method that eventually calls this method will\n     * notify all observers that this cell has been executed.\n     */", "public", "addExecutionToLog", "(", "cellExecution", ")", "{", "this", ".", "programBuilder", ".", "add", "(", "cellExecution", ".", "cell", ")", ";", "this", ".", "executionLog", ".", "push", "(", "cellExecution", ")", ";", "this", ".", "executionLogged", ".", "forEach", "(", "callback", "=>", "callback", "(", "cellExecution", ")", ")", ";", "}", "/**\n     * Reset the log, removing log records.\n     */", "public", "reset", "(", ")", "{", "this", ".", "executionLog", "=", "[", "]", ";", "this", ".", "programBuilder", ".", "reset", "(", ")", ";", "}", "/**\n     * Get slice for the latest execution of a cell.\n     */", "public", "sliceLatestExecution", "(", "cellId", ",", "seedLocations", "?", ")", "{", "return", "this", ".", "sliceAllExecutions", "(", "cellId", ",", "seedLocations", ")", ".", "pop", "(", ")", ";", "}", "/**\n     * Get slices of the necessary code for all executions of a cell.\n     * Relevant line numbers are relative to the cell's start line (starting at first line = 0).\n     */", "public", "sliceAllExecutions", "(", "cellId", ",", "seedLocations", "?", ")", "{", "const", "cellExecutionTimes", "=", "new", "Map", "(", "this", ".", "executionLog", ".", "map", "(", "e", "=>", "[", "e", ".", "cell", ".", "executionEventId", ",", "e", ".", "executionTime", "]", ")", ")", ";", "return", "this", ".", "executionLog", ".", "filter", "(", "execution", "=>", "execution", ".", "cell", ".", "persistentId", "==", "cellId", "&&", "execution", ".", "cell", ".", "executionCount", ")", ".", "map", "(", "execution", "=>", "{", "let", "program", "=", "this", ".", "programBuilder", ".", "buildTo", "(", "execution", ".", "cell", ".", "executionEventId", ")", ";", "if", "(", "!", "program", ")", "{", "return", "null", ";", "}", "if", "(", "!", "seedLocations", ")", "{", "seedLocations", "=", "new", "LocationSet", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "1", ",", "last_line", ":", "10000", ",", "last_column", ":", "10000", ",", "}", ")", ";", "}", "let", "lastCellLines", "=", "program", ".", "cellToLineMap", "[", "execution", ".", "cell", ".", "executionEventId", "]", ";", "let", "lastCellStart", "=", "Math", ".", "min", "(", "...", "lastCellLines", ".", "items", ")", ";", "seedLocations", "=", "seedLocations", ".", "mapSame", "(", "loc", "=>", "(", "{", "first_line", ":", "lastCellStart", "+", "loc", ".", "first_line", "-", "1", ",", "first_column", ":", "loc", ".", "first_column", ",", "last_line", ":", "lastCellStart", "+", "loc", ".", "last_line", "-", "1", ",", "last_column", ":", "loc", ".", "last_column", ",", "}", ")", ")", ";", "let", "sliceLocations", "=", "slice", "(", "program", ".", "tree", ",", "seedLocations", ",", "this", ".", "dataflowAnalyzer", ")", ".", "items", ".", "sort", "(", "(", "loc1", ",", "loc2", ")", "=>", "loc1", ".", "first_line", "-", "loc2", ".", "first_line", ")", ";", "let", "cellSliceLocations", "=", "{", "}", ";", "let", "cellOrder", "=", "[", "]", ";", "sliceLocations", ".", "forEach", "(", "location", "=>", "{", "let", "sliceCell", "=", "program", ".", "lineToCellMap", "[", "location", ".", "first_line", "]", ";", "let", "sliceCellLines", "=", "program", ".", "cellToLineMap", "[", "sliceCell", ".", "executionEventId", "]", ";", "let", "sliceCellStart", "=", "Math", ".", "min", "(", "...", "sliceCellLines", ".", "items", ")", ";", "if", "(", "cellOrder", ".", "indexOf", "(", "sliceCell", ")", "==", "-", "1", ")", "{", "cellOrder", ".", "push", "(", "sliceCell", ")", ";", "}", "let", "adjustedLocation", "=", "{", "first_line", ":", "location", ".", "first_line", "-", "sliceCellStart", "+", "1", ",", "first_column", ":", "location", ".", "first_column", ",", "last_line", ":", "location", ".", "last_line", "-", "sliceCellStart", "+", "1", ",", "last_column", ":", "location", ".", "last_column", ",", "}", ";", "if", "(", "!", "cellSliceLocations", "[", "sliceCell", ".", "executionEventId", "]", ")", "{", "cellSliceLocations", "[", "sliceCell", ".", "executionEventId", "]", "=", "new", "LocationSet", "(", ")", ";", "}", "cellSliceLocations", "[", "sliceCell", ".", "executionEventId", "]", ".", "add", "(", "adjustedLocation", ")", ";", "}", ")", ";", "let", "cellSlices", "=", "cellOrder", ".", "map", "(", "sliceCell", "=>", "new", "CellSlice", "(", "sliceCell", ",", "cellSliceLocations", "[", "sliceCell", ".", "executionEventId", "]", ",", "cellExecutionTimes", "[", "sliceCell", ".", "executionEventId", "]", ")", ")", ";", "return", "new", "SlicedExecution", "(", "execution", ".", "executionTime", ",", "cellSlices", ")", ";", "}", ")", ".", "filter", "(", "s", "=>", "s", "!=", "null", "&&", "s", "!=", "undefined", ")", ";", "}", "public", "get", "cellExecutions", "(", ")", ":", "ReadonlyArray", "<", "CellExecution", "<", "TCell", ">", ">", "{", "return", "this", ".", "executionLog", ";", "}", "/**\n     * Get the cell program (tree, defs, uses) for a cell.\n     */", "public", "getCellProgram", "(", "executionEventId", ")", "{", "return", "this", ".", "programBuilder", ".", "getCellProgram", "(", "executionEventId", ")", ";", "}", "param", "executionEventId", "public", "getDependentCells", "(", "executionEventId", ")", "{", "const", "program", "=", "this", ".", "programBuilder", ".", "buildFrom", "(", "executionEventId", ")", ";", "const", "sameCell", "=", "this", ".", "programBuilder", ".", "getCellProgramsWithSameId", "(", "executionEventId", ")", ";", "let", "lines", "=", "new", "NumberSet", "(", ")", ";", "sameCell", ".", "forEach", "(", "cp", "=>", "lines", "=", "lines", ".", "union", "(", "program", ".", "cellToLineMap", "[", "cp", ".", "cell", ".", "executionEventId", "]", ")", ")", ";", "const", "seedLocations", "=", "new", "LocationSet", "(", "...", "lines", ".", "items", ".", "map", "(", "line", "=>", "(", "{", "first_line", ":", "line", ",", "first_column", ":", "0", ",", "last_line", ":", "line", ",", "last_column", ":", "1", "}", ")", ")", ")", ";", "let", "sliceLocations", "=", "slice", "(", "program", ".", "tree", ",", "seedLocations", ",", "undefined", ",", "SliceDirection", ".", "Forward", ")", ".", "items", ";", "return", "new", "Set", "<", "Cell", ">", "(", "c", "=>", "c", ".", "persistentId", ",", "...", "sliceLocations", ".", "map", "(", "loc", "=>", "program", ".", "lineToCellMap", "[", "loc", ".", "first_line", "]", ")", ")", ".", "items", ".", "filter", "(", "c", "=>", "c", ".", "executionEventId", "!==", "executionEventId", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Date", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Date", null, null, "array", null, null, null, "SlicedExecution", null, null, "array", null, null, null, "object", null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "UNK", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, "string", null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Program", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Location", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, null, null, "Program", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "NumberSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/log-slicer.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "log-slicer.ts"}
{"tokens": ["import", "{", "FunctionDescription", ",", "FunctionSpec", ",", "TypeSpec", ",", "ModuleSpec", ",", "ModuleMap", ",", "JsonSpecs", "}", "from", "\".\"", ";", "import", "*", "as", "ast", "from", "'./python-parser'", ";", "function", "mapDict", "<", "U", ",", "V", ">", "(", "obj", ",", "f", ")", "{", "const", "result", "=", "{", "}", ";", "Object", ".", "keys", "(", "obj", ")", ".", "forEach", "(", "k", "=>", "result", "[", "k", "]", "=", "f", "(", "obj", "[", "k", "]", ")", ")", ";", "return", "result", ";", "}", "function", "cleanFunc", "(", "fdesc", ")", "{", "if", "(", "typeof", "fdesc", "===", "'string'", ")", "{", "return", "{", "name", ":", "fdesc", ",", "reads", ":", "[", "]", ",", "updates", ":", "[", "]", "}", ";", "}", "else", "{", "if", "(", "!", "fdesc", ".", "reads", ")", "{", "fdesc", ".", "reads", "=", "[", "]", ";", "}", "if", "(", "!", "fdesc", ".", "updates", ")", "{", "fdesc", ".", "updates", "=", "[", "]", ";", "}", "return", "fdesc", ";", "}", "}", "function", "cleanType", "(", "tdesc", ")", "{", "return", "{", "methods", ":", "tdesc", ".", "methods", "?", "tdesc", ".", "methods", ".", "map", "(", "m", "=>", "cleanFunc", "(", "m", ")", ")", ":", "[", "]", "}", ";", "}", "function", "cleanModule", "(", "mdesc", ")", "{", "const", "mod", "=", "{", "functions", ":", "mdesc", ".", "functions", "?", "mdesc", ".", "functions", ".", "map", "(", "f", "=>", "cleanFunc", "(", "f", ")", ")", ":", "[", "]", ",", "types", ":", "mdesc", ".", "types", "?", "mapDict", "(", "mdesc", ".", "types", ",", "cleanType", ")", ":", "{", "}", ",", "modules", ":", "mdesc", ".", "modules", "?", "mapDict", "(", "mdesc", ".", "modules", ",", "cleanModule", ")", ":", "{", "}", "}", ";", "mod", ".", "functions", ".", "forEach", "(", "f", "=>", "{", "if", "(", "f", ".", "returns", ")", "{", "f", ".", "returnsType", "=", "mod", ".", "types", "[", "f", ".", "returns", "]", ";", "}", "}", ")", ";", "Object", ".", "keys", "(", "mod", ".", "types", ")", ".", "forEach", "(", "typename", "=>", "{", "const", "ty", "=", "mod", ".", "types", "[", "typename", "]", ";", "ty", ".", "methods", ".", "forEach", "(", "f", "=>", "{", "if", "(", "f", ".", "returns", ")", "{", "f", ".", "returnsType", "=", "mod", ".", "types", "[", "f", ".", "returns", "]", ";", "}", "}", ")", ";", "}", ")", ";", "return", "mod", ";", "}", "export", "class", "SymbolTable", "{", "public", "modules", ":", "ModuleMap", "<", "FunctionSpec", ">", "=", "{", "}", ";", "public", "types", ":", "{", "[", "name", "]", ":", "TypeSpec", "<", "FunctionSpec", ">", ";", "}", "=", "{", "}", ";", "public", "functions", ":", "{", "[", "name", "]", ":", "FunctionSpec", ";", "}", "=", "{", "}", ";", "constructor", "(", "private", "jsonSpecs", ")", "{", "this", ".", "importModuleDefinitions", "(", "'__builtins__'", ",", "[", "{", "path", ":", "'*'", ",", "name", ":", "''", "}", "]", ")", ";", "}", "public", "lookupFunction", "(", "name", ")", "{", "const", "spec", "=", "this", ".", "functions", "[", "name", "]", ";", "if", "(", "spec", ")", "{", "return", "spec", ";", "}", "const", "clss", "=", "this", ".", "types", "[", "name", "]", ";", "if", "(", "clss", ")", "{", "return", "clss", ".", "methods", ".", "find", "(", "fn", "=>", "fn", ".", "name", "===", "'__init__'", ")", "||", "{", "name", ":", "'__init__'", ",", "updates", ":", "[", "'0'", "]", ",", "returns", ":", "name", ",", "returnsType", ":", "clss", "}", ";", "}", "return", "undefined", ";", "}", "public", "lookupNode", "(", "func", ")", "{", "return", "func", ".", "type", "===", "ast", ".", "NAME", "?", "this", ".", "lookupFunction", "(", "func", ".", "id", ")", ":", "func", ".", "type", "===", "ast", ".", "DOT", "&&", "func", ".", "value", ".", "type", "===", "ast", ".", "NAME", "?", "this", ".", "lookupModuleFunction", "(", "func", ".", "value", ".", "id", ",", "func", ".", "name", ")", ":", "undefined", ";", "}", "public", "lookupModuleFunction", "(", "modName", ",", "funcName", ")", "{", "const", "mod", "=", "this", ".", "modules", "[", "modName", "]", ";", "return", "mod", "?", "mod", ".", "functions", ".", "find", "(", "f", "=>", "f", ".", "name", "===", "funcName", ")", ":", "undefined", ";", "}", "public", "importModule", "(", "modulePath", ",", "alias", ")", "{", "const", "spec", "=", "this", ".", "lookupSpec", "(", "this", ".", "jsonSpecs", ",", "modulePath", ".", "split", "(", "'.'", ")", ")", ";", "if", "(", "!", "spec", ")", "{", "console", ".", "log", "(", "`*** WARNING no spec for module ${", "modulePath", "}`", ")", ";", "return", ";", "}", "if", "(", "modulePath", ")", "{", "this", ".", "modules", "[", "modulePath", "]", "=", "spec", ";", "if", "(", "alias", "&&", "alias", ".", "length", ")", "{", "this", ".", "modules", "[", "alias", "]", "=", "spec", ";", "}", "}", "}", "public", "importModuleDefinitions", "(", "namePath", ",", "imports", ")", "{", "const", "spec", "=", "this", ".", "lookupSpec", "(", "this", ".", "jsonSpecs", ",", "namePath", ".", "split", "(", "'.'", ")", ")", ";", "if", "(", "!", "spec", ")", "{", "console", ".", "log", "(", "`*** WARNING no spec for module ${", "namePath", "}`", ")", ";", "return", ";", "}", "if", "(", "spec", ")", "{", "imports", ".", "forEach", "(", "imp", "=>", "{", "const", "funs", "=", "spec", ".", "functions", "?", "spec", ".", "functions", ".", "map", "(", "f", "=>", "cleanFunc", "(", "f", ")", ")", ":", "[", "]", ";", "if", "(", "imp", ".", "path", "===", "'*'", ")", "{", "funs", ".", "forEach", "(", "f", "=>", "this", ".", "functions", "[", "f", ".", "name", "]", "=", "f", ")", ";", "if", "(", "spec", ".", "types", ")", "{", "Object", ".", "keys", "(", "spec", ".", "types", ")", ".", "forEach", "(", "fname", "=>", "this", ".", "types", "[", "fname", "]", "=", "spec", ".", "types", "[", "fname", "]", ")", ";", "}", "}", "else", "if", "(", "spec", ".", "types", "&&", "spec", ".", "types", "[", "imp", ".", "name", "]", ")", "{", "this", ".", "types", "[", "imp", ".", "name", "]", "=", "spec", ".", "types", "[", "imp", ".", "name", "]", ";", "}", "else", "{", "const", "fspec", "=", "funs", ".", "find", "(", "f", "=>", "f", ".", "name", "===", "imp", ".", "name", ")", ";", "if", "(", "fspec", ")", "{", "this", ".", "functions", "[", "fspec", ".", "name", "]", "=", "fspec", ";", "}", "}", "}", ")", ";", "}", "else", "{", "console", ".", "log", "(", "`*** WARNING no spec for module ${", "namePath", "}`", ")", ";", "}", "}", "private", "lookupSpec", "(", "map", ",", "parts", ")", "{", "if", "(", "!", "map", "||", "parts", ".", "length", "==", "0", ")", "{", "return", "undefined", ";", "}", "const", "spec", "=", "map", "[", "parts", "[", "0", "]", "]", ";", "if", "(", "!", "spec", ")", "{", "return", "undefined", ";", "}", "if", "(", "parts", ".", "length", ">", "1", ")", "{", "return", "this", ".", "lookupSpec", "(", "spec", ".", "modules", ",", "parts", ".", "slice", "(", "1", ")", ")", ";", "}", "else", "{", "return", "cleanModule", "(", "spec", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, "object", null, "V", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TypeSpec", null, "TypeSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ModuleSpec", null, "ModuleSpec", null, null, null, "ModuleSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "TypeSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ast.SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ModuleSpec", null, "string", null, "string", null, null, null, "ModuleSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ModuleSpec", null, "string", null, "array", null, null, null, "ModuleSpec", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ModuleSpec", null, "UNK", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/symbol-table.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "symbol-table.ts"}
{"tokens": ["import", "*", "as", "ast", "from", "'./python-parser'", ";", "import", "{", "Block", ",", "ControlFlowGraph", "}", "from", "'./control-flow'", ";", "import", "{", "Set", ",", "StringSet", "}", "from", "'./set'", ";", "import", "{", "DefaultSpecs", ",", "JsonSpecs", ",", "FunctionSpec", ",", "TypeSpec", "}", "from", "'./specs'", ";", "import", "{", "SymbolTable", "}", "from", "'./symbol-table'", ";", "class", "DefUse", "{", "constructor", "(", "public", "DEFINITION", "=", "new", "RefSet", "(", ")", ",", "public", "UPDATE", "=", "new", "RefSet", "(", ")", ",", "public", "USE", "=", "new", "RefSet", "(", ")", ")", "{", "}", "public", "get", "defs", "(", ")", "{", "return", "this", ".", "DEFINITION", ".", "union", "(", "this", ".", "UPDATE", ")", ";", "}", "public", "get", "uses", "(", ")", "{", "return", "this", ".", "UPDATE", ".", "union", "(", "this", ".", "USE", ")", ";", "}", "public", "union", "(", "that", ")", "{", "return", "new", "DefUse", "(", "this", ".", "DEFINITION", ".", "union", "(", "that", ".", "DEFINITION", ")", ",", "this", ".", "UPDATE", ".", "union", "(", "that", ".", "UPDATE", ")", ",", "this", ".", "USE", ".", "union", "(", "that", ".", "USE", ")", ")", ";", "}", "public", "update", "(", "newRefs", ")", "{", "const", "GEN_RULES", "=", "{", "USE", ":", "[", "ReferenceType", ".", "UPDATE", ",", "ReferenceType", ".", "DEFINITION", "]", ",", "UPDATE", ":", "[", "ReferenceType", ".", "DEFINITION", "]", ",", "DEFINITION", ":", "[", "]", "}", ";", "const", "KILL_RULES", "=", "{", "DEFINITION", ":", "[", "ReferenceType", ".", "DEFINITION", ",", "ReferenceType", ".", "UPDATE", "]", ",", "UPDATE", ":", "[", "ReferenceType", ".", "DEFINITION", ",", "ReferenceType", ".", "UPDATE", "]", ",", "USE", ":", "[", "]", "}", ";", "for", "(", "let", "level", "of", "Object", ".", "keys", "(", "ReferenceType", ")", ")", "{", "let", "genSet", "=", "new", "RefSet", "(", ")", ";", "for", "(", "let", "genLevel", "of", "GEN_RULES", "[", "level", "]", ")", "{", "genSet", "=", "genSet", ".", "union", "(", "newRefs", "[", "genLevel", "]", ")", ";", "}", "const", "killSet", "=", "this", "[", "level", "]", ".", "filter", "(", "def", "=>", "genSet", ".", "items", ".", "some", "(", "gen", "=>", "gen", ".", "name", "==", "def", ".", "name", "&&", "KILL_RULES", "[", "gen", ".", "level", "]", ".", "indexOf", "(", "def", ".", "level", ")", "!=", "-", "1", ")", ")", ";", "this", "[", "level", "]", "=", "this", "[", "level", "]", ".", "minus", "(", "killSet", ")", ".", "union", "(", "genSet", ")", ";", "}", "}", "public", "equals", "(", "that", ")", "{", "return", "this", ".", "DEFINITION", ".", "equals", "(", "that", ".", "DEFINITION", ")", "&&", "this", ".", "UPDATE", ".", "equals", "(", "that", ".", "UPDATE", ")", "&&", "this", ".", "USE", ".", "equals", "(", "that", ".", "USE", ")", ";", "}", "public", "createFlowsFrom", "(", "fromSet", ")", "{", "const", "toSet", "=", "this", ";", "let", "refsDefined", "=", "new", "RefSet", "(", ")", ";", "let", "newFlows", "=", "new", "Set", "<", "Dataflow", ">", "(", "getDataflowId", ")", ";", "for", "(", "let", "level", "of", "Object", ".", "keys", "(", "ReferenceType", ")", ")", "{", "for", "(", "let", "to", "of", "toSet", "[", "level", "]", ".", "items", ")", "{", "for", "(", "let", "from", "of", "fromSet", "[", "level", "]", ".", "items", ")", "{", "if", "(", "from", ".", "name", "==", "to", ".", "name", ")", "{", "refsDefined", ".", "add", "(", "to", ")", ";", "newFlows", ".", "add", "(", "{", "fromNode", ":", "from", ".", "node", ",", "toNode", ":", "to", ".", "node", ",", "fromRef", ":", "from", ",", "toRef", ":", "to", "}", ")", ";", "}", "}", "}", "}", "return", "[", "newFlows", ",", "refsDefined", "]", ";", "}", "}", "/**\n * Use a shared dataflow analyzer object for all dataflow analysis / querying for defs and uses.\n * It caches defs and uses for each statement, which can save time.\n * For caching to work, statements must be annotated with a cell's ID and execution count.\n */", "export", "class", "DataflowAnalyzer", "{", "constructor", "(", "moduleMap", "?", ")", "{", "this", ".", "_symbolTable", "=", "new", "SymbolTable", "(", "moduleMap", "||", "DefaultSpecs", ")", ";", "}", "getDefUseForStatement", "(", "statement", ",", "defsForMethodResolution", ")", "{", "let", "cacheKey", "=", "ast", ".", "locationString", "(", "statement", ".", "location", ")", ";", "const", "cached", "=", "this", ".", "_defUsesCache", "[", "cacheKey", "]", ";", "if", "(", "cached", ")", "{", "return", "cached", ";", "}", "let", "defSet", "=", "this", ".", "getDefs", "(", "statement", ",", "defsForMethodResolution", ")", ";", "let", "useSet", "=", "this", ".", "getUses", "(", "statement", ")", ";", "let", "result", "=", "new", "DefUse", "(", "defSet", ".", "filter", "(", "r", "=>", "r", ".", "level", "===", "ReferenceType", ".", "DEFINITION", ")", ",", "defSet", ".", "filter", "(", "r", "=>", "r", ".", "level", "===", "ReferenceType", ".", "UPDATE", ")", ",", "useSet", ")", ";", "this", ".", "_defUsesCache", "[", "cacheKey", "]", "=", "result", ";", "return", "result", ";", "}", "analyze", "(", "cfg", ",", "refSet", "?", ")", "{", "const", "workQueue", "=", "cfg", ".", "blocks", ".", "reverse", "(", ")", ";", "let", "undefinedRefs", "=", "new", "RefSet", "(", ")", ";", "let", "dataflows", "=", "new", "Set", "<", "Dataflow", ">", "(", "getDataflowId", ")", ";", "let", "defUsePerBlock", "=", "new", "Map", "(", "workQueue", ".", "map", "(", "block", "=>", "[", "block", ".", "id", ",", "new", "DefUse", "(", ")", "]", ")", ")", ";", "if", "(", "refSet", ")", "{", "defUsePerBlock", ".", "get", "(", "cfg", ".", "blocks", "[", "0", "]", ".", "id", ")", ".", "update", "(", "new", "DefUse", "(", "refSet", ")", ")", ";", "}", "while", "(", "workQueue", ".", "length", ")", "{", "const", "block", "=", "workQueue", ".", "pop", "(", ")", ";", "let", "initialBlockDefUse", "=", "defUsePerBlock", ".", "get", "(", "block", ".", "id", ")", ";", "let", "blockDefUse", "=", "cfg", ".", "getPredecessors", "(", "block", ")", ".", "reduce", "(", "(", "defuse", ",", "predBlock", ")", "=>", "defuse", ".", "union", "(", "defUsePerBlock", ".", "get", "(", "predBlock", ".", "id", ")", ")", ",", "initialBlockDefUse", ")", ";", "for", "(", "let", "statement", "of", "block", ".", "statements", ")", "{", "let", "statementDefUse", "=", "this", ".", "getDefUseForStatement", "(", "statement", ",", "blockDefUse", ".", "defs", ")", ";", "let", "[", "newFlows", ",", "definedRefs", "]", "=", "statementDefUse", ".", "createFlowsFrom", "(", "blockDefUse", ")", ";", "dataflows", "=", "dataflows", ".", "union", "(", "newFlows", ")", ";", "undefinedRefs", "=", "undefinedRefs", ".", "union", "(", "statementDefUse", ".", "uses", ")", ".", "minus", "(", "definedRefs", ")", ";", "blockDefUse", ".", "update", "(", "statementDefUse", ")", ";", "}", "if", "(", "!", "initialBlockDefUse", ".", "equals", "(", "blockDefUse", ")", ")", "{", "defUsePerBlock", ".", "set", "(", "block", ".", "id", ",", "blockDefUse", ")", ";", "for", "(", "let", "succ", "of", "cfg", ".", "getSuccessors", "(", "block", ")", ")", "{", "if", "(", "workQueue", ".", "indexOf", "(", "succ", ")", "<", "0", ")", "{", "workQueue", ".", "push", "(", "succ", ")", ";", "}", "}", "}", "}", "cfg", ".", "visitControlDependencies", "(", "(", "controlStmt", ",", "stmt", ")", "=>", "dataflows", ".", "add", "(", "{", "fromNode", ":", "controlStmt", ",", "toNode", ":", "stmt", "}", ")", ")", ";", "return", "{", "dataflows", ",", "undefinedRefs", "}", ";", "}", "getDefs", "(", "statement", ",", "defsForMethodResolution", ")", "{", "if", "(", "!", "statement", ")", "return", "new", "RefSet", "(", ")", ";", "let", "defs", "=", "runAnalysis", "(", "ApiCallAnalysis", ",", "defsForMethodResolution", ",", "statement", ",", "this", ".", "_symbolTable", ")", ".", "union", "(", "runAnalysis", "(", "DefAnnotationAnalysis", ",", "defsForMethodResolution", ",", "statement", ",", "this", ".", "_symbolTable", ")", ")", ";", "switch", "(", "statement", ".", "type", ")", "{", "case", "ast", ".", "IMPORT", ":", "defs", "=", "defs", ".", "union", "(", "this", ".", "getImportDefs", "(", "statement", ")", ")", ";", "break", ";", "case", "ast", ".", "FROM", ":", "defs", "=", "defs", ".", "union", "(", "this", ".", "getImportFromDefs", "(", "statement", ")", ")", ";", "break", ";", "case", "ast", ".", "DEF", ":", "defs", "=", "defs", ".", "union", "(", "this", ".", "getFuncDefs", "(", "statement", ",", "defsForMethodResolution", ")", ")", ";", "break", ";", "case", "ast", ".", "CLASS", ":", "defs", "=", "defs", ".", "union", "(", "this", ".", "getClassDefs", "(", "statement", ")", ")", ";", "break", ";", "case", "ast", ".", "ASSIGN", ":", "defs", "=", "defs", ".", "union", "(", "this", ".", "getAssignDefs", "(", "statement", ")", ")", ";", "break", ";", "}", "return", "defs", ";", "}", "private", "getClassDefs", "(", "classDecl", ")", "{", "return", "new", "RefSet", "(", "{", "type", ":", "SymbolType", ".", "CLASS", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "name", ":", "classDecl", ".", "name", ",", "location", ":", "classDecl", ".", "location", ",", "node", ":", "classDecl", ",", "}", ")", ";", "}", "private", "getFuncDefs", "(", "funcDecl", ",", "defsForMethodResolution", ")", "{", "runAnalysis", "(", "ParameterSideEffectAnalysis", ",", "defsForMethodResolution", ",", "funcDecl", ",", "this", ".", "_symbolTable", ")", ";", "return", "new", "RefSet", "(", "{", "type", ":", "SymbolType", ".", "FUNCTION", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "name", ":", "funcDecl", ".", "name", ",", "location", ":", "funcDecl", ".", "location", ",", "node", ":", "funcDecl", ",", "}", ")", ";", "}", "private", "getAssignDefs", "(", "assign", ")", "{", "let", "targetsDefListener", "=", "new", "TargetsDefListener", "(", "assign", ",", "this", ".", "_symbolTable", ")", ";", "return", "targetsDefListener", ".", "defs", ";", "}", "private", "getImportFromDefs", "(", "from", ")", "{", "this", ".", "_symbolTable", ".", "importModuleDefinitions", "(", "from", ".", "base", ",", "from", ".", "imports", ")", ";", "return", "new", "RefSet", "(", "...", "from", ".", "imports", ".", "map", "(", "i", "=>", "{", "return", "{", "type", ":", "SymbolType", ".", "IMPORT", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "name", ":", "i", ".", "name", "||", "i", ".", "path", ",", "location", ":", "i", ".", "location", ",", "node", ":", "from", ",", "}", ";", "}", ")", ")", ";", "}", "private", "getImportDefs", "(", "imprt", ")", "{", "imprt", ".", "names", ".", "forEach", "(", "imp", "=>", "{", "const", "spec", "=", "this", ".", "_symbolTable", ".", "importModule", "(", "imp", ".", "path", ",", "imp", ".", "name", ")", ";", "}", ")", ";", "return", "new", "RefSet", "(", "...", "imprt", ".", "names", ".", "map", "(", "nameNode", "=>", "{", "return", "{", "type", ":", "SymbolType", ".", "IMPORT", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "name", ":", "nameNode", ".", "name", "||", "nameNode", ".", "path", ",", "location", ":", "nameNode", ".", "location", ",", "node", ":", "imprt", ",", "}", ";", "}", ")", ")", ";", "}", "getUses", "(", "statement", ")", "{", "switch", "(", "statement", ".", "type", ")", "{", "case", "ast", ".", "ASSIGN", ":", "return", "this", ".", "getAssignUses", "(", "statement", ")", ";", "case", "ast", ".", "DEF", ":", "return", "this", ".", "getFuncDeclUses", "(", "statement", ")", ";", "case", "ast", ".", "CLASS", ":", "return", "this", ".", "getClassDeclUses", "(", "statement", ")", ";", "default", ":", "{", "return", "this", ".", "getNameUses", "(", "statement", ")", ";", "}", "}", "}", "private", "getNameUses", "(", "statement", ")", "{", "const", "usedNames", "=", "gatherNames", "(", "statement", ")", ";", "return", "new", "RefSet", "(", "...", "usedNames", ".", "items", ".", "map", "(", "(", "[", "name", ",", "node", "]", ")", "=>", "{", "return", "{", "type", ":", "SymbolType", ".", "VARIABLE", ",", "level", ":", "ReferenceType", ".", "USE", ",", "name", ":", "name", ",", "location", ":", "node", ".", "location", ",", "node", ":", "statement", ",", "}", ";", "}", ")", ")", ";", "}", "private", "getClassDeclUses", "(", "classDecl", ")", "{", "return", "classDecl", ".", "code", ".", "reduce", "(", "(", "uses", ",", "classStatement", ")", "=>", "uses", ".", "union", "(", "this", ".", "getUses", "(", "classStatement", ")", ")", ",", "new", "RefSet", "(", ")", ")", ";", "}", "private", "getFuncDeclUses", "(", "def", ")", "{", "let", "defCfg", "=", "new", "ControlFlowGraph", "(", "def", ")", ";", "let", "undefinedRefs", "=", "this", ".", "analyze", "(", "defCfg", ",", "getParameterRefs", "(", "def", ")", ")", ".", "undefinedRefs", ";", "return", "undefinedRefs", ".", "filter", "(", "r", "=>", "r", ".", "level", "==", "ReferenceType", ".", "USE", ")", ";", "}", "private", "getAssignUses", "(", "assign", ")", "{", "const", "targetNames", "=", "gatherNames", "(", "assign", ".", "targets", ")", ";", "const", "targets", "=", "new", "RefSet", "(", "...", "targetNames", ".", "items", ".", "map", "(", "(", "[", "name", ",", "node", "]", ")", "=>", "{", "return", "{", "type", ":", "SymbolType", ".", "VARIABLE", ",", "level", ":", "ReferenceType", ".", "USE", ",", "name", ":", "name", ",", "location", ":", "node", ".", "location", ",", "node", ":", "assign", ",", "}", ";", "}", ")", ")", ";", "const", "sourceNames", "=", "gatherNames", "(", "assign", ".", "sources", ")", ";", "const", "sources", "=", "new", "RefSet", "(", "...", "sourceNames", ".", "items", ".", "map", "(", "(", "[", "name", ",", "node", "]", ")", "=>", "{", "return", "{", "type", ":", "SymbolType", ".", "VARIABLE", ",", "level", ":", "ReferenceType", ".", "USE", ",", "name", ":", "name", ",", "location", ":", "node", ".", "location", ",", "node", ":", "assign", ",", "}", ";", "}", ")", ")", ";", "return", "sources", ".", "union", "(", "assign", ".", "op", "?", "targets", ":", "new", "RefSet", "(", ")", ")", ";", "}", "private", "_symbolTable", ":", "SymbolTable", ";", "private", "_defUsesCache", ":", "{", "[", "statementLocation", "]", ":", "DefUse", ";", "}", "=", "{", "}", ";", "}", "export", "interface", "Dataflow", "{", "fromNode", ":", "ast", ".", "SyntaxNode", ";", "toNode", ":", "ast", ".", "SyntaxNode", ";", "fromRef", "?", ":", "Ref", ";", "toRef", "?", ":", "Ref", ";", "}", "export", "enum", "ReferenceType", "{", "DEFINITION", "=", "'DEFINITION'", ",", "UPDATE", "=", "'UPDATE'", ",", "USE", "=", "'USE'", "}", "export", "enum", "SymbolType", "{", "VARIABLE", ",", "CLASS", ",", "FUNCTION", ",", "IMPORT", ",", "MUTATION", ",", "MAGIC", "}", "export", "interface", "Ref", "{", "type", ":", "SymbolType", ";", "level", ":", "ReferenceType", ";", "name", ":", "string", ";", "inferredType", "?", ":", "TypeSpec", "<", "FunctionSpec", ">", ";", "location", ":", "ast", ".", "Location", ";", "node", ":", "ast", ".", "SyntaxNode", ";", "}", "export", "class", "RefSet", "extends", "Set", "<", "Ref", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "r", "=>", "r", ".", "name", "+", "r", ".", "level", "+", "ast", ".", "locationString", "(", "r", ".", "location", ")", ",", "...", "items", ")", ";", "}", "}", "export", "function", "sameLocation", "(", "loc1", ",", "loc2", ")", "{", "return", "(", "loc1", ".", "first_column", "===", "loc2", ".", "first_column", "&&", "loc1", ".", "first_line", "===", "loc2", ".", "first_line", "&&", "loc1", ".", "last_column", "===", "loc2", ".", "last_column", "&&", "loc1", ".", "last_line", "===", "loc2", ".", "last_line", ")", ";", "}", "function", "getNameSetId", "(", "[", "name", ",", "node", "]", ")", "{", "if", "(", "!", "node", ".", "location", ")", "console", ".", "log", "(", "'***'", ",", "node", ")", ";", "return", "`${", "name", "}@${", "ast", ".", "locationString", "(", "node", ".", "location", ")", "}`", ";", "}", "class", "NameSet", "extends", "Set", "<", "[", "string", ",", "ast", ".", "SyntaxNode", "]", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "getNameSetId", ",", "...", "items", ")", ";", "}", "}", "function", "gatherNames", "(", "node", ")", "{", "if", "(", "Array", ".", "isArray", "(", "node", ")", ")", "{", "return", "new", "NameSet", "(", ")", ".", "union", "(", "...", "node", ".", "map", "(", "gatherNames", ")", ")", ";", "}", "else", "{", "return", "new", "NameSet", "(", "...", "ast", ".", "walk", "(", "node", ")", ".", "filter", "(", "e", "=>", "e", ".", "type", "==", "ast", ".", "NAME", ")", ".", "map", "(", "(", "e", ")", ":", "[", "string", ",", "ast", ".", "SyntaxNode", "]", "=>", "[", "e", ".", "id", ",", "e", "]", ")", ")", ";", "}", "}", "abstract", "class", "AnalysisWalker", "implements", "ast", ".", "WalkListener", "{", "readonly", "defs", ":", "RefSet", "=", "new", "RefSet", "(", ")", ";", "constructor", "(", "protected", "_statement", ",", "protected", "symbolTable", ")", "{", "}", "abstract", "onEnterNode", "?", "(", "node", ",", "ancestors", ")", ";", "}", "function", "runAnalysis", "(", "Analysis", ",", "defsForMethodResolution", ",", "statement", ",", "symbolTable", ")", "{", "const", "walker", "=", "new", "Analysis", "(", "statement", ",", "symbolTable", ",", "defsForMethodResolution", ")", ";", "ast", ".", "walk", "(", "statement", ",", "walker", ")", ";", "return", "walker", ".", "defs", ";", "}", "/**\n * Tree walk listener for collecting manual def annotations.\n */", "class", "DefAnnotationAnalysis", "extends", "AnalysisWalker", "{", "constructor", "(", "statement", ",", "symbolTable", ")", "{", "super", "(", "statement", ",", "symbolTable", ")", ";", "}", "onEnterNode", "(", "node", ")", "{", "if", "(", "node", ".", "type", "==", "ast", ".", "LITERAL", ")", "{", "let", "literal", "=", "node", "as", "ast", ".", "Literal", ";", "if", "(", "typeof", "literal", ".", "value", "==", "'string'", "||", "literal", ".", "value", "instanceof", "String", ")", "{", "let", "string", "=", "literal", ".", "value", ";", "let", "jsonMatch", "=", "string", ".", "match", "(", "/\"defs: (.*)\"/", ")", ";", "if", "(", "jsonMatch", "&&", "jsonMatch", ".", "length", ">=", "2", ")", "{", "let", "jsonString", "=", "jsonMatch", "[", "1", "]", ";", "let", "jsonStringUnescaped", "=", "jsonString", ".", "replace", "(", "/\\\\\"/g", ",", "'\"'", ")", ";", "try", "{", "let", "defSpecs", "=", "JSON", ".", "parse", "(", "jsonStringUnescaped", ")", ";", "for", "(", "let", "defSpec", "of", "defSpecs", ")", "{", "this", ".", "defs", ".", "add", "(", "{", "type", ":", "SymbolType", ".", "MAGIC", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "name", ":", "defSpec", ".", "name", ",", "location", ":", "{", "first_line", ":", "defSpec", ".", "pos", "[", "0", "]", "[", "0", "]", "+", "node", ".", "location", ".", "first_line", ",", "first_column", ":", "defSpec", ".", "pos", "[", "0", "]", "[", "1", "]", ",", "last_line", ":", "defSpec", ".", "pos", "[", "1", "]", "[", "0", "]", "+", "node", ".", "location", ".", "first_line", ",", "last_column", ":", "defSpec", ".", "pos", "[", "1", "]", "[", "1", "]", ",", "}", ",", "node", ":", "this", ".", "_statement", ",", "}", ")", ";", "}", "}", "catch", "(", "e", ")", "{", "}", "}", "}", "}", "}", "}", "/**\n * Tree walk listener for collecting names used in function call.\n */", "class", "ApiCallAnalysis", "extends", "AnalysisWalker", "{", "constructor", "(", "statement", ",", "symbolTable", ",", "private", "variableDefs", ")", "{", "super", "(", "statement", ",", "symbolTable", ")", ";", "}", "onEnterNode", "(", "node", ",", "ancestors", ")", "{", "if", "(", "node", ".", "type", "!==", "ast", ".", "CALL", ")", "{", "return", ";", "}", "let", "funcSpec", ";", "const", "func", "=", "node", ".", "func", ";", "if", "(", "func", ".", "type", "===", "ast", ".", "DOT", "&&", "func", ".", "value", ".", "type", "===", "ast", ".", "NAME", ")", "{", "const", "receiver", "=", "func", ".", "value", ";", "const", "moduleSpec", "=", "this", ".", "symbolTable", ".", "modules", "[", "receiver", ".", "id", "]", ";", "if", "(", "moduleSpec", ")", "{", "funcSpec", "=", "moduleSpec", ".", "functions", ".", "find", "(", "f", "=>", "f", ".", "name", "===", "func", ".", "name", ")", ";", "}", "else", "{", "const", "ref", "=", "this", ".", "variableDefs", ".", "items", ".", "find", "(", "r", "=>", "r", ".", "name", "===", "receiver", ".", "id", ")", ";", "if", "(", "ref", ")", "{", "const", "receiverType", "=", "ref", ".", "inferredType", ";", "if", "(", "receiverType", ")", "{", "const", "funcName", "=", "func", ".", "name", ";", "funcSpec", "=", "receiverType", ".", "methods", ".", "find", "(", "m", "=>", "m", ".", "name", "===", "funcName", ")", ";", "}", "}", "}", "}", "else", "if", "(", "func", ".", "type", "===", "ast", ".", "NAME", ")", "{", "funcSpec", "=", "this", ".", "symbolTable", ".", "lookupFunction", "(", "func", ".", "id", ")", ";", "}", "if", "(", "funcSpec", "&&", "funcSpec", ".", "updates", ")", "{", "funcSpec", ".", "updates", ".", "forEach", "(", "paramName", "=>", "{", "const", "position", "=", "typeof", "paramName", "===", "'string'", "?", "parseInt", "(", "paramName", ")", ":", "paramName", ";", "if", "(", "isNaN", "(", "position", ")", ")", "{", "return", ";", "}", "let", "actualArgName", ";", "if", "(", "0", "<", "position", "&&", "position", "-", "1", "<", "node", ".", "args", ".", "length", ")", "{", "const", "arg", "=", "node", ".", "args", "[", "position", "-", "1", "]", ".", "actual", ";", "if", "(", "arg", ".", "type", "===", "ast", ".", "NAME", ")", "{", "actualArgName", "=", "arg", ".", "id", ";", "}", "}", "else", "if", "(", "position", "===", "0", "&&", "node", ".", "func", ".", "type", "===", "ast", ".", "DOT", "&&", "node", ".", "func", ".", "value", ".", "type", "===", "ast", ".", "NAME", ")", "{", "actualArgName", "=", "node", ".", "func", ".", "value", ".", "id", ";", "}", "if", "(", "actualArgName", ")", "{", "this", ".", "defs", ".", "add", "(", "{", "type", ":", "SymbolType", ".", "MUTATION", ",", "level", ":", "ReferenceType", ".", "UPDATE", ",", "name", ":", "actualArgName", ",", "location", ":", "node", ".", "location", ",", "node", ":", "this", ".", "_statement", ",", "}", ")", ";", "}", "}", ")", ";", "}", "else", "{", "node", ".", "args", ".", "forEach", "(", "arg", "=>", "{", "if", "(", "arg", ".", "actual", ".", "type", "===", "ast", ".", "NAME", ")", "{", "const", "name", "=", "arg", ".", "actual", ".", "id", ";", "this", ".", "defs", ".", "add", "(", "{", "type", ":", "SymbolType", ".", "MUTATION", ",", "level", ":", "ReferenceType", ".", "UPDATE", ",", "name", ":", "name", ",", "location", ":", "node", ".", "location", ",", "node", ":", "this", ".", "_statement", ",", "}", ")", ";", "}", "}", ")", ";", "if", "(", "node", ".", "func", ".", "type", "===", "ast", ".", "DOT", "&&", "node", ".", "func", ".", "value", ".", "type", "===", "ast", ".", "NAME", ")", "{", "const", "name", "=", "node", ".", "func", ".", "value", ".", "id", ";", "this", ".", "defs", ".", "add", "(", "{", "type", ":", "SymbolType", ".", "MUTATION", ",", "level", ":", "ReferenceType", ".", "UPDATE", ",", "name", ":", "name", ",", "location", ":", "node", ".", "location", ",", "node", ":", "this", ".", "_statement", ",", "}", ")", ";", "}", "}", "}", "}", "/**\n * Tree walk listener for collecting definitions in the target of an assignment.\n */", "class", "TargetsDefListener", "extends", "AnalysisWalker", "{", "private", "isAugAssign", ":", "boolean", ";", "constructor", "(", "assign", ",", "symbolTable", ")", "{", "super", "(", "assign", ",", "symbolTable", ")", ";", "this", ".", "isAugAssign", "=", "!", "!", "assign", ".", "op", ";", "if", "(", "assign", ".", "targets", ")", "{", "for", "(", "let", "target", "of", "assign", ".", "targets", ")", "{", "ast", ".", "walk", "(", "target", ",", "this", ")", ";", "}", "}", "assign", ".", "sources", ".", "forEach", "(", "(", "source", ",", "i", ")", "=>", "{", "if", "(", "source", ".", "type", "===", "ast", ".", "CALL", ")", "{", "const", "spec", "=", "symbolTable", ".", "lookupNode", "(", "source", ".", "func", ")", ";", "const", "target", "=", "assign", ".", "targets", "[", "i", "]", ";", "if", "(", "spec", "&&", "target", "&&", "target", ".", "type", "===", "ast", ".", "NAME", ")", "{", "const", "def", "=", "this", ".", "defs", ".", "items", ".", "find", "(", "d", "=>", "d", ".", "name", "===", "target", ".", "id", ")", ";", "if", "(", "def", ")", "{", "def", ".", "inferredType", "=", "spec", ".", "returnsType", ";", "}", "}", "}", "}", ")", ";", "}", "onEnterNode", "(", "target", ",", "ancestors", ")", "{", "if", "(", "target", ".", "type", "==", "ast", ".", "NAME", ")", "{", "if", "(", "ancestors", ".", "length", ">", "1", ")", "{", "const", "parent", "=", "ancestors", "[", "0", "]", ";", "if", "(", "parent", ".", "type", "===", "ast", ".", "INDEX", "&&", "parent", ".", "args", ".", "some", "(", "a", "=>", "a", "===", "target", ")", ")", "{", "return", ";", "}", "}", "const", "isUpdate", "=", "this", ".", "isAugAssign", "||", "ancestors", ".", "some", "(", "a", "=>", "a", ".", "type", "==", "ast", ".", "DOT", "||", "a", ".", "type", "==", "ast", ".", "INDEX", ")", ";", "this", ".", "defs", ".", "add", "(", "{", "type", ":", "SymbolType", ".", "VARIABLE", ",", "level", ":", "isUpdate", "?", "ReferenceType", ".", "UPDATE", ":", "ReferenceType", ".", "DEFINITION", ",", "location", ":", "target", ".", "location", ",", "name", ":", "target", ".", "id", ",", "node", ":", "this", ".", "_statement", ",", "}", ")", ";", "}", "}", "}", "class", "ParameterSideEffectAnalysis", "extends", "AnalysisWalker", "{", "private", "flows", ":", "Set", "<", "Dataflow", ">", ";", "private", "isMethod", ":", "boolean", ";", "private", "spec", ":", "FunctionSpec", ";", "constructor", "(", "private", "def", ",", "symbolTable", ")", "{", "super", "(", "def", ",", "symbolTable", ")", ";", "const", "cfg", "=", "new", "ControlFlowGraph", "(", "def", ")", ";", "this", ".", "flows", "=", "new", "DataflowAnalyzer", "(", ")", ".", "analyze", "(", "cfg", ",", "getParameterRefs", "(", "def", ")", ")", ".", "dataflows", ";", "this", ".", "flows", "=", "this", ".", "getTransitiveClosure", "(", "this", ".", "flows", ")", ";", "this", ".", "symbolTable", ".", "functions", "[", "def", ".", "name", "]", "=", "this", ".", "spec", "=", "{", "name", ":", "def", ".", "name", ",", "updates", ":", "[", "]", "}", ";", "}", "private", "getTransitiveClosure", "(", "flows", ")", "{", "const", "nodes", "=", "flows", ".", "map", "(", "getNodeId", ",", "df", "=>", "df", ".", "fromNode", ")", ".", "union", "(", "flows", ".", "map", "(", "getNodeId", ",", "df", "=>", "df", ".", "toNode", ")", ")", ";", "const", "result", "=", "new", "Set", "(", "getDataflowId", ",", "...", "flows", ".", "items", ")", ";", "nodes", ".", "items", ".", "forEach", "(", "from", "=>", "nodes", ".", "items", ".", "forEach", "(", "to", "=>", "nodes", ".", "items", ".", "forEach", "(", "middle", "=>", "{", "if", "(", "flows", ".", "has", "(", "{", "fromNode", ":", "from", ",", "toNode", ":", "middle", "}", ")", "&&", "flows", ".", "has", "(", "{", "fromNode", ":", "middle", ",", "toNode", ":", "to", "}", ")", ")", "{", "result", ".", "add", "(", "{", "fromNode", ":", "from", ",", "toNode", ":", "to", "}", ")", ";", "}", "}", ")", ")", ")", ";", "return", "result", ";", "}", "private", "checkParameterFlow", "(", "sideEffect", ")", "{", "this", ".", "def", ".", "params", ".", "forEach", "(", "(", "parm", ",", "i", ")", "=>", "{", "const", "parmNum", "=", "this", ".", "isMethod", "?", "i", ":", "i", "+", "1", ";", "if", "(", "this", ".", "flows", ".", "has", "(", "{", "fromNode", ":", "parm", ",", "toNode", ":", "sideEffect", "}", ")", "&&", "this", ".", "spec", ".", "updates", ".", "indexOf", "(", "parmNum", ")", "<", "0", ")", "{", "this", ".", "spec", ".", "updates", ".", "push", "(", "parmNum", ")", ";", "}", "}", ")", ";", "}", "onEnterNode", "(", "statement", ",", "ancestors", ")", "{", "switch", "(", "statement", ".", "type", ")", "{", "case", "ast", ".", "ASSIGN", ":", "for", "(", "let", "target", "of", "statement", ".", "targets", ")", "{", "if", "(", "target", ".", "type", "===", "ast", ".", "DOT", ")", "{", "this", ".", "checkParameterFlow", "(", "statement", ")", ";", "}", "else", "if", "(", "target", ".", "type", "===", "ast", ".", "INDEX", ")", "{", "this", ".", "checkParameterFlow", "(", "statement", ")", ";", "}", "}", "break", ";", "case", "ast", ".", "CALL", ":", "const", "funcSpec", "=", "this", ".", "symbolTable", ".", "lookupNode", "(", "statement", ".", "func", ")", ";", "const", "actuals", "=", "statement", ".", "args", ".", "map", "(", "a", "=>", "a", ".", "actual", ")", ";", "this", ".", "def", ".", "params", ".", "forEach", "(", "(", "param", ",", "i", ")", "=>", "{", "const", "paramNum", "=", "this", ".", "isMethod", "?", "i", ":", "i", "+", "1", ";", "if", "(", "funcSpec", ")", "{", "const", "paramFlows", "=", "this", ".", "flows", ".", "filter", "(", "f", "=>", "f", ".", "fromNode", "===", "param", "&&", "f", ".", "toNode", "===", "statement", "&&", "f", ".", "toRef", "!==", "undefined", ")", ";", "const", "updates", "=", "funcSpec", ".", "updates", ".", "filter", "(", "u", "=>", "typeof", "u", "===", "'number'", ")", "as", "number", "[", "]", ";", "if", "(", "updates", ".", "length", ">", "0", "&&", "!", "paramFlows", ".", "empty", "&&", "this", ".", "spec", ".", "updates", ".", "indexOf", "(", "paramNum", ")", "<", "0", ")", "{", "paramFlows", ".", "items", ".", "forEach", "(", "pf", "=>", "{", "if", "(", "updates", ".", "find", "(", "i", "=>", "i", ">", "0", "&&", "ast", ".", "walk", "(", "actuals", "[", "i", "-", "1", "]", ")", ".", "find", "(", "a", "=>", "a", ".", "type", "===", "ast", ".", "NAME", "&&", "a", ".", "id", "===", "pf", ".", "toRef", ".", "name", ")", ")", ")", "{", "this", ".", "spec", ".", "updates", ".", "push", "(", "paramNum", ")", ";", "}", "else", "if", "(", "updates", ".", "indexOf", "(", "0", ")", ">=", "0", "&&", "statement", ".", "func", ".", "type", "===", "ast", ".", "DOT", "&&", "statement", ".", "func", ".", "value", ".", "type", "===", "ast", ".", "NAME", "&&", "statement", ".", "func", ".", "value", ".", "id", "===", "pf", ".", "toRef", ".", "name", ")", "{", "this", ".", "spec", ".", "updates", ".", "push", "(", "0", ")", ";", "}", "}", ")", ";", "}", "}", "else", "{", "this", ".", "spec", ".", "updates", ".", "push", "(", "paramNum", ")", ";", "}", "}", ")", ";", "break", ";", "}", "}", "}", "function", "getParameterRefs", "(", "def", ")", "{", "return", "new", "RefSet", "(", "...", "def", ".", "params", ".", "map", "(", "p", "=>", "(", "{", "name", ":", "p", ".", "name", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "type", ":", "SymbolType", ".", "VARIABLE", ",", "location", ":", "p", ".", "location", ",", "node", ":", "p", "}", ")", ")", ")", ";", "}", "function", "getNodeId", "(", "node", ")", "{", "return", "`${", "ast", ".", "locationString", "(", "node", ".", "location", ")", "}`", ";", "}", "function", "getDataflowId", "(", "df", ")", "{", "if", "(", "!", "df", ".", "fromNode", ".", "location", ")", "{", "console", ".", "log", "(", "'*** FROM'", ",", "df", ".", "fromNode", ",", "df", ".", "fromNode", ".", "location", ")", ";", "}", "if", "(", "!", "df", ".", "toNode", ".", "location", ")", "{", "console", ".", "log", "(", "'*** TO'", ",", "df", ".", "toNode", ",", "df", ".", "toNode", ".", "location", ")", ";", "}", "return", "`${", "getNodeId", "(", "df", ".", "fromNode", ")", "}->${", "getNodeId", "(", "df", ".", "toNode", ")", "}`", ";", "}", "export", "type", "DataflowAnalysisResult", "=", "{", "dataflows", ":", "Set", "<", "Dataflow", ">", ";", "undefinedRefs", ":", "RefSet", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DefUse", null, "DefUse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "DefUse", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DefUse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "DefUse", null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DefUse", null, "ast.SyntaxNode", null, "RefSet", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "DefUse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, "DefUse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "ControlFlowGraph", null, "RefSet", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DefUse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SyntaxNode", null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "ast.SyntaxNode", null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "UNK", null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "UNK", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "ast.SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, "ast.SyntaxNode", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "UNK", null, null, null, "ControlFlowGraph", null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, "UNK", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "Ref", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "UNK", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/data-flow.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "data-flow.ts"}
{"tokens": ["import", "*", "as", "ast", "from", "'./python-parser'", ";", "import", "{", "Dataflow", "}", "from", "'./data-flow'", ";", "import", "{", "Set", "}", "from", "'./set'", ";", "import", "{", "printNode", "}", "from", "'./printNode'", ";", "export", "class", "Block", "{", "constructor", "(", "public", "id", ",", "public", "readonly", "hint", ",", "public", "statements", ",", "public", "loopVariables", "=", "[", "]", ")", "{", "}", "public", "toString", "(", ")", "{", "return", "(", "`BLOCK ${", "this", ".", "id", "} (${", "this", ".", "hint", "})\\n`", "+", "this", ".", "statements", ".", "map", "(", "s", "=>", "`${", "s", ".", "location", ".", "first_line", "}: ${", "printNode", "(", "s", ")", "}`", ")", ".", "join", "(", "'\\n'", ")", ")", ";", "}", "}", "class", "BlockSet", "extends", "Set", "<", "Block", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "b", "=>", "b", ".", "id", ".", "toString", "(", ")", ",", "...", "items", ")", ";", "}", "}", "class", "Context", "{", "constructor", "(", "public", "loopHead", ",", "public", "loopExit", ",", "public", "exceptionBlock", ")", "{", "}", "public", "forLoop", "(", "loopHead", ",", "loopExit", ")", "{", "return", "new", "Context", "(", "loopHead", ",", "loopExit", ",", "this", ".", "exceptionBlock", ")", ";", "}", "public", "forExcepts", "(", "exceptionBlock", ")", "{", "return", "new", "Context", "(", "this", ".", "loopHead", ",", "this", ".", "loopExit", ",", "exceptionBlock", ")", ";", "}", "}", "export", "class", "ControlFlowGraph", "{", "private", "_blocks", ":", "Block", "[", "]", "=", "[", "]", ";", "private", "globalId", "=", "0", ";", "private", "entry", ":", "Block", ";", "private", "exit", ":", "Block", ";", "private", "successors", "=", "new", "Set", "<", "[", "Block", ",", "Block", "]", ">", "(", "(", "[", "b1", ",", "b2", "]", ")", "=>", "b1", ".", "id", "+", "','", "+", "b2", ".", "id", ")", ";", "private", "loopVariables", ":", "ast", ".", "SyntaxNode", "[", "]", "[", "]", "=", "[", "]", ";", "constructor", "(", "node", ")", "{", "if", "(", "!", "node", ")", "{", "throw", "'argument undefined'", ";", "}", "let", "statements", "=", "[", "]", ";", "if", "(", "node", ".", "type", "==", "ast", ".", "MODULE", ")", "{", "statements", "=", "Array", ".", "isArray", "(", "node", ".", "code", ")", "?", "node", ".", "code", ":", "[", "node", ".", "code", "]", ";", "}", "else", "if", "(", "node", ".", "type", "==", "ast", ".", "DEF", ")", "{", "statements", "=", "Array", ".", "isArray", "(", "node", ".", "code", ")", "?", "node", ".", "code", ":", "[", "node", ".", "code", "]", ";", "}", "[", "this", ".", "entry", ",", "this", ".", "exit", "]", "=", "this", ".", "makeCFG", "(", "'entry'", ",", "statements", ",", "new", "Context", "(", "null", ",", "null", ",", "this", ".", "makeBlock", "(", "'exceptional exit'", ")", ")", ")", ";", "}", "private", "makeBlock", "(", "hint", ",", "statements", "=", "[", "]", ")", "{", "const", "b", "=", "new", "Block", "(", "this", ".", "globalId", "++", ",", "hint", ",", "statements", ")", ";", "if", "(", "this", ".", "loopVariables", ".", "length", ")", "{", "b", ".", "loopVariables", "=", "this", ".", "loopVariables", "[", "this", ".", "loopVariables", ".", "length", "-", "1", "]", ";", "}", "this", ".", "_blocks", ".", "push", "(", "b", ")", ";", "return", "b", ";", "}", "public", "get", "blocks", "(", ")", ":", "Block", "[", "]", "{", "const", "visited", "=", "[", "]", ";", "const", "toVisit", "=", "new", "BlockSet", "(", "this", ".", "entry", ")", ";", "while", "(", "toVisit", ".", "size", ")", "{", "const", "block", "=", "toVisit", ".", "take", "(", ")", ";", "visited", ".", "push", "(", "block", ")", ";", "this", ".", "successors", ".", "items", ".", "forEach", "(", "(", "[", "pred", ",", "succ", "]", ")", "=>", "{", "if", "(", "pred", "===", "block", "&&", "visited", ".", "indexOf", "(", "succ", ")", "<", "0", ")", "{", "toVisit", ".", "add", "(", "succ", ")", ";", "}", "}", ")", ";", "}", "return", "visited", ";", "}", "public", "getSuccessors", "(", "block", ")", "{", "return", "this", ".", "successors", ".", "items", ".", "filter", "(", "(", "[", "p", ",", "_", "]", ")", "=>", "p", "==", "block", ")", ".", "map", "(", "(", "[", "_", ",", "s", "]", ")", "=>", "s", ")", ";", "}", "public", "getPredecessors", "(", "block", ")", "{", "return", "this", ".", "successors", ".", "items", ".", "filter", "(", "(", "[", "_", ",", "s", "]", ")", "=>", "s", "==", "block", ")", ".", "map", "(", "(", "[", "p", ",", "_", "]", ")", "=>", "p", ")", ";", "}", "public", "print", "(", ")", "{", "console", ".", "log", "(", "'CFG'", ",", "'ENTRY:'", ",", "this", ".", "entry", ".", "id", ",", "'EXIT:'", ",", "this", ".", "exit", ".", "id", ")", ";", "this", ".", "blocks", ".", "forEach", "(", "block", "=>", "{", "console", ".", "log", "(", "block", ".", "toString", "(", ")", ")", ";", "if", "(", "block", "===", "this", ".", "exit", ")", "{", "console", ".", "log", "(", "'    EXIT'", ")", ";", "}", "else", "{", "console", ".", "log", "(", "'    SUCC'", ",", "this", ".", "getSuccessors", "(", "block", ")", ".", "map", "(", "b", "=>", "b", ".", "id", ".", "toString", "(", ")", ")", ".", "join", "(", "','", ")", ")", ";", "}", "}", ")", ";", "}", "private", "link", "(", "...", "blocks", ")", "{", "for", "(", "let", "i", "=", "1", ";", "i", "<", "blocks", ".", "length", ";", "i", "++", ")", "this", ".", "successors", ".", "add", "(", "[", "blocks", "[", "i", "-", "1", "]", ",", "blocks", "[", "i", "]", "]", ")", ";", "}", "private", "handleIf", "(", "statement", ",", "last", ",", "context", ")", "{", "const", "ifCondBlock", "=", "this", ".", "makeBlock", "(", "'if cond'", ",", "[", "statement", ".", "cond", "]", ")", ";", "if", "(", "!", "statement", ".", "code", ")", "console", ".", "log", "(", "statement", ")", ";", "const", "[", "bodyEntry", ",", "bodyExit", "]", "=", "this", ".", "makeCFG", "(", "'if body'", ",", "statement", ".", "code", ",", "context", ")", ";", "this", ".", "link", "(", "last", ",", "ifCondBlock", ")", ";", "this", ".", "link", "(", "ifCondBlock", ",", "bodyEntry", ")", ";", "const", "joinBlock", "=", "this", ".", "makeBlock", "(", "'conditional join'", ")", ";", "this", ".", "link", "(", "bodyExit", ",", "joinBlock", ")", ";", "let", "lastCondBlock", "=", "ifCondBlock", ";", "if", "(", "statement", ".", "elif", ")", "{", "statement", ".", "elif", ".", "forEach", "(", "elif", "=>", "{", "const", "elifCondBlock", "=", "this", ".", "makeBlock", "(", "'elif cond'", ",", "[", "elif", ".", "cond", "]", ")", ";", "this", ".", "link", "(", "lastCondBlock", ",", "elifCondBlock", ")", ";", "const", "[", "elifEntry", ",", "elifExit", "]", "=", "this", ".", "makeCFG", "(", "'elif body'", ",", "elif", ".", "code", ",", "context", ")", ";", "this", ".", "link", "(", "elifCondBlock", ",", "elifEntry", ")", ";", "this", ".", "link", "(", "elifExit", ",", "joinBlock", ")", ";", "lastCondBlock", "=", "elifCondBlock", ";", "}", ")", ";", "}", "if", "(", "statement", ".", "else", ")", "{", "let", "elseStmt", "=", "statement", ".", "else", "as", "ast", ".", "Else", ";", "if", "(", "elseStmt", ".", "code", "&&", "elseStmt", ".", "code", ".", "length", ")", "{", "const", "elseCondBlock", "=", "this", ".", "makeBlock", "(", "'else cond'", ",", "[", "elseStmt", "]", ")", ";", "this", ".", "link", "(", "lastCondBlock", ",", "elseCondBlock", ")", ";", "const", "[", "elseEntry", ",", "elseExit", "]", "=", "this", ".", "makeCFG", "(", "'else body'", ",", "elseStmt", ".", "code", ",", "context", ")", ";", "this", ".", "link", "(", "elseCondBlock", ",", "elseEntry", ")", ";", "this", ".", "link", "(", "elseExit", ",", "joinBlock", ")", ";", "lastCondBlock", "=", "elseCondBlock", ";", "}", "}", "this", ".", "link", "(", "lastCondBlock", ",", "joinBlock", ")", ";", "return", "joinBlock", ";", "}", "private", "handleWhile", "(", "statement", ",", "last", ",", "context", ")", "{", "const", "loopHeadBlock", "=", "this", ".", "makeBlock", "(", "'while loop head'", ",", "[", "statement", ".", "cond", "]", ")", ";", "this", ".", "link", "(", "last", ",", "loopHeadBlock", ")", ";", "const", "afterLoop", "=", "this", ".", "makeBlock", "(", "'while loop join'", ")", ";", "this", ".", "loopVariables", ".", "push", "(", "[", "statement", ".", "cond", "]", ")", ";", "const", "[", "bodyEntry", ",", "bodyExit", "]", "=", "this", ".", "makeCFG", "(", "'while body'", ",", "statement", ".", "code", ",", "context", ".", "forLoop", "(", "loopHeadBlock", ",", "afterLoop", ")", ")", ";", "this", ".", "loopVariables", ".", "pop", "(", ")", ";", "this", ".", "link", "(", "loopHeadBlock", ",", "bodyEntry", ")", ";", "this", ".", "link", "(", "bodyExit", ",", "loopHeadBlock", ")", ";", "this", ".", "link", "(", "loopHeadBlock", ",", "afterLoop", ")", ";", "return", "afterLoop", ";", "}", "private", "handleFor", "(", "statement", ",", "last", ",", "context", ")", "{", "const", "loopHeadBlock", "=", "this", ".", "makeBlock", "(", "'for loop head'", ",", "[", "{", "type", ":", "ast", ".", "ASSIGN", ",", "op", ":", "undefined", ",", "sources", ":", "statement", ".", "iter", ",", "targets", ":", "statement", ".", "target", ",", "location", ":", "statement", ".", "decl_location", ",", "}", ",", "]", ")", ";", "this", ".", "link", "(", "last", ",", "loopHeadBlock", ")", ";", "const", "afterLoop", "=", "this", ".", "makeBlock", "(", "'for loop join'", ")", ";", "this", ".", "loopVariables", ".", "push", "(", "statement", ".", "target", ")", ";", "const", "[", "bodyEntry", ",", "bodyExit", "]", "=", "this", ".", "makeCFG", "(", "'for body'", ",", "statement", ".", "code", ",", "context", ".", "forLoop", "(", "loopHeadBlock", ",", "afterLoop", ")", ")", ";", "this", ".", "loopVariables", ".", "pop", "(", ")", ";", "this", ".", "link", "(", "loopHeadBlock", ",", "bodyEntry", ")", ";", "this", ".", "link", "(", "bodyExit", ",", "loopHeadBlock", ")", ";", "this", ".", "link", "(", "loopHeadBlock", ",", "afterLoop", ")", ";", "return", "afterLoop", ";", "}", "private", "handleWith", "(", "statement", ",", "last", ",", "context", ")", "{", "const", "assignments", "=", "statement", ".", "items", ".", "map", "(", "(", "{", "with", ":", "w", ",", "as", ":", "a", "}", ")", "=>", "<", "ast", ".", "Assignment", ">", "{", "type", ":", "ast", ".", "ASSIGN", ",", "targets", ":", "[", "a", "]", ",", "sources", ":", "[", "w", "]", ",", "location", ":", "w", ".", "location", ",", "}", ")", ";", "const", "resourceBlock", "=", "this", ".", "makeBlock", "(", "'with'", ",", "assignments", ")", ";", "this", ".", "link", "(", "last", ",", "resourceBlock", ")", ";", "const", "[", "bodyEntry", ",", "bodyExit", "]", "=", "this", ".", "makeCFG", "(", "'with body'", ",", "statement", ".", "code", ",", "context", ")", ";", "this", ".", "link", "(", "resourceBlock", ",", "bodyEntry", ")", ";", "return", "bodyExit", ";", "}", "private", "handleTry", "(", "statement", ",", "last", ",", "context", ")", "{", "const", "afterTry", "=", "this", ".", "makeBlock", "(", "'try join'", ")", ";", "let", "exnContext", "=", "context", ";", "let", "handlerExits", "=", "[", "]", ";", "let", "handlerHead", "=", "undefined", ";", "if", "(", "statement", ".", "excepts", ")", "{", "handlerHead", "=", "this", ".", "makeBlock", "(", "'handlers'", ")", ";", "const", "handlerCfgs", "=", "statement", ".", "excepts", ".", "map", "(", "handler", "=>", "this", ".", "makeCFG", "(", "'handler body'", ",", "handler", ".", "code", ",", "context", ")", ")", ";", "handlerCfgs", ".", "forEach", "(", "(", "[", "exceptEntry", ",", "_", "]", ")", "=>", "this", ".", "link", "(", "handlerHead", ",", "exceptEntry", ")", ")", ";", "exnContext", "=", "context", ".", "forExcepts", "(", "handlerHead", ")", ";", "handlerExits", "=", "handlerCfgs", ".", "map", "(", "(", "[", "_", ",", "exceptExit", "]", ")", "=>", "exceptExit", ")", ";", "}", "const", "[", "bodyEntry", ",", "bodyExit", "]", "=", "this", ".", "makeCFG", "(", "'try body'", ",", "statement", ".", "code", ",", "exnContext", ")", ";", "this", ".", "link", "(", "last", ",", "bodyEntry", ")", ";", "let", "normalExit", "=", "bodyExit", ";", "if", "(", "handlerHead", ")", "{", "this", ".", "link", "(", "bodyExit", ",", "handlerHead", ")", ";", "}", "if", "(", "statement", ".", "else", ")", "{", "const", "[", "elseEntry", ",", "elseExit", "]", "=", "this", ".", "makeCFG", "(", "'try else body'", ",", "statement", ".", "else", ",", "context", ")", ";", "this", ".", "link", "(", "normalExit", ",", "elseEntry", ")", ";", "normalExit", "=", "elseExit", ";", "}", "if", "(", "statement", ".", "finally", ")", "{", "const", "[", "finallyEntry", ",", "finallyExit", "]", "=", "this", ".", "makeCFG", "(", "'finally body'", ",", "statement", ".", "finally", ",", "context", ")", ";", "this", ".", "link", "(", "normalExit", ",", "finallyEntry", ")", ";", "this", ".", "link", "(", "finallyExit", ",", "afterTry", ")", ";", "handlerExits", ".", "forEach", "(", "handlerExit", "=>", "this", ".", "link", "(", "handlerExit", ",", "finallyEntry", ")", ")", ";", "}", "else", "{", "handlerExits", ".", "forEach", "(", "handlerExit", "=>", "this", ".", "link", "(", "handlerExit", ",", "afterTry", ")", ")", ";", "this", ".", "link", "(", "normalExit", ",", "afterTry", ")", ";", "}", "return", "afterTry", ";", "}", "private", "makeCFG", "(", "hint", ",", "statements", ",", "context", ")", "{", "if", "(", "!", "hint", ")", "{", "throw", "'hint undefined'", ";", "}", "if", "(", "!", "statements", ")", "{", "throw", "'statements undefined'", ";", "}", "if", "(", "!", "context", ")", "{", "throw", "'context undefined'", ";", "}", "const", "entry", "=", "this", ".", "makeBlock", "(", "hint", ")", ";", "let", "last", "=", "entry", ";", "statements", ".", "forEach", "(", "statement", "=>", "{", "switch", "(", "statement", ".", "type", ")", "{", "case", "ast", ".", "IF", ":", "last", "=", "this", ".", "handleIf", "(", "statement", ",", "last", ",", "context", ")", ";", "break", ";", "case", "ast", ".", "WHILE", ":", "last", "=", "this", ".", "handleWhile", "(", "statement", ",", "last", ",", "context", ")", ";", "break", ";", "case", "ast", ".", "FOR", ":", "last", "=", "this", ".", "handleFor", "(", "statement", ",", "last", ",", "context", ")", ";", "break", ";", "case", "ast", ".", "WITH", ":", "last", "=", "this", ".", "handleWith", "(", "statement", ",", "last", ",", "context", ")", ";", "break", ";", "case", "ast", ".", "TRY", ":", "last", "=", "this", ".", "handleTry", "(", "statement", ",", "last", ",", "context", ")", ";", "break", ";", "case", "ast", ".", "RAISE", ":", "this", ".", "link", "(", "last", ",", "context", ".", "exceptionBlock", ")", ";", "return", ";", "case", "ast", ".", "BREAK", ":", "this", ".", "link", "(", "last", ",", "context", ".", "loopExit", ")", ";", "return", ";", "case", "ast", ".", "CONTINUE", ":", "this", ".", "link", "(", "last", ",", "context", ".", "loopHead", ")", ";", "return", ";", "case", "ast", ".", "DEF", ":", "case", "ast", ".", "CLASS", ":", "default", ":", "last", ".", "statements", ".", "push", "(", "statement", ")", ";", "break", ";", "}", "}", ")", ";", "return", "[", "entry", ",", "last", "]", ";", "}", "/**\n     * Based on the algorithm in \"Engineering a Compiler\", 2nd ed., Cooper and Torczon:\n     * - p479: computing dominance\n     * - p498-500: dominator trees and frontiers\n     * - p544: postdominance and reverse dominance frontier\n     */", "public", "visitControlDependencies", "(", "visit", ")", "{", "let", "blocks", "=", "this", ".", "blocks", ";", "this", ".", "postdominators", "=", "this", ".", "findPostdominators", "(", "blocks", ")", ";", "this", ".", "immediatePostdominators", "=", "this", ".", "getImmediatePostdominators", "(", "this", ".", "postdominators", ".", "items", ")", ";", "this", ".", "reverseDominanceFrontiers", "=", "this", ".", "buildReverseDominanceFrontiers", "(", "blocks", ")", ";", "for", "(", "let", "block", "of", "blocks", ")", "{", "if", "(", "this", ".", "reverseDominanceFrontiers", ".", "hasOwnProperty", "(", "block", ".", "id", ")", ")", "{", "let", "frontier", "=", "this", ".", "reverseDominanceFrontiers", "[", "block", ".", "id", "]", ";", "for", "(", "let", "frontierBlock", "of", "frontier", ".", "items", ")", "{", "for", "(", "let", "controlStmt", "of", "frontierBlock", ".", "statements", ")", "{", "for", "(", "let", "stmt", "of", "block", ".", "statements", ")", "{", "visit", "(", "controlStmt", ",", "stmt", ")", ";", "}", "}", "}", "}", "}", "}", "private", "postdominators", "=", "new", "PostdominatorSet", "(", ")", ";", "private", "immediatePostdominators", ":", "PostdominatorSet", ";", "private", "reverseDominanceFrontiers", ":", "{", "[", "blockId", "]", ":", "BlockSet", ";", "}", ";", "private", "postdominatorExists", "(", "block", ",", "postdominator", ")", "{", "return", "(", "this", ".", "postdominators", ".", "filter", "(", "p", "=>", "p", ".", "block", "==", "block", "&&", "p", ".", "postdominator", "==", "postdominator", ")", ".", "size", ">", "0", ")", ";", "}", "private", "getImmediatePostdominator", "(", "block", ")", "{", "let", "immediatePostdominators", "=", "this", ".", "immediatePostdominators", ".", "items", ".", "filter", "(", "p", "=>", "p", ".", "block", "==", "block", ")", ";", "return", "immediatePostdominators", "[", "0", "]", ";", "}", "private", "findPostdominators", "(", "blocks", ")", "{", "let", "postdominators", "=", "{", "}", ";", "for", "(", "let", "block", "of", "blocks", ")", "{", "postdominators", "[", "block", ".", "id", "]", "=", "new", "PostdominatorSet", "(", ")", ";", "for", "(", "let", "otherBlock", "of", "blocks", ")", "{", "let", "distance", "=", "block", ".", "id", "==", "otherBlock", ".", "id", "?", "0", ":", "Infinity", ";", "postdominators", "[", "block", ".", "id", "]", ".", "add", "(", "new", "Postdominator", "(", "distance", ",", "block", ",", "otherBlock", ")", ")", ";", "}", "}", "let", "lastBlock", "=", "blocks", ".", "filter", "(", "b", "=>", "this", ".", "getSuccessors", "(", "b", ")", ".", "length", "==", "0", ")", "[", "0", "]", ";", "postdominators", "[", "lastBlock", ".", "id", "]", "=", "new", "PostdominatorSet", "(", "new", "Postdominator", "(", "0", ",", "lastBlock", ",", "lastBlock", ")", ")", ";", "let", "changed", "=", "true", ";", "while", "(", "changed", "==", "true", ")", "{", "changed", "=", "false", ";", "for", "(", "let", "block", "of", "blocks", ")", "{", "if", "(", "block", "==", "lastBlock", ")", "continue", ";", "let", "oldPostdominators", "=", "postdominators", "[", "block", ".", "id", "]", ";", "let", "successors", "=", "this", ".", "getSuccessors", "(", "block", ")", ";", "let", "newPostdominators", "=", "new", "PostdominatorSet", "(", "...", "[", "]", ".", "concat", "(", "...", "successors", ".", "map", "(", "s", "=>", "postdominators", "[", "s", ".", "id", "]", ".", "items", ")", ")", ".", "reduce", "(", "(", "pCounts", ",", "p", ")", "=>", "{", "let", "countIndex", "=", "pCounts", ".", "findIndex", "(", "record", "=>", "{", "return", "record", ".", "p", ".", "postdominator", "==", "p", ".", "postdominator", ";", "}", ")", ";", "let", "countRecord", ";", "if", "(", "countIndex", "==", "-", "1", ")", "{", "countRecord", "=", "{", "p", ":", "new", "Postdominator", "(", "p", ".", "distance", "+", "1", ",", "block", ",", "p", ".", "postdominator", ")", ",", "count", ":", "0", ",", "}", ";", "pCounts", ".", "push", "(", "countRecord", ")", ";", "}", "else", "{", "countRecord", "=", "pCounts", "[", "countIndex", "]", ";", "pCounts", "[", "countIndex", "]", ".", "p", ".", "distance", "=", "Math", ".", "min", "(", "pCounts", "[", "countIndex", "]", ".", "p", ".", "distance", ",", "p", ".", "distance", "+", "1", ")", ";", "}", "countRecord", ".", "count", "++", ";", "return", "pCounts", ";", "}", ",", "[", "]", ")", ".", "filter", "(", "(", "p", ")", "=>", "{", "return", "p", ".", "count", "==", "successors", ".", "length", ";", "}", ")", ".", "map", "(", "(", "p", ")", "=>", "{", "return", "p", ".", "p", ";", "}", ")", ")", ";", "newPostdominators", ".", "add", "(", "new", "Postdominator", "(", "0", ",", "block", ",", "block", ")", ")", ";", "if", "(", "!", "oldPostdominators", ".", "equals", "(", "newPostdominators", ")", ")", "{", "postdominators", "[", "block", ".", "id", "]", "=", "newPostdominators", ";", "changed", "=", "true", ";", "}", "}", "}", "let", "result", "=", "new", "PostdominatorSet", "(", ")", ";", "Object", ".", "keys", "(", "postdominators", ")", ".", "forEach", "(", "blockId", "=>", "{", "result", "=", "result", ".", "union", "(", "postdominators", "[", "blockId", "]", ")", ";", "}", ")", ";", "return", "result", ";", "}", "private", "getImmediatePostdominators", "(", "postdominators", ")", "{", "let", "postdominatorsByBlock", "=", "postdominators", ".", "filter", "(", "p", "=>", "p", ".", "block", "!=", "p", ".", "postdominator", ")", ".", "reduce", "(", "(", "dict", ",", "postdominator", ")", "=>", "{", "if", "(", "!", "dict", ".", "hasOwnProperty", "(", "postdominator", ".", "block", ".", "id", ")", ")", "{", "dict", "[", "postdominator", ".", "block", ".", "id", "]", "=", "[", "]", ";", "}", "dict", "[", "postdominator", ".", "block", ".", "id", "]", ".", "push", "(", "postdominator", ")", ";", "return", "dict", ";", "}", ",", "{", "}", ")", ";", "let", "immediatePostdominators", "=", "[", "]", ";", "Object", ".", "keys", "(", "postdominatorsByBlock", ")", ".", "forEach", "(", "blockId", "=>", "{", "immediatePostdominators", ".", "push", "(", "postdominatorsByBlock", "[", "blockId", "]", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "{", "return", "a", ".", "distance", "-", "b", ".", "distance", ";", "}", ")", "[", "0", "]", ")", ";", "}", ")", ";", "return", "new", "PostdominatorSet", "(", "...", "immediatePostdominators", ")", ";", "}", "private", "buildReverseDominanceFrontiers", "(", "blocks", ")", "{", "let", "frontiers", "=", "{", "}", ";", "for", "(", "let", "block", "of", "blocks", ")", "{", "let", "successors", "=", "this", ".", "getSuccessors", "(", "block", ")", ";", "if", "(", "successors", ".", "length", ">", "1", ")", "{", "let", "workQueue", "=", "successors", ";", "let", "scheduled", "=", "[", "]", ";", "let", "blockImmediatePostdominator", "=", "this", ".", "getImmediatePostdominator", "(", "block", ")", ";", "while", "(", "workQueue", ".", "length", ">", "0", ")", "{", "let", "item", "=", "workQueue", ".", "pop", "(", ")", ";", "if", "(", "this", ".", "postdominatorExists", "(", "block", ",", "item", ")", ")", "continue", ";", "if", "(", "!", "frontiers", ".", "hasOwnProperty", "(", "item", ".", "id", ")", ")", "{", "frontiers", "[", "item", ".", "id", "]", "=", "new", "BlockSet", "(", ")", ";", "}", "let", "frontier", "=", "frontiers", "[", "item", ".", "id", "]", ";", "frontier", ".", "add", "(", "block", ")", ";", "let", "immediatePostdominator", "=", "this", ".", "getImmediatePostdominator", "(", "item", ")", ";", "if", "(", "immediatePostdominator", ".", "postdominator", "!=", "blockImmediatePostdominator", ".", "postdominator", ")", "{", "this", ".", "getSuccessors", "(", "item", ")", ".", "forEach", "(", "b", "=>", "{", "if", "(", "scheduled", ".", "indexOf", "(", "b", ")", "==", "-", "1", ")", "{", "scheduled", ".", "push", "(", "b", ")", ";", "workQueue", ".", "push", "(", "b", ")", ";", "}", "}", ")", ";", "}", "}", "}", "}", "return", "frontiers", ";", "}", "}", "/**\n * A block and another block that postdominates it. Distance is the length of the longest path\n * from the block to its postdominator.\n */", "class", "Postdominator", "{", "constructor", "(", "distance", ",", "block", ",", "postdominator", ")", "{", "this", ".", "distance", "=", "distance", ";", "this", ".", "block", "=", "block", ";", "this", ".", "postdominator", "=", "postdominator", ";", "}", "distance", ":", "number", ";", "block", ":", "Block", ";", "postdominator", ":", "Block", ";", "}", "/**\n * A set of postdominators\n */", "class", "PostdominatorSet", "extends", "Set", "<", "Postdominator", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "p", "=>", "p", ".", "block", ".", "id", "+", "','", "+", "p", ".", "postdominator", ".", "id", ",", "...", "items", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, "string", null, null, "array", null, null, "array", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, "Block", null, null, "Block", null, null, null, null, "Context", null, "Block", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Context", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ast.SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, "string", null, "array", null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "array", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, "UNK", null, "Block", null, "Context", null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, "UNK", null, "Block", null, "Context", null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, "UNK", null, "Block", null, "Context", null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, "UNK", null, "Block", null, "Context", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, "UNK", null, "Block", null, "Context", null, null, null, "Block", null, null, null, null, null, null, null, null, null, "Context", null, null, null, null, "array", null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, "array", null, "Context", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Block", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "array", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "array", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "array", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, "array", null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "Block", null, "Block", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/control-flow.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "control-flow.ts"}
{"tokens": ["import", "{", "Location", ",", "Module", ",", "parse", "}", "from", "'./python-parser'", ";", "import", "{", "ControlFlowGraph", "}", "from", "'./control-flow'", ";", "import", "{", "DataflowAnalyzer", "}", "from", "'./data-flow'", ";", "import", "{", "NumberSet", ",", "range", ",", "Set", "}", "from", "'./set'", ";", "function", "lineRange", "(", "loc", ")", "{", "return", "range", "(", "loc", ".", "first_line", ",", "loc", ".", "last_line", "+", "(", "loc", ".", "last_column", "?", "1", ":", "0", ")", ")", ";", "}", "export", "class", "LocationSet", "extends", "Set", "<", "Location", ">", "{", "constructor", "(", "...", "items", ")", "{", "super", "(", "l", "=>", "[", "l", ".", "first_line", ",", "l", ".", "first_column", ",", "l", ".", "last_line", ",", "l", ".", "last_column", "]", ".", "toString", "(", ")", ",", "...", "items", ")", ";", "}", "}", "function", "within", "(", "inner", ",", "outer", ")", "{", "let", "leftWithin", "=", "outer", ".", "first_line", "<", "inner", ".", "first_line", "||", "(", "outer", ".", "first_line", "==", "inner", ".", "first_line", "&&", "outer", ".", "first_column", "<=", "inner", ".", "first_column", ")", ";", "let", "rightWithin", "=", "outer", ".", "last_line", ">", "inner", ".", "last_line", "||", "(", "outer", ".", "last_line", "==", "inner", ".", "last_line", "&&", "outer", ".", "last_column", ">=", "inner", ".", "last_column", ")", ";", "return", "leftWithin", "&&", "rightWithin", ";", "}", "function", "isPositionBetween", "(", "line", ",", "column", ",", "start_line", ",", "start_column", ",", "end_line", ",", "end_column", ")", "{", "let", "afterStart", "=", "line", ">", "start_line", "||", "(", "line", "==", "start_line", "&&", "column", ">=", "start_column", ")", ";", "let", "beforeEnd", "=", "line", "<", "end_line", "||", "(", "line", "==", "end_line", "&&", "column", "<=", "end_column", ")", ";", "return", "afterStart", "&&", "beforeEnd", ";", "}", "function", "intersect", "(", "l1", ",", "l2", ")", "{", "return", "(", "isPositionBetween", "(", "l1", ".", "first_line", ",", "l1", ".", "first_column", ",", "l2", ".", "first_line", ",", "l2", ".", "first_column", ",", "l2", ".", "last_line", ",", "l2", ".", "last_column", ")", "||", "isPositionBetween", "(", "l1", ".", "last_line", ",", "l1", ".", "last_column", ",", "l2", ".", "first_line", ",", "l2", ".", "first_column", ",", "l2", ".", "last_line", ",", "l2", ".", "last_column", ")", "||", "within", "(", "l1", ",", "l2", ")", "||", "within", "(", "l2", ",", "l1", ")", ")", ";", "}", "export", "enum", "SliceDirection", "{", "Forward", ",", "Backward", "}", "/**\n * More general slice: given locations of important syntax nodes, find locations of all relevant\n * definitions. Locations can be mapped to lines later.\n * seedLocations are symbol locations.\n */", "export", "function", "slice", "(", "ast", ",", "seedLocations", "?", ",", "dataflowAnalyzer", "?", ",", "direction", "=", "SliceDirection", ".", "Backward", ")", "{", "dataflowAnalyzer", "=", "dataflowAnalyzer", "||", "new", "DataflowAnalyzer", "(", ")", ";", "const", "cfg", "=", "new", "ControlFlowGraph", "(", "ast", ")", ";", "const", "dfa", "=", "dataflowAnalyzer", ".", "analyze", "(", "cfg", ")", ".", "dataflows", ";", "let", "acceptLocation", "=", "(", "loc", ")", "=>", "true", ";", "let", "sliceLocations", "=", "new", "LocationSet", "(", ")", ";", "if", "(", "seedLocations", ")", "{", "let", "seedStatementLocations", "=", "findSeedStatementLocations", "(", "seedLocations", ",", "cfg", ")", ";", "acceptLocation", "=", "loc", "=>", "seedStatementLocations", ".", "some", "(", "seedStmtLoc", "=>", "intersect", "(", "seedStmtLoc", ",", "loc", ")", ")", ";", "sliceLocations", "=", "new", "LocationSet", "(", "...", "seedStatementLocations", ".", "items", ")", ";", "}", "let", "lastSize", ";", "do", "{", "lastSize", "=", "sliceLocations", ".", "size", ";", "for", "(", "let", "flow", "of", "dfa", ".", "items", ")", "{", "const", "[", "start", ",", "end", "]", "=", "direction", "===", "SliceDirection", ".", "Backward", "?", "[", "flow", ".", "fromNode", ".", "location", ",", "flow", ".", "toNode", ".", "location", "]", ":", "[", "flow", ".", "toNode", ".", "location", ",", "flow", ".", "fromNode", ".", "location", "]", ";", "if", "(", "acceptLocation", "(", "end", ")", ")", "{", "sliceLocations", ".", "add", "(", "end", ")", ";", "}", "if", "(", "sliceLocations", ".", "some", "(", "loc", "=>", "within", "(", "end", ",", "loc", ")", ")", ")", "{", "sliceLocations", ".", "add", "(", "start", ")", ";", "}", "}", "}", "while", "(", "sliceLocations", ".", "size", ">", "lastSize", ")", ";", "return", "sliceLocations", ";", "}", "function", "findSeedStatementLocations", "(", "seedLocations", ",", "cfg", ")", "{", "let", "seedStatementLocations", "=", "new", "LocationSet", "(", ")", ";", "seedLocations", ".", "items", ".", "forEach", "(", "seedLoc", "=>", "{", "for", "(", "let", "block", "of", "cfg", ".", "blocks", ")", "{", "for", "(", "let", "statement", "of", "block", ".", "statements", ")", "{", "if", "(", "intersect", "(", "seedLoc", ",", "statement", ".", "location", ")", ")", "{", "seedStatementLocations", ".", "add", "(", "statement", ".", "location", ")", ";", "}", "}", "}", "}", ")", ";", "return", "seedStatementLocations", ";", "}", "/**\n * Slice: given a set of lines in a program, return lines it depends on.\n * OUT OF DATE: use slice() instead of sliceLines().\n */", "export", "function", "sliceLines", "(", "code", ",", "relevantLineNumbers", ")", "{", "const", "ast", "=", "parse", "(", "code", ")", ";", "const", "cfg", "=", "new", "ControlFlowGraph", "(", "ast", ")", ";", "let", "dataflowAnalyzer", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "dfa", "=", "dataflowAnalyzer", ".", "analyze", "(", "cfg", ")", ".", "dataflows", ";", "let", "lastSize", ";", "do", "{", "lastSize", "=", "relevantLineNumbers", ".", "size", ";", "for", "(", "let", "flow", "of", "dfa", ".", "items", ")", "{", "const", "fromLines", "=", "lineRange", "(", "flow", ".", "fromNode", ".", "location", ")", ";", "const", "toLines", "=", "lineRange", "(", "flow", ".", "toNode", ".", "location", ")", ";", "const", "startLines", "=", "toLines", ";", "const", "endLines", "=", "fromLines", ";", "if", "(", "!", "relevantLineNumbers", ".", "intersect", "(", "startLines", ")", ".", "empty", ")", "{", "relevantLineNumbers", "=", "relevantLineNumbers", ".", "union", "(", "endLines", ")", ";", "}", "}", "}", "while", "(", "relevantLineNumbers", ".", "size", ">", "lastSize", ")", ";", "return", "relevantLineNumbers", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "NumberSet", null, "Location", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, "Location", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Location", null, "Location", null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "number", null, "number", null, "number", null, "number", null, "number", null, "number", null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Location", null, "Location", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, "Module", null, "LocationSet", null, null, "DataflowAnalyzer", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ControlFlowGraph", null, null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, "Location", null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, "Location", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, "LocationSet", null, "ControlFlowGraph", null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "NumberSet", null, "string", null, "NumberSet", null, null, null, null, null, null, null, null, null, null, null, "ControlFlowGraph", null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "NumberSet", null, null, null, null, null, null, null, null, null, null, null, "NumberSet", null, null, null, null, null, null, null, null, null, null, null, "NumberSet", null, null, null, null, "NumberSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/slice.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "slice.ts"}
{"tokens": ["import", "{", "Cell", "}", "from", "'./cell'", ";", "import", "{", "LocationSet", "}", "from", "'./slice'", ";", "export", "class", "CellSlice", "{", "/**\n     * Construct an instance of a cell slice.\n     */", "constructor", "(", "cell", ",", "slice", ",", "executionTime", "?", ")", "{", "this", ".", "cell", "=", "cell", ";", "this", ".", "_slice", "=", "slice", ";", "this", ".", "executionTime", "=", "executionTime", ";", "}", "/**\n     * Get the text in the slice of a cell.\n     */", "get", "textSlice", "(", ")", ":", "string", "{", "return", "this", ".", "getTextSlice", "(", "false", ")", ";", "}", "/**\n     * Get the text of all lines in a slice (no deletions from lines).\n     */", "get", "textSliceLines", "(", ")", ":", "string", "{", "return", "this", ".", "getTextSlice", "(", "true", ")", ";", "}", "private", "getTextSlice", "(", "fullLines", ")", "{", "let", "sliceLocations", "=", "this", ".", "slice", ".", "items", ";", "let", "textLines", "=", "this", ".", "cell", ".", "text", ".", "split", "(", "'\\n'", ")", ";", "return", "sliceLocations", ".", "sort", "(", "(", "l1", ",", "l2", ")", "=>", "l1", ".", "first_line", "-", "l2", ".", "first_line", ")", ".", "map", "(", "loc", "=>", "{", "const", "lines", "=", "textLines", ".", "slice", "(", "loc", ".", "first_line", "-", "1", ",", "loc", ".", "last_line", "+", "(", "loc", ".", "last_column", ">", "0", "?", "0", ":", "-", "1", ")", ")", ";", "if", "(", "!", "fullLines", ")", "{", "if", "(", "loc", ".", "last_line", "===", "loc", ".", "first_line", ")", "{", "lines", "[", "0", "]", "=", "lines", "[", "0", "]", ".", "slice", "(", "loc", ".", "first_column", ",", "loc", ".", "last_column", ")", ";", "}", "else", "{", "lines", "[", "0", "]", "=", "lines", "[", "0", "]", ".", "slice", "(", "loc", ".", "first_column", ")", ";", "const", "last", "=", "lines", ".", "length", "-", "1", ";", "lines", "[", "last", "]", "=", "lines", "[", "last", "]", ".", "slice", "(", "0", ",", "loc", ".", "last_column", ")", ";", "}", "}", "return", "lines", ".", "join", "(", "'\\n'", ")", ";", "}", ")", ".", "filter", "(", "text", "=>", "text", "!=", "''", ")", ".", "join", "(", "'\\n'", ")", ";", "}", "/**\n     * Get the slice.\n     */", "get", "slice", "(", ")", ":", "LocationSet", "{", "return", "this", ".", "_slice", ";", "}", "/**\n     * Set the slice.\n     */", "set", "slice", "(", "slice", ")", "{", "this", ".", "_slice", "=", "slice", ";", "}", "readonly", "cell", ":", "Cell", ";", "readonly", "executionTime", ":", "Date", ";", "private", "_slice", ":", "LocationSet", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, "LocationSet", null, "Date", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "boolean", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/cellslice.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "cellslice.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "SyntaxNode", ",", "parse", "}", "from", "'../python-parser'", ";", "import", "{", "ControlFlowGraph", "}", "from", "'../control-flow'", ";", "import", "{", "DataflowAnalyzer", ",", "Dataflow", ",", "Ref", ",", "ReferenceType", ",", "RefSet", ",", "SymbolType", "}", "from", "'../data-flow'", ";", "import", "{", "Set", "}", "from", "'../set'", ";", "import", "{", "JsonSpecs", ",", "DefaultSpecs", "}", "from", "'../specs'", ";", "import", "{", "printNode", "}", "from", "'../printNode'", ";", "import", "{", "SymbolTable", "}", "from", "'../symbol-table'", ";", "describe", "(", "'detects dataflow dependencies'", ",", "(", ")", "=>", "{", "function", "analyze", "(", "...", "codeLines", ")", "{", "let", "code", "=", "codeLines", ".", "concat", "(", "''", ")", ".", "join", "(", "'\\n'", ")", ";", "let", "analyzer", "=", "new", "DataflowAnalyzer", "(", ")", ";", "printNode", ";", "return", "analyzer", ".", "analyze", "(", "new", "ControlFlowGraph", "(", "parse", "(", "code", ")", ")", ")", ".", "dataflows", ";", "}", "function", "analyzeLineDeps", "(", "...", "codeLines", ")", "{", "return", "analyze", "(", "...", "codeLines", ")", ".", "items", ".", "map", "(", "dep", "=>", "[", "dep", ".", "toNode", ".", "location", ".", "first_line", ",", "dep", ".", "fromNode", ".", "location", ".", "first_line", "]", ")", ";", "}", "it", "(", "'from variable uses to names'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyzeLineDeps", "(", "'a = 1'", ",", "'b = a'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "2", ",", "1", "]", ")", ";", "}", ")", ";", "it", "(", "'handles multiple statements per line'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyzeLineDeps", "(", "'a = 1'", ",", "'b = a; c = b'", ",", "'d = c'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "2", ",", "1", "]", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "3", ",", "2", "]", ")", ";", "}", ")", ";", "it", "(", "'only links from a use to its most recent def'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyzeLineDeps", "(", "'a = 2'", ",", "'a.prop = 3'", ",", "'a = 4'", ",", "'b = a'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "4", ",", "3", "]", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "not", ".", "deep", ".", "include", "(", "[", "4", ",", "1", "]", ")", ";", "}", ")", ";", "it", "(", "'handles augmenting assignment'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyzeLineDeps", "(", "'a = 2'", ",", "'a += 3'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "2", ",", "1", "]", ")", ";", "}", ")", ";", "it", "(", "'links between statements, not symbol locations'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'a = 1'", ",", "'b = a'", ")", ";", "expect", "(", "deps", ".", "items", "[", "0", "]", ".", "fromNode", ".", "location", ")", ".", "to", ".", "deep", ".", "equal", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "1", ",", "last_column", ":", "5", ",", "}", ")", ";", "expect", "(", "deps", ".", "items", "[", "0", "]", ".", "toNode", ".", "location", ")", ".", "to", ".", "deep", ".", "equal", "(", "{", "first_line", ":", "2", ",", "first_column", ":", "0", ",", "last_line", ":", "2", ",", "last_column", ":", "5", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'links to a multi-line dependency'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'a = func('", ",", "'    1)'", ",", "'b = a'", ")", ";", "expect", "(", "deps", ".", "items", "[", "0", "]", ".", "fromNode", ".", "location", ")", ".", "to", ".", "deep", ".", "equal", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "2", ",", "last_column", ":", "6", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'to a full for-loop declaration'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'for i in range(a, b):'", ",", "'    print(i)'", ")", ";", "expect", "(", "deps", ".", "items", "[", "0", "]", ".", "fromNode", ".", "location", ")", ".", "to", ".", "deep", ".", "equal", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "1", ",", "last_column", ":", "21", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'links from a class use to its def'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyzeLineDeps", "(", "'class C(object):'", ",", "'    pass'", ",", "''", ",", "'c = C()'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "[", "4", ",", "1", "]", "]", ")", ";", "}", ")", ";", "it", "(", "'links from a function use to its def'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyzeLineDeps", "(", "'def func():'", ",", "'    pass'", ",", "''", ",", "'func()'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "[", "4", ",", "1", "]", "]", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'detects control dependencies'", ",", "(", ")", "=>", "{", "function", "analyze", "(", "...", "codeLines", ")", "{", "let", "code", "=", "codeLines", ".", "concat", "(", "''", ")", ".", "join", "(", "'\\n'", ")", ";", "const", "deps", "=", "[", "]", ";", "new", "ControlFlowGraph", "(", "parse", "(", "code", ")", ")", ".", "visitControlDependencies", "(", "(", "control", ",", "stmt", ")", "=>", "deps", ".", "push", "(", "[", "stmt", ".", "location", ".", "first_line", ",", "control", ".", "location", ".", "first_line", "]", ")", ")", ";", "return", "deps", ";", "}", "it", "(", "'to an if-statement'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'if cond:'", ",", "'    print(a)'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "[", "2", ",", "1", "]", "]", ")", ";", "}", ")", ";", "it", "(", "'for multiple statements in a block'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'if cond:'", ",", "'    print(a)'", ",", "'    print(b)'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "[", "2", ",", "1", "]", ",", "[", "3", ",", "1", "]", "]", ")", ";", "}", ")", ";", "it", "(", "'from an else to an if'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'if cond:'", ",", "'    print(a)'", ",", "'elif cond2:'", ",", "'    print(b)'", ",", "'else:'", ",", "'    print(b)'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "3", ",", "1", "]", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "5", ",", "3", "]", ")", ";", "}", ")", ";", "it", "(", "'not from a join to an if-condition'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'if cond:'", ",", "'    print(a)'", ",", "'print(b)'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "[", "2", ",", "1", "]", "]", ")", ";", "}", ")", ";", "it", "(", "'not from a join to a for-loop'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'for i in range(10):'", ",", "'    print(a)'", ",", "'print(b)'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "[", "2", ",", "1", "]", "]", ")", ";", "}", ")", ";", "it", "(", "'to a for-loop'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'for i in range(10):'", ",", "'    print(a)'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "include", "(", "[", "2", ",", "1", "]", ")", ";", "}", ")", ";", "it", "(", "'skipping non-dependencies'", ",", "(", ")", "=>", "{", "let", "deps", "=", "analyze", "(", "'a = 1'", ",", "'b = 2'", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "]", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'getDefs'", ",", "(", ")", "=>", "{", "function", "getDefsFromStatements", "(", "specs", "?", ",", "...", "codeLines", ")", "{", "let", "code", "=", "codeLines", ".", "concat", "(", "''", ")", ".", "join", "(", "'\\n'", ")", ";", "let", "module", "=", "parse", "(", "code", ")", ";", "let", "analyzer", "=", "new", "DataflowAnalyzer", "(", "specs", "||", "DefaultSpecs", ")", ";", "return", "module", ".", "code", ".", "reduce", "(", "(", "refSet", ",", "stmt", ")", "=>", "{", "const", "refs", "=", "analyzer", ".", "getDefs", "(", "stmt", ",", "refSet", ")", ";", "return", "refSet", ".", "union", "(", "refs", ")", ";", "}", ",", "new", "RefSet", "(", ")", ")", ".", "items", ";", "}", "function", "getDefsFromStatement", "(", "code", ",", "mmap", "?", ")", "{", "mmap", "=", "mmap", "||", "DefaultSpecs", ";", "code", "=", "code", "+", "'\\n'", ";", "let", "mod", "=", "parse", "(", "code", ")", ";", "let", "analyzer", "=", "new", "DataflowAnalyzer", "(", "mmap", ")", ";", "return", "analyzer", ".", "getDefs", "(", "mod", ".", "code", "[", "0", "]", ",", "new", "RefSet", "(", ")", ")", ".", "items", ";", "}", "function", "getDefNamesFromStatement", "(", "code", ",", "mmap", "?", ")", "{", "return", "getDefsFromStatement", "(", "code", ",", "mmap", ")", ".", "map", "(", "def", "=>", "def", ".", "name", ")", ";", "}", "describe", "(", "'detects definitions'", ",", "(", ")", "=>", "{", "it", "(", "'for assignments'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'a = 1'", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "VARIABLE", ",", "name", ":", "'a'", ",", "level", ":", "ReferenceType", ".", "DEFINITION", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'for augmenting assignments'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'a += 1'", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "VARIABLE", ",", "name", ":", "'a'", ",", "level", ":", "ReferenceType", ".", "UPDATE", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'for imports'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'import lib'", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "IMPORT", ",", "name", ":", "'lib'", "}", ")", ";", "}", ")", ";", "it", "(", "'for from-imports'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'from mod import func'", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "IMPORT", ",", "name", ":", "'func'", "}", ")", ";", "}", ")", ";", "it", "(", "'for function declarations'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "[", "'def func():'", ",", "'    return 0'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "deep", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "FUNCTION", ",", "name", ":", "'func'", ",", "location", ":", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "4", ",", "last_column", ":", "-", "1", ",", "}", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'for class declarations'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "[", "'class C(object):'", ",", "'    def __init__(self):'", ",", "'        pass'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "deep", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "CLASS", ",", "name", ":", "'C'", ",", "location", ":", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "5", ",", "last_column", ":", "-", "1", ",", "}", ",", "}", ")", ";", "}", ")", ";", "describe", "(", "'that are weak (marked as updates)'", ",", "(", ")", "=>", "{", "it", "(", "'for dictionary assignments'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "[", "\"d['a'] = 1\"", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "defs", "[", "0", "]", ".", "level", ")", ".", "to", ".", "equal", "(", "ReferenceType", ".", "UPDATE", ")", ";", "expect", "(", "defs", "[", "0", "]", ".", "name", ")", ".", "to", ".", "equal", "(", "'d'", ")", ";", "}", ")", ";", "it", "(", "'for property assignments'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "[", "'obj.a = 1'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "defs", "[", "0", "]", ".", "level", ")", ".", "to", ".", "equal", "(", "ReferenceType", ".", "UPDATE", ")", ";", "expect", "(", "defs", "[", "0", "]", ".", "name", ")", ".", "to", ".", "equal", "(", "'obj'", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'from annotations'", ",", "(", ")", "=>", "{", "it", "(", "'from our def annotations'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'\"\"\"defs: [{ \"name\": \"a\", \"pos\": [[0, 0], [0, 11]] }]\"\"\"%some_magic'", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "deep", ".", "include", "(", "{", "type", ":", "SymbolType", ".", "MAGIC", ",", "name", ":", "'a'", ",", "location", ":", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "1", ",", "last_column", ":", "11", ",", "}", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'computing the def location relative to the line it appears on'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatements", "(", "undefined", ",", "'# this is an empty line'", ",", "'\"\"\"defs: [{ \"name\": \"a\", \"pos\": [[0, 0], [0, 11]] }]\"\"\"%some_magic'", ")", ";", "expect", "(", "defs", "[", "0", "]", ")", ".", "to", ".", "deep", ".", "include", "(", "{", "location", ":", "{", "first_line", ":", "2", ",", "first_column", ":", "0", ",", "last_line", ":", "2", ",", "last_column", ":", "11", ",", "}", ",", "}", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'including'", ",", "(", ")", "=>", "{", "it", "(", "'function arguments'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefNamesFromStatement", "(", "'func(a)'", ")", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "}", ")", ";", "it", "(", "'the object a function is called on'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefNamesFromStatement", "(", "'obj.func()'", ")", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'; given a spec,'", ",", "(", ")", "=>", "{", "it", "(", "'can ignore all arguments'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'func(a, b, c)'", ",", "{", "__builtins__", ":", "{", "functions", ":", "[", "'func'", "]", "}", "}", ")", ";", "expect", "(", "defs", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "]", ")", ";", "}", ")", ";", "it", "(", "'assumes arguments have side-effects, without a spec'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefsFromStatement", "(", "'func(a, b, c)'", ",", "{", "__builtins__", ":", "{", "functions", ":", "[", "]", "}", "}", ")", ";", "expect", "(", "defs", ")", ".", "to", ".", "exist", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "3", ")", ";", "const", "names", "=", "defs", ".", "map", "(", "d", "=>", "d", ".", "name", ")", ";", "expect", "(", "names", ")", ".", "to", ".", "include", "(", "'a'", ")", ";", "expect", "(", "names", ")", ".", "to", ".", "include", "(", "'b'", ")", ";", "expect", "(", "names", ")", ".", "to", ".", "include", "(", "'c'", ")", ";", "}", ")", ";", "it", "(", "'can ignore the method receiver'", ",", "(", ")", "=>", "{", "const", "specs", "=", "{", "__builtins__", ":", "{", "types", ":", "{", "C", ":", "{", "methods", ":", "[", "'m'", "]", "}", "}", "}", "}", ";", "let", "defs", "=", "getDefsFromStatements", "(", "specs", ",", "'x=C()'", ",", "'x.m()'", ")", ";", "expect", "(", "defs", ")", ".", "to", ".", "exist", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "defs", "[", "0", "]", ".", "name", ")", ".", "to", ".", "equal", "(", "'x'", ")", ";", "expect", "(", "defs", "[", "0", "]", ".", "level", ")", ".", "to", ".", "equal", "(", "ReferenceType", ".", "DEFINITION", ")", ";", "}", ")", ";", "it", "(", "'assumes method call affects the receiver, without a spec'", ",", "(", ")", "=>", "{", "const", "specs", "=", "{", "__builtins__", ":", "{", "}", "}", ";", "let", "defs", "=", "getDefsFromStatements", "(", "specs", ",", "'x=C()'", ",", "'x.m()'", ")", ";", "expect", "(", "defs", ")", ".", "to", ".", "exist", ";", "expect", "(", "defs", ".", "length", ")", ".", "to", ".", "equal", "(", "2", ")", ";", "expect", "(", "defs", "[", "1", "]", ".", "name", ")", ".", "to", ".", "equal", "(", "'x'", ")", ";", "expect", "(", "defs", "[", "1", "]", ".", "level", ")", ".", "to", ".", "equal", "(", "ReferenceType", ".", "UPDATE", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "\"doesn't detect definitions\"", ",", "(", ")", "=>", "{", "it", "(", "'for names used outside a function call'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefNamesFromStatement", "(", "'a + func()'", ")", ";", "expect", "(", "defs", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "]", ")", ";", "}", ")", ";", "it", "(", "'for functions called early in a call chain'", ",", "(", ")", "=>", "{", "let", "defs", "=", "getDefNamesFromStatement", "(", "'func().func()'", ")", ";", "expect", "(", "defs", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "]", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'getUses'", ",", "(", ")", "=>", "{", "function", "getUseNames", "(", "...", "codeLines", ")", "{", "let", "code", "=", "codeLines", ".", "concat", "(", "''", ")", ".", "join", "(", "'\\n'", ")", ";", "let", "mod", "=", "parse", "(", "code", ")", ";", "let", "analyzer", "=", "new", "DataflowAnalyzer", "(", ")", ";", "return", "analyzer", ".", "getUses", "(", "mod", ".", "code", "[", "0", "]", ")", ".", "items", ".", "map", "(", "use", "=>", "use", ".", "name", ")", ";", "}", "describe", "(", "'detects uses'", ",", "(", ")", "=>", "{", "it", "(", "'of functions'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'func()'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'func'", ")", ";", "}", ")", ";", "it", "(", "'for undefined symbols in functions'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'def func(arg):'", ",", "'    print(a)'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'a'", ")", ";", "}", ")", ";", "it", "(", "'handles augassign'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'x -= 1'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'x'", ")", ";", "}", ")", ";", "it", "(", "'of functions inside classes'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'class Baz():'", ",", "'  def quux(self):'", ",", "'    func()'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'func'", ")", ";", "}", ")", ";", "it", "(", "'of variables inside classes'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'class Baz():'", ",", "'  def quux(self):'", ",", "'    self.data = a'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'a'", ")", ";", "}", ")", ";", "it", "(", "'of functions and variables inside nested classes'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'class Bar():'", ",", "'  class Baz():'", ",", "'    class Qux():'", ",", "'      def quux(self):'", ",", "'         func()'", ",", "'         self.data = a'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'func'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "include", "(", "'a'", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'ignores uses'", ",", "(", ")", "=>", "{", "it", "(", "'for symbols defined within functions'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'def func(arg):'", ",", "'    print(arg)'", ",", "'    var = 1'", ",", "'    print(var)'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "not", ".", "include", "(", "'arg'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "not", ".", "include", "(", "'var'", ")", ";", "}", ")", ";", "it", "(", "'for params used in an instance function body'", ",", "(", ")", "=>", "{", "let", "uses", "=", "getUseNames", "(", "'class Foo():'", ",", "'    def func(arg1):'", ",", "'        print(arg1)'", ")", ";", "expect", "(", "uses", ")", ".", "to", ".", "not", ".", "include", "(", "'arg1'", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Set", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SyntaxNode", null, "SyntaxNode", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "UNK", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/analysis.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "analysis.test.ts"}
{"tokens": ["import", "{", "Cell", "}", "from", "\"..\"", ";", "export", "class", "TestCell", "implements", "Cell", "{", "public", "executionEventId", ":", "string", ";", "public", "persistentId", ":", "string", ";", "constructor", "(", "public", "text", ",", "public", "executionCount", ",", "executionEventId", "?", ",", "persistentId", "?", ",", "public", "hasError", "=", "false", ")", "{", "this", ".", "executionEventId", "=", "executionEventId", "||", "genid", "(", ")", ";", "this", ".", "persistentId", "=", "persistentId", "||", "genid", "(", ")", ";", "}", "public", "deepCopy", "(", ")", "{", "return", "this", ";", "}", "}", "let", "ID", "=", "0", ";", "function", "genid", "(", ")", "{", "return", "'id'", "+", "(", "ID", "++", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "number", null, "string", null, null, "string", null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/testcell.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "testcell.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "LocationSet", "}", "from", "'../slice'", ";", "import", "{", "CellSlice", "}", "from", "'../cellslice'", ";", "import", "{", "TestCell", "}", "from", "'./testcell'", ";", "describe", "(", "'CellSlice'", ",", "(", ")", "=>", "{", "it", "(", "'yields a text slice based on a set of locations'", ",", "(", ")", "=>", "{", "let", "cellSlice", "=", "new", "CellSlice", "(", "new", "TestCell", "(", "[", "'a = 1'", ",", "'b = 2'", ",", "'c = 3'", ",", "'d = 4'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ",", "1", ")", ",", "new", "LocationSet", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "1", ",", "last_column", ":", "5", "}", ",", "{", "first_line", ":", "2", ",", "first_column", ":", "4", ",", "last_line", ":", "3", ",", "last_column", ":", "4", "}", ")", ")", ";", "expect", "(", "cellSlice", ".", "textSlice", ")", ".", "to", ".", "equal", "(", "[", "'a = 1'", ",", "'2'", ",", "'c = '", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'yields entire lines if requested'", ",", "(", ")", "=>", "{", "let", "cellSlice", "=", "new", "CellSlice", "(", "new", "TestCell", "(", "[", "'a = 1'", ",", "'b = 2'", ",", "'c = 3'", ",", "'d = 4'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ",", "1", ")", ",", "new", "LocationSet", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "1", ",", "last_column", ":", "5", "}", ",", "{", "first_line", ":", "2", ",", "first_column", ":", "4", ",", "last_line", ":", "3", ",", "last_column", ":", "4", "}", ")", ")", ";", "expect", "(", "cellSlice", ".", "textSliceLines", ")", ".", "to", ".", "equal", "(", "[", "'a = 1'", ",", "'b = 2'", ",", "'c = 3'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/cellslice.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "cellslice.test.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "parse", ",", "Def", "}", "from", "'../python-parser'", ";", "import", "{", "ControlFlowGraph", "}", "from", "'../control-flow'", ";", "describe", "(", "'ControlFlowGraph'", ",", "(", ")", "=>", "{", "function", "makeCfg", "(", "...", "codeLines", ")", "{", "let", "code", "=", "codeLines", ".", "concat", "(", "''", ")", ".", "join", "(", "'\\n'", ")", ";", "return", "new", "ControlFlowGraph", "(", "parse", "(", "code", ")", ")", ";", "}", "it", "(", "'builds the right successor structure for try-except'", ",", "(", ")", "=>", "{", "let", "cfg", "=", "makeCfg", "(", "'try:'", ",", "'    return 0'", ",", "'except:'", ",", "'    return 1'", ")", ";", "let", "handlerHead", "=", "cfg", ".", "blocks", ".", "filter", "(", "b", "=>", "b", ".", "hint", "==", "'handlers'", ")", ".", "pop", "(", ")", ";", "expect", "(", "cfg", ".", "getPredecessors", "(", "handlerHead", ")", ".", "pop", "(", ")", ".", "hint", ")", ".", "to", ".", "equal", "(", "'try body'", ")", ";", "}", ")", ";", "it", "(", "'builds a cfg for a function body'", ",", "(", ")", "=>", "{", "let", "ast", "=", "parse", "(", "[", "'def foo(n):'", ",", "'    if n < 4:'", ",", "'        return 1'", ",", "'    else:'", ",", "'        return 2'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "expect", "(", "ast", ".", "code", ".", "length", ")", ".", "to", ".", "be", ".", "equal", "(", "1", ")", ";", "expect", "(", "ast", ".", "code", "[", "0", "]", ".", "type", ")", ".", "to", ".", "be", ".", "equal", "(", "'def'", ")", ";", "const", "cfg", "=", "new", "ControlFlowGraph", "(", "ast", ".", "code", "[", "0", "]", "as", "Def", ")", ";", "expect", "(", "cfg", ".", "blocks", ")", ".", "to", ".", "exist", ";", "expect", "(", "cfg", ".", "blocks", ".", "length", ")", ".", "to", ".", "be", ".", "equal", "(", "6", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ControlFlowGraph", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ControlFlowGraph", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ControlFlowGraph", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/cfg.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "cfg.test.ts"}
{"tokens": ["import", "{", "Graph", "}", "from", "\"../graph\"", ";", "import", "{", "expect", "}", "from", "\"chai\"", ";", "describe", "(", "'graph'", ",", "(", ")", "=>", "{", "it", "(", "'handles empty'", ",", "(", ")", "=>", "{", "const", "g", "=", "new", "Graph", "<", "string", ">", "(", "s", "=>", "s", ")", ";", "expect", "(", "g", ".", "nodes", ")", ".", "to", ".", "exist", ";", "expect", "(", "g", ".", "nodes", ".", "length", ")", ".", "eq", "(", "0", ")", ";", "}", ")", ";", "it", "(", "'tracks nodes'", ",", "(", ")", "=>", "{", "const", "g", "=", "new", "Graph", "<", "string", ">", "(", "s", "=>", "s", ")", ";", "g", ".", "addEdge", "(", "'a'", ",", "'b'", ")", ";", "g", ".", "addEdge", "(", "'b'", ",", "'c'", ")", ";", "const", "ns", "=", "g", ".", "nodes", ";", "expect", "(", "ns", ")", ".", "to", ".", "exist", ";", "expect", "(", "ns", ".", "length", ")", ".", "equals", "(", "3", ")", ";", "expect", "(", "ns", ")", ".", "to", ".", "include", "(", "'a'", ")", ";", "expect", "(", "ns", ")", ".", "to", ".", "include", "(", "'b'", ")", ";", "expect", "(", "ns", ")", ".", "to", ".", "include", "(", "'c'", ")", ";", "}", ")", ";", "it", "(", "'sorts forests'", ",", "(", ")", "=>", "{", "const", "g", "=", "new", "Graph", "<", "string", ">", "(", "s", "=>", "s", ")", ";", "g", ".", "addEdge", "(", "'a'", ",", "'b'", ")", ";", "g", ".", "addEdge", "(", "'c'", ",", "'d'", ")", ";", "const", "s", "=", "g", ".", "topoSort", "(", ")", ";", "expect", "(", "s", ")", ".", "to", ".", "exist", ";", "expect", "(", "s", ".", "length", ")", ".", "eq", "(", "4", ")", ";", "expect", "(", "s", ")", ".", "to", ".", "include", "(", "'a'", ")", ";", "expect", "(", "s", ")", ".", "to", ".", "include", "(", "'b'", ")", ";", "expect", "(", "s", ")", ".", "to", ".", "include", "(", "'c'", ")", ";", "expect", "(", "s", ")", ".", "to", ".", "include", "(", "'d'", ")", ";", "expect", "(", "s", ".", "indexOf", "(", "'a'", ")", "<", "s", ".", "indexOf", "(", "'b'", ")", ",", "\"a before b\"", ")", ";", "expect", "(", "s", ".", "indexOf", "(", "'c'", ")", "<", "s", ".", "indexOf", "(", "'d'", ")", ",", "\"c before d\"", ")", ";", "}", ")", ";", "it", "(", "'sorts dags'", ",", "(", ")", "=>", "{", "const", "g", "=", "new", "Graph", "<", "string", ">", "(", "s", "=>", "s", ")", ";", "g", ".", "addEdge", "(", "'a'", ",", "'b'", ")", ";", "g", ".", "addEdge", "(", "'b'", ",", "'c'", ")", ";", "g", ".", "addEdge", "(", "'a'", ",", "'c'", ")", ";", "const", "s", "=", "g", ".", "topoSort", "(", ")", ";", "expect", "(", "s", ")", ".", "to", ".", "exist", ";", "expect", "(", "s", ".", "length", ")", ".", "eq", "(", "3", ")", ";", "expect", "(", "s", "[", "0", "]", ")", ".", "eq", "(", "'a'", ")", ";", "expect", "(", "s", "[", "1", "]", ")", ".", "eq", "(", "'b'", ")", ";", "expect", "(", "s", "[", "2", "]", ")", ".", "eq", "(", "'c'", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Graph", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Graph", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Graph", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Graph", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/graph.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "graph.test.ts"}
{"tokens": ["import", "{", "ExecutionLogSlicer", "}", "from", "'../log-slicer'", ";", "import", "{", "Location", ",", "DataflowAnalyzer", "}", "from", "'..'", ";", "import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "TestCell", "}", "from", "'./testcell'", ";", "function", "loc", "(", "line0", ",", "col0", ",", "line1", "=", "line0", "+", "1", ",", "col1", "=", "0", ")", "{", "return", "{", "first_line", ":", "line0", ",", "first_column", ":", "col0", ",", "last_line", ":", "line1", ",", "last_column", ":", "col1", "}", ";", "}", "function", "makeLog", "(", "lines", ")", "{", "const", "cells", "=", "lines", ".", "map", "(", "(", "text", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ")", ")", ";", "const", "logSlicer", "=", "new", "ExecutionLogSlicer", "(", "new", "DataflowAnalyzer", "(", ")", ")", ";", "cells", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "return", "logSlicer", ";", "}", "describe", "(", "'log-slicer'", ",", "(", ")", "=>", "{", "it", "(", "'does the basics'", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "'x=5'", ",", "'y=6'", ",", "'print(x+y)'", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "lastCell", "=", "logSlicer", ".", "cellExecutions", "[", "logSlicer", ".", "cellExecutions", ".", "length", "-", "1", "]", ".", "cell", ";", "const", "slices", "=", "logSlicer", ".", "sliceAllExecutions", "(", "lastCell", ".", "persistentId", ")", ";", "expect", "(", "slices", ")", ".", "to", ".", "exist", ";", "expect", "(", "slices", ".", "length", ")", ".", "eq", "(", "1", ")", ";", "const", "slice", "=", "slices", "[", "0", "]", ";", "expect", "(", "slice", ")", ".", "to", ".", "exist", ";", "expect", "(", "slice", ".", "cellSlices", ")", ".", "to", ".", "exist", ";", "expect", "(", "slice", ".", "cellSlices", ".", "length", ")", ".", "eq", "(", "3", ")", ";", "slice", ".", "cellSlices", ".", "forEach", "(", "(", "cs", ",", "i", ")", "=>", "{", "expect", "(", "cs", ")", ".", "to", ".", "exist", ";", "expect", "(", "cs", ".", "textSliceLines", ")", ".", "eq", "(", "lines", "[", "i", "]", ")", ";", "expect", "(", "cs", ".", "textSlice", ")", ".", "eq", "(", "lines", "[", "i", "]", ")", ";", "}", ")", ";", "}", ")", ";", "it", "(", "\"does jim's demo\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "\"import pandas as pd\"", ",", "\"Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'], 'Price': [22000,25000,27000,35000]}\\n\"", "+", "\"df = pd.DataFrame(Cars,columns= ['Brand', 'Price'])\"", ",", "\"def check(df, size=11):\\n\"", "+", "\"    print(df)\"", ",", "\"print(df)\"", ",", "\"x = df['Brand'].values\"", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "lastCell", "=", "logSlicer", ".", "cellExecutions", "[", "logSlicer", ".", "cellExecutions", ".", "length", "-", "1", "]", ".", "cell", ";", "const", "slice", "=", "logSlicer", ".", "sliceLatestExecution", "(", "lastCell", ".", "persistentId", ")", ";", "expect", "(", "slice", ")", ".", "to", ".", "exist", ";", "expect", "(", "slice", ".", "cellSlices", ")", ".", "to", ".", "exist", ";", "[", "1", ",", "2", ",", "5", "]", ".", "forEach", "(", "(", "c", ",", "i", ")", "=>", "expect", "(", "slice", ".", "cellSlices", "[", "i", "]", ".", "textSlice", ")", ".", "eq", "(", "lines", "[", "c", "-", "1", "]", ")", ")", ";", "const", "cellCounts", "=", "slice", ".", "cellSlices", ".", "map", "(", "cell", "=>", "cell", ".", "cell", ".", "executionCount", ")", ";", "[", "3", ",", "4", "]", ".", "forEach", "(", "c", "=>", "expect", "(", "cellCounts", ")", ".", "to", ".", "not", ".", "include", "(", "c", ")", ")", ";", "}", ")", ";", "describe", "(", "\"getDependentCells\"", ",", "(", ")", "=>", "{", "it", "(", "\"handles simple in-order\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "\"x = 3\"", ",", "\"y = x+1\"", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "1", ")", ";", "expect", "(", "deps", "[", "0", "]", ".", "text", ")", ".", "to", ".", "equal", "(", "lines", "[", "1", "]", ")", ";", "}", ")", ";", "it", "(", "\"handles variable redefinition\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "\"x = 3\"", ",", "\"y = x+1\"", ",", "\"x = 4\"", ",", "\"y = x*2\"", ",", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "1", ")", ";", "expect", "(", "deps", "[", "0", "]", ".", "text", ")", ".", "to", ".", "equal", "(", "lines", "[", "1", "]", ")", ";", "const", "deps2", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "2", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps2", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps2", ")", ".", "to", ".", "have", ".", "length", "(", "1", ")", ";", "expect", "(", "deps2", "[", "0", "]", ".", "text", ")", ".", "to", ".", "equal", "(", "lines", "[", "3", "]", ")", ";", "}", ")", ";", "it", "(", "\"handles no deps\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "\"x = 3\\nprint(x)\"", ",", "\"y = 2\\nprint(y)\"", ",", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "0", ")", ";", "}", ")", ";", "it", "(", "\"works transitively\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "\"x = 3\"", ",", "\"y = x+1\"", ",", "\"z = y-1\"", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "const", "deplines", "=", "deps", ".", "map", "(", "d", "=>", "d", ".", "text", ")", ";", "expect", "(", "deplines", ")", ".", "includes", "(", "lines", "[", "1", "]", ")", ";", "expect", "(", "deplines", ")", ".", "includes", "(", "lines", "[", "2", "]", ")", ";", "}", ")", ";", "it", "(", "\"includes all defs within cells\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "\"x = 3\\nq = 2\"", ",", "\"y = x+1\"", ",", "\"z = q-1\"", "]", ";", "const", "logSlicer", "=", "makeLog", "(", "lines", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "const", "deplines", "=", "deps", ".", "map", "(", "d", "=>", "d", ".", "text", ")", ";", "expect", "(", "deplines", ")", ".", "includes", "(", "lines", "[", "1", "]", ")", ";", "expect", "(", "deplines", ")", ".", "includes", "(", "lines", "[", "2", "]", ")", ";", "}", ")", ";", "it", "(", "\"handles cell re-execution\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "[", "\"0\"", ",", "\"x = 2\\nprint(x)\"", "]", ",", "[", "\"1\"", ",", "\"y = x+1\\nprint(y)\"", "]", ",", "[", "\"2\"", ",", "\"q = 2\"", "]", ",", "[", "\"0\"", ",", "\"x = 20\\nprint(x)\"", "]", "]", ";", "const", "cells", "=", "lines", ".", "map", "(", "(", "[", "pid", ",", "text", "]", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ",", "undefined", ",", "pid", ")", ")", ";", "const", "logSlicer", "=", "new", "ExecutionLogSlicer", "(", "new", "DataflowAnalyzer", "(", ")", ")", ";", "cells", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "const", "rerunFirst", "=", "logSlicer", ".", "cellExecutions", "[", "3", "]", ".", "cell", ".", "executionEventId", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "rerunFirst", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "1", ")", ";", "expect", "(", "deps", "[", "0", "]", ".", "text", ")", ".", "equals", "(", "lines", "[", "1", "]", "[", "1", "]", ")", ";", "}", ")", ";", "it", "(", "\"handles cell re-execution no-op\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "[", "\"0\"", ",", "\"x = 2\\nprint(x)\"", "]", ",", "[", "\"1\"", ",", "\"y = 3\\nprint(y)\"", "]", ",", "[", "\"2\"", ",", "\"q = 2\"", "]", ",", "[", "\"0\"", ",", "\"x = 20\\nprint(x)\"", "]", ",", "]", ";", "const", "cells", "=", "lines", ".", "map", "(", "(", "[", "pid", ",", "text", "]", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ",", "undefined", ",", "pid", ")", ")", ";", "const", "logSlicer", "=", "new", "ExecutionLogSlicer", "(", "new", "DataflowAnalyzer", "(", ")", ")", ";", "cells", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "3", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "0", ")", ";", "}", ")", ";", "it", "(", "\"return result in topo order\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "[", "\"0\"", ",", "\"x = 1\"", "]", ",", "[", "\"0\"", ",", "\"y = 2*x\"", "]", ",", "[", "\"0\"", ",", "\"z = x*y\"", "]", ",", "[", "\"0\"", ",", "\"x = 2\"", "]", ",", "[", "\"1\"", ",", "\"y = x*2\"", "]", ",", "[", "\"2\"", ",", "\"z = y*x\"", "]", ",", "[", "\"0\"", ",", "\"x = 3\"", "]", ",", "]", ";", "const", "cells", "=", "lines", ".", "map", "(", "(", "[", "pid", ",", "text", "]", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ",", "undefined", ",", "pid", ")", ")", ";", "const", "logSlicer", "=", "new", "ExecutionLogSlicer", "(", "new", "DataflowAnalyzer", "(", ")", ")", ";", "cells", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "const", "lastEvent", "=", "logSlicer", ".", "cellExecutions", "[", "logSlicer", ".", "cellExecutions", ".", "length", "-", "1", "]", ".", "cell", ".", "executionEventId", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "lastEvent", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "expect", "(", "deps", "[", "0", "]", ".", "text", ")", ".", "equals", "(", "'y = x*2'", ")", ";", "expect", "(", "deps", "[", "1", "]", ".", "text", ")", ".", "equals", "(", "'z = y*x'", ")", ";", "}", ")", ";", "it", "(", "\"can be called multiple times\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "[", "\"0\"", ",", "\"x = 1\"", "]", ",", "[", "\"1\"", ",", "\"y = 2*x\"", "]", ",", "[", "\"2\"", ",", "\"z = x*y\"", "]", ",", "]", ";", "const", "cells", "=", "lines", ".", "map", "(", "(", "[", "pid", ",", "text", "]", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ",", "undefined", ",", "pid", ")", ")", ";", "const", "logSlicer", "=", "new", "ExecutionLogSlicer", "(", "new", "DataflowAnalyzer", "(", ")", ")", ";", "cells", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "logSlicer", ".", "cellExecutions", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "expect", "(", "deps", "[", "0", "]", ".", "text", ")", ".", "equals", "(", "'y = 2*x'", ")", ";", "expect", "(", "deps", "[", "1", "]", ".", "text", ")", ".", "equals", "(", "'z = x*y'", ")", ";", "const", "edits", "=", "[", "[", "\"0\"", ",", "\"x = 2\"", "]", ",", "[", "\"1\"", ",", "\"y = x*2\"", "]", ",", "[", "\"2\"", ",", "\"z = y*x\"", "]", ",", "[", "\"0\"", ",", "\"x = 3\"", "]", ",", "]", ";", "const", "cellEdits", "=", "edits", ".", "map", "(", "(", "[", "pid", ",", "text", "]", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ",", "undefined", ",", "pid", ")", ")", ";", "cellEdits", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "const", "lastEvent", "=", "logSlicer", ".", "cellExecutions", "[", "logSlicer", ".", "cellExecutions", ".", "length", "-", "1", "]", ".", "cell", ".", "executionEventId", ";", "const", "deps2", "=", "logSlicer", ".", "getDependentCells", "(", "lastEvent", ")", ";", "expect", "(", "deps2", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps2", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "expect", "(", "deps2", "[", "0", "]", ".", "text", ")", ".", "equals", "(", "'y = x*2'", ")", ";", "expect", "(", "deps2", "[", "1", "]", ".", "text", ")", ".", "equals", "(", "'z = y*x'", ")", ";", "}", ")", ";", "it", "(", "\"handles api calls\"", ",", "(", ")", "=>", "{", "const", "lines", "=", "[", "[", "\"0\"", ",", "\"from matplotlib.pyplot import scatter\\nfrom sklearn.cluster import KMeans\\nfrom sklearn import datasets\"", "]", ",", "[", "\"1\"", ",", "\"data = datasets.load_iris().data[:,2:4]\\npetal_length, petal_width = data[:,1], data[:,0]\"", "]", ",", "[", "\"2\"", ",", "\"k=3\"", "]", ",", "[", "\"3\"", ",", "\"clusters = KMeans(n_clusters=k).fit(data).labels_\"", "]", ",", "[", "\"4\"", ",", "\"scatter(petal_length, petal_width, c=clusters)\"", "]", ",", "[", "\"2\"", ",", "\"k=4\"", "]", ",", "]", ";", "const", "cells", "=", "lines", ".", "map", "(", "(", "[", "pid", ",", "text", "]", ",", "i", ")", "=>", "new", "TestCell", "(", "text", ",", "i", "+", "1", ",", "undefined", ",", "pid", ")", ")", ";", "const", "logSlicer", "=", "new", "ExecutionLogSlicer", "(", "new", "DataflowAnalyzer", "(", ")", ")", ";", "cells", ".", "forEach", "(", "cell", "=>", "logSlicer", ".", "logExecution", "(", "cell", ")", ")", ";", "const", "lastEvent", "=", "logSlicer", ".", "cellExecutions", "[", "logSlicer", ".", "cellExecutions", ".", "length", "-", "1", "]", ".", "cell", ".", "executionEventId", ";", "const", "deps", "=", "logSlicer", ".", "getDependentCells", "(", "lastEvent", ")", ";", "expect", "(", "deps", ")", ".", "to", ".", "exist", ";", "expect", "(", "deps", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "const", "sliceText", "=", "deps", ".", "map", "(", "c", "=>", "c", ".", "text", ")", ";", "expect", "(", "sliceText", ")", ".", "to", ".", "include", "(", "lines", "[", "3", "]", "[", "1", "]", ")", ";", "expect", "(", "sliceText", ")", ".", "to", ".", "include", "(", "lines", "[", "4", "]", "[", "1", "]", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Location", null, "number", null, "number", null, "number", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ExecutionLogSlicer", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/log-slicer.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "log-slicer.test.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "MagicsRewriter", ",", "MatchPosition", ",", "PylabLineMagicRewriter", ",", "TimeLineMagicRewriter", ",", "}", "from", "'../rewrite-magics'", ";", "describe", "(", "'MagicsRewriter'", ",", "(", ")", "=>", "{", "let", "magicsTranslator", ";", "beforeEach", "(", "(", ")", "=>", "{", "magicsTranslator", "=", "new", "MagicsRewriter", "(", ")", ";", "}", ")", ";", "function", "rewrite", "(", "...", "codeLines", ")", "{", "return", "magicsTranslator", ".", "rewrite", "(", "codeLines", ".", "join", "(", "'\\n'", ")", ")", ";", "}", "it", "(", "'comments out line magics and annotates them with their position'", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'%some_magic arg1 arg2'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "'#%some_magic arg1 arg2'", ")", ";", "}", ")", ";", "it", "(", "'rewrites line magics with line continuations'", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'%some_magic arg1 \\\\ '", ",", "'    arg2'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "[", "'#%some_magic arg1 \\\\ '", ",", "'#    arg2'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'allows line magics to start after any number of whitespaces'", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'   %some_magic arg1 arg2'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "'#   %some_magic arg1 arg2'", ")", ";", "}", ")", ";", "it", "(", "\"doesn't detect a % mid-line as a magic\"", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'print(a) %some_magic'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "'print(a) %some_magic'", ")", ";", "}", ")", ";", "it", "(", "'by default comments out cell magics'", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'%%some_cell_magic'", ",", "'line 1'", ",", "'line 2'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "[", "'##%%some_cell_magic'", ",", "'##line 1'", ",", "'##line 2'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'allows cell magics to start after any number of whitespaces'", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'   %%some_cell_magic'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "'##   %%some_cell_magic'", ")", ";", "}", ")", ";", "it", "(", "'does not treat VS Code cell markers as magic'", ",", "(", ")", "=>", "{", "const", "code", "=", "[", "'#%%'", ",", "'x=3'", "]", ";", "let", "rewritten", "=", "rewrite", "(", "...", "code", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "code", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "\"does nothing to text that doesn't have magics\"", ",", "(", ")", "=>", "{", "let", "rewritten", "=", "rewrite", "(", "'print(a)'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "'print(a)'", ")", ";", "}", ")", ";", "it", "(", "'applies custom rewrite rules and annotations'", ",", "(", ")", "=>", "{", "let", "magicsTranslator", "=", "new", "MagicsRewriter", "(", "[", "{", "commandName", ":", "'foo'", ",", "rewrite", ":", "(", "_", ",", "__", ",", "___", ")", "=>", "{", "return", "{", "text", ":", "'# foo_found'", ",", "annotations", ":", "[", "{", "key", ":", "'foo_tag'", ",", "value", ":", "'bar_value'", "}", "]", ",", "}", ";", "}", ",", "}", ",", "]", ")", ";", "let", "rewritten", "=", "magicsTranslator", ".", "rewrite", "(", "'%foo arg1 arg2'", ")", ";", "expect", "(", "rewritten", ")", ".", "to", ".", "equal", "(", "\"'''foo_tag: bar_value''' # foo_found\"", ")", ";", "}", ")", ";", "let", "EXAMPLE_POSITION", "=", "[", "{", "line", ":", "0", ",", "col", ":", "0", "}", ",", "{", "line", ":", "0", ",", "col", ":", "10", "}", ",", "]", ";", "describe", "(", "'TimeLineMagicRewriter'", ",", "(", ")", "=>", "{", "it", "(", "'replaces %time with an equivalent-length string literal'", ",", "(", ")", "=>", "{", "let", "rewrite", "=", "new", "TimeLineMagicRewriter", "(", ")", ".", "rewrite", "(", "'%time print(a)'", ",", "''", ",", "EXAMPLE_POSITION", ")", ";", "expect", "(", "rewrite", ".", "text", ")", ".", "to", ".", "equal", "(", "'\"   \" print(a)'", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'MatplotlibLineMagicRewriter'", ",", "(", ")", "=>", "{", "it", "(", "'adds annotations for its position and defined symbols'", ",", "(", ")", "=>", "{", "let", "rewrite", "=", "new", "PylabLineMagicRewriter", "(", ")", ".", "rewrite", "(", "'%pylab inline'", ",", "'%pylab inline'", ",", "EXAMPLE_POSITION", ")", ";", "expect", "(", "rewrite", ".", "text", ")", ".", "to", ".", "be", ".", "undefined", ";", "expect", "(", "rewrite", ".", "annotations", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "{", "key", ":", "'defs'", ",", "value", ":", "JSON", ".", "stringify", "(", "[", "{", "name", ":", "'numpy'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'matplotlib'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'pylab'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'mlab'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'pyplot'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'np'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'plt'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'display'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'figsize'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "{", "name", ":", "'getfigs'", ",", "pos", ":", "[", "[", "0", ",", "0", "]", ",", "[", "0", ",", "10", "]", "]", "}", ",", "]", ")", ",", "}", ",", "]", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/magics-rewriter.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "magics-rewriter.test.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "SlicedExecution", "}", "from", "'../log-slicer'", ";", "import", "{", "LocationSet", "}", "from", "'../slice'", ";", "import", "{", "Cell", "}", "from", "'../cell'", ";", "import", "{", "CellSlice", "}", "from", "'../cellslice'", ";", "import", "{", "TestCell", "}", "from", "'./testcell'", ";", "describe", "(", "'SlicedExecution'", ",", "(", ")", "=>", "{", "function", "cell", "(", "executionEventId", ",", "text", ",", "executionCount", "?", ",", "id", "?", ")", "{", "if", "(", "executionCount", "===", "undefined", ")", "executionCount", "=", "1", ";", "return", "new", "TestCell", "(", "text", ",", "executionCount", ",", "executionEventId", ",", "id", ")", ";", "}", "function", "cellSlice", "(", "cell", ",", "slice", ")", "{", "return", "new", "CellSlice", "(", "cell", ",", "slice", ")", ";", "}", "function", "location", "(", "first_line", ",", "first_column", ",", "last_line", ",", "last_column", ")", "{", "return", "{", "first_line", ":", "first_line", ",", "first_column", ":", "first_column", ",", "last_line", ":", "last_line", ",", "last_column", ":", "last_column", ",", "}", ";", "}", "function", "slicedExecution", "(", "...", "cellSlices", ")", "{", "return", "new", "SlicedExecution", "(", "new", "Date", "(", ")", ",", "cellSlices", ")", ";", "}", "describe", "(", "'merge'", ",", "(", ")", "=>", "{", "it", "(", "'unions slices with different cells'", ",", "(", ")", "=>", "{", "let", "slice1", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ",", "1", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice2", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'2'", ",", "'b = 2'", ",", "2", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "merged", "=", "slice1", ".", "merge", "(", "slice2", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "0", "]", ".", "cell", ".", "executionEventId", ")", ".", "to", ".", "equal", "(", "'1'", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "1", "]", ".", "cell", ".", "executionEventId", ")", ".", "to", ".", "equal", "(", "'2'", ")", ";", "}", ")", ";", "it", "(", "'will not include the same locations from the same cell twice'", ",", "(", ")", "=>", "{", "let", "slice1", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice2", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "merged", "=", "slice1", ".", "merge", "(", "slice2", ")", ";", "expect", "(", "merged", ".", "cellSlices", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "0", "]", ".", "slice", ".", "size", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "}", ")", ";", "it", "(", "'considers two cells sharing ID and execution count but differing in execution event '", "+", "'ID to be different'", ",", "(", ")", "=>", "{", "let", "slice1", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ",", "1", ",", "'id1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice2", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'2'", ",", "'a = 1'", ",", "1", ",", "'id1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "merged", "=", "slice1", ".", "merge", "(", "slice2", ")", ";", "expect", "(", "merged", ".", "cellSlices", ".", "length", ")", ".", "to", ".", "equal", "(", "2", ")", ";", "}", ")", ";", "it", "(", "'will include complementary ranges from two slices of the same cell'", ",", "(", ")", "=>", "{", "let", "slice1", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice2", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "4", ")", ")", ")", ")", ";", "let", "merged", "=", "slice1", ".", "merge", "(", "slice2", ")", ";", "expect", "(", "merged", ".", "cellSlices", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "0", "]", ".", "slice", ".", "size", ")", ".", "to", ".", "equal", "(", "2", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "0", "]", ".", "slice", ".", "items", ")", ".", "to", ".", "deep", ".", "include", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "0", "]", ".", "slice", ".", "items", ")", ".", "to", ".", "deep", ".", "include", "(", "location", "(", "1", ",", "0", ",", "1", ",", "4", ")", ")", ";", "}", ")", ";", "it", "(", "'reorders the cells in execution order'", ",", "(", ")", "=>", "{", "let", "slice1", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'2'", ",", "'a = 1'", ",", "2", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice2", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ",", "1", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "4", ")", ")", ")", ")", ";", "let", "merged", "=", "slice1", ".", "merge", "(", "slice2", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "0", "]", ".", "cell", ".", "executionCount", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "merged", ".", "cellSlices", "[", "1", "]", ".", "cell", ".", "executionCount", ")", ".", "to", ".", "equal", "(", "2", ")", ";", "}", ")", ";", "it", "(", "'can do an n-way merge with a bunch of cells'", ",", "(", ")", "=>", "{", "let", "slice1", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'1'", ",", "'a = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ",", "cellSlice", "(", "cell", "(", "'2'", ",", "'b = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice2", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'3'", ",", "'c = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ",", "cellSlice", "(", "cell", "(", "'4'", ",", "'d = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "slice3", "=", "slicedExecution", "(", "cellSlice", "(", "cell", "(", "'5'", ",", "'e = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ",", "cellSlice", "(", "cell", "(", "'6'", ",", "'f = 1'", ")", ",", "new", "LocationSet", "(", "location", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ")", ")", ";", "let", "merged", "=", "slice1", ".", "merge", "(", "slice2", ",", "slice3", ")", ";", "expect", "(", "merged", ".", "cellSlices", ".", "length", ")", ".", "to", ".", "equal", "(", "6", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, "string", null, "string", null, "number", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "Cell", null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "number", null, "number", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "SlicedExecution", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/merge.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "merge.test.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "parse", ",", "walk", "}", "from", "'../python-parser'", ";", "import", "*", "as", "py", "from", "'../python-parser'", ";", "describe", "(", "'python parser'", ",", "(", ")", "=>", "{", "it", "(", "'can parse floats that have no digits before the dot'", ",", "(", ")", "=>", "{", "parse", "(", "'a = .2\\n'", ")", ";", "}", ")", ";", "it", "(", "'can also parse calls on objects'", ",", "(", ")", "=>", "{", "parse", "(", "'obj.prop\\n'", ")", ";", "}", ")", ";", "it", "(", "'can parse comments'", ",", "(", ")", "=>", "{", "const", "tree", "=", "parse", "(", "'#\\n'", ")", ";", "expect", "(", "tree", ".", "code", ")", ".", "to", ".", "be", ".", "an", "(", "'array'", ")", ";", "expect", "(", "tree", ".", "code", ".", "length", ")", ".", "to", ".", "equal", "(", "0", ")", ";", "}", ")", ";", "it", "(", "'can parse scientific notation'", ",", "(", ")", "=>", "{", "parse", "(", "'1e5\\n'", ")", ";", "}", ")", ";", "it", "(", "'can parse imaginary numbers'", ",", "(", ")", "=>", "{", "parse", "(", "'x = 12j\\n'", ")", ";", "}", ")", ";", "it", "(", "'can parse lambdas with keyword'", ",", "(", ")", "=>", "{", "parse", "(", "'f = (lambda document, **variety: document)\\n'", ")", ";", "}", ")", ";", "it", "(", "'parses a dictionary with a `comp_for`'", ",", "(", ")", "=>", "{", "let", "mod", "=", "parse", "(", "'{k: v for (k, v) in d.items()}\\n'", ")", ";", "expect", "(", "mod", ")", ".", "to", ".", "exist", ";", "expect", "(", "mod", ".", "code", ")", ".", "to", ".", "have", ".", "length", ";", "let", "node", "=", "mod", ".", "code", "[", "0", "]", "as", "py", ".", "DictExpr", ";", "expect", "(", "node", ".", "entries", ".", "length", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "node", ".", "comp_for", ")", ".", "to", ".", "exist", ";", "}", ")", ";", "it", "(", "'can parse line continuations'", ",", "(", ")", "=>", "{", "parse", "(", "[", "'a = b\\\\'", ",", "'.func(1, 2)\\\\'", ",", "'.func(3, 4)'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'produces the full location of a line for a call statement'", ",", "(", ")", "=>", "{", "let", "node", "=", "parse", "(", "[", "'obj.func()'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ".", "code", "[", "0", "]", ";", "expect", "(", "node", ".", "location", ")", ".", "to", ".", "deep", ".", "equal", "(", "{", "first_line", ":", "1", ",", "first_column", ":", "0", ",", "last_line", ":", "1", ",", "last_column", ":", "10", ",", "}", ")", ";", "}", ")", ";", "it", "(", "'does not crash on correct code after parsing bad code'", ",", "(", ")", "=>", "{", "expect", "(", "(", ")", "=>", "parse", "(", "'print(1\\n'", ")", ")", ".", "to", ".", "throw", "(", ")", ";", "expect", "(", "(", ")", "=>", "parse", "(", "'a + 1\\nb = a\\n'", ")", ")", ".", "not", ".", "to", ".", "throw", "(", ")", ";", "}", ")", ";", "it", "(", "'handles docstrings'", ",", "(", ")", "=>", "{", "let", "node", "=", "parse", "(", "[", "'def foo():'", ",", "'    \"\"\"'", ",", "'    this function'", ",", "'    does nothing'", ",", "'    \"\"\"'", ",", "'    pass\\n'", ",", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "expect", "(", "node", ")", ".", "to", ".", "exist", ";", "expect", "(", "node", ".", "code", ")", ".", "to", ".", "have", ".", "length", "(", "1", ")", ";", "expect", "(", "node", ".", "code", "[", "0", "]", ".", "type", ")", ".", "to", ".", "equal", "(", "'def'", ")", ";", "const", "def", "=", "node", ".", "code", "[", "0", "]", "as", "py", ".", "Def", ";", "expect", "(", "def", ".", "code", ")", ".", "to", ".", "have", ".", "length", "(", "2", ")", ";", "expect", "(", "def", ".", "code", "[", "0", "]", ".", "type", ")", ".", "to", ".", "equal", "(", "'literal'", ")", ";", "expect", "(", "def", ".", "code", "[", "1", "]", ".", "type", ")", ".", "to", ".", "equal", "(", "'pass'", ")", ";", "const", "docstring", "=", "def", ".", "code", "[", "0", "]", "as", "py", ".", "Literal", ";", "expect", "(", "docstring", ")", ".", "to", ".", "exist", ";", "expect", "(", "docstring", ".", "type", ")", ".", "to", ".", "equal", "(", "'literal'", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'ast walker'", ",", "(", ")", "=>", "{", "it", "(", "\"doesn't crash on try-execpt blocks\"", ",", "(", ")", "=>", "{", "let", "tree", "=", "parse", "(", "[", "'try:'", ",", "'    pass'", ",", "'except:'", ",", "'    pass'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "walk", "(", "tree", ")", ";", "}", ")", ";", "it", "(", "\"doesn't crash on with-statements\"", ",", "(", ")", "=>", "{", "let", "tree", "=", "parse", "(", "[", "'with sns.axes_style(\"white\"):'", ",", "'    pass'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "walk", "(", "tree", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Def", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Literal", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/parser.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "parser.test.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "ProgramBuilder", "}", "from", "'../program-builder'", ";", "import", "{", "Cell", "}", "from", "'../cell'", ";", "import", "{", "TestCell", "}", "from", "'./testcell'", ";", "describe", "(", "'program builder'", ",", "(", ")", "=>", "{", "function", "createCell", "(", "executionEventId", ",", "text", ",", "executionCount", "?", ")", "{", "return", "new", "TestCell", "(", "text", ",", "executionCount", ",", "executionEventId", ")", ";", "}", "let", "programBuilder", ";", "beforeEach", "(", "(", ")", "=>", "{", "programBuilder", "=", "new", "ProgramBuilder", "(", ")", ";", "}", ")", ";", "it", "(", "'appends cell contents in order'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ")", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'id2'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equal", "(", "[", "'print(1)'", ",", "'print(2)'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'builds a map from lines to cells'", ",", "(", ")", "=>", "{", "let", "cell1", "=", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ";", "let", "cell2", "=", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ";", "programBuilder", ".", "add", "(", "cell1", ",", "cell2", ")", ";", "let", "lineToCellMap", "=", "programBuilder", ".", "buildTo", "(", "'id2'", ")", ".", "lineToCellMap", ";", "expect", "(", "lineToCellMap", "[", "1", "]", ")", ".", "to", ".", "equal", "(", "cell1", ")", ";", "expect", "(", "lineToCellMap", "[", "2", "]", ")", ".", "to", ".", "equal", "(", "cell2", ")", ";", "}", ")", ";", "it", "(", "'builds a map from cells to lines'", ",", "(", ")", "=>", "{", "let", "cell1", "=", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ";", "let", "cell2", "=", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ";", "programBuilder", ".", "add", "(", "cell1", ",", "cell2", ")", ";", "let", "cellToLineMap", "=", "programBuilder", ".", "buildTo", "(", "'id2'", ")", ".", "cellToLineMap", ";", "expect", "(", "cellToLineMap", "[", "'id1'", "]", ".", "items", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "1", "]", ")", ";", "expect", "(", "cellToLineMap", "[", "'id2'", "]", ".", "items", ")", ".", "to", ".", "deep", ".", "equal", "(", "[", "2", "]", ")", ";", "}", ")", ";", "it", "(", "'stops after the specified cell'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ")", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'id1'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equal", "(", "'print(1)\\n'", ")", ";", "}", ")", ";", "it", "(", "'skips cells with errors'", ",", "(", ")", "=>", "{", "let", "badCell", "=", "createCell", "(", "'idE'", ",", "'print(2)'", ")", ";", "badCell", ".", "hasError", "=", "true", ";", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "badCell", ",", "createCell", "(", "'id3'", ",", "'print(3)'", ")", ")", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'id3'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equal", "(", "[", "'print(1)'", ",", "'print(3)'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'includes cells that end with errors'", ",", "(", ")", "=>", "{", "let", "badCell", "=", "createCell", "(", "'idE'", ",", "'print(bad_name)'", ")", ";", "badCell", ".", "hasError", "=", "true", ";", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ",", "badCell", ")", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'idE'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equal", "(", "[", "'print(1)'", ",", "'print(2)'", ",", "'print(bad_name)'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'skips cells that fail to parse'", ",", "(", ")", "=>", "{", "let", "badCell", "=", "createCell", "(", "'idE'", ",", "'causes_syntax_error('", ")", ";", "let", "oldConsoleLog", "=", "console", ".", "log", ";", "console", ".", "log", "=", "(", ")", "=>", "{", "}", ";", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "badCell", ",", "createCell", "(", "'id3'", ",", "'print(3)'", ")", ")", ";", "console", ".", "log", "=", "oldConsoleLog", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'id3'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equal", "(", "[", "'print(1)'", ",", "'print(3)'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'doesn\\'t skip cells with array slices'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'array[0:1]'", ")", ",", "createCell", "(", "'id2'", ",", "'print(x)'", ")", ")", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'id2'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equal", "(", "\"array[0:1]\\nprint(x)\\n\"", ")", ";", "}", ")", ";", "it", "(", "'skips cells that were executed in prior kernels'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ",", "1", ")", ",", "createCell", "(", "'id2'", ",", "'print(2)'", ",", "1", ")", ",", "createCell", "(", "'id3'", ",", "'print(3)'", ",", "2", ")", ",", "createCell", "(", "'id3'", ",", "'print(4)'", ",", "1", ")", ")", ";", "let", "code", "=", "programBuilder", ".", "buildTo", "(", "'id3'", ")", ".", "text", ";", "expect", "(", "code", ")", ".", "to", ".", "equals", "(", "[", "'print(4)'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "}", ")", ";", "it", "(", "'constructs a tree for the program'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ")", ";", "let", "tree", "=", "programBuilder", ".", "buildTo", "(", "'id2'", ")", ".", "tree", ";", "expect", "(", "tree", ".", "code", ".", "length", ")", ".", "to", ".", "equal", "(", "2", ")", ";", "}", ")", ";", "it", "(", "'adjusts the node locations'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ",", "createCell", "(", "'id2'", ",", "'print(2)'", ")", ")", ";", "let", "tree", "=", "programBuilder", ".", "buildTo", "(", "'id2'", ")", ".", "tree", ";", "expect", "(", "tree", ".", "code", "[", "0", "]", ".", "location", ".", "first_line", ")", ".", "to", ".", "equal", "(", "1", ")", ";", "expect", "(", "tree", ".", "code", "[", "1", "]", ".", "location", ".", "first_line", ")", ".", "to", ".", "equal", "(", "2", ")", ";", "}", ")", ";", "it", "(", "'annotates tree nodes with cell ID info'", ",", "(", ")", "=>", "{", "programBuilder", ".", "add", "(", "createCell", "(", "'id1'", ",", "'print(1)'", ")", ")", ";", "let", "tree", "=", "programBuilder", ".", "buildTo", "(", "'id1'", ")", ".", "tree", ";", "expect", "(", "tree", ".", "code", "[", "0", "]", ".", "location", ".", "path", ")", ".", "to", ".", "equal", "(", "'id1'", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, "string", null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Cell", null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Module", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Module", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Module", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/program-builder.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "program-builder.test.ts"}
{"tokens": ["import", "{", "expect", "}", "from", "'chai'", ";", "import", "{", "Location", ",", "parse", ",", "locationString", "}", "from", "'../python-parser'", ";", "import", "{", "LocationSet", ",", "slice", "}", "from", "'../slice'", ";", "import", "{", "DataflowAnalyzer", "}", "from", "'../data-flow'", ";", "function", "loc", "(", "line0", ",", "col0", ",", "line1", "=", "line0", "+", "1", ",", "col1", "=", "0", ")", "{", "return", "{", "first_line", ":", "line0", ",", "first_column", ":", "col0", ",", "last_line", ":", "line1", ",", "last_column", ":", "col1", "}", ";", "}", "describe", "(", "'slice'", ",", "(", ")", "=>", "{", "it", "(", "'statements including the def and use'", ",", "(", ")", "=>", "{", "let", "ast", "=", "parse", "(", "[", "'a = 1'", ",", "'b = a'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "let", "locations", "=", "slice", "(", "ast", ",", "new", "LocationSet", "(", "loc", "(", "2", ",", "0", ",", "2", ",", "5", ")", ")", ")", ";", "expect", "(", "locations", ".", "items", ")", ".", "to", ".", "deep", ".", "include", "(", "loc", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ";", "}", ")", ";", "it", "(", "'at least yields the statement for a seed'", ",", "(", ")", "=>", "{", "let", "ast", "=", "parse", "(", "[", "'c = 1'", ",", "''", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "let", "locations", "=", "slice", "(", "ast", ",", "new", "LocationSet", "(", "loc", "(", "1", ",", "0", ",", "1", ",", "2", ")", ")", ")", ";", "expect", "(", "locations", ".", "items", ")", ".", "to", ".", "deep", ".", "include", "(", "loc", "(", "1", ",", "0", ",", "1", ",", "5", ")", ")", ";", "}", ")", ";", "it", "(", "'does our current demo'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'from matplotlib.pyplot import scatter'", ",", "'from sklearn.cluster import KMeans'", ",", "'from sklearn import datasets'", ",", "'data = datasets.load_iris().data[:,2:4]'", ",", "'petal_length, petal_width = data[:,0], data[:,1]'", ",", "'print(\"Average petal length: %.3f\" % (sum(petal_length) / len(petal_length),))'", ",", "'clusters = KMeans(n_clusters=5).fit(data).labels_'", ",", "'scatter(petal_length, petal_width, c=clusters)'", ",", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "da", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "new", "LocationSet", "(", "loc", "(", "8", ",", "0", ",", "8", ",", "46", ")", ")", ",", "da", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "7", ",", "8", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "deep", ".", "include", "(", "line", ")", ")", ";", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "6", ")", ";", "}", ")", ";", "it", "(", "'uses api specs to decide mutating methods'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'import pandas as pd'", ",", "'d = pd.read_csv(\"some_path\")'", ",", "'d.pop(\"Column\")'", ",", "'d.memory_usage()'", ",", "'d.count()'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "da", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "5", ",", "0", ",", "5", ",", "12", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "da", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "2", ",", "3", ",", "5", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "4", ")", ";", "}", ")", ";", "it", "(", "'joins inferred types'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'import pandas as pd'", ",", "'import random'", ",", "'if random.choice([1,2]) == 1:'", ",", "'    data = pd.read_csv(\"some_path\")'", ",", "'else:'", ",", "'    data = pd.read_csv(\"other_path\")'", ",", "'data.pop(\"Column\")'", ",", "'data.memory_usage()'", ",", "'data.count()'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "9", ",", "0", ",", "9", ",", "12", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "new", "DataflowAnalyzer", "(", ")", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "2", ",", "3", ",", "4", ",", "5", ",", "6", ",", "7", ",", "9", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "8", ")", ";", "}", ")", ";", "it", "(", "'does the documentation example'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'sum = 0'", ",", "'diff_sum = 0'", ",", "'for i in range(min(len(A), len(B))):'", ",", "'    sum += A[i] + B[i]'", ",", "'    diff_sum += A[i] - B[i]'", ",", "'print(sum)'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "da", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "6", ",", "0", ",", "6", ",", "10", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "da", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "3", ",", "4", ",", "6", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "[", "2", ",", "5", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "line", ")", ")", ";", "}", ")", ";", "it", "(", "'eliminates functions without side-effects'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'def innocent(i):'", ",", "'    [1,2,3][i] = 3'", ",", "'a=0'", ",", "'innocent(a)'", ",", "'b=2*a'", ",", "'print(b)'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "da", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "6", ",", "0", ",", "6", ",", "8", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "da", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "3", ",", "5", ",", "6", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "[", "1", ",", "2", ",", "4", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "line", ")", ")", ";", "}", ")", ";", "it", "(", "'keeps functions with item updates'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'def zap(x):'", ",", "'    x[1]=\"zap\"'", ",", "'a=[1,2,3]'", ",", "'zap(a)'", ",", "'b=a[2]'", ",", "'print(b)'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "da", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "6", ",", "0", ",", "6", ",", "8", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "da", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "3", ",", "4", ",", "5", ",", "6", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "}", ")", ";", "it", "(", "'keeps functions with field updates'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'class C:'", ",", "'    f = 0'", ",", "'def zap(x):'", ",", "'    x.f += 1'", ",", "'def innocent(x):'", ",", "'    print(x.f)'", ",", "'a=C()'", ",", "'zap(a)'", ",", "'innocent(a)'", ",", "'b=a.f'", ",", "'print(b)'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "da", "=", "new", "DataflowAnalyzer", "(", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "11", ",", "0", ",", "11", ",", "8", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "da", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "3", ",", "7", ",", "8", ",", "10", ",", "11", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "[", "5", ",", "9", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "line", ")", ")", ";", "}", ")", ";", "it", "(", "'handles transitive updates'", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "'import pandas as pd'", ",", "'df=pd.read_from_csv(\"path\")'", ",", "'def zap(x):'", ",", "'    x.pop(\"Column\")'", ",", "'zap(df)'", ",", "'df.count()'", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "6", ",", "0", ",", "6", ",", "10", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "new", "DataflowAnalyzer", "(", ")", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "2", ",", "3", ",", "5", ",", "6", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "}", ")", ";", "it", "(", "\"does jim's demo\"", ",", "(", ")", "=>", "{", "const", "ast", "=", "parse", "(", "[", "\"import pandas as pd\"", ",", "\"Cars = {'Brand': ['Honda Civic','Toyota Corolla','Ford Focus','Audi A4'], 'Price': [22000,25000,27000,35000]}\"", ",", "\"df = pd.DataFrame(Cars,columns= ['Brand', 'Price'])\"", ",", "\"def check(df, size=11):\"", ",", "\"    print(df)\"", ",", "\"print(df)\"", ",", "\"x = df['Brand'].values\"", "]", ".", "join", "(", "'\\n'", ")", ")", ";", "const", "criterion", "=", "new", "LocationSet", "(", "loc", "(", "7", ",", "0", ",", "7", ",", "21", ")", ")", ";", "const", "locations", "=", "slice", "(", "ast", ",", "criterion", ",", "new", "DataflowAnalyzer", "(", ")", ")", ";", "const", "lineNums", "=", "locations", ".", "items", ".", "map", "(", "loc", "=>", "loc", ".", "first_line", ")", ";", "[", "1", ",", "2", ",", "3", ",", "7", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "include", "(", "line", ")", ")", ";", "[", "4", ",", "5", ",", "6", "]", ".", "forEach", "(", "line", "=>", "expect", "(", "lineNums", ")", ".", "to", ".", "not", ".", "include", "(", "line", ")", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Location", null, "number", null, "number", null, "number", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "DataflowAnalyzer", null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocationSet", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/microsoft/python-program-analysis", "path": "python-program-analysis/src/test/slice.test.ts", "commit_hash": "306031ec6f13a62ffb297b3c77f2de1dd7241a45", "file": "slice.test.ts"}
{"tokens": ["import", "React", "from", "'react'", ";", "import", "ReactDOM", "from", "'react-dom'", ";", "import", "{", "createStore", "}", "from", "'@ice/store'", ";", "import", "'react-app-polyfill/ie11'", ";", "import", "'react-app-polyfill/stable'", ";", "const", "delay", "=", "(", "time", ")", "=>", "new", "Promise", "(", "(", "resolve", ")", "=>", "setTimeout", "(", "(", ")", "=>", "resolve", "(", ")", ",", "time", ")", ")", ";", "const", "counter", "=", "{", "state", ":", "0", ",", "reducers", ":", "{", "increment", ":", "(", "prevState", ")", "=>", "prevState", "+", "1", ",", "decrement", ":", "(", "prevState", ")", "=>", "prevState", "-", "1", ",", "}", ",", "effects", ":", "(", ")", "=>", "(", "{", "async", "asyncDecrement", "(", ")", "{", "await", "delay", "(", "1000", ")", ";", "this", ".", "decrement", "(", ")", ";", "}", ",", "}", ")", ",", "}", ";", "const", "models", "=", "{", "counter", ",", "}", ";", "const", "store", "=", "createStore", "(", "models", ")", ";", "const", "{", "useModel", "}", "=", "store", ";", "function", "Counter", "(", ")", "{", "const", "[", "count", ",", "dispatchers", "]", "=", "useModel", "(", "'counter'", ")", ";", "const", "{", "increment", ",", "asyncDecrement", "}", "=", "dispatchers", ";", "return", "(", "<", "div", ">", "<", "span", ">", "{", "count", "}", "<", "/span>", "<", "button", "type", "=", "\"button\"", "onClick", "=", "{", "increment", "}", ">", "+", "<", "/button>", "<", "button", "type", "=", "\"button\"", "onClick", "=", "{", "asyncDecrement", "}", ">", "-", "<", "/button>", "<", "/div>);", "}", "const", "{", "Provider", "}", "=", "store", ";", "function", "App", "(", ")", "{", "return", "(", "<", "Provider", ">", "<", "Counter", "/>", "<", "/Provider>);", "}", "const", "rootElement", "=", "document", ".", "getElementById", "(", "'root'", ")", ";", "ReactDOM", ".", "render", "(", "<", "App", "/>, rootElement);"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Element", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Element", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HTMLElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/ice-lab/icestore", "path": "icestore/examples/counter/src/index.tsx", "commit_hash": "de76ab8d1113b78262ea0db80550daa5445424b2", "file": "index.tsx"}
{"tokens": ["import", "{", "Injectable", "}", "from", "'@angular/core'", ";", "@", "Injectable", "(", "{", "providedIn", ":", "'root'", ",", "}", ")", "export", "class", "LocalStorageService", "{", "set", "(", "key", ",", "value", ")", "{", "localStorage", ".", "setItem", "(", "key", ",", "value", ")", ";", "}", "get", "(", "key", ")", "{", "return", "localStorage", ".", "getItem", "(", "key", ")", ";", "}", "remove", "(", "key", ")", "{", "localStorage", ".", "removeItem", "(", "key", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/sourcefuse/loopback4-microservice-catalog", "path": "loopback4-microservice-catalog/sandbox/search-client-example/src/app/local-storage.service.ts", "commit_hash": "9e8ee3ba3f9d3aa8ff922598cc4d54f96d0f157f", "file": "local-storage.service.ts"}
{"tokens": ["import", "{", "HttpClient", ",", "HttpHeaders", "}", "from", "'@angular/common/http'", ";", "import", "{", "Injectable", "}", "from", "'@angular/core'", ";", "import", "{", "Observable", "}", "from", "'rxjs'", ";", "import", "{", "IDefaultReturnType", ",", "ISearchQuery", ",", "ISearchService", ",", "}", "from", "'@sourceloop/search-client'", ";", "import", "{", "LocalStorageService", "}", "from", "'./local-storage.service'", ";", "@", "Injectable", "(", "{", "providedIn", ":", "'root'", ",", "}", ")", "export", "class", "SearchService", "implements", "ISearchService", "<", "IDefaultReturnType", ">", "{", "constructor", "(", "private", "readonly", "http", ",", "private", "readonly", "localStorageService", ")", "{", "}", "searchApiRequest", "(", "requestParameters", ",", "saveInRecents", ")", "{", "const", "httpOptions", "=", "{", "headers", ":", "new", "HttpHeaders", "(", "{", "'Content-Type'", ":", "'application/json'", ",", "Authorization", ":", "`Bearer ${", "this", ".", "localStorageService", ".", "get", "(", "'token'", ")", "}`", ",", "}", ")", ",", "}", ";", "let", "url", "=", "''", ";", "url", "=", "`http://localhost:3000/search?query[match]=${", "requestParameters", ".", "match", "}`", ";", "url", "+=", "`&query[limit]=${", "requestParameters", ".", "limit", "}`", ";", "url", "+=", "`&query[limitByType]=${", "requestParameters", ".", "limitByType", "}`", ";", "url", "+=", "`&query[order]=${", "requestParameters", ".", "order", "}`", ";", "url", "+=", "`&saveInRecents=${", "saveInRecents", "}`", ";", "if", "(", "requestParameters", ".", "sources", "?.", "length", ")", "{", "url", "=", "url", "+", "`&query[sources][0]=${", "requestParameters", ".", "sources", "}`", ";", "}", "return", "this", ".", "http", ".", "get", "<", "Array", "<", "IDefaultReturnType", ">", ">", "(", "url", ",", "httpOptions", ")", ";", "}", "recentSearchApiRequest", "(", ")", "{", "const", "httpOptions", "=", "{", "headers", ":", "new", "HttpHeaders", "(", "{", "'Content-Type'", ":", "'application/json'", ",", "Authorization", ":", "`Bearer ${", "this", ".", "localStorageService", ".", "get", "(", "'token'", ")", "}`", ",", "}", ")", ",", "}", ";", "return", "this", ".", "http", ".", "get", "<", "Array", "<", "ISearchQuery", ">", ">", "(", "`http://localhost:3000/search/recents`", ",", "httpOptions", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HttpClient", null, null, null, "LocalStorageService", null, null, null, "Observable", null, "ISearchQuery", null, "boolean", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Observable", null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/sourcefuse/loopback4-microservice-catalog", "path": "loopback4-microservice-catalog/sandbox/search-client-example/src/app/search.service.ts", "commit_hash": "9e8ee3ba3f9d3aa8ff922598cc4d54f96d0f157f", "file": "search.service.ts"}
{"tokens": ["import", "{", "Component", "}", "from", "'@angular/core'", ";", "import", "{", "LocalStorageService", "}", "from", "'../local-storage.service'", ";", "@", "Component", "(", "{", "selector", ":", "'app-token-input'", ",", "templateUrl", ":", "'./token-input.component.html'", ",", "}", ")", "export", "class", "TokenInputComponent", "{", "token", ":", "string", ";", "tokenSet", ":", "boolean", ";", "constructor", "(", "private", "readonly", "localStorageService", ")", "{", "this", ".", "token", "=", "''", ";", "this", ".", "tokenSet", "=", "false", ";", "}", "onSubmit", "(", ")", "{", "this", ".", "localStorageService", ".", "set", "(", "'token'", ",", "this", ".", "token", ")", ";", "this", ".", "tokenSet", "=", "true", ";", "this", ".", "token", "=", "''", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "LocalStorageService", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/sourcefuse/loopback4-microservice-catalog", "path": "loopback4-microservice-catalog/sandbox/search-client-example/src/app/token-input/token-input.component.ts", "commit_hash": "9e8ee3ba3f9d3aa8ff922598cc4d54f96d0f157f", "file": "token-input.component.ts"}
{"tokens": ["export", "const", "environment", "=", "{", "production", ":", "false", ",", "}", ";"], "labels": [null, null, "object", null, null, null, null, null, null, null, null], "url": "https://github.com/sourcefuse/loopback4-microservice-catalog", "path": "loopback4-microservice-catalog/sandbox/search-client-example/src/environments/environment.ts", "commit_hash": "9e8ee3ba3f9d3aa8ff922598cc4d54f96d0f157f", "file": "environment.ts"}
{"tokens": ["export", "const", "environment", "=", "{", "production", ":", "true", "}", ";"], "labels": [null, null, "object", null, null, null, null, null, null, null], "url": "https://github.com/sourcefuse/loopback4-microservice-catalog", "path": "loopback4-microservice-catalog/sandbox/search-client-example/src/environments/environment.prod.ts", "commit_hash": "9e8ee3ba3f9d3aa8ff922598cc4d54f96d0f157f", "file": "environment.prod.ts"}
{"tokens": ["import", "Vue", "from", "\"vue\"", ";", "import", "VueRouter", ",", "{", "RouteConfig", "}", "from", "\"vue-router\"", ";", "Vue", ".", "use", "(", "VueRouter", ")", ";", "const", "routes", "=", "[", "{", "path", ":", "\"/\"", ",", "name", ":", "\"Home\"", ",", "component", ":", "(", ")", "=>", "import", "(", "\"../views/home/index.vue\"", ")", ",", "meta", ":", "{", "title", ":", "\"首页\"", ",", "headColor", ":", "\"white\"", ",", "}", ",", "}", ",", "{", "path", ":", "\"/login\"", ",", "name", ":", "\"Login\"", ",", "component", ":", "(", ")", "=>", "import", "(", "\"../views/login/index.vue\"", ")", ",", "meta", ":", "{", "title", ":", "\"登录\"", ",", "}", ",", "}", ",", "{", "path", ":", "\"/register\"", ",", "name", ":", "\"Register\"", ",", "component", ":", "(", ")", "=>", "import", "(", "\"../views/register/index.vue\"", ")", ",", "meta", ":", "{", "title", ":", "\"注册\"", ",", "}", ",", "}", ",", "{", "path", ":", "\"/user\"", ",", "name", ":", "\"User\"", ",", "component", ":", "(", ")", "=>", "import", "(", "\"../views/user/index.vue\"", ")", ",", "meta", ":", "{", "title", ":", "\"个人中心\"", ",", "}", ",", "}", ",", "{", "path", ":", "\"/profile\"", ",", "name", ":", "\"Profile\"", ",", "component", ":", "(", ")", "=>", "import", "(", "\"../views/profile/index.vue\"", ")", ",", "meta", ":", "{", "title", ":", "\"账号管理\"", ",", "}", ",", "}", ",", "{", "path", ":", "\"/product-list\"", ",", "name", ":", "\"ProductList\"", ",", "component", ":", "(", ")", "=>", "import", "(", "\"../views/product-list/index.vue\"", ")", ",", "meta", ":", "{", "isHidden", ":", "true", ",", "}", ",", "}", ",", "]", ";", "const", "router", "=", "new", "VueRouter", "(", "{", "mode", ":", "\"history\"", ",", "base", ":", "process", ".", "env", ".", "BASE_URL", ",", "routes", ",", "}", ")", ";", "export", "default", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "VueRouter", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/router/index.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "index.ts"}
{"tokens": ["import", "qs", "from", "\"qs\"", ";", "import", "Axios", "from", "\"axios\"", ";", "import", "Vue", "from", "\"vue\"", ";", "const", "HTTP", "=", "Axios", ".", "create", "(", "{", "baseURL", ":", "\"\"", ",", "headers", ":", "{", "\"Content-Type\"", ":", "\"application/x-www-form-urlencoded;charset=UTF-8\"", "}", ",", "timeout", ":", "30000", ",", "withCredentials", ":", "false", "}", ")", ";", "HTTP", ".", "interceptors", ".", "request", ".", "use", "(", "config", "=>", "{", "if", "(", "config", ".", "method", "===", "\"post\"", ")", "{", "config", ".", "data", "=", "qs", ".", "stringify", "(", "config", ".", "data", ")", ";", "}", "return", "config", ";", "}", ",", "error", "=>", "{", "throw", "new", "Error", "(", "error", ")", ";", "}", ")", ";", "HTTP", ".", "interceptors", ".", "response", ".", "use", "(", "response", "=>", "{", "const", "data", "=", "response", ".", "data", ";", "return", "data", ";", "}", ",", "error", "=>", "{", "if", "(", "Vue", ".", "prototype", ".", "$loading", ")", "{", "Vue", ".", "prototype", ".", "$loading", ".", "close", "(", ")", ";", "}", "throw", "new", "Error", "(", "error", ")", ";", "}", ")", ";", "export", "default", "HTTP", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "AxiosInstance", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "AxiosRequestConfig", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "AxiosResponse", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/utils/http.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "http.ts"}
{"tokens": ["import", "HTTP", "from", "\"../utils/http\"", ";", "export", "interface", "LoginParamsProps", "{", "username", ":", "string", ";", "password", ":", "string", ";", "}", "export", "interface", "RegisterParamsProps", "{", "username", ":", "string", ";", "password", ":", "string", ";", "email", ":", "string", ";", "phone", ":", "string", ";", "question", ":", "string", ";", "answer", ":", "string", ";", "}", "export", "interface", "ProductListParams", "{", "categoryId", "?", ":", "number", ";", "keyword", "?", ":", "string", ";", "pageNum", ":", "number", ";", "pageSize", ":", "number", ";", "orderBy", ":", "string", ";", "}", "export", "interface", "ProductDetailParams", "{", "productId", ":", "number", ";", "}", "/**\n * 检查用户登录状态\n */", "export", "const", "checkLogin", "=", "async", "(", ")", "=>", "HTTP", ".", "post", "(", "\"/user/get_user_info.do\"", ")", ";", "/**\n * 去登录\n */", "export", "const", "userLogin", "=", "async", "(", "params", ")", "=>", "HTTP", ".", "post", "(", "\"/user/login.do\"", ",", "params", ")", ";", "/**\n * 注册\n */", "export", "const", "userRegister", "=", "async", "(", "params", ")", "=>", "HTTP", ".", "post", "(", "\"/user/register.do\"", ",", "params", ")", ";", "/**\n * 退出登录\n */", "export", "const", "logout", "=", "async", "(", ")", "=>", "HTTP", ".", "post", "(", "\"/user/logout.do\"", ")", ";", "/**\n * 商品列表\n * keyword和category不能同时传，会报错500\n */", "export", "const", "getProductList", "=", "(", "params", ")", "=>", "HTTP", ".", "post", "(", "\"/product/list.do\"", ",", "params", ")", ";", "/**\n * 商品详情\n */", "export", "const", "getProductDetail", "=", "(", "params", ")", "=>", "HTTP", ".", "post", "(", "\"/product/detail.do\"", ",", "params", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/api/index.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "index.ts"}
{"tokens": ["import", "{", "Commit", "}", "from", "\"vuex\"", ";", "import", "{", "HomeState", ",", "UserInfoProps", "}", "from", "\"./interface\"", ";", "import", "{", "checkLogin", ",", "userLogin", ",", "LoginParamsProps", ",", "RegisterParamsProps", ",", "userRegister", ",", "logout", "}", "from", "\"../../api/index\"", ";", "interface", "RequestDataProps", "{", "status", ":", "number", ";", "msg", "?", ":", "string", ";", "data", "?", ":", "any", ";", "}", "const", "state", "=", "{", "loginStatus", ":", "false", ",", "userInfo", ":", "{", "answer", ":", "\"\"", ",", "createTime", ":", "0", ",", "email", ":", "\"\"", ",", "id", ":", "0", ",", "password", ":", "\"\"", ",", "phone", ":", "\"\"", ",", "question", ":", "\"\"", ",", "role", ":", "0", ",", "updateTime", ":", "0", ",", "username", ":", "\"\"", ",", "}", ",", "}", ";", "const", "mutations", "=", "{", "setStatus", "(", "state", ",", "status", ")", "{", "state", ".", "loginStatus", "=", "status", ";", "}", ",", "setUserInfo", "(", "state", ",", "info", ")", "{", "state", ".", "userInfo", "=", "info", ";", "}", ",", "}", ";", "const", "getters", "=", "{", "loginStatus", ":", "(", "state", ")", "=>", "state", ".", "loginStatus", ",", "userInfo", ":", "(", "state", ")", "=>", "state", ".", "userInfo", ",", "}", ";", "const", "actions", "=", "{", "async", "judgeLoginStatus", "(", "{", "commit", "}", ")", "{", "const", "requestData", "=", "await", "checkLogin", "(", ")", ";", "commit", "(", "\"setStatus\"", ",", "requestData", ".", "status", "===", "0", ")", ";", "commit", "(", "\"setUserInfo\"", ",", "requestData", ".", "data", ")", ";", "}", ",", "async", "toLogin", "(", "{", "commit", "}", ",", "info", ")", "{", "const", "requestData", "=", "await", "userLogin", "(", "info", ")", ";", "commit", "(", "\"setUserInfo\"", ",", "requestData", ".", "data", ")", ";", "if", "(", "requestData", ".", "status", "===", "0", ")", "{", "window", ".", "router", ".", "back", "(", ")", ";", "}", "else", "{", "alert", "(", "requestData", ".", "msg", ")", ";", "}", "}", ",", "async", "toRegister", "(", "{", "commit", "}", ",", "info", ")", "{", "const", "requestData", "=", "await", "userRegister", "(", "info", ")", ";", "if", "(", "requestData", ".", "status", "===", "0", ")", "{", "window", ".", "router", ".", "back", "(", ")", ";", "}", "else", "{", "alert", "(", "requestData", ".", "msg", ")", ";", "}", "}", ",", "async", "toLogout", "(", "{", "commit", "}", ")", "{", "const", "requestData", "=", "await", "logout", "(", ")", ";", "if", "(", "requestData", ".", "status", "===", "0", ")", "{", "commit", "(", "'setStatus'", ",", "false", ")", ";", "window", ".", "router", ".", "push", "(", "{", "name", ":", "'Home'", "}", ")", ";", "}", "}", "}", ";", "export", "default", "{", "state", ",", "getters", ",", "mutations", ",", "actions", ",", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HomeState", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, "void", null, "HomeState", null, "boolean", null, null, null, null, null, null, null, null, null, null, "void", null, "HomeState", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "HomeState", null, null, null, null, null, null, null, null, null, "HomeState", null, null, null, null, null, null, null, null, null, "object", null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/store/home/index.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "index.ts"}
{"tokens": ["import", "{", "Commit", "}", "from", "\"vuex\"", ";", "import", "{", "getProductList", ",", "ProductListParams", ",", "getProductDetail", ",", "}", "from", "\"@/api/index\"", ";", "import", "{", "ProductState", ",", "ProductItemProps", ",", "ProductDetailProps", ",", "}", "from", "\"./interface\"", ";", "const", "state", "=", "{", "productList", ":", "[", "]", ",", "currentProduct", ":", "{", "categoryId", ":", "0", ",", "createTime", ":", "\"\"", ",", "detail", ":", "\"\"", ",", "id", ":", "0", ",", "imageHost", ":", "\"\"", ",", "mainImage", ":", "\"\"", ",", "name", ":", "\"\"", ",", "parentCategoryId", ":", "0", ",", "price", ":", "0", ",", "status", ":", "0", ",", "stock", ":", "0", ",", "subImages", ":", "\"\"", ",", "subtitle", ":", "\"\"", ",", "updateTime", ":", "\"\"", ",", "}", ",", "detailShow", ":", "false", ",", "}", ";", "const", "mutations", "=", "{", "setProductList", "(", "state", ",", "list", ")", "{", "state", ".", "productList", "=", "list", ";", "}", ",", "setProductInfo", "(", "state", ",", "info", ")", "{", "state", ".", "currentProduct", "=", "info", ";", "}", ",", "setDetailShow", "(", "state", ",", "bool", ")", "{", "state", ".", "detailShow", "=", "bool", ";", "}", ",", "}", ";", "const", "getters", "=", "{", "productList", ":", "(", "state", ")", "=>", "state", ".", "productList", ",", "}", ";", "const", "actions", "=", "{", "async", "fetchProductList", "(", "{", "state", ",", "commit", "}", ",", "{", "params", ",", "loadMore", "}", ")", "{", "const", "requestData", "=", "await", "getProductList", "(", "params", ")", ";", "const", "currentData", "=", "loadMore", "?", "state", ".", "productList", ".", "concat", "(", "requestData", ".", "data", ".", "list", ")", ":", "requestData", ".", "data", ".", "list", ";", "commit", "(", "\"setProductList\"", ",", "currentData", ")", ";", "}", ",", "async", "fetchProductInfo", "(", "{", "commit", "}", ",", "productId", ")", "{", "const", "requestData", "=", "await", "getProductDetail", "(", "{", "productId", "}", ")", ";", "commit", "(", "\"setDetailShow\"", ",", "true", ")", ";", "commit", "(", "\"setProductInfo\"", ",", "requestData", ".", "data", ")", ";", "}", ",", "}", ";", "export", "default", "{", "state", ",", "mutations", ",", "getters", ",", "actions", ",", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ProductState", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, "void", null, "ProductState", null, "Array", null, null, null, null, null, null, null, null, null, null, "void", null, "ProductState", null, "UNK", null, null, null, null, null, null, null, null, null, null, "void", null, "ProductState", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, "ProductState", null, null, null, null, null, null, null, null, null, "object", null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/store/product/index.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "index.ts"}
{"tokens": ["import", "Vue", "from", "\"vue\"", ";", "import", "App", "from", "\"./App.vue\"", ";", "import", "\"./registerServiceWorker\"", ";", "import", "router", "from", "\"./router\"", ";", "import", "store", "from", "\"./store\"", ";", "import", "\"./assets/styles/index.scss\"", ";", "Vue", ".", "config", ".", "productionTip", "=", "false", ";", "new", "Vue", "(", "{", "router", ",", "store", ",", "render", ":", "(", "h", ")", "=>", "h", "(", "App", ")", ",", "}", ")", ".", "$mount", "(", "\"#app\"", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CreateElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/main.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "main.ts"}
{"tokens": ["export", "interface", "DataProps", "{", "headList", ":", "Array", "<", "any", ">", ";", "categoryList", ":", "Array", "<", "any", ">", ";", "floorList", ":", "Array", "<", "any", ">", ";", "}", "export", "const", "homeData", "=", "{", "headList", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s1125x690_jfs/t29188/301/133996293/200131/61f42a01/5be8eed6Nda6a18a5.jpg!cr_1125x549_0_72!q70.jpg.dpg\"", ",", "categoryId", ":", "100008", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s1125x690_jfs/t30757/316/208746402/123953/9fa18794/5beb7d13Ne77e9f29.jpg!cr_1125x549_0_72!q70.jpg.dpg\"", ",", "categoryId", ":", "100016", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t1/3926/29/4138/254748/5b9b646dE45cbeb7f/f80c8f7c24273bc1.jpg!cr_1125x549_0_72\"", ",", "categoryId", ":", "100035", ",", "}", ",", "]", ",", "categoryList", ":", "[", "{", "name", ":", "\"M超市\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t25534/207/1767774998/8085/523157d6/5bbc800fN502129b8.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"全球购\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t21658/347/221358098/7461/f86e6f74/5b03b170Nc9e0ec7c.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"M时尚\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t1/8385/17/3537/17895/5bd6ca67E09d23550/32d965fe9a9087a2.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"M生鲜\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t17725/156/1767366877/17404/f45d418b/5ad87bf0N66c5db7c.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"M到家\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t16990/157/2001547525/17770/a7b93378/5ae01befN2494769f.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"充值缴费\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t18454/342/2607665324/6406/273daced/5b03b74eN3541598d.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"9.9元拼\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t22228/270/207441984/11564/88140ab7/5b03fae3N67f78fe3.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"领劵\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t25258/200/2527038521/14019/3d7a8470/5be92494N557a0c5b.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"省钱\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t22120/183/200496447/5553/91ed22e0/5b03b7b8Ncea08c5b.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "{", "name", ":", "\"全部\"", ",", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t21481/263/412160889/15938/4246b4f8/5b0cea29N8fb2865f.png\"", ",", "categoryId", ":", "100002", ",", "}", ",", "]", ",", "floorList", ":", "[", "{", "headUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t15526/56/2344102455/23273/d8e15d5a/5aa0dbc1Nefd2bd2a.png!q70.jpg.dpg\"", ",", "list", ":", "[", "{", "title", ":", "\"玩3C\"", ",", "desc", ":", "\"黑鲨新品大爆炸\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t25144/2/1278469398/101844/cb66b21/5b90f5bfNcd58f18b.png!q70.jpg.dpg\"", ",", "categoryId", ":", "100001", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t22792/274/2587775944/59292/3666f607/5b87bf15N9409ba0e.png!q70.jpg.dpg\"", ",", "categoryId", ":", "100002", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"MMall家电\"", ",", "desc", ":", "\"家电狂欢 京彩有你\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t22363/318/1484948466/11138/8317fc9b/5b2a528eN7c6bde83.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100003", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t22666/293/257815171/29274/6b5605b1/5b2a5295N5a81ad96.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100004", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"MMall超市\"", ",", "desc", ":", "\"超市大放价 抢超值好货\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t16852/170/2693122660/56143/28da8c2a/5b063c63N5746e4e4.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100005", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t18877/293/2631103430/85245/f220b40d/5b063c6fN7820b399.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100006", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"爱家\"", ",", "desc", ":", "\"家纺热卖 部分低至9.9元\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t15244/283/356547262/47743/b6607b0f/5a2a6d51N8830e8b8.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100007", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t16057/38/102057973/36179/b957e4ec/5a2a6d55N83655f7f.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100008", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"家有萌宝\"", ",", "desc", ":", "\"低至五折\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t17929/299/899794385/17291/d90318f9/5ab4c680N7d291625.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100009", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t18802/262/2452746578/333259/5dcdfb06/5af3ffb4N0c700b57.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100010", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"爱吃\"", ",", "desc", ":", "\"9.9包邮，夏日也生动\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t14473/103/2042876100/41836/766c1953/5a697f47Nc952ed7f.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100011", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t17155/227/2678303408/52223/f7a950c/5b0535d6Ne4073be7.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100012", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "headUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t19381/275/717008577/26686/e58b7ef4/5aa23f27Nfa6d6be3.png!q70.jpg.dpg\"", ",", "list", ":", "[", "{", "title", ":", "\"智能家电馆\"", ",", "desc", ":", "\"满减狂欢\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t25183/247/391394027/33684/8e1af9dc/5b6d048aNd7dae520.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100013", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/s240x240_jfs/t1/839/25/11121/19615/5bccb3a0E4b504f77/e55c2fb826efe911.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100014", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"珠宝馆\"", ",", "desc", ":", "\"满减优惠\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t19009/357/347377157/13661/d0d9e5fb/5a6e8bb3Nd6182f9f.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100015", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t27889/231/477152414/149859/7a5fb585/5baf1f58N45c2ca6c.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100016", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"鞋靴箱包\"", ",", "desc", ":", "\"低至五折\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t21469/359/769885083/29352/68865ed/5b178e49Nc5db7341.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100017", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/mobilecms/jfs/t1/7091/11/2919/441267/5bd578bfE03e7166a/c5d5222c1802fd21.jpg!q70.jpg.dpg\"", ",", "categoryId", ":", "100018", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"童装馆\"", ",", "desc", ":", "\"春夏小萌娃\"", ",", "products", ":", "[", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t20614/194/808562651/89118/894d41a5/5b18ba8dN855ebe44.png!q70.jpg.dpg\"", ",", "categoryId", ":", "100019", ",", "}", ",", "{", "imgUrl", ":", "\"//m.360buyimg.com/n1/jfs/t12460/183/2350810548/47292/f4c5485/5a914202Nfc1b8a12.png!q70.jpg.dpg\"", ",", "categoryId", ":", "100020", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ";", "export", "const", "categoryData", "=", "[", "{", "name", ":", "\"手机数码\"", ",", "mainImgUrl", ":", "\"//img20.360buyimg.com/mcoss/jfs/t16273/143/46476745/45673/cba0840c/5a28ef10N82ab81d3.jpg\"", ",", "list", ":", "[", "{", "title", ":", "\"手机通讯\"", ",", "productList", ":", "[", "{", "title", ":", "\"手机\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t11503/241/2246064496/4783/cea2850e/5a169216N0701c7f1.jpg\"", ",", "}", ",", "{", "title", ":", "\"全面屏手机\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t18955/187/1309277884/11517/fe100782/5ac48d27N3f5bb821.jpg\"", ",", "}", ",", "{", "title", ":", "\"游戏手机\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t11470/45/2362968077/2689/fb36d9a0/5a169238Nc8f0882b.jpg\"", ",", "}", ",", "{", "title", ":", "\"拍照手机\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t12022/66/917351804/2257/7ddc58e5/5a169232Ndf76f53c.jpg\"", ",", "}", ",", "{", "title", ":", "\"老年机\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t11461/339/2354953633/8254/8c8c50d3/5a169217N5d1b842e.jpg\"", ",", "}", ",", "{", "title", ":", "\"女性手机\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t15790/6/2311892256/2742/5ed77924/5a9fa728Nbff29ad2.jpg\"", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"手机配件\"", ",", "productList", ":", "[", "{", "title", ":", "\"数据线\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t18055/312/1342501458/9462/4699ed8a/5ac48672N11cf61fe.jpg\"", ",", "}", ",", "{", "title", ":", "\"手机壳\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t18502/160/1284774717/9251/feb8a496/5ac4878cN658cbb07.jpg\"", ",", "}", ",", "{", "title", ":", "\"充电宝\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t19537/23/1276961949/9676/f4b5be0d/5ac48791Nb224f939.jpg\"", ",", "}", ",", "{", "title", ":", "\"手机贴膜\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t17548/288/1331085893/6458/52545456/5ac486c6N0c8a93dc.jpg\"", ",", "}", ",", "{", "title", ":", "\"耳机\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t17284/353/1280266808/3696/32c00915/5ac486ccN2d8031c1.jpg\"", ",", "}", ",", "{", "title", ":", "\"充电器\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t16774/124/1318736793/3884/cb658723/5ac4874fN6bc007b0.jpg\"", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"摄影摄像\"", ",", "productList", ":", "[", "{", "title", ":", "\"单反相机\"", ",", "imgUrl", ":", "\"//img14.360buyimg.com/focus/s140x140_jfs/t13765/295/926307178/7966/3228af24/5a1679f2Nc2f659b6.jpg\"", ",", "}", ",", "{", "title", ":", "\"数码相机\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t12814/251/897168610/8107/60a873f/5a1679caNada7f827.jpg\"", ",", "}", ",", "{", "title", ":", "\"镜头\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t12154/164/880046972/2880/86b45b51/5a1679b9N42a5f8e5.jpg\"", ",", "}", ",", "{", "title", ":", "\"户外器材\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t12586/176/939117172/2550/d16b4b6c/5a1679c3N67e2b3f1.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"电脑办公\"", ",", "mainImgUrl", ":", "\"//img30.360buyimg.com/mcoss/jfs/t14743/292/279117506/48503/9b7d9f2c/5a28ea97N36cb4d16.jpg\"", ",", "list", ":", "[", "{", "title", ":", "\"热门分类\"", ",", "productList", ":", "[", "{", "title", ":", "\"轻薄本\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t11071/195/2462134264/9117/cd0688bf/5a17ba79N18b9f3d4.png\"", ",", "}", ",", "{", "title", ":", "\"游戏本\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t11155/36/2330310765/10690/eb6754c3/5a17ba96N49561fea.png\"", ",", "}", ",", "{", "title", ":", "\"机械键盘\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t12304/245/965858782/6481/37cb5a9b/5a17ba5aN0406a1b5.jpg\"", ",", "}", ",", "{", "title", ":", "\"组装电脑\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t14101/325/978287093/8836/e142aa53/5a17ba73N07b12f0c.jpg\"", ",", "}", ",", "{", "title", ":", "\"移动硬盘\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t13228/333/989759736/4764/2a312c2e/5a17ba7fN0740c051.jpg\"", ",", "}", ",", "{", "title", ":", "\"曲屏显示器\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t13798/322/988648789/3644/1adc5615/5a17ba6dNafc95373.jpg\"", ",", "}", ",", "]", ",", "}", ",", "{", "title", ":", "\"外设产品\"", ",", "productList", ":", "[", "{", "title", ":", "\"鼠标\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t11881/31/2355374158/3676/22da94de/5a16a5f0Nc6b32dda.jpg\"", ",", "}", ",", "{", "title", ":", "\"U盘\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t12112/355/904591745/4308/6201dffe/5a16a5aaNdac2fe89.jpg\"", ",", "}", ",", "{", "title", ":", "\"插座\"", ",", "imgUrl", ":", "\"//img14.360buyimg.com/focus/s140x140_jfs/t12031/206/932335399/3567/d6d59ad9/5a16a578N283a0f75.jpg\"", ",", "}", ",", "{", "title", ":", "\"电脑工具\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t12292/173/915309013/5554/78f4ab5e/5a16a560Nc7626d33.jpg\"", ",", "}", ",", "{", "title", ":", "\"摄像头\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t12499/54/910206832/5998/f91002f8/5a16a588Nff477d9d.jpg\"", ",", "}", ",", "{", "title", ":", "\"手写板\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t11734/189/2377033150/4145/b78bfcf/5a16a594Ncb41c95a.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"家用电器\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"家用电器\"", ",", "productList", ":", "[", "{", "title", ":", "\"电饭煲\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t14185/134/950962305/3800/eb1bafb8/5a17f224Nea1d3f59.jpg\"", ",", "}", ",", "{", "title", ":", "\"豆浆机\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t14065/132/988058896/1688/99cd0a3d/5a17f229Nc4c681fb.jpg\"", ",", "}", ",", "{", "title", ":", "\"冰箱\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t13153/44/964603695/1011/21d660d2/5a17f6aeN280056ea.jpg\"", ",", "}", ",", "{", "title", ":", "\"双开门冰箱\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t13588/266/943842715/1088/c4ae40e4/5a17f6c5Ne56d7e26.jpg\"", ",", "}", ",", "{", "title", ":", "\"冷柜\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t12928/273/1007467483/3549/52dad666/5a17f69eN1d10e257.jpg\"", ",", "}", ",", "{", "title", ":", "\"洗衣机\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t12481/129/1018625238/1840/43d49869/5a17f6eaN9ec936de.jpg\"", ",", "}", ",", "{", "title", ":", "\"电热水器\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t11053/246/2459202669/4318/fd6bd8d1/5a17f356Nd692ab74.jpg\"", ",", "}", ",", "{", "title", ":", "\"电视\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t11842/356/2416901099/2164/ab77fbaa/5a17f71eN25360979.jpg\"", ",", "}", ",", "{", "title", ":", "\"4K超清电视\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t11386/179/2470866031/2353/dfc7d933/5a17f72cN97075084.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"美妆护肤\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"美妆护肤\"", ",", "productList", ":", "[", "{", "title", ":", "\"美白\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t19531/110/2538137867/14848/c3ec84ac/5afd3cc5N8aa4b7c8.jpg\"", ",", "}", ",", "{", "title", ":", "\"防晒\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t17560/320/2504739891/10347/f04150c4/5afd3cbeN77d00886.jpg\"", ",", "}", ",", "{", "title", ":", "\"控油\"", ",", "imgUrl", ":", "\"//img14.360buyimg.com/focus/s140x140_jfs/t19291/98/2577005836/12222/7107fb29/5afd3cc9N3add85ae.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"男装男鞋\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"男装男鞋\"", ",", "productList", ":", "[", "{", "title", ":", "\"夹克\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t12514/85/571462957/6214/29cdf637/5a0e9496Necd5bd0e.jpg\"", ",", "}", ",", "{", "title", ":", "\"风衣\"", ",", "imgUrl", ":", "\"//img11.360buyimg.com/focus/s140x140_jfs/t11590/82/2013872051/5874/83b5772d/5a0e947eN67f0e537.jpg\"", ",", "}", ",", "{", "title", ":", "\"西服\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t13489/68/552491077/2495/7b517e4b/5a0e9483Na6231535.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"女装女鞋\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"家用电器\"", ",", "productList", ":", "[", "{", "title", ":", "\"风衣\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t15313/145/2476673176/2856/879136d7/5a9fc012N86f3fb22.jpg\"", ",", "}", ",", "{", "title", ":", "\"长袖T恤\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t16750/238/698160610/5156/5b1f25b/5a9fbfccN574cba12.jpg\"", ",", "}", ",", "{", "title", ":", "\"卫衣\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t11953/286/2195921828/5728/75b86d5b/5a127fbaN2780918c.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"母婴童装\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"母婴童装\"", ",", "productList", ":", "[", "{", "title", ":", "\"套装\"", ",", "imgUrl", ":", "\"//img14.360buyimg.com/focus/s140x140_jfs/t18790/111/673564180/2396/3d27d79a/5a9f94c1N5b0c8724.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"图书音像\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"图书音像\"", ",", "productList", ":", "[", "{", "title", ":", "\"文学\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t19882/234/705045012/17917/e840651a/5b07dfddN7d635871.jpg\"", ",", "}", ",", "{", "title", ":", "\"童书\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t18520/109/1790543750/23751/a98be11f/5ad82a1cN400c11d1.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"户外运动\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"户外运动\"", ",", "productList", ":", "[", "{", "title", ":", "\"跑步鞋\"", ",", "imgUrl", ":", "\"//img30.360buyimg.com/focus/s140x140_jfs/t13993/246/156269250/8757/12386c/5a1fb5e7N12a676b6.jpg\"", ",", "}", ",", "{", "title", ":", "\"体育用品\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t12313/239/1414060687/10293/ca8ad748/5a1fb5e1Nd80abbc2.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"食品生鲜\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"家用电器\"", ",", "productList", ":", "[", "{", "title", ":", "\"休闲零食\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t19789/191/2614150696/17735/d2db9aca/5b02411eNb44a03f7.jpg\"", ",", "}", ",", "{", "title", ":", "\"牛奶\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t17479/1/2588472716/22795/d676e57a/5b024117N06151eba.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"酒水饮料\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"酒水饮料\"", ",", "productList", ":", "[", "{", "title", ":", "\"酒品馆\"", ",", "imgUrl", ":", "\"//img14.360buyimg.com/focus/s140x140_jfs/t19432/178/2607825443/22589/446a22a2/5b023705N12de0824.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"家居家装\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"家居家装\"", ",", "productList", ":", "[", "{", "title", ":", "\"实木餐桌\"", ",", "imgUrl", ":", "\"//img13.360buyimg.com/focus/s140x140_jfs/t12772/3/1793374412/9705/e633967a/5a28e6c9N8aaaea3f.jpg\"", ",", "}", ",", "{", "title", ":", "\"椅子\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t13888/280/1737354934/3036/f94ecdf8/5a28e0d6N80f30096.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"箱包手袋\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"箱包手袋\"", ",", "productList", ":", "[", "{", "title", ":", "\"箱子\"", ",", "imgUrl", ":", "\"//img20.360buyimg.com/focus/s140x140_jfs/t12364/153/835832532/6803/5b58b137/5a152fb3Nb9f571ea.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"钟表珠宝\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"钟表珠宝\"", ",", "productList", ":", "[", "{", "title", ":", "\"瑞士手表\"", ",", "imgUrl", ":", "\"//img10.360buyimg.com/focus/s140x140_jfs/t14155/271/890296038/3841/f1adee7f/5a166fe1Nc6bd2f12.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "{", "name", ":", "\"玩具乐器\"", ",", "mainImgUrl", ":", "\"\"", ",", "list", ":", "[", "{", "title", ":", "\"家用电器\"", ",", "productList", ":", "[", "{", "title", ":", "\"遥控车\"", ",", "imgUrl", ":", "\"//img12.360buyimg.com/focus/s140x140_jfs/t17575/123/2617650159/16720/74c14629/5b02a0c6N3f2770d9.jpg\"", ",", "}", ",", "]", ",", "}", ",", "]", ",", "}", ",", "]", ";", "export", "const", "hotData", "=", "[", "{", "title", ":", "\"小米手机\"", ",", "hot", ":", "1", ",", "}", ",", "{", "title", ":", "\"笔记本\"", ",", "hot", ":", "1", ",", "}", ",", "{", "title", ":", "\"电脑\"", ",", "hot", ":", "0", ",", "}", ",", "{", "title", ":", "\"平板\"", ",", "hot", ":", "0", ",", "}", ",", "{", "title", ":", "\"液晶电视\"", ",", "hot", ":", "1", ",", "}", ",", "{", "title", ":", "\"家电\"", ",", "hot", ":", "0", ",", "}", ",", "{", "title", ":", "\"玩具\"", ",", "hot", ":", "0", ",", "}", ",", "]", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Rosen97/web-shop", "path": "web-shop/src/mock/data.ts", "commit_hash": "93dfb95e2fd232ae46363f51f69fcbe25e6fb357", "file": "data.ts"}
{"tokens": ["export", "const", "APP_NAME", "=", "\"Excalidraw\"", ";", "export", "const", "EXCALIDRAW_API", "=", "\"https://excalidraw.com/version.json\"", ";", "export", "const", "EXCALIDRAW_ASAR_SOURCE", "=", "\"https://excalidraw.com/excalidraw.asar\"", ";", "export", "const", "EXCALIDRAW_GITHUB_PACKAGE_JSON_URL", "=", "\"https://raw.githubusercontent.com/excalidraw/excalidraw-desktop/master/package.json\"", ";"], "labels": [null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/constants.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "constants.ts"}
{"tokens": ["import", "*", "as", "Store", "from", "\"electron-store\"", ";", "let", "metadataStore", ";", "if", "(", "!", "metadataStore", ")", "{", "metadataStore", "=", "new", "Store", "(", "{", "}", ")", ";", "}", "export", "const", "getMetadata", "=", "(", "key", ")", ":", "Store", "=>", "{", "return", "metadataStore", ".", "get", "(", "`metadata.${", "key", "}`", ")", ";", "}", ";", "export", "const", "setMetadata", "=", "(", "key", ",", "value", ")", "=>", "{", "return", "metadataStore", ".", "set", "(", "`metadata.${", "key", "}`", ",", "value", ")", ";", "}", ";", "export", "const", "setAppName", "=", "(", "value", ")", "=>", "{", "return", "metadataStore", ".", "set", "(", "`metadata.appName`", ",", "value", ")", ";", "}", ";", "export", "const", "getAppName", "=", "(", ")", "=>", "{", "return", "metadataStore", ".", "get", "(", "`metadata.appName`", ")", ";", "}", ";", "export", "const", "getAppVersions", "=", "(", ")", "=>", "{", "const", "versions", "=", "metadataStore", ".", "get", "(", "`metadata.versions`", ")", ";", "const", "{", "local", ":", "localVersion", ",", "remote", ":", "remoteVersion", ",", "needsUpdate", ",", "appVersion", ",", "}", "=", "versions", ";", "return", "{", "needsUpdate", ",", "app", ":", "{", "local", ":", "\"\"", ",", "remote", ":", "appVersion", "}", ",", "web", ":", "{", "local", ":", "localVersion", ",", "remote", ":", "remoteVersion", "}", "}", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, "Store", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ElectronStore", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/util/metadata.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "metadata.ts"}
{"tokens": ["import", "{", "BrowserWindow", ",", "Menu", ",", "MenuItem", "}", "from", "\"electron\"", ";", "import", "*", "as", "path", "from", "\"path\"", ";", "import", "*", "as", "url", "from", "\"url\"", ";", "import", "{", "APP_NAME", "}", "from", "\"./constants\"", ";", "import", "{", "getAppVersions", ",", "getAppName", ",", "getMetadata", "}", "from", "\"./util/metadata\"", ";", "const", "ABOUT_PAGE_PATH", "=", "path", ".", "resolve", "(", "__dirname", ",", "\"pages\"", ",", "\"about.html\"", ")", ";", "const", "openAboutWindow", "=", "(", ")", "=>", "{", "let", "aboutWindow", "=", "new", "BrowserWindow", "(", "{", "height", ":", "320", ",", "width", ":", "320", ",", "modal", ":", "true", ",", "backgroundColor", ":", "\"white\"", ",", "show", ":", "false", ",", "webPreferences", ":", "{", "contextIsolation", ":", "true", ",", "preload", ":", "`${", "__dirname", "}/preload.js`", "}", "}", ")", ";", "aboutWindow", ".", "loadURL", "(", "url", ".", "format", "(", "{", "pathname", ":", "ABOUT_PAGE_PATH", ",", "protocol", ":", "\"file\"", ",", "slashes", ":", "true", "}", ")", ")", ";", "aboutWindow", ".", "setMenuBarVisibility", "(", "false", ")", ";", "aboutWindow", ".", "center", "(", ")", ";", "aboutWindow", ".", "on", "(", "\"ready-to-show\"", ",", "(", ")", "=>", "aboutWindow", ".", "show", "(", ")", ")", ";", "aboutWindow", ".", "on", "(", "\"show\"", ",", "(", ")", "=>", "{", "const", "aboutContent", "=", "{", "appName", ":", "getAppName", "(", ")", ",", "iconPath", ":", "getMetadata", "(", "\"appIconPath\"", ")", ",", "versions", ":", "getAppVersions", "(", ")", "}", ";", "aboutWindow", ".", "webContents", ".", "send", "(", "\"show-about-contents\"", ",", "aboutContent", ")", ";", "}", ")", ";", "}", ";", "export", "const", "setupMenu", "=", "(", "activeWindow", ",", "options", "=", "{", "}", ")", "=>", "{", "const", "isDarwin", "=", "process", ".", "platform", "===", "\"darwin\"", ";", "const", "defaultMenuItems", "=", "Menu", ".", "getApplicationMenu", "(", ")", ".", "items", ";", "const", "menuTemplate", "=", "[", "]", ";", "if", "(", "isDarwin", ")", "{", "defaultMenuItems", ".", "shift", "(", ")", ";", "menuTemplate", ".", "push", "(", "{", "label", ":", "APP_NAME", ",", "submenu", ":", "[", "{", "label", ":", "`About ${", "APP_NAME", "}`", ",", "enabled", ":", "true", ",", "click", ":", "(", ")", "=>", "openAboutWindow", "(", ")", "}", ",", "]", "}", ")", ";", "menuTemplate", ".", "push", "(", "...", "defaultMenuItems", ")", ";", "}", "else", "{", "defaultMenuItems", ".", "pop", "(", ")", ";", "menuTemplate", ".", "push", "(", "...", "defaultMenuItems", ")", ";", "menuTemplate", ".", "push", "(", "{", "label", ":", "\"Help\"", ",", "submenu", ":", "[", "{", "label", ":", "`About ${", "APP_NAME", "}`", ",", "enabled", ":", "true", ",", "click", ":", "(", ")", "=>", "openAboutWindow", "(", ")", "}", ",", "]", "}", ")", ";", "}", "const", "appMenu", "=", "Menu", ".", "buildFromTemplate", "(", "menuTemplate", ")", ";", "Menu", ".", "setApplicationMenu", "(", "appMenu", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, "BrowserWindow", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "BrowserWindow", null, "object", null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Menu", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/menu.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "menu.ts"}
{"tokens": ["import", "*", "as", "fs", "from", "\"fs\"", ";", "import", "*", "as", "path", "from", "\"path\"", ";", "import", "fetch", "from", "\"node-fetch\"", ";", "import", "{", "EXCALIDRAW_API", ",", "EXCALIDRAW_GITHUB_PACKAGE_JSON_URL", "}", "from", "\"../constants\"", ";", "const", "LOCAL_VERSION_PATH", "=", "path", ".", "resolve", "(", "__dirname", ",", "\"client\"", ",", "\"version.json\"", ")", ";", "interface", "CheckResponse", "{", "local", ":", "string", ";", "remote", ":", "string", ";", "appVersion", ":", "string", ";", "needsUpdate", ":", "boolean", ";", "}", "const", "_getLocalVersion", "=", "(", ")", ":", "string", "=>", "{", "const", "raw", "=", "fs", ".", "readFileSync", "(", "LOCAL_VERSION_PATH", ")", ".", "toString", "(", ")", ";", "const", "contents", "=", "JSON", ".", "parse", "(", "raw", ")", ";", "return", "contents", ".", "version", ";", "}", ";", "const", "_getRemoteVersion", "=", "async", "(", ")", ":", "Promise", "<", "string", ">", "=>", "{", "const", "raw", "=", "await", "fetch", "(", "EXCALIDRAW_API", ")", ";", "const", "contents", "=", "await", "raw", ".", "json", "(", ")", ";", "return", "contents", ".", "version", ";", "}", ";", "const", "_getRemoteDesktopAppVersion", "=", "async", "(", ")", ":", "Promise", "<", "string", ">", "=>", "{", "const", "raw", "=", "await", "fetch", "(", "EXCALIDRAW_GITHUB_PACKAGE_JSON_URL", ")", ";", "const", "contents", "=", "await", "raw", ".", "json", "(", ")", ";", "return", "contents", ".", "version", ";", "}", ";", "export", "default", "async", "function", "checkVersion", "(", ")", "{", "const", "localVersion", "=", "_getLocalVersion", "(", ")", ";", "const", "remoteVersion", "=", "await", "_getRemoteVersion", "(", ")", ";", "const", "appVersion", "=", "await", "_getRemoteDesktopAppVersion", "(", ")", ";", "return", "{", "local", ":", "localVersion", ",", "remote", ":", "remoteVersion", ",", "appVersion", ",", "needsUpdate", ":", "localVersion", "<", "remoteVersion", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/util/checkVersion.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "checkVersion.ts"}
{"tokens": ["import", "{", "app", ",", "BrowserWindow", ",", "shell", ",", "globalShortcut", "}", "from", "\"electron\"", ";", "import", "*", "as", "minimist", "from", "\"minimist\"", ";", "import", "*", "as", "path", "from", "\"path\"", ";", "import", "*", "as", "url", "from", "\"url\"", ";", "import", "{", "setupMenu", "}", "from", "\"./menu\"", ";", "import", "checkVersion", "from", "\"./util/checkVersion\"", ";", "import", "{", "setMetadata", ",", "setAppName", "}", "from", "\"./util/metadata\"", ";", "import", "{", "APP_NAME", "}", "from", "\"./constants\"", ";", "let", "mainWindow", ";", "const", "argv", "=", "minimist", "(", "process", ".", "argv", ".", "slice", "(", "1", ")", ")", ";", "const", "EXCALIDRAW_BUNDLE", "=", "path", ".", "join", "(", "__dirname", ",", "\"client\"", ",", "\"index.html\"", ")", ";", "const", "APP_ICON_PATH", "=", "path", ".", "join", "(", "__dirname", ",", "\"client\"", ",", "\"logo-180x180.png\"", ")", ";", "function", "createWindow", "(", ")", "{", "mainWindow", "=", "new", "BrowserWindow", "(", "{", "show", ":", "false", ",", "height", ":", "600", ",", "width", ":", "800", ",", "webPreferences", ":", "{", "contextIsolation", ":", "true", ",", "preload", ":", "`${", "__dirname", "}/preload.js`", "}", "}", ")", ";", "if", "(", "argv", ".", "devtools", ")", "{", "mainWindow", ".", "webContents", ".", "openDevTools", "(", "{", "mode", ":", "\"detach\"", "}", ")", ";", "}", "mainWindow", ".", "webContents", ".", "on", "(", "\"will-navigate\"", ",", "openExternalURLs", ")", ";", "mainWindow", ".", "webContents", ".", "on", "(", "\"new-window\"", ",", "openExternalURLs", ")", ";", "mainWindow", ".", "loadURL", "(", "url", ".", "format", "(", "{", "pathname", ":", "EXCALIDRAW_BUNDLE", ",", "protocol", ":", "\"file\"", ",", "slashes", ":", "true", "}", ")", ")", ";", "mainWindow", ".", "on", "(", "\"closed\"", ",", "(", ")", "=>", "{", "mainWindow", "=", "null", ";", "}", ")", ";", "if", "(", "process", ".", "platform", "===", "\"darwin\"", ")", "{", "globalShortcut", ".", "register", "(", "\"Command+Q\"", ",", "(", ")", "=>", "{", "app", ".", "quit", "(", ")", ";", "}", ")", ";", "}", "mainWindow", ".", "once", "(", "\"ready-to-show\"", ",", "async", "(", ")", "=>", "{", "const", "versions", "=", "await", "checkVersion", "(", ")", ";", "console", ".", "info", "(", "\"Current version\"", ",", "versions", ".", "local", ")", ";", "console", ".", "info", "(", "\"Needs update\"", ",", "versions", ".", "needsUpdate", ")", ";", "setAppName", "(", "APP_NAME", ")", ";", "setMetadata", "(", "\"versions\"", ",", "versions", ")", ";", "setMetadata", "(", "\"appIconPath\"", ",", "APP_ICON_PATH", ")", ";", "setupMenu", "(", "mainWindow", ")", ";", "mainWindow", ".", "show", "(", ")", ";", "}", ")", ";", "}", "function", "openExternalURLs", "(", "event", ",", "url", ")", "{", "if", "(", "url", ".", "startsWith", "(", "\"http\"", ")", ")", "{", "event", ".", "preventDefault", "(", ")", ";", "shell", ".", "openExternal", "(", "url", ")", ";", "}", "}", "app", ".", "on", "(", "\"ready\"", ",", "createWindow", ")", ";", "app", ".", "on", "(", "\"window-all-closed\"", ",", "(", ")", "=>", "{", "if", "(", "process", ".", "platform", "!==", "\"darwin\"", ")", "{", "app", ".", "quit", "(", ")", ";", "}", "}", ")", ";", "app", ".", "on", "(", "\"activate\"", ",", "(", ")", "=>", "{", "if", "(", "mainWindow", "===", "null", ")", "{", "createWindow", "(", ")", ";", "}", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Electron.BrowserWindow", null, null, "ParsedArgs", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Electron.Event", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/main.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "main.ts"}
{"tokens": ["import", "{", "ipcRenderer", ",", "contextBridge", ",", "remote", "}", "from", "\"electron\"", ";", "import", "{", "IpcListener", "}", "from", "\"./types\"", ";", "contextBridge", ".", "exposeInMainWorld", "(", "\"ipcRenderer\"", ",", "{", "send", ":", "(", "channel", ",", "data", ")", "=>", "{", "ipcRenderer", ".", "send", "(", "channel", ",", "data", ")", ";", "}", ",", "receive", ":", "(", "channel", ",", "func", ")", "=>", "{", "ipcRenderer", ".", "on", "(", "channel", ",", "(", "event", ",", "...", "args", ")", "=>", "func", "(", "event", ",", "...", "args", ")", ")", ";", "}", "}", ")", ";", "contextBridge", ".", "exposeInMainWorld", "(", "\"remote\"", ",", "{", "getVersion", ":", "remote", ".", "app", ".", "getVersion", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, "IpcRendererEvent", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/preload.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "preload.ts"}
{"tokens": ["const", "rendererWindow", "=", "window", ";", "rendererWindow", ".", "ipcRenderer", ".", "receive", "(", "\"show-about-contents\"", ",", "(", "_", ",", "options", ")", "=>", "{", "const", "{", "appName", ",", "versions", ",", "iconPath", "}", "=", "options", ";", "document", ".", "title", "=", "`About ${", "appName", "}`", ";", "const", "$titleElement", "=", "document", ".", "querySelector", "(", "\".title\"", ")", "as", "HTMLHeadingElement", ";", "$titleElement", ".", "textContent", "=", "appName", ";", "const", "$iconElement", "=", "document", ".", "getElementById", "(", "\"app-icon\"", ")", "as", "HTMLImageElement", ";", "$iconElement", ".", "src", "=", "iconPath", ";", "const", "$appVersionElement", "=", "document", ".", "getElementById", "(", "\"app-version\"", ")", "as", "HTMLParagraphElement", ";", "$appVersionElement", ".", "textContent", "=", "`Version ${", "versions", ".", "app", ".", "remote", "}`", ";", "const", "$webVersionElement", "=", "document", ".", "getElementById", "(", "\"web-version\"", ")", "as", "HTMLParagraphElement", ";", "$webVersionElement", ".", "textContent", "=", "`${", "appName", "} for Web Version ${", "versions", ".", "web", ".", "remote", "}`", ";", "const", "$copyRightElement", "=", "document", ".", "querySelector", "(", "\".copyright\"", ")", "as", "HTMLParagraphElement", ";", "$copyRightElement", ".", "textContent", "=", "`Copyright (c) ${", "new", "Date", "(", ")", ".", "getFullYear", "(", ")", "} ${", "appName", "}`", ";", "}", ")", ";"], "labels": [null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, "IpcRendererEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HTMLHeadingElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HTMLImageElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HTMLParagraphElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HTMLParagraphElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "HTMLParagraphElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/excalidraw/excalidraw-desktop", "path": "excalidraw-desktop/src/renderer.ts", "commit_hash": "d58887254548fafe867f91d84f52d2608769ec13", "file": "renderer.ts"}
{"tokens": ["import", "*", "as", "os", "from", "'os'", ";", "import", "{", "join", "}", "from", "'path'", ";", "export", "const", "NODE_ENV", "=", "process", ".", "env", ".", "NODE_ENV", "||", "'dev'", ";", "export", "const", "PORT", "=", "process", ".", "env", ".", "PORT", "||", "3000", ";", "export", "const", "CHANNEL", "=", "process", ".", "env", ".", "CHANNEL", "||", "'ch1'", ";", "export", "const", "CHAINCODE", "=", "process", ".", "env", ".", "CHAINCODE", "||", "'financial'", ";", "export", "const", "COUCHDB_PROTOCOL", "=", "process", ".", "env", ".", "COUCHDB_PROTOCOL", "||", "'http'", ";", "export", "const", "COUCHDB_HOST", "=", "process", ".", "env", ".", "COUCHDB_HOST", "||", "'localhost'", ";", "export", "const", "COUCHDB_PORT", "=", "process", ".", "env", ".", "COUCHDB_PORT", "||", "'5084'", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/utils/env.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "env.ts"}
{"tokens": ["import", "identitiesDev", "from", "'../config/identities.json'", ";", "import", "identitiesProd", "from", "'../config/identities.prod.json'", ";", "import", "{", "NODE_ENV", "}", "from", "'../utils/env'", ";", "import", "{", "join", ",", "resolve", "}", "from", "'path'", ";", "import", "*", "as", "os", "from", "'os'", ";", "const", "homedir", "=", "os", ".", "homedir", "(", ")", ";", "export", "function", "identity", "(", "user", "?", ")", "{", "const", "identities", "=", "NODE_ENV", "===", "'dev'", "?", "identitiesDev", ":", "identitiesProd", ";", "if", "(", "!", "identities", ")", "{", "throw", "new", "Error", "(", "'No identities config .json found in path ./config'", ")", ";", "}", "let", "res", ";", "console", ".", "log", "(", "`getting identity for ${", "user", "} in identities config json`", ")", ";", "if", "(", "!", "user", ")", "{", "res", "=", "identities", "[", "0", "]", ";", "}", "else", "{", "res", "=", "<", "ServerIdentity", ">", "identities", ".", "find", "(", "identity", "=>", "identity", ".", "uniqueId", "===", "user", ")", ";", "}", "res", ".", "networkProfile", "=", "res", ".", "networkProfile", "?", "resolve", "(", "__dirname", ",", "res", ".", "networkProfile", ")", ":", "join", "(", "homedir", ",", "`hyperledger-fabric-network/network-profiles/${", "res", ".", "org", "}.network-profile.yaml`", ")", ";", "res", ".", "keyStore", "=", "res", ".", "keyStore", "?", "resolve", "(", "__dirname", ",", "res", ".", "keyStore", ")", ":", "join", "(", "homedir", ",", "`hyperledger-fabric-network/.hfc-${", "res", ".", "org", "}`", ")", ";", "return", "res", ";", "}", "export", "class", "ServerIdentity", "{", "uniqueId", ":", "string", ";", "user", ":", "string", ";", "org", ":", "string", ";", "networkProfile", "?", ":", "string", ";", "keyStore", "?", ":", "string", ";", "couch", "?", ":", "{", "host", ":", "string", ";", "protocol", ":", "string", ";", "port", ":", "string", ";", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, "ServerIdentity", null, "string", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ServerIdentity", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ServerIdentity", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/utils/identity.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "identity.ts"}
{"tokens": ["import", "{", "BaseStorage", "}", "from", "'@worldsibu/convector-core'", ";", "import", "{", "CouchDBStorage", "}", "from", "'@worldsibu/convector-storage-couchdb'", ";", "import", "{", "Env", "}", "from", "'./env'", ";", "import", "{", "CHAINCODE", ",", "COUCHDB_HOST", ",", "COUCHDB_PROTOCOL", ",", "COUCHDB_PORT", ",", "CHANNEL", ",", "identity", "}", "from", "'../utils'", ";", "/**\n * Route to the CouchDB\n */", "BaseStorage", ".", "current", "=", "new", "CouchDBStorage", "(", "{", "host", ":", "COUCHDB_HOST", ",", "protocol", ":", "COUCHDB_PROTOCOL", ",", "port", ":", "COUCHDB_PORT", "}", ",", "`${", "CHANNEL", "}_${", "CHAINCODE", "}`", ")", ";", "export", "async", "function", "couchQueryAll", "(", "view", ",", "type", ",", "queryOptions", "?", ",", "col", "?", ",", "userId", "?", ")", "{", "const", "channel", "=", "CHANNEL", ";", "const", "cc", "=", "CHAINCODE", ";", "const", "dbName", "=", "`${", "channel", "}_${", "cc", "}${", "col", "?", "`$$p${", "col", "}`", ":", "''", "}`", ";", "const", "viewUrl", "=", "`_design/${", "cc", "}/_view/${", "view", "}`", ";", "const", "identityToQuery", "=", "identity", "(", "userId", ")", ";", "console", ".", "log", "(", "`calling couch to ${", "identityToQuery", ".", "couch", ".", "port", "} in db ${", "dbName", "}`", ")", ";", "BaseStorage", ".", "current", "=", "new", "CouchDBStorage", "(", "{", "host", ":", "identityToQuery", ".", "couch", ".", "host", ",", "protocol", ":", "identityToQuery", ".", "couch", ".", "protocol", ",", "port", ":", "identityToQuery", ".", "couch", ".", "port", ",", "}", ")", ";", "try", "{", "const", "results", "=", "<", "any", "[", "]", ">", "(", "await", "type", ".", "query", "(", "type", ",", "dbName", ",", "viewUrl", ",", "queryOptions", ")", ")", ";", "return", "results", ".", "map", "(", "result", "=>", "result", ".", "toJSON", "(", ")", ")", ";", "}", "catch", "(", "err", ")", "{", "console", ".", "log", "(", "err", ")", ";", "if", "(", "err", ".", "code", "===", "'EDOCMISSING'", ")", "{", "return", "[", "]", ";", "}", "else", "{", "throw", "err", ";", "}", "}", "}", "export", "{", "Patient", ",", "CreateClaim", ",", "AdjudicateClaim", ",", "Organization", ",", "FeeExtensionsConfig", "}", "from", "'financial-cc'", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, "object", null, null, "string", null, null, "string", null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "ServerIdentity", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/convectorUtils/convectorModels.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "convectorModels.ts"}
{"tokens": ["/** Referenced from: https://github.com/ksachdeva/hyperledger-fabric-example/blob/c41fcaa352e78cbf3c7cfb210338ac0f20b8357e/src/client.ts */", "import", "*", "as", "fs", "from", "'fs'", ";", "import", "{", "join", "}", "from", "'path'", ";", "import", "Client", "from", "'fabric-client'", ";", "import", "{", "IEnrollmentRequest", ",", "IRegisterRequest", "}", "from", "'fabric-ca-client'", ";", "import", "{", "identity", "}", "from", "'../utils/identity'", ";", "export", "type", "UserParams", "=", "IRegisterRequest", ";", "export", "type", "AdminParams", "=", "IEnrollmentRequest", ";", "const", "l", "=", "console", ".", "log", ";", "export", "namespace", "SelfGenContext", "{", "interface", "IdentityFiles", "{", "privateKey", ":", "string", ";", "signedCert", ":", "string", ";", "}", "export", "async", "function", "getClient", "(", ")", "{", "const", "keyStore", "=", "identity", "(", ")", ".", "keyStore", ";", "const", "user", "=", "identity", "(", ")", ".", "user", ";", "const", "org", "=", "identity", "(", ")", ".", "org", ";", "const", "contextPath", "=", "join", "(", "keyStore", "+", "'/'", "+", "user", ")", ";", "fs", ".", "readFile", "(", "contextPath", ",", "'utf8'", ",", "async", "function", "(", "err", ",", "data", ")", "{", "if", "(", "err", ")", "{", "const", "client", "=", "new", "Client", "(", ")", ";", "l", "(", "'Setting up the cryptoSuite ..'", ")", ";", "const", "cryptoSuite", "=", "Client", ".", "newCryptoSuite", "(", ")", ";", "cryptoSuite", ".", "setCryptoKeyStore", "(", "Client", ".", "newCryptoKeyStore", "(", "{", "path", ":", "keyStore", "}", ")", ")", ";", "client", ".", "setCryptoSuite", "(", "cryptoSuite", ")", ";", "l", "(", "'Setting up the keyvalue store ..'", ")", ";", "const", "store", "=", "await", "Client", ".", "newDefaultKeyValueStore", "(", "{", "path", ":", "keyStore", "}", ")", ";", "client", ".", "setStateStore", "(", "store", ")", ";", "l", "(", "'Creating the admin user context ..'", ")", ";", "const", "privateKeyFile", "=", "fs", ".", "readdirSync", "(", "keyStore", "+", "'/keystore'", ")", "[", "0", "]", ";", "const", "cryptoContentOrgAdmin", "=", "{", "privateKey", ":", "keyStore", "+", "'/keystore/'", "+", "privateKeyFile", ",", "signedCert", ":", "keyStore", "+", "'/signcerts/cert.pem'", "}", ";", "await", "client", ".", "createUser", "(", "{", "username", ":", "user", ",", "mspid", ":", "`${", "org", "}MSP`", ",", "cryptoContent", ":", "cryptoContentOrgAdmin", ",", "skipPersistence", ":", "false", "}", ")", ";", "return", "client", ";", "}", "else", "{", "l", "(", "`Context exists in ${", "contextPath", "}`", ")", ";", "}", "}", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ErrnoException", null, "string", null, null, null, null, null, null, null, null, "Client", null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/convectorUtils/selfGenContext.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "selfGenContext.ts"}
{"tokens": ["/**\n * This file is in charge of building a controller (or set of controllers made up)\n * of the baseline logic you designed on your chaincode project, but replacing the logic\n * with your own for NodeJS. We inject here the `convector-adapter-fabric` which calls\n * the blockchain based on your own configuration.\n */", "import", "{", "FabricControllerAdapter", "}", "from", "'@worldsibu/convector-adapter-fabric'", ";", "import", "{", "ClientFactory", "}", "from", "'@worldsibu/convector-core'", ";", "import", "{", "SelfGenContext", "}", "from", "'./selfGenContext'", ";", "import", "{", "CHANNEL", ",", "CHAINCODE", "}", "from", "'../utils'", ";", "import", "{", "PatientController", ",", "OrganizationController", ",", "ClaimController", ",", "ParticipantController", ",", "FeeExtensionsController", "}", "from", "'financial-cc'", ";", "import", "{", "PaymentController", "}", "from", "'financial-cc'", ";", "import", "{", "identity", "}", "from", "'../utils/identity'", ";", "async", "function", "InitFabricAdapter", "(", "user", "?", ")", "{", "await", "SelfGenContext", ".", "getClient", "(", ")", ";", "const", "adapter", "=", "new", "FabricControllerAdapter", "(", "{", "txTimeout", ":", "300000", ",", "user", ":", "identity", "(", "user", ")", ".", "user", ",", "channel", ":", "CHANNEL", ",", "chaincode", ":", "CHAINCODE", ",", "keyStore", ":", "identity", "(", "user", ")", ".", "keyStore", ",", "networkProfile", ":", "identity", "(", "user", ")", ".", "networkProfile", ",", "userMspPath", ":", "identity", "(", "user", ")", ".", "keyStore", "}", ")", ";", "await", "adapter", ".", "init", "(", ")", ";", "return", "adapter", ";", "}", "/**\n * Building this adapter allows you to communicate with the\n * test env created by `hurley`.\n */", "export", "async", "function", "Init", "(", "user", "?", ")", "{", "const", "adapter", "=", "await", "InitFabricAdapter", "(", "user", ")", ";", "return", "{", "adapter", ",", "patient", ":", "ClientFactory", "(", "PatientController", ",", "adapter", ")", ",", "payment", ":", "ClientFactory", "(", "PaymentController", ",", "adapter", ")", ",", "claim", ":", "ClientFactory", "(", "ClaimController", ",", "adapter", ")", ",", "organization", ":", "ClientFactory", "(", "OrganizationController", ",", "adapter", ")", ",", "participant", ":", "ClientFactory", "(", "ParticipantController", ",", "adapter", ")", ",", "feeExtensions", ":", "ClientFactory", "(", "FeeExtensionsController", ",", "adapter", ")", "}", ";", "}", "export", "async", "function", "InitServerIdentity", "(", ")", "{", "console", ".", "log", "(", "'Need to register server identity'", ")", ";", "console", ".", "log", "(", "'Server identity registered'", ")", ";", "console", ".", "log", "(", "'Server identity found'", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/convectorUtils/convectorControllers.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "convectorControllers.ts"}
{"tokens": ["import", "{", "PrivateCollectionsRoutes", "}", "from", "'financial-cc'", ";", "import", "organizations", "from", "'../config/organizations.json'", ";", "export", "async", "function", "collections", "(", ")", "{", "const", "collections", "=", "new", "PrivateCollectionsRoutes", "(", "organizations", "[", "1", "]", ",", "organizations", "[", "2", "]", ",", "organizations", "[", "0", "]", ")", ";", "await", "collections", ".", "load", "(", ")", ";", "return", "collections", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/utils/collections.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "collections.ts"}
{"tokens": ["import", "{", "Init", ",", "CreateClaim", ",", "AdjudicateClaim", ",", "couchQueryAll", "}", "from", "'../convectorUtils'", ";", "import", "{", "Claim", ",", "InvoiceLineItem", ",", "TransientInvoiceLineItem", "}", "from", "'financial-cc'", ";", "import", "{", "collections", "}", "from", "'../utils/collections'", ";", "export", "async", "function", "create", "(", "newClaim", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "claim", ".", "$config", "(", "{", "transient", ":", "{", "data", ":", "new", "CreateClaim", "(", "newClaim", ")", ".", "toJSON", "(", ")", "}", "}", ")", ".", "create", "(", ")", ";", "}", "export", "async", "function", "adjudicate", "(", "toAdjudicateClaim", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "let", "lines", "=", "await", "ctrls", ".", "claim", ".", "$query", "(", ")", ".", "getInvoiceLineItems", "(", "toAdjudicateClaim", ".", "claimUid", ")", ";", "lines", "=", "lines", ".", "map", "(", "item", "=>", "new", "InvoiceLineItem", "(", "item", ")", ".", "toJSON", "(", ")", "as", "any", ")", ";", "const", "invoiceLines", "=", "new", "TransientInvoiceLineItem", "(", ")", ";", "invoiceLines", ".", "items", "=", "lines", ";", "let", "claim", "=", "await", "ctrls", ".", "claim", ".", "$query", "(", ")", ".", "getOne", "(", "toAdjudicateClaim", ".", "claimUid", ")", ";", "await", "ctrls", ".", "claim", ".", "$config", "(", "{", "transient", ":", "{", "data", ":", "new", "AdjudicateClaim", "(", "toAdjudicateClaim", ")", ".", "toJSON", "(", ")", ",", "invoices", ":", "invoiceLines", ".", "toJSON", "(", ")", ",", "claim", ":", "new", "Claim", "(", "claim", ")", ".", "toJSON", "(", ")", ",", "}", "}", ")", ".", "adjudicate", "(", ")", ";", "}", "export", "async", "function", "getAll", "(", "user", "?", ")", "{", "let", "resCols", "=", "await", "collections", "(", ")", ";", "console", ".", "log", "(", "!", "!", "user", ")", ";", "return", "await", "couchQueryAll", "(", "'claims_all'", ",", "Claim", ",", "null", ",", "resCols", ".", "claim", ",", "user", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/claim.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "claim.service.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "'express'", ";", "import", "{", "create", ",", "adjudicate", ",", "getAll", "}", "from", "'../services/claim.service'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "get", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "{", "user", "}", "=", "req", ".", "query", ";", "let", "results", "=", "await", "getAll", "(", "user", ")", ";", "res", ".", "send", "(", "results", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "newClaim", "=", "req", ".", "body", ";", "await", "create", "(", "newClaim", ")", ";", "res", ".", "send", "(", "201", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/adjudicate'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "patient", "=", "req", ".", "body", ";", "await", "adjudicate", "(", "patient", ")", ";", "res", ".", "send", "(", "200", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "export", "const", "ClaimCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/claim.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "claim.controller.ts"}
{"tokens": ["import", "{", "Init", ",", "Organization", ",", "couchQueryAll", "}", "from", "'../convectorUtils'", ";", "export", "async", "function", "create", "(", "newOrganization", ",", "fingerprint", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "organization", ".", "create", "(", "newOrganization", ",", "fingerprint", ")", ";", "}", "export", "async", "function", "getAll", "(", ")", "{", "return", "await", "couchQueryAll", "(", "'organizations_all'", ",", "Organization", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Organization", null, "string", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/organization.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "organization.service.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "'express'", ";", "import", "{", "create", ",", "getAll", "}", "from", "'../services/organization.service'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "get", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "let", "results", "=", "await", "getAll", "(", ")", ";", "res", ".", "send", "(", "results", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "{", "organization", ",", "fingerprint", "}", "=", "req", ".", "body", ";", "await", "create", "(", "organization", ",", "fingerprint", ")", ";", "res", ".", "status", "(", "201", ")", ".", "send", "(", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "export", "const", "OrganizationCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/organization.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "organization.controller.ts"}
{"tokens": ["import", "{", "Init", ",", "couchQueryAll", "}", "from", "'../convectorUtils'", ";", "import", "{", "ConsumerParticipant", ",", "PayerParticipant", ",", "ProviderParticipant", ",", "ConsortiumAdminParticipant", "}", "from", "'financial-cc'", ";", "export", "async", "function", "createConsumer", "(", "participant", ",", "fingerprint", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "participant", ".", "createConsumer", "(", "participant", ",", "fingerprint", ")", ";", "}", "export", "async", "function", "createProvider", "(", "participant", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "participant", ".", "createProvider", "(", "participant", ")", ";", "}", "export", "async", "function", "createPayer", "(", "participant", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "participant", ".", "createPayer", "(", "participant", ")", ";", "}", "export", "async", "function", "createConsortiumAdmin", "(", "participant", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "participant", ".", "createConsortiumAdmin", "(", "participant", ")", ";", "}", "export", "async", "function", "getAllConsumer", "(", ")", "{", "return", "await", "couchQueryAll", "(", "'participantConsumers_all'", ",", "ConsumerParticipant", ")", ";", "}", "export", "async", "function", "getAllProvider", "(", ")", "{", "return", "await", "couchQueryAll", "(", "'participantProviders_all'", ",", "ProviderParticipant", ")", ";", "}", "export", "async", "function", "getAllPayer", "(", ")", "{", "return", "await", "couchQueryAll", "(", "'participantPayers_all'", ",", "PayerParticipant", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "ConsumerParticipant", null, "string", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/participant.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "participant.service.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "'express'", ";", "import", "{", "createConsumer", ",", "createProvider", ",", "createPayer", ",", "createConsortiumAdmin", ",", "getAllConsumer", ",", "getAllProvider", ",", "getAllPayer", "}", "from", "'../services/participant.service'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "get", "(", "'/consumer'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "let", "results", "=", "await", "getAllConsumer", "(", ")", ";", "res", ".", "send", "(", "results", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "get", "(", "'/provider'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "let", "results", "=", "await", "getAllProvider", "(", ")", ";", "res", ".", "send", "(", "results", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "get", "(", "'/payer'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "let", "results", "=", "await", "getAllPayer", "(", ")", ";", "res", ".", "send", "(", "results", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/consumer'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "{", "participant", ",", "fingerprint", "}", "=", "req", ".", "body", ";", "await", "createConsumer", "(", "participant", ",", "fingerprint", ")", ";", "res", ".", "status", "(", "201", ")", ".", "send", "(", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/provider'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "participant", "=", "req", ".", "body", ";", "await", "createProvider", "(", "participant", ")", ";", "res", ".", "status", "(", "201", ")", ".", "send", "(", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/payer'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "participant", "=", "req", ".", "body", ";", "await", "createPayer", "(", "participant", ")", ";", "res", ".", "status", "(", "201", ")", ".", "send", "(", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "post", "(", "'/consortiumAdmin'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "participant", "=", "req", ".", "body", ";", "await", "createConsortiumAdmin", "(", "participant", ")", ";", "res", ".", "status", "(", "201", ")", ".", "send", "(", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "export", "const", "ParticipantCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/participant.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "participant.controller.ts"}
{"tokens": ["import", "{", "Init", ",", "Patient", ",", "couchQueryAll", "}", "from", "'../convectorUtils'", ";", "export", "async", "function", "create", "(", "patient", ")", "{", "const", "ctrls", "=", "await", "Init", "(", ")", ";", "await", "ctrls", ".", "patient", ".", "create", "(", "patient", ")", ";", "}", "export", "async", "function", "getAll", "(", ")", "{", "return", "await", "couchQueryAll", "(", "'patients_all'", ",", "Patient", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "Patient", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/patient.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "patient.service.ts"}
{"tokens": ["import", "{", "Init", "}", "from", "'../convectorUtils'", ";", "import", "{", "Invoice", "}", "from", "'financial-cc'", ";", "export", "async", "function", "make", "(", "invoiceId", ",", "user", ")", "{", "const", "ctrls", "=", "await", "Init", "(", "user", ")", ";", "let", "invoice", "=", "await", "ctrls", ".", "payment", ".", "$query", "(", ")", ".", "getOneInvoice", "(", "invoiceId", ")", ";", "console", ".", "log", "(", "invoice", ")", ";", "await", "ctrls", ".", "payment", ".", "$config", "(", "{", "transient", ":", "{", "invoice", ":", "new", "Invoice", "(", "invoice", ")", ".", "toJSON", "(", ")", "}", "}", ")", ".", "make", "(", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "string", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/payment.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "payment.service.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "'express'", ";", "import", "{", "make", "as", "paymentMake", "}", "from", "'../services/payment.service'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "post", "(", "'/make'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "payment", "=", "req", ".", "body", ".", "payment", ";", "const", "{", "user", "}", "=", "req", ".", "query", ";", "await", "paymentMake", "(", "payment", ",", "user", ")", ";", "res", ".", "send", "(", "200", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "export", "const", "PaymentCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/payment.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "payment.controller.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "'express'", ";", "import", "{", "getAll", "}", "from", "'../services/invoice.service'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "get", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "{", "user", "}", "=", "req", ".", "query", ";", "let", "results", "=", "await", "getAll", "(", "user", ")", ";", "res", ".", "send", "(", "results", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "export", "const", "InvoiceCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/invoice.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "invoice.controller.ts"}
{"tokens": ["import", "{", "Init", ",", "FeeExtensionsConfig", ",", "Organization", "}", "from", "'../convectorUtils'", ";", "export", "async", "function", "createConfig", "(", "user", ",", "orgId", ",", "config", ")", "{", "const", "ctrls", "=", "await", "Init", "(", "user", ")", ";", "await", "ctrls", ".", "feeExtensions", ".", "initConfig", "(", "orgId", ",", "config", ")", ";", "}", "export", "async", "function", "updateConfig", "(", "user", ",", "orgId", ",", "fee", ",", "value", ")", "{", "const", "ctrls", "=", "await", "Init", "(", "user", ")", ";", "await", "ctrls", ".", "feeExtensions", ".", "updateConfig", "(", "orgId", ",", "fee", ",", "value", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "string", null, "FeeExtensionsConfig", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "string", null, "string", null, "number", null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/feeExtensions.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "feeExtensions.service.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "\"express\"", ";", "import", "{", "createConfig", ",", "updateConfig", "}", "from", "'../services/feeExtensions.service'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "post", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "const", "{", "orgId", ",", "config", "}", "=", "req", ".", "body", ";", "const", "{", "user", "}", "=", "req", ".", "query", ";", "if", "(", "!", "Object", ".", "keys", "(", "config", ")", ".", "length", ")", "{", "res", ".", "status", "(", "404", ")", ".", "send", "(", "`Object of type \"FeeExtensionsConfig\" is missing from body`", ")", ";", "return", ";", "}", "if", "(", "!", "user", ")", "{", "res", ".", "status", "(", "404", ")", ".", "send", "(", "`User param is missing from query url`", ")", ";", "return", ";", "}", "try", "{", "await", "createConfig", "(", "user", ",", "orgId", ",", "config", ")", ";", "res", ".", "send", "(", "'Created'", ")", ";", "}", "catch", "(", "e", ")", "{", "res", ".", "status", "(", "500", ")", ".", "send", "(", "e", ")", ";", "}", "}", ")", ";", "router", ".", "put", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "const", "{", "orgId", ",", "fee", ",", "value", "}", "=", "req", ".", "body", ";", "const", "{", "user", "}", "=", "req", ".", "query", ";", "if", "(", "!", "orgId", "||", "!", "fee", "||", "!", "value", ")", "{", "res", ".", "status", "(", "404", ")", ".", "send", "(", "`Fields are missing from body`", ")", ";", "return", ";", "}", "if", "(", "!", "user", ")", "{", "res", ".", "status", "(", "404", ")", ".", "send", "(", "`User param is missing from query url`", ")", ";", "return", ";", "}", "try", "{", "await", "updateConfig", "(", "user", ",", "orgId", ",", "fee", ",", "value", ")", ";", "res", ".", "send", "(", "'Updated'", ")", ";", "}", "catch", "(", "e", ")", "{", "res", ".", "status", "(", "500", ")", ".", "send", "(", "e", ")", ";", "}", "}", ")", ";", "export", "const", "FeeExtensionsCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/feeExtensions.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "feeExtensions.controller.ts"}
{"tokens": ["import", "{", "couchQueryAll", "}", "from", "'../convectorUtils'", ";", "import", "{", "ClaimResponse", "}", "from", "'financial-cc'", ";", "import", "{", "collections", "}", "from", "'../utils/collections'", ";", "export", "async", "function", "getAll", "(", "user", "?", ")", "{", "let", "resCols", "=", "await", "collections", "(", ")", ";", "return", "await", "couchQueryAll", "(", "'claimResponses_all'", ",", "ClaimResponse", ",", "null", ",", "resCols", ".", "claimResponse", ",", "user", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/services/claimResponse.service.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "claimResponse.service.ts"}
{"tokens": ["import", "{", "Router", ",", "Request", ",", "Response", "}", "from", "'express'", ";", "import", "{", "getAll", "}", "from", "'../services/account.service'", ";", "import", "{", "join", "}", "from", "'path'", ";", "const", "router", "=", "Router", "(", ")", ";", "router", ".", "get", "(", "'/'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "const", "indexFile", "=", "join", "(", "__dirname", ",", "'../../../../frontend/dist/index.html'", ")", ";", "console", ".", "log", "(", "indexFile", ")", ";", "res", ".", "sendFile", "(", "indexFile", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "router", ".", "get", "(", "'/healthcheck'", ",", "async", "(", "req", ",", "res", ")", "=>", "{", "try", "{", "res", ".", "send", "(", "'SUCCESS'", ")", ";", "}", "catch", "(", "ex", ")", "{", "console", ".", "log", "(", "ex", ")", ";", "res", ".", "status", "(", "500", ")", ".", "send", "(", "ex", ")", ";", "}", "}", ")", ";", "export", "const", "DefaultCtrl", "=", "router", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Request", null, "Response", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Router", null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/controllers/default.controller.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "default.controller.ts"}
{"tokens": ["import", "*", "as", "dotenv", "from", "'dotenv'", ";", "dotenv", ".", "config", "(", ")", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "express", "from", "'express'", ";", "import", "*", "as", "bodyParser", "from", "'body-parser'", ";", "import", "{", "PORT", ",", "CHANNEL", ",", "CHAINCODE", ",", "COUCHDB_PROTOCOL", ",", "COUCHDB_HOST", ",", "COUCHDB_PORT", "}", "from", "'./utils'", ";", "import", "{", "OrganizationCtrl", ",", "PaymentCtrl", ",", "ClaimCtrl", ",", "PatientCtrl", ",", "ProcedureCtrl", ",", "ParticipantCtrl", ",", "InvoiceCtrl", ",", "AccountCtrl", ",", "FeeExtensionsCtrl", "}", "from", "'./controllers'", ";", "import", "{", "ChargeItemCtrl", "}", "from", "'./controllers/chargeItem.controller'", ";", "import", "{", "ClaimResponseCtrl", "}", "from", "'./controllers/claimResponse.controller'", ";", "import", "{", "EncounterCtrl", "}", "from", "'./controllers/encounter.controller'", ";", "import", "{", "identity", "}", "from", "'./utils/identity'", ";", "import", "{", "DefaultCtrl", "}", "from", "'./controllers/default.controller'", ";", "import", "{", "join", "}", "from", "'path'", ";", "const", "app", "=", "express", "(", ")", ";", "const", "port", "=", "process", ".", "env", ".", "PORT", "||", "8080", ";", "app", ".", "use", "(", "bodyParser", ".", "urlencoded", "(", "{", "extended", ":", "true", ",", "limit", ":", "'40mb'", "}", ")", ")", ";", "app", ".", "use", "(", "bodyParser", ".", "json", "(", "{", "limit", ":", "'40mb'", "}", ")", ")", ";", "app", ".", "use", "(", "(", "req", ",", "res", ",", "next", ")", "=>", "{", "res", ".", "header", "(", "'Access-Control-Allow-Origin'", ",", "'*'", ")", ";", "res", ".", "header", "(", "'Access-Control-Allow-Headers'", ",", "'Origin, X-Requested-With, Content-Type, Accept'", ")", ";", "res", ".", "header", "(", "'Access-Control-Allow-Methods'", ",", "'GET, POST, PUT, DELETE, OPTIONS'", ")", ";", "next", "(", ")", ";", "}", ")", ";", "app", ".", "use", "(", "express", ".", "static", "(", "join", "(", "__dirname", ",", "'../../../frontend/dist'", ")", ")", ")", ";", "app", ".", "use", "(", "'/api/organization'", ",", "OrganizationCtrl", ")", ";", "app", ".", "use", "(", "'/api/payment'", ",", "PaymentCtrl", ")", ";", "app", ".", "use", "(", "'/api/claim'", ",", "ClaimCtrl", ")", ";", "app", ".", "use", "(", "'/api/patient'", ",", "PatientCtrl", ")", ";", "app", ".", "use", "(", "'/api/participant'", ",", "ParticipantCtrl", ")", ";", "app", ".", "use", "(", "'/api/invoice'", ",", "InvoiceCtrl", ")", ";", "app", ".", "use", "(", "'/api/account'", ",", "AccountCtrl", ")", ";", "app", ".", "use", "(", "'/api/procedure'", ",", "ProcedureCtrl", ")", ";", "app", ".", "use", "(", "'/api/chargeItem'", ",", "ChargeItemCtrl", ")", ";", "app", ".", "use", "(", "'/api/claimResponse'", ",", "ClaimResponseCtrl", ")", ";", "app", ".", "use", "(", "'/api/encounter'", ",", "EncounterCtrl", ")", ";", "app", ".", "use", "(", "'/api/feeExtensions'", ",", "FeeExtensionsCtrl", ")", ";", "app", ".", "use", "(", "'/*'", ",", "DefaultCtrl", ")", ";", "const", "serverIdentity", "=", "identity", "(", ")", ";", "app", ".", "listen", "(", "port", ",", "(", ")", "=>", "console", ".", "log", "(", "`Running as ${", "serverIdentity", ".", "org", "}:${", "serverIdentity", ".", "user", "} in port ${", "port", "}`", ")", ")", ";", "module", ".", "exports", "=", "app", ";", "console", ".", "log", "(", "`PORT=${", "PORT", "}`", ")", ";", "console", ".", "log", "(", "`USERCERT=${", "serverIdentity", ".", "user", "}`", ")", ";", "console", ".", "log", "(", "`ORGCERT=${", "serverIdentity", ".", "org", "}`", ")", ";", "console", ".", "log", "(", "`KEYSTORE=${", "serverIdentity", ".", "keyStore", "}`", ")", ";", "console", ".", "log", "(", "`NETWORKPROFILE=${", "serverIdentity", ".", "networkProfile", "}`", ")", ";", "console", ".", "log", "(", "`CHANNEL=${", "CHANNEL", "}`", ")", ";", "console", ".", "log", "(", "`CHAINCODE=${", "CHAINCODE", "}`", ")", ";", "console", ".", "log", "(", "`COUCHDB_PROTOCOL=${", "COUCHDB_PROTOCOL", "}`", ")", ";", "console", ".", "log", "(", "`COUCHDB_HOST=${", "COUCHDB_HOST", "}`", ")", ";", "console", ".", "log", "(", "`COUCHDB_PORT=${", "COUCHDB_PORT", "}`", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "express.Application", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ServerIdentity", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/instamed/healthcare-payments-blockchain", "path": "healthcare-payments-blockchain/packages/server/src/app.ts", "commit_hash": "e320a6fb2c32d7de45a719b05513cc4df5b9f110", "file": "app.ts"}
{"tokens": ["import", "{", "resolve", "}", "from", "'path'", ";", "import", "{", "remote", ",", "app", "}", "from", "'electron'", ";", "export", "const", "getPath", "=", "(", "...", "relativePaths", ")", "=>", "{", "let", "path", ";", "if", "(", "remote", ")", "{", "path", "=", "remote", ".", "app", ".", "getPath", "(", "'userData'", ")", ";", "}", "else", "if", "(", "app", ")", "{", "path", "=", "app", ".", "getPath", "(", "'userData'", ")", ";", "}", "else", "{", "return", "null", ";", "}", "return", "resolve", "(", "path", ",", "...", "relativePaths", ")", ".", "replace", "(", "/\\\\/g", ",", "'/'", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, "array", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/utils/paths.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "paths.ts"}
{"tokens": ["export", "const", "makeId", "=", "(", "length", ",", "possible", "=", "'abcdefghijklmnopqrstuvwxyz'", ")", "=>", "{", "let", "id", "=", "''", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "length", ";", "i", "++", ")", "{", "id", "+=", "possible", ".", "charAt", "(", "Math", ".", "floor", "(", "Math", ".", "random", "(", ")", "*", "possible", ".", "length", ")", ")", ";", "}", "return", "id", ";", "}", ";"], "labels": [null, null, "string", null, null, "number", null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/utils/string.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "string.ts"}
{"tokens": ["import", "{", "ipcMain", "}", "from", "'electron'", ";", "import", "{", "autoUpdater", "}", "from", "'electron-updater'", ";", "import", "{", "AppWindow", "}", "from", "'../app-window'", ";", "export", "const", "runAutoUpdaterService", "=", "(", "appWindow", ")", "=>", "{", "ipcMain", ".", "on", "(", "'update-install'", ",", "(", ")", "=>", "{", "autoUpdater", ".", "quitAndInstall", "(", ")", ";", "}", ")", ";", "ipcMain", ".", "on", "(", "'update-check'", ",", "(", ")", "=>", "{", "if", "(", "process", ".", "env", ".", "ENV", "!==", "'dev'", ")", "{", "autoUpdater", ".", "checkForUpdates", "(", ")", ";", "}", "}", ")", ";", "autoUpdater", ".", "on", "(", "'update-downloaded'", ",", "(", "{", "version", "}", ")", "=>", "{", "appWindow", ".", "webContents", ".", "send", "(", "'update-available'", ",", "version", ")", ";", "}", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "AppWindow", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/services/auto-updater.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "auto-updater.ts"}
{"tokens": ["import", "{", "promises", "as", "fs", "}", "from", "'fs'", ";", "import", "{", "resolve", "}", "from", "'path'", ";", "import", "{", "app", "}", "from", "'electron'", ";", "import", "{", "makeId", "}", "from", "'~/utils'", ";", "export", "const", "getIcon", "=", "async", "(", "ext", ")", "=>", "{", "const", "tempPath", "=", "app", ".", "getPath", "(", "'temp'", ")", ";", "const", "filePath", "=", "resolve", "(", "tempPath", ",", "`${", "makeId", "(", "16", ")", "}.${", "ext", "}`", ")", ";", "await", "fs", ".", "writeFile", "(", "filePath", ",", "undefined", ")", ";", "let", "data", ";", "try", "{", "data", "=", "await", "app", ".", "getFileIcon", "(", "filePath", ",", "{", "size", ":", "'normal'", "}", ")", ";", "}", "catch", "(", "error", ")", "{", "}", "await", "fs", ".", "unlink", "(", "filePath", ")", ";", "return", "{", "ext", ",", "icon", ":", "data", ".", "toDataURL", "(", ")", "}", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, "string", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/utils/icons.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "icons.ts"}
{"tokens": ["import", "{", "ipcMain", "}", "from", "'electron'", ";", "import", "{", "IProtocol", "}", "from", "'qusly-core'", ";", "import", "{", "AppWindow", "}", "from", "'../app-window'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "{", "makeId", "}", "from", "'~/utils'", ";", "import", "{", "getIcon", "}", "from", "'../utils/icons'", ";", "export", "const", "runMessagingService", "=", "(", "appWindow", ")", "=>", "{", "ipcMain", ".", "on", "(", "`get-testing-site`", ",", "(", "e", ",", "id", ")", "=>", "{", "const", "{", "HOSTNAME", ",", "USER", ",", "PASSWORD", ",", "PROTOCOL", ",", "PORT", ",", "ENABLED", "}", "=", "process", ".", "env", ";", "const", "site", "=", "{", "_id", ":", "makeId", "(", "32", ")", ",", "title", ":", "HOSTNAME", ",", "host", ":", "HOSTNAME", ",", "password", ":", "PASSWORD", ",", "user", ":", "USER", ",", "protocol", ":", "PROTOCOL", "as", "IProtocol", ",", "port", ":", "parseInt", "(", "PORT", ")", ",", "}", ";", "appWindow", ".", "webContents", ".", "send", "(", "`get-testing-site-${", "id", "}`", ",", "ENABLED", "===", "'true'", "?", "site", ":", "null", ")", ";", "}", ")", ";", "ipcMain", ".", "on", "(", "'get-icons'", ",", "async", "(", "e", ",", "list", ",", "id", ")", "=>", "{", "const", "promises", "=", "list", ".", "map", "(", "ext", "=>", "getIcon", "(", "ext", ")", ")", ";", "const", "data", "=", "await", "Promise", ".", "all", "(", "promises", ")", ";", "const", "icons", "=", "{", "}", ";", "data", ".", "forEach", "(", "(", "{", "ext", ",", "icon", "}", ")", "=>", "{", "icons", "[", "ext", "]", "=", "icon", ";", "}", ")", ";", "appWindow", ".", "webContents", ".", "send", "(", "`get-icons-${", "id", "}`", ",", "icons", ")", ";", "}", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "AppWindow", null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "array", null, "string", null, null, null, null, "array", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/services/messaging.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "messaging.ts"}
{"tokens": ["import", "{", "ipcMain", "}", "from", "'electron'", ";", "import", "*", "as", "Datastore", "from", "'nedb'", ";", "import", "{", "getPath", "}", "from", "'~/utils'", ";", "import", "{", "IFindOperation", ",", "IInsertOperation", ",", "IRemoveOperation", ",", "IUpdateOperation", ",", "}", "from", "'~/interfaces'", ";", "interface", "Databases", "{", "[", "key", "]", ":", "Datastore", ";", "}", "export", "class", "StorageService", "{", "public", "databases", ":", "Databases", "=", "{", "sites", ":", "null", ",", "}", ";", "public", "constructor", "(", ")", "{", "ipcMain", ".", "on", "(", "'storage-get'", ",", "async", "(", "e", ",", "id", ",", "data", ")", "=>", "{", "const", "docs", "=", "await", "this", ".", "find", "(", "data", ")", ";", "e", ".", "sender", ".", "send", "(", "id", ",", "docs", ")", ";", "}", ")", ";", "ipcMain", ".", "on", "(", "'storage-get-one'", ",", "async", "(", "e", ",", "id", ",", "data", ")", "=>", "{", "const", "doc", "=", "await", "this", ".", "findOne", "(", "data", ")", ";", "e", ".", "sender", ".", "send", "(", "id", ",", "doc", ")", ";", "}", ")", ";", "ipcMain", ".", "on", "(", "'storage-insert'", ",", "async", "(", "e", ",", "id", ",", "data", ")", "=>", "{", "const", "doc", "=", "await", "this", ".", "insert", "(", "data", ")", ";", "e", ".", "sender", ".", "send", "(", "id", ",", "doc", ")", ";", "}", ")", ";", "ipcMain", ".", "on", "(", "'storage-remove'", ",", "async", "(", "e", ",", "id", ",", "data", ")", "=>", "{", "const", "numRemoved", "=", "await", "this", ".", "remove", "(", "data", ")", ";", "e", ".", "sender", ".", "send", "(", "id", ",", "numRemoved", ")", ";", "}", ")", ";", "ipcMain", ".", "on", "(", "'storage-update'", ",", "async", "(", "e", ",", "id", ",", "data", ")", "=>", "{", "const", "numReplaced", "=", "await", "this", ".", "update", "(", "data", ")", ";", "e", ".", "sender", ".", "send", "(", "id", ",", "numReplaced", ")", ";", "}", ")", ";", "}", "public", "find", "<", "T", ">", "(", "data", ")", "{", "const", "{", "scope", ",", "query", "}", "=", "data", ";", "return", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "databases", "[", "scope", "]", ".", "find", "(", "query", ",", "(", "err", ",", "docs", ")", "=>", "{", "if", "(", "err", ")", "reject", "(", "err", ")", ";", "resolve", "(", "docs", ")", ";", "}", ")", ";", "}", ")", ";", "}", "public", "findOne", "<", "T", ">", "(", "data", ")", "{", "const", "{", "scope", ",", "query", "}", "=", "data", ";", "return", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "databases", "[", "scope", "]", ".", "findOne", "(", "query", ",", "(", "err", ",", "doc", ")", "=>", "{", "if", "(", "err", ")", "reject", "(", "err", ")", ";", "resolve", "(", "doc", ")", ";", "}", ")", ";", "}", ")", ";", "}", "public", "insert", "<", "T", ">", "(", "data", ")", "{", "const", "{", "scope", ",", "item", "}", "=", "data", ";", "return", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "databases", "[", "scope", "]", ".", "insert", "(", "item", ",", "(", "err", ",", "doc", ")", "=>", "{", "if", "(", "err", ")", "reject", "(", "err", ")", ";", "resolve", "(", "doc", ")", ";", "}", ")", ";", "}", ")", ";", "}", "public", "remove", "(", "data", ")", "{", "const", "{", "scope", ",", "query", ",", "multi", "}", "=", "data", ";", "return", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "databases", "[", "scope", "]", ".", "remove", "(", "query", ",", "{", "multi", "}", ",", "(", "err", ",", "removed", ")", "=>", "{", "if", "(", "err", ")", "reject", "(", "err", ")", ";", "resolve", "(", "removed", ")", ";", "}", ")", ";", "}", ")", ";", "}", "public", "update", "(", "data", ")", "{", "const", "{", "scope", ",", "query", ",", "value", ",", "multi", "}", "=", "data", ";", "return", "new", "Promise", "(", "(", "resolve", ",", "reject", ")", "=>", "{", "this", ".", "databases", "[", "scope", "]", ".", "update", "(", "query", ",", "{", "$set", ":", "value", "}", ",", "{", "multi", "}", ",", "(", "err", ",", "replaced", ")", "=>", "{", "if", "(", "err", ")", "reject", "(", "err", ")", ";", "resolve", "(", "replaced", ")", ";", "}", ")", ";", "}", ")", ";", "}", "public", "run", "(", ")", "{", "for", "(", "const", "key", "in", "this", ".", "databases", ")", "{", "this", ".", "databases", "[", "key", "]", "=", "this", ".", "createDatabase", "(", "key", ".", "toLowerCase", "(", ")", ")", ";", "}", "}", "private", "createDatabase", "=", "(", "name", ")", "=>", "{", "return", "new", "Datastore", "(", "{", "filename", ":", "getPath", "(", "`storage/${", "name", "}.db`", ")", ",", "autoload", ":", "true", ",", "}", ")", ";", "}", ";", "}", "export", "default", "new", "StorageService", "(", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "string", null, "UNK", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "string", null, "UNK", null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainEvent", null, "string", null, "UNK", null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/services/storage.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "storage.ts"}
{"tokens": ["import", "{", "BrowserWindow", ",", "app", "}", "from", "'electron'", ";", "import", "{", "readFileSync", ",", "writeFileSync", "}", "from", "'fs'", ";", "import", "{", "resolve", ",", "join", "}", "from", "'path'", ";", "import", "{", "getPath", "}", "from", "'~/utils'", ";", "import", "{", "runAutoUpdaterService", "}", "from", "'./services/auto-updater'", ";", "import", "{", "runMessagingService", "}", "from", "'./services/messaging'", ";", "import", "storage", "from", "'./services/storage'", ";", "export", "class", "AppWindow", "extends", "BrowserWindow", "{", "public", "constructor", "(", ")", "{", "super", "(", "{", "frame", ":", "false", ",", "minWidth", ":", "400", ",", "minHeight", ":", "450", ",", "width", ":", "900", ",", "height", ":", "700", ",", "show", ":", "true", ",", "titleBarStyle", ":", "'hiddenInset'", ",", "webPreferences", ":", "{", "plugins", ":", "true", ",", "nodeIntegration", ":", "true", ",", "contextIsolation", ":", "false", ",", "experimentalFeatures", ":", "true", ",", "}", ",", "icon", ":", "resolve", "(", "app", ".", "getAppPath", "(", ")", ",", "'static/app-icons/icon.png'", ")", ",", "}", ")", ";", "runAutoUpdaterService", "(", "this", ")", ";", "runMessagingService", "(", "this", ")", ";", "storage", ".", "run", "(", ")", ";", "const", "windowDataPath", "=", "getPath", "(", "'window-data.json'", ")", ";", "let", "windowState", "=", "{", "}", ";", "try", "{", "windowState", "=", "JSON", ".", "parse", "(", "readFileSync", "(", "windowDataPath", ",", "'utf8'", ")", ")", ";", "}", "catch", "(", "e", ")", "{", "writeFileSync", "(", "windowDataPath", ",", "JSON", ".", "stringify", "(", "{", "}", ")", ")", ";", "}", "if", "(", "windowState", ")", "{", "this", ".", "setBounds", "(", "{", "...", "windowState", ".", "bounds", "}", ")", ";", "}", "if", "(", "windowState", ")", "{", "if", "(", "windowState", ".", "maximized", ")", "{", "this", ".", "maximize", "(", ")", ";", "}", "if", "(", "windowState", ".", "fullscreen", ")", "{", "this", ".", "setFullScreen", "(", "true", ")", ";", "}", "}", "this", ".", "on", "(", "'resize'", ",", "(", ")", "=>", "{", "if", "(", "!", "this", ".", "isMaximized", "(", ")", ")", "{", "windowState", ".", "bounds", "=", "this", ".", "getBounds", "(", ")", ";", "}", "}", ")", ";", "this", ".", "on", "(", "'move'", ",", "(", ")", "=>", "{", "if", "(", "!", "this", ".", "isMaximized", "(", ")", ")", "{", "windowState", ".", "bounds", "=", "this", ".", "getBounds", "(", ")", ";", "}", "}", ")", ";", "this", ".", "on", "(", "'close'", ",", "(", ")", "=>", "{", "windowState", ".", "maximized", "=", "this", ".", "isMaximized", "(", ")", ";", "windowState", ".", "fullscreen", "=", "this", ".", "isFullScreen", "(", ")", ";", "writeFileSync", "(", "windowDataPath", ",", "JSON", ".", "stringify", "(", "windowState", ")", ")", ";", "}", ")", ";", "if", "(", "process", ".", "env", ".", "ENV", "===", "'dev'", ")", "{", "this", ".", "webContents", ".", "openDevTools", "(", "{", "mode", ":", "'detach'", "}", ")", ";", "this", ".", "loadURL", "(", "'http://localhost:4444/app.html'", ")", ";", "}", "else", "{", "this", ".", "loadURL", "(", "join", "(", "'file://'", ",", "app", ".", "getAppPath", "(", ")", ",", "'build/app.html'", ")", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/app-window.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "app-window.ts"}
{"tokens": ["import", "{", "Menu", ",", "BrowserWindow", "}", "from", "'electron'", ";", "export", "const", "getMainMenu", "=", "(", "window", ")", "=>", "{", "return", "Menu", ".", "buildFromTemplate", "(", "[", "{", "label", ":", "'Edit'", ",", "submenu", ":", "[", "{", "role", ":", "'undo'", "}", ",", "{", "role", ":", "'redo'", "}", ",", "{", "type", ":", "'separator'", "}", ",", "{", "role", ":", "'cut'", "}", ",", "{", "role", ":", "'copy'", "}", ",", "{", "role", ":", "'paste'", "}", ",", "{", "role", ":", "'pasteAndMatchStyle'", "}", ",", "{", "role", ":", "'delete'", "}", ",", "{", "role", ":", "'selectAll'", "}", ",", "{", "role", ":", "'quit'", "}", ",", "{", "label", ":", "'Reload'", ",", "accelerator", ":", "'CmdOrCtrl+R'", ",", "click", ":", "(", ")", "=>", "{", "if", "(", "process", ".", "env", ".", "ENV", "===", "'dev'", ")", "{", "window", ".", "webContents", ".", "reload", "(", ")", ";", "}", "}", ",", "}", ",", "{", "label", ":", "'Toggle developer tools'", ",", "accelerator", ":", "'CmdOrCtrl+Shift+F12'", ",", "visible", ":", "false", ",", "click", "(", ")", "{", "window", ".", "webContents", ".", "openDevTools", "(", ")", ";", "}", ",", "}", ",", "]", ",", "}", ",", "]", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, "Menu", null, null, "BrowserWindow", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/menus/main.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "main.ts"}
{"tokens": ["import", "{", "ipcMain", ",", "app", ",", "Menu", "}", "from", "'electron'", ";", "import", "{", "platform", "}", "from", "'os'", ";", "import", "{", "config", "}", "from", "'dotenv'", ";", "import", "{", "setPassword", ",", "getPassword", ",", "deletePassword", "}", "from", "'keytar'", ";", "import", "{", "getMainMenu", "}", "from", "'./menus/main'", ";", "import", "{", "AppWindow", "}", "from", "'./app-window'", ";", "app", ".", "name", "=", "'Qusly'", ";", "(", "process", ".", "env", "as", "any", ")", "[", "'ELECTRON_DISABLE_SECURITY_WARNINGS'", "]", "=", "true", ";", "ipcMain", ".", "setMaxListeners", "(", "0", ")", ";", "process", ".", "on", "(", "'uncaughtException'", ",", "error", "=>", "{", "console", ".", "error", "(", "error", ")", ";", "}", ")", ";", "if", "(", "process", ".", "env", ".", "ENV", "===", "'dev'", ")", "{", "config", "(", ")", ";", "}", "let", "appWindow", ";", "app", ".", "on", "(", "'ready'", ",", "(", ")", "=>", "{", "appWindow", "=", "new", "AppWindow", "(", ")", ";", "app", ".", "on", "(", "'window-all-closed'", ",", "(", ")", "=>", "{", "if", "(", "platform", "(", ")", "!==", "'darwin'", ")", "{", "app", ".", "quit", "(", ")", ";", "}", "}", ")", ";", "Menu", ".", "setApplicationMenu", "(", "getMainMenu", "(", "appWindow", ")", ")", ";", "}", ")", ";", "ipcMain", ".", "handle", "(", "'set-password'", ",", "async", "(", "e", ",", "service", ",", "account", ",", "password", ")", "=>", "{", "return", "await", "setPassword", "(", "service", ",", "account", ",", "password", ")", ";", "}", ")", ";", "ipcMain", ".", "handle", "(", "'get-password'", ",", "async", "(", "e", ",", "service", ",", "account", ")", "=>", "{", "return", "await", "getPassword", "(", "service", ",", "account", ")", ";", "}", ")", ";", "ipcMain", ".", "handle", "(", "'delete-password'", ",", "async", "(", "e", ",", "service", ",", "account", ")", "=>", "{", "return", "await", "deletePassword", "(", "service", ",", "account", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Error", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "AppWindow", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainInvokeEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainInvokeEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcMainInvokeEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/main/index.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.ts"}
{"tokens": ["export", "const", "getLetterSpacing", "=", "(", "fontSize", ",", "tracking", ")", "=>", "tracking", "/", "fontSize", ";", "export", "const", "robotoLight", "=", "(", ")", "=>", "`\n  font-family: Roboto;\n  font-weight: 300;\n`", ";", "export", "const", "robotoRegular", "=", "(", ")", "=>", "`\n  font-family: Roboto;\n  font-weight: 400;\n`", ";", "export", "const", "robotoMedium", "=", "(", ")", "=>", "`\n  font-family: Roboto;\n  font-weight: 500;\n`", ";", "export", "const", "h1", "=", "(", ")", "=>", "`\n  ${", "robotoLight", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "96", ",", "-", "1.5", ")", "}rem;\n  font-size: 96px;\n`", ";", "export", "const", "h2", "=", "(", ")", "=>", "`\n  ${", "robotoLight", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "60", ",", "-", "0.5", ")", "}rem;\n  font-size: 60px;\n`", ";", "export", "const", "h3", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "48", ",", "0", ")", "}rem;\n  font-size: 48px;\n`", ";", "export", "const", "h4", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "34", ",", "0.25", ")", "}rem;\n  font-size: 34px;\n`", ";", "export", "const", "h5", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "24", ",", "0", ")", "}rem;\n  font-size: 24px;\n`", ";", "export", "const", "h6", "=", "(", ")", "=>", "`\n  ${", "robotoMedium", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "20", ",", "0.15", ")", "}rem;\n  font-size: 20px;\n`", ";", "export", "const", "subtitle1", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "16", ",", "0.15", ")", "}rem;\n  font-size: 16px;\n`", ";", "export", "const", "subtitle2", "=", "(", ")", "=>", "`\n  ${", "robotoMedium", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "14", ",", "0.1", ")", "}rem;\n  font-size: 14px;\n`", ";", "export", "const", "body1", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "16", ",", "0.5", ")", "}rem;\n  font-size: 16px;\n`", ";", "export", "const", "body2", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "14", ",", "0.25", ")", "}rem;\n  font-size: 14px;\n`", ";", "export", "const", "button", "=", "(", ")", "=>", "`\n  ${", "robotoMedium", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "14", ",", "0.75", ")", "}rem;\n  font-size: 14px;\n`", ";", "export", "const", "caption", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "12", ",", "0.4", ")", "}rem;\n  font-size: 12px;\n`", ";", "export", "const", "overline", "=", "(", ")", "=>", "`\n  ${", "robotoRegular", "(", ")", "};\n  letter-spacing: ${", "getLetterSpacing", "(", "10", ",", "1.5", ")", "}rem;\n  font-size: 10px;\n  text-transform: uppercase;\n`", ";", "export", "const", "maxLines", "=", "(", "count", ",", "lineHeight", "?", ")", "=>", "`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  display: -webkit-box;\n  -webkit-line-clamp: ${", "count", "};\n  -webkit-box-orient: vertical;\n  line-height: ${", "(", "lineHeight", "&&", "`${", "lineHeight", "}px`", ")", "||", "'unset'", "};\n  max-height: ${", "(", "lineHeight", "&&", "`${", "lineHeight", "*", "2", "}px`", ")", "||", "'unset'", "};\n`", ";", "export", "const", "singleLine", "=", "(", ")", "=>", "`\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  overflow: hidden;\n`", ";"], "labels": [null, null, "number", null, null, "number", null, "number", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/mixins/typography.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "typography.ts"}
{"tokens": ["import", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "body2", "}", "from", "'../mixins/typography'", ";", "export", "const", "Style", "=", "css", "`\n  body {\n    width: 100vw;\n    height: 100vh;\n    user-select: none;\n    cursor: default;\n    margin: 0;\n    padding: 0;\n    overflow: hidden;\n    ${", "body2", "(", ")", "};\n  }\n\n  * {\n    box-sizing: border-box;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "FlattenSimpleInterpolation", null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["export", "const", "transparency", "=", "{", "text", ":", "{", "high", ":", "0.87", ",", "medium", ":", "0.6", ",", "disabled", ":", "0.38", ",", "}", ",", "icons", ":", "{", "active", ":", "0.87", ",", "inactive", ":", "0.6", ",", "disabled", ":", "0.38", ",", "}", ",", "dividers", ":", "0.12", ",", "}", ";"], "labels": [null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/constants/transparency.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "transparency.ts"}
{"tokens": ["export", "const", "TITLEBAR_HEIGHT", "=", "32", ";", "export", "const", "TABBAR_HEIGHT", "=", "32", ";", "export", "const", "TOOLBAR_HEIGHT", "=", "42", ";", "export", "const", "TOOLBAR_BUTTON_SIZE", "=", "28", ";", "export", "const", "APPBAR_HEIGHT", "=", "TABBAR_HEIGHT", "+", "TOOLBAR_HEIGHT", ";", "export", "const", "SIDEBAR_HEADER_HEIGHT", "=", "44", ";", "export", "const", "EASING_FUNCTION", "=", "'cubic-bezier(0.4, 0, 0.2, 1)'", ";", "export", "const", "ACTIVITY_BAR_COLOR", "=", "'rgba(0, 0, 0, 0.07)'", ";", "export", "const", "SIDE_BAR_COLOR", "=", "'rgba(0, 0, 0, 0.03)'", ";", "export", "const", "TITLE_BAR_COLOR", "=", "'rgba(0, 0, 0, 0.1)'", ";", "export", "const", "TAB_BAR_COLOR", "=", "'rgba(0, 0, 0, 0.06)'", ";", "export", "const", "TOOLBAR_COLOR", "=", "'#fafafa'", ";", "export", "const", "CONTENT_COLOR", "=", "'#fdfdfd'", ";"], "labels": [null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, null, null, "number", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/constants/design.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "design.ts"}
{"tokens": ["import", "{", "css", "}", "from", "'styled-components'", ";", "export", "const", "centerHorizontal", "=", "(", ")", "=>", "{", "return", "css", "`\n    left: 50%;\n    transform: translateX(-50%);\n  `", ";", "}", ";", "export", "const", "centerBoth", "=", "(", ")", "=>", "{", "return", "css", "`\n    left: 50%;\n    top: 50%;\n    transform: translate(-50%, -50%);\n  `", ";", "}", ";", "export", "const", "centerVertical", "=", "(", ")", "=>", "{", "return", "css", "`\n    top: 50%;\n    transform: translateY(-50%);\n  `", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, "FlattenSimpleInterpolation", null, null, null, null, null, null, null, null, null, null, null, null, null, "FlattenSimpleInterpolation", null, null, null, null, null, null, null, null, null, null, null, null, null, "FlattenSimpleInterpolation", null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/mixins/positioning.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "positioning.ts"}
{"tokens": ["export", "const", "centerIcon", "=", "(", "size", "=", "'contain'", ",", "useMask", "=", "false", ")", "=>", "{", "let", "s", "=", "size", ".", "toString", "(", ")", ";", "if", "(", "typeof", "size", "===", "'number'", ")", "s", "+=", "'px'", ";", "const", "prefix", "=", "!", "useMask", "?", "'background'", ":", "'mask'", ";", "return", "`\n    ${", "prefix", "}-size: ${", "s", "} ${", "size", "===", "'contain'", "?", "''", ":", "'auto'", "};\n    ${", "prefix", "}-position: center;\n    ${", "prefix", "}-repeat: no-repeat;\n`", ";", "}", ";", "export", "const", "customImage", "=", "(", "width", ",", "height", ",", "left", ",", "top", ")", "=>", "`\n    background-size: ${", "width", "} ${", "height", "};\n    background-position: ${", "left", "} ${", "top", "};\n    background-repeat: no-repeat;\n  `", ";", "export", "const", "coverImage", "=", "(", ")", "=>", "`\n    background-size: cover;\n    background-repeat: no-repeat;\n  `", ";"], "labels": [null, null, "string", null, null, null, null, null, null, "boolean", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "string", null, "string", null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/mixins/images.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "images.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "ACTIVITY_BAR_COLOR", "}", "from", "'../../constants/design'", ";", "import", "{", "centerVertical", "}", "from", "'~/renderer/mixins/positioning'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "const", "getIconOpacity", "=", "(", "selected", ",", "disabled", ")", "=>", "{", "if", "(", "disabled", ")", "return", "transparency", ".", "icons", ".", "disabled", ";", "return", "selected", "?", "1", ":", "transparency", ".", "icons", ".", "inactive", ";", "}", ";", "export", "const", "StyledActivitybar", "=", "styled", ".", "div", "`\n  width: 52px;\n  height: 100%;\n  background-color: ${", "ACTIVITY_BAR_COLOR", "};\n`", ";", "interface", "ItemProps", "{", "icon", ":", "string", ";", "selected", ":", "boolean", ";", "disabled", ":", "boolean", ";", "}", "export", "const", "StyledItem", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 48px;\n  cursor: pointer;\n  position: relative;\n\n  ${", "(", "{", "selected", ",", "disabled", ",", "icon", "}", ")", "=>", "css", "`\n    pointer-events: ${", "disabled", "?", "'none'", ":", "'auto'", "};\n\n    &::before {\n      opacity: ${", "selected", "?", "1", ":", "0", "};\n    }\n\n    &::after {\n      opacity: ${", "getIconOpacity", "(", "selected", ",", "disabled", ")", "};\n      background-image: url(${", "icon", "});\n    }\n  `", "}\n\n  &::before {\n    content: '';\n    position: absolute;\n    left: 0px;\n    width: 3px;\n    height: 18px;\n    background-color: #000;\n    ${", "centerVertical", "(", ")", "};\n  }\n\n  &::after {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 100%;\n    ${", "centerIcon", "(", "24", ")", "};\n  }\n\n  &:hover::after {\n    opacity: 1;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, "boolean", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Activitybar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "TITLEBAR_HEIGHT", "}", "from", "'../../constants/design'", ";", "export", "const", "StyledApp", "=", "styled", ".", "div", "`\n  width: 100vw;\n  height: 100vh;\n`", ";", "export", "const", "Container", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: calc(100% - ${", "TITLEBAR_HEIGHT", "}px);\n  display: flex;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/App/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "APPBAR_HEIGHT", "}", "from", "'../../constants/design'", ";", "export", "const", "StyledAppbar", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: ${", "APPBAR_HEIGHT", "}px;\n  box-sizing: content-box;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Appbar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "CONTENT_COLOR", "}", "from", "'../../constants/design'", ";", "export", "const", "StyledContent", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  flex: 1;\n  background-color: ${", "CONTENT_COLOR", "};\n  position: relative;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Content/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "shadows", "}", "from", "'~/renderer/mixins/shadows'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "export", "const", "StyledContextMenu", "=", "styled", ".", "table", "`\n  position: fixed;\n  z-index: 1000;\n  padding: 4px 0px;\n  background-color: #fff;\n  border-radius: 4px;\n  box-shadow: ${", "shadows", "(", "4", ")", "};\n  border-spacing: 0;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    pointer-events: ${", "visible", "?", "'auto'", ":", "'none'", "};\n    opacity: ${", "visible", "?", "1", ":", "0", "};\n    transition: ${", "visible", "?", "'0.15s opacity'", ":", "'unset'", "};\n  `", "}\n`", ";", "export", "const", "Items", "=", "styled", ".", "tbody", "`\n  display: table;\n  border-collapse: collapse;\n  width: 100%;\n`", ";", "export", "interface", "IContextMenuItemProps", "{", "icon", "?", ":", "string", ";", "disabled", "?", ":", "boolean", ";", "iconSize", "?", ":", "number", ";", "hidden", "?", ":", "boolean", ";", "value", "?", ":", "any", ";", "}", "export", "const", "StyledItem", "=", "styled", ".", "tr", "`\n  width: 100%;\n  height: 32px;\n  align-items: center;\n  font-size: 13px;\n  white-space: nowrap;\n\n  ${", "(", "{", "disabled", ",", "hidden", "}", ")", "=>", "css", "`\n    display: ${", "!", "hidden", "?", "'table-row'", ":", "'none'", "};\n    color: ${", "disabled", "?", "`rgba(0, 0, 0, ${", "transparency", ".", "text", ".", "disabled", "})`", ":", "'#000'", "};\n\n    &:hover {\n      background-color: ${", "!", "disabled", "?", "'rgba(0, 0, 0, 0.04)'", ":", "'transparent'", "};\n    }\n  `", "}\n`", ";", "export", "const", "MenuDivider", "=", "styled", ".", "tr", "`\n  width: 100%;\n  height: 9px;\n\n  &:after {\n    content: '';\n    position: absolute;\n    left: 0;\n    right: 0;\n    margin-top: 4px;\n    height: 1px;\n    background-color: rgba(0, 0, 0, ${", "transparency", ".", "dividers", "});\n  }\n`", ";", "export", "const", "Accelerator", "=", "styled", ".", "td", "`\n  opacity: 0.54;\n  font-size: 13px;\n  padding-right: 10px;\n  padding-left: 10px;\n  text-align: right;\n`", ";", "export", "const", "Icon", "=", "styled", ".", "td", "`\n  ${", "(", "{", "icon", ",", "disabled", ",", "iconSize", "}", ")", "=>", "css", "`\n    ${", "icon", "&&", "css", "`\n        width: 20px;\n        height: 20px;\n        opacity: ${", "disabled", "?", "transparency", ".", "icons", ".", "disabled", ":", "0.87", "};\n        background-image: url(${", "icon", "});\n        backface-visibility: hidden;\n        transform: translateZ(0);\n        -webkit-font-smoothing: subpixel-antialiased;\n        ${", "centerIcon", "(", "iconSize", ")", "};\n      `", "}\n  `", "}\n`", ";", "export", "const", "Text", "=", "styled", ".", "td", "`\n  font-size: 13px;\n  padding-left: 10px;\n  padding-right: 10px;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/ContextMenu/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "robotoRegular", "}", "from", "'~/renderer/mixins/typography'", ";", "export", "interface", "IButtonProps", "{", "label", ":", "string", ";", "color", "?", ":", "string", ";", "background", "?", ":", "string", ";", "disabled", "?", ":", "boolean", ";", "type", "?", ":", "'contained'", "|", "'outlined'", ";", "}", "export", "const", "Button", "=", "styled", ".", "div", "`\n  min-width: 80px;\n  width: fit-content;\n  height: 32px;\n  padding: 0px 12px;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n  overflow: hidden;\n  border-radius: 4px;\n  position: relative;\n  cursor: pointer;\n\n  ${", "(", "{", "type", ",", "label", ",", "color", ",", "background", ",", "disabled", "}", ")", "=>", "css", "`\n    pointer-events: ${", "disabled", "?", "'none'", ":", "'inherit'", "};\n    opacity: ${", "disabled", "?", "0.24", ":", "1", "};\n    border: ${", "type", "===", "'outlined'", "?", "`1px solid ${", "background", "||", "'#2196F3'", "}`", ":", "'unset'", "};\n    background-color: ${", "type", "===", "'outlined'", "?", "'transparent'", ":", "background", "||", "'#2196F3'", "};\n\n    &::before {\n      background-color: ${", "color", "||", "'#fff'", "};\n    }\n\n    &::after {\n      content: \"${", "label", "}\";\n      z-index: 1;\n      font-size: 13px;\n      pointer-events: none;\n      color: ${", "color", "||", "'#fff'", "};\n      ${", "robotoRegular", "(", ")", "};\n    }\n  `", "}\n\n  &::before {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 100%;\n    z-index: 0;\n    opacity: 0;\n    position: absolute;\n    will-change: opacity;\n    transition: 0.2s opacity;\n  }\n\n  &:hover::before {\n    opacity: 0.12;\n  }\n\n  &:active::before {\n    opacity: 0.18;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/Button/index.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "Button", "}", "from", "'~/renderer/components/Button'", ";", "import", "{", "shadows", "}", "from", "'~/renderer/mixins/shadows'", ";", "import", "{", "EASING_FUNCTION", "}", "from", "'../../constants/design'", ";", "export", "const", "StyledDialog", "=", "styled", ".", "div", "`\n  width: 100vw;\n  height: 100vh;\n  top: 0;\n  left: 0;\n  position: fixed;\n  z-index: 10;\n  display: flex;\n  align-items: center;\n  justify-content: center;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    pointer-events: ${", "visible", "?", "'auto'", ":", "'none'", "};\n  `", "}\n`", ";", "export", "const", "Dark", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  background-color: rgba(0, 0, 0, 0.54);\n  transition: 0.15s opacity;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    opacity: ${", "visible", "?", "1", ":", "0", "};\n  `", "}\n`", ";", "export", "const", "Container", "=", "styled", ".", "div", "`\n  width: 344px;\n  max-width: 512px;\n  height: fit-content;\n  background-color: #fff;\n  border-radius: 4px;\n  z-index: 11;\n  position: absolute;\n  box-shadow: ${", "shadows", "(", "4", ")", "};\n  transition: 0.15s transform ${", "EASING_FUNCTION", "}, 0.15s opacity;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    opacity: ${", "visible", "?", "1", ":", "0", "};\n    pointer-events: ${", "visible", "?", "'auto'", ":", "'none !important'", "};\n    transform: translateY(${", "visible", "?", "0", ":", "-", "16", "}px);\n  `", "}\n`", ";", "export", "const", "Title", "=", "styled", ".", "div", "`\n  padding: 16px;\n  font-size: 18px;\n`", ";", "export", "const", "Content", "=", "styled", ".", "div", "`\n  padding: 0px 16px 8px;\n  font-size: 14px;\n`", ";", "export", "const", "Buttons", "=", "styled", ".", "div", "`\n  width: 100%;\n  padding: 12px 4px 16px;\n  display: flex;\n`", ";", "export", "const", "DialogButton", "=", "styled", "(", "Button", ")", "`\n  margin-right: 8px;\n\n  &:first-child {\n    margin-left: auto;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Dialog/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "robotoRegular", "}", "from", "'./typography'", ";", "export", "const", "customInput", "=", "(", ")", "=>", "{", "return", "css", "`\n    border: none;\n    outline: none;\n    resize: none;\n    user-select: auto;\n    ${", "robotoRegular", "(", ")", "};\n  `", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "FlattenSimpleInterpolation", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/mixins/input.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "input.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "customInput", "}", "from", "'~/renderer/mixins/input'", ";", "export", "const", "Input", "=", "styled", ".", "input", "`\n  width: 200px;\n  height: 32px;\n  position: relative;\n  border-radius: 4px;\n  user-select: none;\n  display: flex;\n  align-items: center;\n  padding: 0px 8px;\n  background-color: rgba(0, 0, 0, 0.08);\n  color: #000;\n  ${", "customInput", "(", ")", "};\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n\n  &[type='number']::-webkit-inner-spin-button,\n  &[type='number']::-webkit-outer-spin-button {\n    margin: 0;\n    -webkit-appearance: none;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/Input/index.tsx", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.tsx"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "Input", "as", "Textfield", "}", "from", "'~/renderer/components/Input'", ";", "export", "const", "Input", "=", "styled", "(", "Textfield", ")", "`\n  width: 100%;\n\n  &:not(:first-child) {\n    margin-top: 16px;\n  }\n`", ";", "export", "const", "Row", "=", "styled", ".", "div", "`\n  display: flex;\n  margin-top: 16px;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Dialog/DeleteSite/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "shadows", "}", "from", "'~/renderer/mixins/shadows'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "robotoRegular", ",", "robotoMedium", "}", "from", "'~/renderer/mixins/typography'", ";", "export", "const", "StyledThumb", "=", "styled", ".", "div", "`\n  width: fit-content;\n  max-width: 164px;\n  height: 48px;\n  border-radius: 12px;\n  background-color: #fff;\n  align-items: center;\n  padding: 0px 12px;\n  pointer-events: none;\n  position: absolute;\n  justify-content: flex-start;\n  z-index: 1000;\n  box-shadow: ${", "shadows", "(", "4", ")", "};\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    display: ${", "visible", "?", "'flex'", ":", "'none'", "};\n  `", "}\n`", ";", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  min-width: 24px;\n  min-height: 24px;\n  ${", "centerIcon", "(", ")", "};\n\n  ${", "(", "{", "icon", ",", "opacity", "}", ")", "=>", "css", "`\n    background-image: url(${", "icon", "});\n    opacity: ${", "opacity", "};\n  `", "}\n`", ";", "export", "const", "Title", "=", "styled", ".", "div", "`\n  margin-left: 8px;\n  font-size: 13px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n  ${", "robotoRegular", "(", ")", "};\n`", ";", "export", "const", "Count", "=", "styled", ".", "div", "`\n  width: 24px;\n  height: 24px;\n  background-color: #f44336;\n  color: #fff;\n  display: flex;\n  font-size: 13px;\n  align-items: center;\n  justify-content: center;\n  border-radius: 100%;\n  position: absolute;\n  top: -12px;\n  left: calc(100% - 12px);\n  ${", "robotoMedium", "(", ")", "};\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/DragThumb/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["export", "const", "icons", "=", "{", "back", ":", "require", "(", "'~/renderer/resources/icons/back.svg'", ")", ",", "forward", ":", "require", "(", "'~/renderer/resources/icons/forward.svg'", ")", ",", "fileTree", ":", "require", "(", "'~/renderer/resources/icons/file-tree.svg'", ")", ",", "sitesManager", ":", "require", "(", "'~/renderer/resources/icons/sites-manager.svg'", ")", ",", "search", ":", "require", "(", "'~/renderer/resources/icons/search.svg'", ")", ",", "transfer", ":", "require", "(", "'~/renderer/resources/icons/transfer.svg'", ")", ",", "qusly", ":", "require", "(", "'~/renderer/resources/icons/qusly.png'", ")", ",", "close", ":", "require", "(", "'~/renderer/resources/icons/close.svg'", ")", ",", "add", ":", "require", "(", "'~/renderer/resources/icons/add.svg'", ")", ",", "chevronLeft", ":", "require", "(", "'~/renderer/resources/icons/chevron-left.svg'", ")", ",", "chevronRight", ":", "require", "(", "'~/renderer/resources/icons/chevron-right.svg'", ")", ",", "refresh", ":", "require", "(", "'~/renderer/resources/icons/refresh.svg'", ")", ",", "folder", ":", "require", "(", "'~/renderer/resources/icons/folder.svg'", ")", ",", "file", ":", "require", "(", "'~/renderer/resources/icons/file.svg'", ")", ",", "expand", ":", "require", "(", "'~/renderer/resources/icons/expand.svg'", ")", ",", "folderOutline", ":", "require", "(", "'~/renderer/resources/icons/folder-outline.svg'", ")", ",", "openInNew", ":", "require", "(", "'~/renderer/resources/icons/open-in-new.svg'", ")", ",", "bookmark", ":", "require", "(", "'~/renderer/resources/icons/bookmark.svg'", ")", ",", "delete", ":", "require", "(", "'~/renderer/resources/icons/delete.svg'", ")", ",", "cut", ":", "require", "(", "'~/renderer/resources/icons/cut.svg'", ")", ",", "download", ":", "require", "(", "'~/renderer/resources/icons/download.svg'", ")", ",", "downloadOutline", ":", "require", "(", "'~/renderer/resources/icons/download-outline.svg'", ")", ",", "upload", ":", "require", "(", "'~/renderer/resources/icons/upload.svg'", ")", ",", "paste", ":", "require", "(", "'~/renderer/resources/icons/paste.svg'", ")", ",", "edit", ":", "require", "(", "'~/renderer/resources/icons/edit.svg'", ")", ",", "apps", ":", "require", "(", "'~/renderer/resources/icons/apps.svg'", ")", ",", "details", ":", "require", "(", "'~/renderer/resources/icons/details.svg'", ")", ",", "zip", ":", "require", "(", "'~/renderer/resources/icons/zip.svg'", ")", ",", "folderAdd", ":", "require", "(", "'~/renderer/resources/icons/folder-add.svg'", ")", ",", "fileAdd", ":", "require", "(", "'~/renderer/resources/icons/file-add.svg'", ")", ",", "copy", ":", "require", "(", "'~/renderer/resources/icons/copy.svg'", ")", ",", "connect", ":", "require", "(", "'~/renderer/resources/icons/connect.svg'", ")", ",", "folderOpen", ":", "require", "(", "'~/renderer/resources/icons/folder-open.svg'", ")", ",", "}", ";"], "labels": [null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/constants/icons.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "icons.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "customInput", "}", "from", "'~/renderer/mixins/input'", ";", "interface", "Props", "{", "selected", ":", "boolean", ";", "cut", ":", "boolean", ";", "}", "export", "const", "StyledFile", "=", "styled", ".", "div", "`\n  display: flex;\n  align-items: center;\n  flex-direction: column;\n  padding: 0px 16px 8px 16px;\n  position: relative;\n  border-radius: 6px;\n\n  ${", "(", "{", "selected", ",", "cut", "}", ")", "=>", "css", "`\n    background-color: ${", "selected", "?", "'rgba(98, 0, 234, 0.08)'", ":", "'none'", "};\n    opacity: ${", "cut", "?", "0.48", ":", "1", "};\n    border: ${", "selected", "?", "'1px solid rgba(98, 0, 234, 0.12)'", ":", "'1px solid transparent'", "};\n\n    ${", "!", "cut", "&&", "css", "`\n        &:hover {\n          background-color: ${", "selected", "?", "'rgba(98, 0, 234, 0.12)'", ":", "'rgba(0, 0, 0, 0.08)'", "};\n        }\n      `", "}\n  `", "}\n`", ";", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  width: 48px;\n  height: 48px;\n  background-image: url(${", "icons", ".", "folder", "});\n  ${", "centerIcon", "(", "32", ")", "};\n\n  ${", "(", "{", "icon", "}", ")", "=>", "css", "`\n    background-image: url(${", "icon", "});\n  `", "};\n`", ";", "export", "const", "Label", "=", "styled", ".", "div", "`\n  max-width: 100%;\n  margin-top: 8px;\n  font-size: 13px;\n  overflow: hidden;\n  white-space: nowrap;\n  text-overflow: ellipsis;\n`", ";", "export", "const", "Input", "=", "styled", ".", "textarea", "`\n  width: calc(100% + 2px);\n  min-height: calc(100% - 50px);\n  border-radius: 4px;\n  background-color: #fff;\n  z-index: 1;\n  font-size: 13px;\n  color: #000;\n  overflow: hidden;\n  position: absolute;\n  top: 51px;\n  left: -1px;\n  text-align: center;\n  ${", "customInput", "(", ")", "};\n  border: 1px solid #eee;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    display: ${", "visible", "?", "'block'", ":", "'none'", "};\n  `", "}\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/File/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "export", "const", "StyledContainer", "=", "styled", ".", "div", "`\n  display: flex;\n  margin-left: 4px;\n`", ";"], "labels": [null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/NavigationButtons/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "{", "css", "}", "from", "'styled-components'", ";", "interface", "IOptions", "{", "size", "?", ":", "number", ";", "color", "?", ":", "string", ";", "hoverColor", "?", ":", "string", ";", "alwaysVisible", "?", ":", "boolean", ";", "}", "const", "defaultOptions", "=", "{", "size", ":", "6", ",", "alwaysVisible", ":", "true", ",", "color", ":", "'rgba(0, 0, 0, 0.38)'", ",", "hoverColor", ":", "'rgba(0, 0, 0, 0.54)'", ",", "}", ";", "export", "const", "noButtons", "=", "(", "options", "?", ")", "=>", "{", "const", "{", "color", ",", "hoverColor", ",", "size", ",", "alwaysVisible", "}", "=", "{", "...", "defaultOptions", ",", "...", "options", ",", "}", ";", "return", "css", "`\n    &:hover::-webkit-scrollbar-thumb {\n      background-color: ${", "color", "};\n    }\n\n    &::-webkit-scrollbar {\n      width: ${", "size", "}px;\n      height: ${", "size", "}px;\n    }\n\n    &::-webkit-scrollbar-button {\n      width: 0px;\n      height: 0px;\n    }\n\n    &::-webkit-scrollbar-thumb {\n      background-color: ${", "alwaysVisible", "?", "color", ":", "'inherit'", "};\n      border: none;\n      border-radius: 0px;\n      opacity: 0 !important;\n      transition: 2s background-color;\n    }\n\n    &::-webkit-scrollbar-thumb:hover {\n      background-color: ${", "hoverColor", "};\n    }\n\n    &::-webkit-scrollbar-corner {\n      background-color: transparent;\n    }\n  `", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IOptions", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "FlattenSimpleInterpolation", null, null, "IOptions", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/mixins/scroll.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "scroll.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "APPBAR_HEIGHT", "}", "from", "'../../constants/design'", ";", "import", "{", "noButtons", "}", "from", "'~/renderer/mixins/scroll'", ";", "import", "{", "centerBoth", "}", "from", "'~/renderer/mixins/positioning'", ";", "export", "const", "StyledPage", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: calc(100% - ${", "APPBAR_HEIGHT", "}px);\n  position: relative;\n\n  & .selection-container {\n    width: 100%;\n    height: 100%;\n    overflow-x: hidden;\n    overflow-y: auto;\n    padding: 24px;\n    padding-top: 8px;\n    display: grid;\n    grid-gap: 8px;\n    grid-template-rows: 1fr;\n    grid-template-columns: repeat(auto-fill, minmax(96px, 1fr));\n    grid-template-rows: repeat(auto-fill, 82px);\n    position: relative;\n    transition: 0.1s opacity;\n    ${", "noButtons", "(", ")", "};\n  }\n`", ";", "export", "const", "PreloaderContainer", "=", "styled", ".", "div", "`\n  position: absolute;\n  pointer-events: none;\n  transition: 0.1s opacity;\n  ${", "centerBoth", "(", ")", "};\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    opacity: ${", "visible", "?", "1", ":", "0", "};\n  `", "}\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Page/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "robotoRegular", ",", "robotoMedium", "}", "from", "'~/renderer/mixins/typography'", ";", "import", "{", "customInput", "}", "from", "'~/renderer/mixins/input'", ";", "export", "const", "StyledPathView", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 30px;\n  margin-left: 10px;\n  overflow: hidden;\n  cursor: text;\n  position: relative;\n  border-radius: 4px;\n  background-color: rgba(0, 0, 0, 0.03);\n\n  ${", "(", "{", "inputVisible", "}", ")", "=>", "css", "`\n    box-shadow: ${", "inputVisible", "?", "`0 0 0 2px #BBDEFB`", ":", "'none'", "};\n  `", "}\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n`", ";", "export", "const", "Container", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  align-items: center;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    display: ${", "visible", "?", "'flex'", ":", "'none'", "};\n  `", "}\n`", ";", "export", "const", "Item", "=", "styled", ".", "div", "`\n  height: 100%;\n  display: flex;\n  align-items: center;\n  font-size: 14px;\n  font-weight: 300;\n  padding-left: 4px;\n  cursor: pointer;\n  color: rgba(0, 0, 0, 0.54);\n  ${", "robotoRegular", "(", ")", "};\n\n  &:hover {\n    color: #000;\n  }\n\n  &:first-child {\n    padding-left: 12px;\n  }\n\n  &:last-child {\n    color: #000;\n    ${", "robotoMedium", "(", ")", "};\n  }\n\n  &:not(:first-child):not(:last-child):after {\n    content: '/';\n    padding-left: 4px;\n  }\n`", ";", "export", "const", "Input", "=", "styled", ".", "input", "`\n  width: 100%;\n  height: 100%;\n  top: 0;\n  left: 0;\n  position: absolute;\n  padding: 0px 12px;\n  color: #000;\n  ${", "customInput", "(", ")", "};\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    display: ${", "visible", "?", "'block'", ":", "'none'", "};\n    background-color: ${", "visible", "?", "'white'", ":", "'inherit'", "};\n  `", "}\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/PathView/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "SIDE_BAR_COLOR", ",", "SIDEBAR_HEADER_HEIGHT", "}", "from", "'../../constants/design'", ";", "import", "{", "robotoLight", "}", "from", "'~/renderer/mixins/typography'", ";", "import", "{", "noButtons", "}", "from", "'~/renderer/mixins/scroll'", ";", "export", "const", "StyledSidebar", "=", "styled", ".", "div", "`\n  height: 100%;\n  background-color: ${", "SIDE_BAR_COLOR", "};\n  position: relative;\n  z-index: 3;\n`", ";", "export", "const", "StyledPage", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  outline: none;\n  border: none;\n\n  &:focus {\n    box-shadow: inset 0 0 0 2px #bbdefb;\n  }\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    display: ${", "visible", "?", "'block'", ":", "'none'", "};\n  `", "};\n`", ";", "export", "const", "Header", "=", "styled", ".", "div", "`\n  height: ${", "SIDEBAR_HEADER_HEIGHT", "}px;\n  display: flex;\n  align-items: center;\n  padding-left: 16px;\n  padding-right: 8px;\n  font-size: 16px;\n  ${", "robotoLight", "(", ")", "};\n\n  & > .toolbar-button {\n    height: ${", "SIDEBAR_HEADER_HEIGHT", "}px;\n    margin-left: auto;\n    cursor: pointer;\n  }\n`", ";", "export", "const", "Content", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: calc(100% - ${", "SIDEBAR_HEADER_HEIGHT", "}px);\n  overflow-x: hidden;\n  overflow-y: visible;\n  padding-bottom: 8px;\n  ${", "noButtons", "(", "{", "color", ":", "'rgba(0, 0, 0, 0.12)'", ",", "hoverColor", ":", "'rgba(0, 0, 0, 0.32)'", ",", "alwaysVisible", ":", "false", ",", "}", ")", "};\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Sidebar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "robotoRegular", "}", "from", "'~/renderer/mixins/typography'", ";", "export", "const", "StyledItem", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 30px;\n  display: flex;\n  align-items: center;\n  cursor: pointer;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.04);\n  }\n`", ";", "export", "const", "ExpandIcon", "=", "styled", ".", "div", "`\n  min-width: 30px;\n  min-height: 30px;\n  margin-left: 6px;\n  background-image: url(${", "icons", ".", "expand", "});\n  border-radius: 100%;\n  opacity: ${", "transparency", ".", "icons", ".", "inactive", "};\n  display: flex;\n  ${", "centerIcon", "(", "20", ")", "};\n\n  ${", "(", "{", "expanded", "}", ")", "=>", "css", "`\n    transform: ${", "expanded", "?", "'rotate(-90deg)'", ":", "'rotate(0deg)'", "};\n  `", "}\n`", ";", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  min-width: 20px;\n  min-height: 20px;\n  opacity: ${", "transparency", ".", "icons", ".", "inactive", "};\n  ${", "centerIcon", "(", "18", ")", "};\n\n  ${", "(", "{", "expanded", "}", ")", "=>", "css", "`\n    background-image: url(${", "expanded", "?", "icons", ".", "folderOpen", ":", "icons", ".", "folder", "});\n  `", "}\n`", ";", "export", "const", "Label", "=", "styled", ".", "div", "`\n  font-size: 13px;\n  padding: 0px 8px;\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  ${", "robotoRegular", "(", ")", "};\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Sidebar/Explorer/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "singleLine", ",", "robotoMedium", "}", "from", "'~/renderer/mixins/typography'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "export", "const", "StyledSite", "=", "styled", ".", "div", "`\n  width: calc(100% - 16px);\n  height: 52px;\n  padding: 0 8px;\n  display: flex;\n  flex-direction: column;\n  justify-content: center;\n  margin: 0 auto;\n  cursor: pointer;\n  border-radius: 6px;\n  transition: 0.15s background-color;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.04);\n  }\n`", ";", "export", "const", "Label", "=", "styled", ".", "div", "`\n  font-size: 14px;\n  ${", "singleLine", "(", ")", "}\n  ${", "robotoMedium", "(", ")", "};\n`", ";", "export", "const", "Description", "=", "styled", ".", "div", "`\n  font-size: 13px;\n  margin-top: 4px;\n  color: rgba(0, 0, 0, ${", "transparency", ".", "text", ".", "medium", "});\n  ${", "singleLine", "(", ")", "}\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Sidebar/Sites/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "export", "const", "StyledButton", "=", "styled", ".", "div", "`\n  width: calc(100% - 16px);\n  height: 40px;\n  display: flex;\n  align-items: center;\n  margin: 0 auto;\n  cursor: pointer;\n  border-radius: 6px;\n  overflow: hidden;\n  position: relative;\n  transition: 0.15s background-color;\n\n  &:not(:first-child) {\n    margin-top: 6px;\n  }\n\n  ${", "(", "{", "selected", "}", ")", "=>", "css", "`\n    color: ${", "selected", "?", "'#2196F3'", ":", "'#000'", "};\n\n    &::before {\n      opacity: ${", "selected", "?", "0.06", ":", "0", "};\n    }\n  `", "}\n\n  &::before {\n    content: '';\n    display: block;\n    width: 100%;\n    height: 100%;\n    position: absolute;\n    background-color: #2196f3;\n    z-index: 1;\n  }\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.04);\n  }\n`", ";", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  width: 24px;\n  height: 24px;\n  margin: 0px 8px;\n  z-index: 2;\n  ${", "centerIcon", "(", "20", ",", "true", ")", "};\n\n  ${", "(", "{", "icon", ",", "selected", "}", ")", "=>", "css", "`\n    opacity: ${", "selected", "?", "1", ":", "transparency", ".", "icons", ".", "inactive", "};\n    background-color: ${", "selected", "?", "'#2196F3'", ":", "'#000'", "};\n    mask-image: url(${", "icon", "});\n  `", "}\n`", ";", "export", "const", "Label", "=", "styled", ".", "div", "`\n  font-size: 14px;\n  z-index: 2;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Sidebar/Transfer/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "body2", "}", "from", "'~/renderer/mixins/typography'", ";", "interface", "CloseProps", "{", "visible", ":", "boolean", ";", "}", "export", "const", "StyledClose", "=", "styled", ".", "div", "`\n  position: absolute;\n  right: 4px;\n  height: 22px;\n  width: 22px;\n  background-image: url('${", "icons", ".", "close", "}');\n  transition: 0.1s opacity;\n  z-index: 10;\n  ${", "centerIcon", "(", "15", ")", "};\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    opacity: ${", "visible", "?", "transparency", ".", "icons", ".", "inactive", ":", "0", "};\n  `", "}\n  \n  &:hover:after {\n    opacity: 1;\n  }\n\n  &:after {\n    content: '';\n    border-radius: 4px;\n    background-color: rgba(0, 0, 0, 0.08);\n    transition: 0.2s opacity;\n    position: absolute;\n    left: 0;\n    top: 0;\n    bottom: 0;\n    right: 0;\n    opacity: 0;\n  }\n`", ";", "export", "const", "StyledTab", "=", "styled", ".", "div", "`\n  position: absolute;\n  height: 100%;\n  width: 0;\n  left: 0;\n  align-items: center;\n  will-change: width;\n  -webkit-app-region: no-drag;\n  display: flex;\n\n  ${", "(", "{", "selected", "}", ")", "=>", "css", "`\n    z-index: ${", "selected", "?", "2", ":", "1", "};\n  `", "};\n`", ";", "export", "const", "StyledOverlay", "=", "styled", ".", "div", "`\n  position: absolute;\n  top: 0;\n  left: 0;\n  right: 0;\n  bottom: 0;\n  transition: 0.1s opacity;\n  background-color: rgba(0, 0, 0, 0.04);\n\n  ${", "(", "{", "hovered", "}", ")", "=>", "css", "`\n    opacity: ${", "hovered", "?", "1", ":", "0", "};\n  `", "};\n`", ";", "export", "const", "StyledTitle", "=", "styled", ".", "div", "`\n  overflow: hidden;\n  text-overflow: ellipsis;\n  white-space: nowrap;\n  -webkit-font-smoothing: antialiased;\n  backface-visibility: hidden;\n  transform: translateZ(0);\n  ${", "body2", "(", ")", "};\n  font-size: 13px;\n  color: black;\n`", ";", "export", "const", "Subtitle", "=", "styled", "(", "StyledTitle", ")", "`\n  opacity: 0.54;\n  margin-left: 8px;\n`", ";", "interface", "ContentProps", "{", "collapsed", ":", "boolean", ";", "}", "export", "const", "StyledContent", "=", "styled", ".", "div", "`\n  position: absolute;\n  overflow: hidden;\n  z-index: 2;\n  align-items: center;\n  display: flex;\n  margin-left: 12px;\n\n  ${", "(", "{", "collapsed", "}", ")", "=>", "css", "`\n    max-width: calc(100% - ${", "24", "+", "(", "collapsed", "?", "24", ":", "0", ")", "}px);\n  `", "};\n`", ";", "export", "const", "StyledBorder", "=", "styled", ".", "div", "`\n  position: absolute;\n  width: 1px;\n  height: 16px;\n  right: -1px;\n  top: 50%;\n  transform: translateY(-50%);\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    visibility: ${", "visible", "?", "'visible'", ":", "'hidden'", "};\n    background-color: rgba(0, 0, 0, 0.12);\n  `", "};\n`", ";", "export", "const", "TabContainer", "=", "styled", ".", "div", "`\n  position: relative;\n  width: 100%;\n  height: 100%;\n  overflow: hidden;\n  display: flex;\n  align-items: center;\n  backface-visibility: hidden;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Tab/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "TOOLBAR_BUTTON_SIZE", "}", "from", "'~/renderer/app/constants/design'", ";", "interface", "IconProps", "{", "size", ":", "number", ";", "disabled", ":", "boolean", ";", "opacity", ":", "number", ";", "}", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  will-change: background-image;\n  transition: 0.15s background-image;\n  backface-visibility: hidden;\n\n  ${", "(", "{", "size", ",", "disabled", ",", "opacity", "}", ")", "=>", "css", "`\n    ${", "centerIcon", "(", "size", ")", "};\n    opacity: ${", "disabled", "?", "0.25", ":", "opacity", "};\n  `", "};\n`", ";", "export", "const", "Button", "=", "styled", ".", "div", "`\n  width: ${", "TOOLBAR_BUTTON_SIZE", "}px;\n  height: ${", "TOOLBAR_BUTTON_SIZE", "}px;\n  position: relative;\n  transition: 0.2s background-color;\n  backface-visibility: hidden;\n\n  ${", "(", "{", "disabled", "}", ")", "=>", "css", "`\n    pointer-events: ${", "disabled", "?", "'none'", ":", "'inherit'", "};\n  `", "};\n`", ";", "export", "const", "Circle", "=", "styled", ".", "div", "`\n  border-radius: 4px;\n  width: ${", "TOOLBAR_BUTTON_SIZE", "}px;\n  height: ${", "TOOLBAR_BUTTON_SIZE", "}px;\n  position: absolute;\n  top: 50%;\n  left: 50%;\n  transform: translate(-50%, -50%);\n  overflow: hidden;\n  transition: 0.2s background-color;\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.05);\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/ToolbarButton/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "*", "as", "React", "from", "'react'", ";", "import", "{", "observer", "}", "from", "'mobx-react-lite'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "Button", ",", "Icon", ",", "Circle", "}", "from", "'./style'", ";", "interface", "Props", "{", "onClick", "?", ":", "(", "e", "?", ":", "React", ".", "SyntheticEvent", "<", "HTMLDivElement", ">", ")", "=>", "void", ";", "onMouseDown", "?", ":", "(", "e", "?", ":", "React", ".", "SyntheticEvent", "<", "HTMLDivElement", ">", ")", "=>", "void", ";", "size", "?", ":", "number", ";", "style", "?", ":", "any", ";", "icon", ":", "string", ";", "divRef", "?", ":", "(", "ref", ":", "HTMLDivElement", ")", "=>", "void", ";", "disabled", "?", ":", "boolean", ";", "className", "?", ":", "string", ";", "children", "?", ":", "any", ";", "opacity", "?", ":", "number", ";", "}", "export", "const", "ToolbarButton", "=", "observer", "(", "(", "{", "icon", ",", "onClick", ",", "onMouseDown", ",", "size", ",", "disabled", ",", "className", ",", "divRef", ",", "children", ",", "opacity", ",", "style", ",", "}", ")", "=>", "{", "style", "=", "{", "...", "style", "}", ";", "return", "(", "<", "Button", "onClick", "=", "{", "onClick", "}", "onMouseDown", "=", "{", "onMouseDown", "}", "className", "=", "{", "'toolbar-button '", "+", "(", "className", "||", "''", ")", "}", "style", "=", "{", "style", "}", "ref", "=", "{", "(", "r", ")", "=>", "{", "if", "(", "typeof", "divRef", "===", "'function'", ")", "{", "divRef", "(", "r", ")", ";", "}", "}", "}", "disabled", "=", "{", "disabled", "}", ">", "<", "Icon", "style", "=", "{", "{", "backgroundImage", ":", "`url(${", "icon", "})`", "}", "}", "size", "=", "{", "size", "}", "disabled", "=", "{", "disabled", "}", "opacity", "=", "{", "opacity", "}", "/", ">", "<", "Circle", ">", "<", "/Circle>", "{", "children", "}", "<", "/Button>);", "}", ")", ";", "(", "ToolbarButton", "as", "any", ")", ".", "defaultProps", "=", "{", "size", ":", "20", ",", "opacity", ":", "transparency", ".", "icons", ".", "inactive", ",", "autoInvert", ":", "true", ",", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "FunctionComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/ToolbarButton/index.tsx", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.tsx"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "ToolbarButton", "}", "from", "'~/renderer/components/ToolbarButton'", ";", "import", "{", "TABBAR_HEIGHT", ",", "TAB_BAR_COLOR", ",", "TOOLBAR_BUTTON_SIZE", ",", "}", "from", "'../../constants/design'", ";", "export", "const", "StyledTabbar", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: ${", "TABBAR_HEIGHT", "}px;\n  position: relative;\n  overflow: hidden;\n  display: flex;\n  z-index: 2;\n  background-color: ${", "TAB_BAR_COLOR", "};\n  transition: 0.3s opacity, 0.3s transform;\n`", ";", "export", "const", "TabsContainer", "=", "styled", ".", "div", "`\n  height: 100%;\n  width: calc(100% - ${", "TOOLBAR_BUTTON_SIZE", "}px);\n  bottom: 0;\n  position: absolute;\n  overflow: hidden;\n  white-space: nowrap;\n  display: flex;\n  align-items: center;\n`", ";", "export", "const", "AddTab", "=", "styled", "(", "ToolbarButton", ")", "`\n  height: ${", "TABBAR_HEIGHT", "}px;\n  position: absolute;\n  left: 0;\n  bottom: 0;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Tabbar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "TITLEBAR_HEIGHT", ",", "TITLE_BAR_COLOR", "}", "from", "'../../constants/design'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "export", "const", "StyledTitlebar", "=", "styled", ".", "div", "`\n  height: ${", "TITLEBAR_HEIGHT", "}px;\n  display: flex;\n  position: relative;\n  align-items: center;\n  justify-content: space-between;\n  background-color: ${", "TITLE_BAR_COLOR", "};\n`", ";", "export", "const", "Title", "=", "styled", ".", "div", "`\n  font-size: 12px;\n  position: absolute;\n  left: 50%;\n  transform: translateX(-50%);\n`", ";", "export", "const", "Handle", "=", "styled", ".", "div", "`\n  position: absolute;\n  left: 3px;\n  top: 3px;\n  bottom: 0px;\n  right: 3px;\n  -webkit-app-region: drag;\n`", ";", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  width: 18px;\n  height: 18px;\n  margin-left: 8px;\n  background-image: url(${", "icons", ".", "qusly", "});\n  ${", "centerIcon", "(", ")", "};\n`", ";", "export", "const", "TrafficButtons", "=", "styled", ".", "div", "`\n  width: 72px;\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Titlebar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "TOOLBAR_HEIGHT", ",", "TOOLBAR_COLOR", "}", "from", "'../../constants/design'", ";", "export", "const", "StyledToolbar", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: ${", "TOOLBAR_HEIGHT", "}px;\n  position: relative;\n  display: flex;\n  flex-flow: row;\n  align-items: center;\n  padding-right: 24px;\n  background-color: ${", "TOOLBAR_COLOR", "};\n`", ";", "export", "const", "Search", "=", "styled", ".", "div", "`\n  width: 300px;\n  height: 32px;\n  border-radius: 32px;\n  display: flex;\n  align-items: center;\n  overflow: hidden;\n  margin-left: 16px;\n  padding-left: 8px;\n  border: 1px solid rgba(0, 0, 0, 0.12);\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/Toolbar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "export", "const", "StyledTransfer", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  position: absolute;\n  top: 0;\n  left: 0;\n  background-color: #fff;\n  z-index: 2;\n  overflow-y: auto;\n`", ";"], "labels": [null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/TransferOverlay/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "singleLine", ",", "robotoMedium", "}", "from", "'~/renderer/mixins/typography'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "export", "const", "StyledItem", "=", "styled", ".", "div", "`\n  width: 100%;\n  border: 1px solid rgba(0, 0, 0, ${", "transparency", ".", "dividers", "});\n  border-radius: 6px;\n  margin-top: 12px;\n  display: flex;\n  align-items: center;\n  position: relative;\n`", ";", "export", "const", "Icon", "=", "styled", ".", "div", "`\n  min-width: 80px;\n  height: 32px;\n  ${", "centerIcon", "(", "32", ")", "};\n\n  ${", "(", "{", "icon", ",", "opacity", "}", ")", "=>", "css", "`\n    background-image: url(${", "icon", "});\n    opacity: ${", "opacity", "};\n  `", "}\n`", ";", "export", "const", "Container", "=", "styled", ".", "div", "`\n  width: 100%;\n  height: 100%;\n  padding: 12px 32px 12px 16px;\n  display: flex;\n  flex-direction: column;\n  overflow: hidden;\n  border-left: 1px solid rgba(0, 0, 0, ${", "transparency", ".", "dividers", "});\n`", ";", "export", "const", "Name", "=", "styled", ".", "div", "`\n  font-size: 14px;\n  ${", "singleLine", "(", ")", "};\n  ${", "robotoMedium", "(", ")", "};\n`", ";", "export", "const", "Label", "=", "styled", ".", "div", "`\n  font-size: 14px;\n  margin-top: 6px;\n  color: rgba(0, 0, 0, ${", "transparency", ".", "text", ".", "medium", "});\n  ${", "singleLine", "(", ")", "};\n`", ";", "export", "const", "Show", "=", "styled", "(", "Label", ")", "`\n  margin-top: 8px;\n  color: #2196f3;\n  cursor: pointer;\n`", ";", "export", "const", "Buttons", "=", "styled", ".", "div", "`\n  display: flex;\n  margin-top: 16px;\n\n  & > *:not(:first-child) {\n    margin-left: 12px;\n  }\n`", ";", "export", "const", "Close", "=", "styled", ".", "div", "`\n  width: 24px;\n  height: 24px;\n  cursor: pointer;\n  background-image: url(${", "icons", ".", "close", "});\n  opacity: ${", "transparency", ".", "icons", ".", "inactive", "};\n  position: absolute;\n  top: 8px;\n  right: 8px;\n  ${", "centerIcon", "(", "16", ")", "};\n\n  &:hover {\n    opacity: 1;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/TransferOverlay/Item/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "styled", "from", "'styled-components'", ";", "import", "{", "robotoLight", "}", "from", "'~/renderer/mixins/typography'", ";", "export", "const", "StyledSection", "=", "styled", ".", "div", "`\n  width: 100%;\n  max-width: 640px;\n  padding: 0px 16px;\n  margin: 16px auto 0px;\n`", ";", "export", "const", "Title", "=", "styled", ".", "div", "`\n  font-size: 20px;\n  color: #000;\n  padding-bottom: 4px;\n  ${", "robotoLight", "(", ")", "};\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/components/TransferOverlay/Section/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "store", "from", "'./'", ";", "export", "class", "AddTabStore", "{", "public", "left", "=", "0", ";", "public", "ref", ":", "HTMLDivElement", ";", "public", "setLeft", "(", "left", ",", "animation", ")", "{", "store", ".", "tabs", ".", "animateProperty", "(", "'x'", ",", "this", ".", "ref", ",", "left", ",", "animation", ")", ";", "this", ".", "left", "=", "left", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/add-tab.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "add-tab.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "export", "const", "Root", "=", "styled", ".", "div", "`\n  position: absolute;\n  height: 3px;\n  bottom: 0;\n  left: 0;\n  z-index: 10;\n  width: 100%;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    display: ${", "visible", "?", "'block'", ":", "'none'", "};\n  `", "};\n`", ";", "export", "const", "Thumb", "=", "styled", ".", "div", "`\n  height: 100%;\n  top: 0;\n  left: 0;\n  position: absolute;\n  background-color: black;\n  transition: 0.2s opacity;\n  -webkit-app-region: no-drag;\n\n  ${", "(", "{", "visible", "}", ")", "=>", "css", "`\n    opacity: ${", "visible", "?", "0.2", ":", "0", "};\n  `", "}\n\n  &:hover {\n    opacity: 0.4;\n  }\n\n  &:active {\n    opacity: 0.4;\n  }\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/HorizontalScrollbar/style.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "style.ts"}
{"tokens": ["import", "*", "as", "React", "from", "'react'", ";", "import", "{", "Root", ",", "Thumb", "}", "from", "'./style'", ";", "interface", "Props", "{", "getContainer", ":", "(", ")", "=>", "HTMLDivElement", ";", "visible", ":", "boolean", ";", "enabled", ":", "boolean", ";", "}", "interface", "State", "{", "visible", ":", "boolean", ";", "thumbWidth", ":", "number", ";", "thumbLeft", ":", "number", ";", "}", "export", "default", "class", "HorizontalScrollbar", "extends", "React", ".", "Component", "<", "Props", ",", "State", ">", "{", "public", "state", ":", "State", "=", "{", "visible", ":", "false", ",", "thumbWidth", ":", "0", ",", "thumbLeft", ":", "0", ",", "}", ";", "private", "scrollData", "=", "{", "dragging", ":", "false", ",", "mouseStartX", ":", "0", ",", "startLeft", ":", "0", ",", "}", ";", "private", "container", ":", "HTMLDivElement", ";", "private", "isScrollingToEnd", "=", "false", ";", "private", "scrollTimeout", ":", "any", ";", "private", "unmounted", "=", "false", ";", "public", "componentDidMount", "(", ")", "{", "this", ".", "container", "=", "this", ".", "props", ".", "getContainer", "(", ")", ";", "window", ".", "addEventListener", "(", "'mouseup'", ",", "this", ".", "onMouseUp", ")", ";", "window", ".", "addEventListener", "(", "'mousemove'", ",", "this", ".", "onMouseMove", ")", ";", "this", ".", "container", ".", "addEventListener", "(", "'wheel'", ",", "this", ".", "onWheel", ")", ";", "this", ".", "unmounted", "=", "false", ";", "this", ".", "resizeScrollbar", "(", ")", ";", "}", "public", "componentWillUnmount", "(", ")", "{", "window", ".", "removeEventListener", "(", "'mouseup'", ",", "this", ".", "onMouseUp", ")", ";", "window", ".", "removeEventListener", "(", "'mousemove'", ",", "this", ".", "onMouseMove", ")", ";", "this", ".", "container", ".", "removeEventListener", "(", "'wheel'", ",", "this", ".", "onWheel", ")", ";", "this", ".", "unmounted", "=", "true", ";", "}", "public", "shouldComponentUpdate", "(", "nextProps", ",", "nextState", ")", "{", "if", "(", "this", ".", "state", ".", "visible", "!==", "nextState", ".", "visible", "||", "this", ".", "props", ".", "enabled", "!==", "nextProps", ".", "enabled", ")", "{", "return", "true", ";", "}", "if", "(", "nextState", ".", "visible", "&&", "this", ".", "props", ".", "visible", "!==", "nextProps", ".", "visible", ")", "{", "return", "true", ";", "}", "if", "(", "nextProps", ".", "visible", "&&", "nextState", ".", "visible", ")", "{", "if", "(", "this", ".", "state", ".", "thumbLeft", "!==", "nextState", ".", "thumbLeft", "||", "this", ".", "state", ".", "thumbWidth", "!==", "nextState", ".", "thumbWidth", ")", "{", "return", "true", ";", "}", "}", "return", "false", ";", "}", "public", "resizeScrollbar", "=", "(", ")", "=>", "{", "if", "(", "this", ".", "props", "&&", "this", ".", "container", ")", "{", "if", "(", "this", ".", "unmounted", ")", "return", ";", "const", "{", "scrollWidth", ",", "offsetWidth", ",", "scrollLeft", "}", "=", "this", ".", "container", ";", "this", ".", "setState", "(", "(", "{", "thumbWidth", "}", ")", "=>", "{", "if", "(", "Number", ".", "isNaN", "(", "thumbWidth", ")", ")", "{", "return", "{", "thumbLeft", ":", "0", ",", "thumbWidth", ":", "0", ",", "visible", ":", "false", "}", ";", "}", "return", "{", "thumbLeft", ":", "(", "scrollLeft", "/", "scrollWidth", ")", "*", "offsetWidth", ",", "thumbWidth", ":", "offsetWidth", "**", "2", "/", "scrollWidth", ",", "visible", ":", "Math", ".", "ceil", "(", "thumbWidth", ")", "!==", "Math", ".", "ceil", "(", "offsetWidth", ")", ",", "}", ";", "}", ")", ";", "requestAnimationFrame", "(", "this", ".", "resizeScrollbar", ")", ";", "}", "}", ";", "public", "onWheel", "=", "(", "e", ")", "=>", "{", "if", "(", "!", "this", ".", "container", ")", "return", ";", "const", "{", "deltaX", ",", "deltaY", "}", "=", "e", ";", "const", "{", "scrollLeft", "}", "=", "this", ".", "container", ";", "const", "delta", "=", "Math", ".", "abs", "(", "deltaX", ")", ">=", "Math", ".", "abs", "(", "deltaY", ")", "?", "deltaX", ":", "-", "deltaY", ";", "const", "target", "=", "delta", "/", "2", ";", "this", ".", "isScrollingToEnd", "=", "false", ";", "this", ".", "container", ".", "scrollLeft", "=", "scrollLeft", "+", "target", ";", "}", ";", "public", "onMouseUp", "=", "(", ")", "=>", "{", "this", ".", "scrollData", "=", "{", "...", "this", ".", "scrollData", ",", "dragging", ":", "false", ",", "}", ";", "}", ";", "public", "onMouseMove", "=", "(", "e", ")", "=>", "{", "if", "(", "this", ".", "scrollData", ".", "dragging", "&&", "this", ".", "container", ")", "{", "const", "{", "startLeft", ",", "mouseStartX", "}", "=", "this", ".", "scrollData", ";", "const", "{", "offsetWidth", ",", "scrollWidth", "}", "=", "this", ".", "container", ";", "this", ".", "container", ".", "scrollLeft", "=", "(", "(", "startLeft", "+", "e", ".", "pageX", "-", "mouseStartX", ")", "/", "offsetWidth", ")", "*", "scrollWidth", ";", "}", "}", ";", "public", "onMouseDown", "=", "(", "e", ")", "=>", "{", "this", ".", "isScrollingToEnd", "=", "false", ";", "this", ".", "scrollData", "=", "{", "...", "this", ".", "scrollData", ",", "dragging", ":", "true", ",", "mouseStartX", ":", "e", ".", "pageX", ",", "startLeft", ":", "this", ".", "state", ".", "thumbLeft", ",", "}", ";", "}", ";", "public", "scrollToEnd", "=", "(", "milliseconds", ")", "=>", "{", "if", "(", "!", "this", ".", "props", ".", "enabled", ")", "return", ";", "const", "frame", "=", "(", ")", "=>", "{", "if", "(", "!", "this", ".", "isScrollingToEnd", ")", "return", ";", "this", ".", "container", ".", "scrollLeft", "=", "this", ".", "container", ".", "scrollWidth", ";", "requestAnimationFrame", "(", "frame", ")", ";", "}", ";", "if", "(", "!", "this", ".", "isScrollingToEnd", ")", "{", "this", ".", "isScrollingToEnd", "=", "true", ";", "frame", "(", ")", ";", "}", "clearTimeout", "(", "this", ".", "scrollTimeout", ")", ";", "this", ".", "scrollTimeout", "=", "setTimeout", "(", "(", ")", "=>", "{", "this", ".", "isScrollingToEnd", "=", "false", ";", "}", ",", "milliseconds", ")", ";", "}", ";", "public", "render", "(", ")", "{", "const", "{", "visible", ",", "thumbWidth", ",", "thumbLeft", "}", "=", "this", ".", "state", ";", "const", "{", "enabled", "}", "=", "this", ".", "props", ";", "return", "(", "<", "Root", "visible", "=", "{", "visible", "&&", "enabled", "}", ">", "<", "Thumb", "style", "=", "{", "{", "width", ":", "thumbWidth", ",", "left", ":", "thumbLeft", ",", "}", "}", "visible", "=", "{", "this", ".", "props", ".", "visible", "}", "onMouseDown", "=", "{", "this", ".", "onMouseDown", "}", "/", ">", "<", "/Root>);", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "Props", null, "State", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "React.MouseEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Element", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/HorizontalScrollbar/index.tsx", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.tsx"}
{"tokens": ["import", "{", "ipcRenderer", "}", "from", "'electron'", ";", "import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "*", "as", "React", "from", "'react'", ";", "import", "{", "TweenLite", "}", "from", "'gsap'", ";", "import", "store", "from", "'.'", ";", "import", "{", "makeId", "}", "from", "'~/utils'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "HorizontalScrollbar", "from", "'~/renderer/components/HorizontalScrollbar'", ";", "import", "{", "Tab", "}", "from", "'../models/tab'", ";", "import", "{", "defaultTabOptions", ",", "TAB_ANIMATION_DURATION", ",", "TABS_PADDING", ",", "ADD_TAB_MARGIN_LEFT", ",", "TAB_ANIMATION_EASING", ",", "}", "from", "'../constants/tabs'", ";", "export", "class", "TabsStore", "{", "@", "observable", "public", "isDragging", "=", "false", ";", "@", "observable", "public", "scrollbarVisible", "=", "false", ";", "@", "observable", "public", "hoveredTabId", ":", "number", ";", "@", "observable", "public", "list", ":", "Tab", "[", "]", "=", "[", "]", ";", "@", "observable", "public", "scrollable", "=", "false", ";", "@", "observable", "public", "selectedTabId", "=", "0", ";", "public", "removedTabs", "=", "0", ";", "public", "lastScrollLeft", "=", "0", ";", "public", "lastMouseX", "=", "0", ";", "public", "mouseStartX", "=", "0", ";", "public", "tabStartX", "=", "0", ";", "public", "scrollbarRef", "=", "React", ".", "createRef", "<", "HorizontalScrollbar", ">", "(", ")", ";", "public", "containerRef", "=", "React", ".", "createRef", "<", "HTMLDivElement", ">", "(", ")", ";", "private", "rearrangeTabsTimer", "=", "{", "canReset", ":", "false", ",", "time", ":", "0", ",", "interval", ":", "null", "as", "any", ",", "}", ";", "constructor", "(", ")", "{", "window", ".", "addEventListener", "(", "'mouseup'", ",", "this", ".", "onMouseUp", ")", ";", "window", ".", "addEventListener", "(", "'mousemove'", ",", "this", ".", "onMouseMove", ")", ";", "window", ".", "addEventListener", "(", "'resize'", ",", "this", ".", "onResize", ")", ";", "this", ".", "rearrangeTabsTimer", ".", "interval", "=", "setInterval", "(", "(", ")", "=>", "{", "if", "(", "this", ".", "rearrangeTabsTimer", ".", "canReset", "&&", "this", ".", "rearrangeTabsTimer", ".", "time", "===", "3", ")", "{", "this", ".", "removedTabs", "=", "0", ";", "this", ".", "updateTabsBounds", "(", "true", ")", ";", "this", ".", "rearrangeTabsTimer", ".", "canReset", "=", "false", ";", "}", "this", ".", "rearrangeTabsTimer", ".", "time", "++", ";", "}", ",", "1000", ")", ";", "if", "(", "process", ".", "env", ".", "ENV", "===", "'dev'", ")", "{", "requestAnimationFrame", "(", "(", ")", "=>", "{", "if", "(", "!", "this", ".", "list", ".", "length", ")", "{", "const", "id", "=", "makeId", "(", "32", ")", ";", "ipcRenderer", ".", "once", "(", "`get-testing-site-${", "id", "}`", ",", "(", "e", ",", "site", ")", "=>", "{", "if", "(", "site", ")", "this", ".", "addTab", "(", "{", "site", ",", "active", ":", "true", "}", ")", ";", "}", ")", ";", "ipcRenderer", ".", "send", "(", "'get-testing-site'", ",", "id", ")", ";", "}", "}", ")", ";", "}", "}", "public", "resetRearrangeTabsTimer", "(", ")", "{", "this", ".", "rearrangeTabsTimer", ".", "time", "=", "0", ";", "this", ".", "rearrangeTabsTimer", ".", "canReset", "=", "true", ";", "}", "@", "action", "public", "onResize", "=", "(", "e", ")", "=>", "{", "if", "(", "e", ".", "isTrusted", ")", "{", "this", ".", "removedTabs", "=", "0", ";", "this", ".", "updateTabsBounds", "(", "false", ")", ";", "}", "}", ";", "public", "get", "containerWidth", "(", ")", "{", "if", "(", "this", ".", "containerRef", ".", "current", ")", "{", "return", "this", ".", "containerRef", ".", "current", ".", "offsetWidth", ";", "}", "return", "0", ";", "}", "public", "get", "selectedTab", "(", ")", "{", "return", "this", ".", "getTabById", "(", "this", ".", "selectedTabId", ")", ";", "}", "public", "get", "hoveredTab", "(", ")", "{", "return", "this", ".", "getTabById", "(", "this", ".", "hoveredTabId", ")", ";", "}", "public", "getTabById", "(", "id", ")", "{", "return", "this", ".", "list", ".", "find", "(", "x", "=>", "x", ".", "id", "===", "id", ")", ";", "}", "@", "action", "public", "addTab", "(", "options", "=", "defaultTabOptions", ")", "{", "this", ".", "removedTabs", "=", "0", ";", "const", "tab", "=", "new", "Tab", "(", "options", ")", ";", "if", "(", "options", ".", "index", "!==", "undefined", ")", "{", "this", ".", "list", ".", "splice", "(", "options", ".", "index", ",", "0", ",", "tab", ")", ";", "}", "else", "{", "this", ".", "list", ".", "push", "(", "tab", ")", ";", "}", "if", "(", "options", ".", "site", ")", "{", "store", ".", "pages", ".", "add", "(", "options", ".", "site", ",", "tab", ",", "options", ".", "path", ")", ";", "}", "requestAnimationFrame", "(", "(", ")", "=>", "{", "tab", ".", "setLeft", "(", "tab", ".", "getLeft", "(", ")", ",", "false", ")", ";", "this", ".", "updateTabsBounds", "(", "true", ")", ";", "this", ".", "scrollbarRef", ".", "current", ".", "scrollToEnd", "(", "TAB_ANIMATION_DURATION", "*", "1000", ")", ";", "}", ")", ";", "return", "tab", ";", "}", "public", "removeTab", "(", "id", ")", "{", "(", "this", ".", "list", "as", "any", ")", ".", "remove", "(", "this", ".", "getTabById", "(", "id", ")", ")", ";", "}", "@", "action", "public", "updateTabsBounds", "(", "animation", ")", "{", "this", ".", "setTabsWidths", "(", "animation", ")", ";", "this", ".", "setTabsLefts", "(", "animation", ")", ";", "}", "@", "action", "public", "setTabsWidths", "(", "animation", ")", "{", "const", "tabs", "=", "this", ".", "list", ".", "filter", "(", "x", "=>", "!", "x", ".", "isClosing", ")", ";", "const", "containerWidth", "=", "this", ".", "containerWidth", ";", "for", "(", "const", "tab", "of", "tabs", ")", "{", "const", "width", "=", "tab", ".", "getWidth", "(", "containerWidth", ",", "tabs", ")", ";", "tab", ".", "setWidth", "(", "width", ",", "animation", ")", ";", "this", ".", "scrollable", "=", "width", "===", "72", ";", "}", "}", "@", "action", "public", "setTabsLefts", "(", "animation", ")", "{", "const", "tabs", "=", "this", ".", "list", ".", "filter", "(", "x", "=>", "!", "x", ".", "isClosing", ")", ";", "let", "left", "=", "0", ";", "for", "(", "const", "tab", "of", "tabs", ")", "{", "tab", ".", "setLeft", "(", "left", ",", "animation", ")", ";", "left", "+=", "tab", ".", "width", "+", "TABS_PADDING", ";", "}", "store", ".", "addTab", ".", "setLeft", "(", "Math", ".", "min", "(", "left", "+", "ADD_TAB_MARGIN_LEFT", ",", "this", ".", "containerWidth", "+", "TABS_PADDING", "+", "ADD_TAB_MARGIN_LEFT", ")", ",", "animation", ")", ";", "}", "@", "action", "public", "replaceTab", "(", "firstTab", ",", "secondTab", ")", "{", "secondTab", ".", "setLeft", "(", "firstTab", ".", "getLeft", "(", "true", ")", ",", "true", ")", ";", "const", "index", "=", "this", ".", "list", ".", "indexOf", "(", "secondTab", ")", ";", "this", ".", "list", "[", "this", ".", "list", ".", "indexOf", "(", "firstTab", ")", "]", "=", "secondTab", ";", "this", ".", "list", "[", "index", "]", "=", "firstTab", ";", "}", "public", "getTabsToReplace", "(", "callingTab", ",", "direction", ")", "{", "const", "tabs", "=", "this", ".", "list", ";", "const", "index", "=", "tabs", ".", "indexOf", "(", "callingTab", ")", ";", "if", "(", "direction", "===", "'left'", ")", "{", "for", "(", "let", "i", "=", "index", "-", "1", ";", "i", ">=", "0", ";", "i", "--", ")", "{", "const", "tab", "=", "tabs", "[", "i", "]", ";", "if", "(", "callingTab", ".", "left", "<=", "tab", ".", "width", "/", "2", "+", "tab", ".", "left", ")", "{", "this", ".", "replaceTab", "(", "tabs", "[", "i", "+", "1", "]", ",", "tab", ")", ";", "}", "else", "{", "break", ";", "}", "}", "}", "else", "if", "(", "direction", "===", "'right'", ")", "{", "for", "(", "let", "i", "=", "index", "+", "1", ";", "i", "<", "tabs", ".", "length", ";", "i", "++", ")", "{", "const", "tab", "=", "tabs", "[", "i", "]", ";", "if", "(", "callingTab", ".", "left", "+", "callingTab", ".", "width", ">=", "tab", ".", "width", "/", "2", "+", "tab", ".", "left", ")", "{", "this", ".", "replaceTab", "(", "tabs", "[", "i", "-", "1", "]", ",", "tab", ")", ";", "}", "else", "{", "break", ";", "}", "}", "}", "}", "@", "action", "public", "onMouseUp", "=", "(", ")", "=>", "{", "const", "selectedTab", "=", "this", ".", "selectedTab", ";", "this", ".", "isDragging", "=", "false", ";", "this", ".", "setTabsLefts", "(", "true", ")", ";", "if", "(", "selectedTab", ")", "{", "selectedTab", ".", "isDragging", "=", "false", ";", "}", "}", ";", "@", "action", "public", "onMouseMove", "=", "(", "e", ")", "=>", "{", "const", "{", "selectedTab", "}", "=", "store", ".", "tabs", ";", "if", "(", "this", ".", "isDragging", ")", "{", "const", "container", "=", "this", ".", "containerRef", ";", "const", "{", "tabStartX", ",", "mouseStartX", ",", "lastMouseX", ",", "lastScrollLeft", "}", "=", "store", ".", "tabs", ";", "if", "(", "Math", ".", "abs", "(", "e", ".", "pageX", "-", "mouseStartX", ")", "<", "5", ")", "{", "return", ";", "}", "selectedTab", ".", "isDragging", "=", "true", ";", "const", "newLeft", "=", "tabStartX", "+", "e", ".", "pageX", "-", "mouseStartX", "-", "(", "lastScrollLeft", "-", "container", ".", "current", ".", "scrollLeft", ")", ";", "let", "left", "=", "Math", ".", "max", "(", "0", ",", "newLeft", ")", ";", "if", "(", "newLeft", "+", "selectedTab", ".", "width", ">", "store", ".", "addTab", ".", "left", "+", "container", ".", "current", ".", "scrollLeft", "-", "TABS_PADDING", ")", "{", "left", "=", "store", ".", "addTab", ".", "left", "-", "selectedTab", ".", "width", "+", "lastScrollLeft", "-", "TABS_PADDING", ";", "}", "selectedTab", ".", "setLeft", "(", "left", ",", "false", ")", ";", "this", ".", "getTabsToReplace", "(", "selectedTab", ",", "lastMouseX", "-", "e", ".", "pageX", ">=", "1", "?", "'left'", ":", "'right'", ")", ";", "this", ".", "lastMouseX", "=", "e", ".", "pageX", ";", "}", "}", ";", "public", "animateProperty", "(", "property", ",", "obj", ",", "value", ",", "animation", ")", "{", "if", "(", "obj", ")", "{", "const", "props", "=", "{", "ease", ":", "animation", "?", "TAB_ANIMATION_EASING", ":", "null", ",", "}", ";", "props", "[", "property", "]", "=", "value", ";", "TweenLite", ".", "to", "(", "obj", ",", "animation", "?", "TAB_ANIMATION_DURATION", ":", "0", ",", "props", ")", ";", "}", "}", "public", "get", "previousTab", "(", ")", "{", "const", "index", "=", "this", ".", "list", ".", "indexOf", "(", "this", ".", "selectedTab", ")", ";", "if", "(", "index", "-", "1", "===", "-", "1", ")", "return", "null", ";", "return", "this", ".", "list", "[", "index", "-", "1", "]", ";", "}", "public", "get", "nextTab", "(", ")", "{", "const", "index", "=", "this", ".", "list", ".", "indexOf", "(", "this", ".", "selectedTab", ")", ";", "if", "(", "index", "+", "1", ">=", "this", ".", "list", ".", "length", ")", "return", "null", ";", "return", "this", ".", "list", "[", "index", "+", "1", "]", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcRendererEvent", null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Event", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, "number", null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "boolean", null, null, null, "array", null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "boolean", null, null, null, "array", null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Tab", null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "Tab", null, "string", null, null, null, "array", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "RefObject", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "string", null, null, null, "number", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/tabs.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "tabs.ts"}
{"tokens": ["import", "{", "ipcRenderer", "}", "from", "'electron'", ";", "import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "extname", "}", "from", "'path'", ";", "import", "{", "IFile", "}", "from", "'~/interfaces'", ";", "import", "{", "makeId", "}", "from", "'~/utils'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "export", "class", "IconsStore", "{", "@", "observable", "public", "icons", ":", "Map", "<", "string", ",", "string", ">", "=", "new", "Map", "(", ")", ";", "@", "action", "public", "load", "(", "...", "files", ")", "{", "if", "(", "!", "files", "||", "!", "files", ".", "length", ")", "return", "null", ";", "return", "new", "Promise", "(", "resolve", "=>", "{", "const", "id", "=", "makeId", "(", "32", ")", ";", "const", "list", "=", "files", ".", "map", "(", "r", "=>", "r", ".", "ext", ")", ".", "filter", "(", "(", "ext", ",", "index", ",", "arr", ")", "=>", "ext", ".", "length", "&&", "arr", ".", "indexOf", "(", "ext", ")", "===", "index", "&&", "!", "this", ".", "icons", ".", "get", "(", "ext", ")", ")", ";", "if", "(", "!", "list", ".", "length", ")", "return", "resolve", "(", ")", ";", "ipcRenderer", ".", "once", "(", "`get-icons-${", "id", "}`", ",", "(", "e", ",", "icons", ")", "=>", "{", "for", "(", "const", "ext", "in", "icons", ")", "{", "this", ".", "icons", ".", "set", "(", "ext", ",", "icons", "[", "ext", "]", ")", ";", "}", "resolve", "(", ")", ";", "}", ")", ";", "ipcRenderer", ".", "send", "(", "`get-icons`", ",", "list", ",", "id", ")", ";", "}", ")", ";", "}", "public", "getIcon", "(", "file", ")", "{", "if", "(", "!", "file", ")", "return", "{", "icon", ":", "''", ",", "opacity", ":", "1", "}", ";", "let", "icon", "=", "file", ".", "type", "===", "'folder'", "?", "icons", ".", "folder", ":", "this", ".", "icons", ".", "get", "(", "file", ".", "ext", ")", ";", "const", "opacity", "=", "file", ".", "type", "===", "'folder'", "||", "!", "icon", "?", "transparency", ".", "icons", ".", "inactive", ":", "1", ";", "if", "(", "!", "icon", "&&", "file", ".", "type", "!==", "'folder'", ")", "{", "icon", "=", "icons", ".", "file", ";", "}", "return", "{", "icon", ",", "opacity", "}", ";", "}", "public", "getPathIcon", "(", "path", ")", "{", "return", "this", ".", "getIcon", "(", "{", "type", ":", "'file'", ",", "ext", ":", "extname", "(", "path", ")", ",", "}", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, "string", null, null, null, null, null, null, null, "array", null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, "string", null, "number", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcRendererEvent", null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "object", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/icons.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "icons.ts"}
{"tokens": ["import", "{", "observable", ",", "computed", "}", "from", "'mobx'", ";", "import", "store", "from", "'.'", ";", "export", "type", "SidebarContent", "=", "'explorer'", "|", "'sites'", "|", "'search'", "|", "'transfer'", ";", "export", "class", "ActivitybarStore", "{", "@", "observable", "public", "_content", ":", "SidebarContent", "=", "'explorer'", ";", "public", "set", "content", "(", "value", ")", "{", "this", ".", "_content", "=", "value", ";", "}", "@", "computed", "public", "get", "content", "(", ")", ":", "SidebarContent", "{", "if", "(", "!", "store", ".", "sessions", ".", "current", ")", "return", "'sites'", ";", "return", "this", ".", "_content", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/activitybar.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "activitybar.ts"}
{"tokens": ["import", "{", "formatPath", "}", "from", "'qusly-core'", ";", "import", "{", "IFile", ",", "ITreeItem", "}", "from", "'~/interfaces'", ";", "export", "const", "formatTreeItems", "=", "(", "files", ",", "path", ")", "=>", "{", "return", "files", ".", "filter", "(", "r", "=>", "r", ".", "type", "===", "'folder'", ")", ".", "map", "(", "r", "=>", "(", "{", "file", ":", "r", ",", "path", ":", "formatPath", "(", "path", ",", "r", ")", ",", "children", ":", "[", "]", ",", "}", "as", "ITreeItem", ")", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, "array", null, "string", null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/utils/tree.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "tree.ts"}
{"tokens": ["import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "Session", "}", "from", "'./session'", ";", "import", "{", "ITreeItem", ",", "IFile", "}", "from", "'~/interfaces'", ";", "import", "{", "formatTreeItems", "}", "from", "'../utils/tree'", ";", "export", "class", "Tree", "{", "@", "observable", "public", "items", ":", "ITreeItem", "[", "]", "=", "[", "{", "path", ":", "'/'", ",", "file", ":", "{", "name", ":", "'/'", ",", "}", ",", "expanded", ":", "true", ",", "children", ":", "[", "]", ",", "}", "as", "any", ",", "]", ";", "constructor", "(", "public", "session", ")", "{", "}", "@", "action", "public", "async", "fetch", "(", "item", "?", ")", "{", "if", "(", "item", ")", "{", "if", "(", "item", ".", "fetched", ")", "return", ";", "item", ".", "fetched", "=", "true", ";", "}", "const", "path", "=", "!", "item", "?", "'/'", ":", "item", ".", "path", ";", "const", "list", "=", "!", "item", "?", "this", ".", "items", ":", "item", ".", "children", ";", "const", "files", "=", "await", "this", ".", "session", ".", "client", ".", "readDir", "(", "path", ")", ";", "const", "items", "=", "formatTreeItems", "(", "files", ",", "path", ")", ";", "list", ".", "push", "(", "...", "items", ")", ";", "}", "@", "action", "public", "async", "update", "(", "item", ",", "files", ")", "{", "if", "(", "!", "item", ")", "return", ";", "item", ".", "fetched", "=", "true", ";", "item", ".", "children", "=", "formatTreeItems", "(", "files", ",", "item", ".", "path", ")", ".", "map", "(", "r", "=>", "{", "const", "child", "=", "item", ".", "children", ".", "find", "(", "el", "=>", "el", ".", "path", "===", "r", ".", "path", ")", ";", "if", "(", "!", "child", ")", "return", "r", ";", "return", "{", "...", "r", ",", "children", ":", "child", ".", "children", ",", "expanded", ":", "child", ".", "expanded", ",", "fetched", ":", "child", ".", "fetched", ",", "}", ";", "}", ")", ";", "}", "@", "action", "public", "getItem", "(", "path", ")", "{", "const", "queue", "=", "this", ".", "items", ".", "slice", "(", ")", ";", "while", "(", "queue", ".", "length", ")", "{", "const", "item", "=", "queue", ".", "shift", "(", ")", ";", "if", "(", "item", ".", "path", "===", "path", ")", "{", "return", "item", ";", "}", "queue", ".", "push", "(", "...", "item", ".", "children", ")", ";", "}", "return", "null", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Session", null, null, null, null, null, null, null, "Promise", null, "ITreeItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "ITreeItem", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ITreeItem", null, null, null, "ITreeItem", null, null, null, null, null, null, null, "ITreeItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ITreeItem", null, "string", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ITreeItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/models/tree.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "tree.ts"}
{"tokens": ["import", "{", "remote", "}", "from", "'electron'", ";", "import", "{", "basename", ",", "resolve", "}", "from", "'path'", ";", "import", "{", "action", "}", "from", "'mobx'", ";", "import", "{", "Client", ",", "TransferClient", "}", "from", "'qusly-core'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "store", "from", "'../store'", ";", "import", "{", "Tree", "}", "from", "'./tree'", ";", "export", "type", "ConnectionStatus", "=", "'connecting'", "|", "'connected'", "|", "'disconnected'", "|", "'errored'", ";", "let", "id", "=", "0", ";", "const", "downloadsPath", "=", "resolve", "(", "remote", ".", "app", ".", "getPath", "(", "'downloads'", ")", ",", "'qusly'", ")", ";", "export", "class", "Session", "{", "public", "id", "=", "id", "++", ";", "public", "client", "=", "new", "Client", "(", ")", ";", "public", "tree", "=", "new", "Tree", "(", "this", ")", ";", "public", "status", ":", "ConnectionStatus", "=", "'disconnected'", ";", "public", "startPath", ":", "string", ";", "public", "downloadClient", "=", "new", "TransferClient", "(", "'download'", ",", "1", ")", ";", "constructor", "(", "public", "site", ")", "{", "this", ".", "downloadClient", ".", "on", "(", "'new'", ",", "store", ".", "transfer", ".", "onNew", ")", ";", "this", ".", "downloadClient", ".", "on", "(", "'progress'", ",", "store", ".", "transfer", ".", "onProgress", ")", ";", "this", ".", "downloadClient", ".", "on", "(", "'finish'", ",", "store", ".", "transfer", ".", "onFinish", ")", ";", "}", "@", "action", "public", "async", "connect", "(", ")", "{", "if", "(", "this", ".", "status", "===", "'disconnected'", ")", "{", "this", ".", "status", "=", "'connecting'", ";", "await", "this", ".", "client", ".", "connect", "(", "this", ".", "site", ")", ";", "const", "path", "=", "await", "this", ".", "client", ".", "pwd", "(", ")", ";", "this", ".", "startPath", "=", "path", ";", "this", ".", "status", "=", "'connected'", ";", "await", "this", ".", "tree", ".", "fetch", "(", "this", ".", "tree", ".", "items", "[", "0", "]", ")", ";", "}", "}", "@", "action", "public", "async", "close", "(", ")", "{", "store", ".", "sessions", ".", "list", "=", "store", ".", "sessions", ".", "list", ".", "filter", "(", "r", "=>", "r", "!==", "this", ")", ";", "await", "this", ".", "client", ".", "disconnect", "(", ")", ";", "}", "@", "action", "public", "download", "(", "...", "paths", ")", "{", "for", "(", "const", "path", "of", "paths", ")", "{", "const", "fileName", "=", "basename", "(", "path", ")", ";", "const", "localPath", "=", "resolve", "(", "downloadsPath", ",", "fileName", ")", ";", "this", ".", "downloadClient", ".", "transfer", "(", "localPath", ",", "path", ",", "this", ".", "site", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Session", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "array", null, null, null, null, null, "string", null, null, null, null, null, "string", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/models/session.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "session.ts"}
{"tokens": ["import", "{", "observable", ",", "computed", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "store", "from", "'.'", ";", "import", "{", "Session", "}", "from", "'../models/session'", ";", "export", "class", "SessionsStore", "{", "@", "observable", "public", "list", ":", "Session", "[", "]", "=", "[", "]", ";", "@", "computed", "public", "get", "current", "(", ")", "{", "const", "tab", "=", "store", ".", "tabs", ".", "selectedTab", ";", "return", "this", ".", "list", ".", "find", "(", "r", "=>", "tab", "&&", "r", ".", "id", "===", "tab", ".", "sessionId", ")", ";", "}", "@", "action", "public", "add", "(", "site", ")", "{", "let", "session", "=", "this", ".", "findSession", "(", "site", ")", ";", "if", "(", "!", "session", ")", "{", "session", "=", "new", "Session", "(", "site", ")", ";", "this", ".", "list", ".", "push", "(", "session", ")", ";", "}", "return", "session", ";", "}", "private", "findSession", "(", "{", "host", ",", "port", ",", "protocol", ",", "user", ",", "password", "}", ")", "{", "return", "this", ".", "list", ".", "find", "(", "(", "{", "site", "}", ")", "=>", "site", ".", "host", "===", "host", "&&", "site", ".", "port", "===", "port", "&&", "site", ".", "protocol", "===", "protocol", "&&", "site", ".", "user", "===", "user", "&&", "site", ".", "password", "===", "password", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Session", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Session", null, "ISite", null, null, null, "Session", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Session", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/sessions.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "sessions.ts"}
{"tokens": ["import", "{", "clipboard", "}", "from", "'electron'", ";", "import", "{", "computed", ",", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "Page", "}", "from", "'./page'", ";", "export", "class", "Location", "{", "@", "observable", "private", "history", ":", "string", "[", "]", "=", "[", "]", ";", "@", "observable", "private", "pos", "=", "-", "1", ";", "constructor", "(", "private", "page", ")", "{", "}", "@", "computed", "public", "get", "items", "(", ")", "{", "if", "(", "this", ".", "pos", "===", "-", "1", ")", "return", "[", "]", ";", "const", "items", "=", "this", ".", "history", "[", "this", ".", "pos", "]", "?.", "split", "(", "'/'", ")", ".", "filter", "(", "r", "=>", "r", ".", "length", ")", ";", "if", "(", "!", "items", ")", "return", "[", "]", ";", "return", "[", "'/'", ",", "...", "items", "]", ";", "}", "@", "computed", "public", "get", "canGoBack", "(", ")", "{", "return", "this", ".", "pos", ">", "0", ";", "}", "@", "computed", "public", "get", "canGoForward", "(", ")", "{", "return", "this", ".", "pos", "<", "this", ".", "history", ".", "length", "-", "1", ";", "}", "public", "goBack", "=", "async", "(", ")", "=>", "{", "if", "(", "this", ".", "canGoBack", ")", "{", "this", ".", "pos", "--", ";", "await", "this", ".", "page", ".", "fetchFiles", "(", ")", ";", "}", "}", ";", "public", "goForward", "=", "async", "(", ")", "=>", "{", "if", "(", "this", ".", "canGoForward", ")", "{", "this", ".", "pos", "++", ";", "await", "this", ".", "page", ".", "fetchFiles", "(", ")", ";", "}", "}", ";", "@", "action", "public", "async", "push", "(", "path", ")", "{", "this", ".", "pos", "++", ";", "this", ".", "history", "=", "[", "...", "this", ".", "history", ".", "slice", "(", "0", ",", "this", ".", "pos", ")", ",", "path", "]", ";", "await", "this", ".", "page", ".", "fetchFiles", "(", ")", ";", "}", "@", "action", "public", "pushRelative", "(", "...", "items", ")", "{", "const", "path", "=", "this", ".", "relative", "(", "...", "items", ")", ";", "this", ".", "push", "(", "path", ")", ";", "}", "public", "toString", "(", ")", "{", "return", "this", ".", "relative", "(", ")", ";", "}", "public", "relative", "(", "...", "items", ")", "{", "return", "'/'", "+", "[", "...", "this", ".", "items", ".", "slice", "(", "1", ")", ",", "...", "items", "]", ".", "join", "(", "'/'", ")", ";", "}", "@", "action", "public", "goto", "(", "index", ")", "{", "if", "(", "!", "this", ".", "page", ".", "loading", ")", "{", "if", "(", "this", ".", "items", ".", "length", "-", "1", "===", "index", ")", "{", "this", ".", "page", ".", "fetchFiles", "(", ")", ";", "return", ";", "}", "const", "items", "=", "this", ".", "items", ".", "slice", "(", "1", ",", "index", "+", "1", ")", ";", "const", "path", "=", "'/'", "+", "items", ".", "join", "(", "'/'", ")", ";", "this", ".", "push", "(", "path", ")", ";", "}", "}", "public", "copyToClipboard", "(", ")", "{", "clipboard", ".", "writeText", "(", "this", ".", "toString", "(", ")", ",", "'clipboard'", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "array", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/models/location.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "location.ts"}
{"tokens": ["import", "{", "IFile", "}", "from", "'~/interfaces'", ";", "export", "const", "sortFiles", "=", "(", "files", ")", ":", "IFile", "[", "]", "=>", "{", "if", "(", "!", "files", ")", "return", "[", "]", ";", "return", "files", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "{", "const", "nameA", "=", "a", ".", "name", ".", "toUpperCase", "(", ")", ";", "const", "nameB", "=", "b", ".", "name", ".", "toUpperCase", "(", ")", ";", "const", "isFirstFolder", "=", "a", ".", "type", "===", "'folder'", ";", "const", "isSecondFolder", "=", "b", ".", "type", "===", "'folder'", ";", "if", "(", "(", "isFirstFolder", "&&", "isSecondFolder", ")", "||", "(", "!", "isFirstFolder", "&&", "!", "isSecondFolder", ")", ")", "{", "return", "nameA", ".", "localeCompare", "(", "nameB", ")", ";", "}", "if", "(", "isSecondFolder", ")", "return", "0", ";", "if", "(", "isFirstFolder", ")", "return", "-", "1", ";", "return", "0", ";", "}", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, "array", null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, "IFile", null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/utils/files.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "files.ts"}
{"tokens": ["import", "{", "observable", ",", "action", ",", "computed", "}", "from", "'mobx'", ";", "import", "{", "extname", "}", "from", "'path'", ";", "import", "store", "from", "'../store'", ";", "import", "{", "Session", "}", "from", "'./session'", ";", "import", "{", "Location", "}", "from", "'./location'", ";", "import", "{", "IFile", "}", "from", "'~/interfaces'", ";", "import", "{", "sortFiles", "}", "from", "'../utils/files'", ";", "let", "id", "=", "0", ";", "export", "class", "Page", "{", "@", "observable", "public", "id", "=", "id", "++", ";", "@", "observable", "public", "loading", "=", "true", ";", "@", "observable", "public", "files", ":", "IFile", "[", "]", "=", "[", "]", ";", "@", "observable", "public", "focusedFile", ":", "IFile", ";", "@", "observable", "public", "cutFiles", ":", "IFile", "[", "]", "=", "[", "]", ";", "public", "hoveredFile", ":", "IFile", ";", "public", "path", "=", "new", "Location", "(", "this", ")", ";", "public", "cutPath", ":", "string", ";", "constructor", "(", "public", "session", ")", "{", "}", "public", "async", "load", "(", "path", "?", ")", "{", "await", "this", ".", "path", ".", "push", "(", "path", ")", ";", "}", "public", "async", "close", "(", ")", "{", "const", "pages", "=", "store", ".", "pages", ".", "list", ".", "filter", "(", "r", "=>", "r", ".", "session", ".", "id", "===", "this", ".", "session", ".", "id", ")", ";", "if", "(", "!", "pages", ".", "length", ")", "{", "this", ".", "session", ".", "close", "(", ")", ";", "}", "store", ".", "pages", ".", "list", "=", "store", ".", "pages", ".", "list", ".", "filter", "(", "r", "=>", "r", "!==", "this", ")", ";", "}", "@", "action", "public", "fetchFiles", "=", "async", "(", ")", "=>", "{", "try", "{", "if", "(", "this", ".", "session", ".", "status", "===", "'disconnected'", ")", "throw", "new", "Error", "(", "'Attempt to fetch files in a disconnected session'", ")", ";", "this", ".", "loading", "=", "true", ";", "const", "path", "=", "this", ".", "path", ".", "toString", "(", ")", ";", "const", "files", "=", "await", "this", ".", "session", ".", "client", ".", "readDir", "(", "path", ")", ";", "await", "store", ".", "icons", ".", "load", "(", "...", "files", ")", ";", "this", ".", "tab", ".", "title", "=", "this", ".", "session", ".", "site", ".", "title", ";", "this", ".", "tab", ".", "subtitle", "=", "`${", "path", "}`", ";", "this", ".", "files", "=", "sortFiles", "(", "files", ")", ";", "this", ".", "loading", "=", "false", ";", "await", "this", ".", "session", ".", "tree", ".", "update", "(", "this", ".", "treeItem", ",", "this", ".", "files", ")", ";", "}", "catch", "(", "e", ")", "{", "console", ".", "error", "(", "e", ")", ";", "}", "}", ";", "@", "computed", "public", "get", "tab", "(", ")", "{", "return", "store", ".", "tabs", ".", "list", ".", "find", "(", "r", "=>", "r", ".", "pageId", "===", "this", ".", "id", ")", ";", "}", "@", "computed", "public", "get", "treeItem", "(", ")", "{", "const", "path", "=", "this", ".", "path", ".", "toString", "(", ")", ";", "return", "this", ".", "session", ".", "tree", ".", "getItem", "(", "path", ")", ";", "}", "@", "computed", "public", "get", "selectedFiles", "(", ")", "{", "return", "this", ".", "files", ".", "filter", "(", "e", "=>", "e", ".", "selected", ")", ";", "}", "@", "action", "public", "unselectFiles", "(", "...", "skip", ")", "{", "this", ".", "files", ".", "forEach", "(", "item", "=>", "{", "item", ".", "selected", "=", "skip", ".", "indexOf", "(", "item", ")", "!==", "-", "1", ";", "}", ")", ";", "}", "@", "action", "public", "selectGroup", "(", "start", ",", "end", ")", "{", "if", "(", "start", ">", "end", ")", "[", "start", ",", "end", "]", "=", "[", "end", ",", "start", "]", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "this", ".", "files", ".", "length", ";", "i", "++", ")", "{", "const", "file", "=", "this", ".", "files", "[", "i", "]", ";", "file", ".", "selected", "=", "i", ">=", "start", "&&", "i", "<=", "end", ";", "}", "}", "@", "action", "public", "async", "dropRemote", "(", ")", "{", "if", "(", "this", ".", "hoveredFile", "&&", "this", ".", "hoveredFile", ".", "type", "===", "'folder'", "&&", "this", ".", "focusedFile", "!==", "this", ".", "hoveredFile", ")", "{", "this", ".", "loading", "=", "true", ";", "for", "(", "const", "file", "of", "this", ".", "selectedFiles", ")", "{", "const", "oldPath", "=", "this", ".", "path", ".", "relative", "(", "file", ".", "name", ")", ";", "const", "newPath", "=", "this", ".", "path", ".", "relative", "(", "this", ".", "hoveredFile", ".", "name", ",", "file", ".", "name", ")", ";", "await", "this", ".", "session", ".", "client", ".", "move", "(", "oldPath", ",", "newPath", ")", ";", "}", "await", "this", ".", "fetchFiles", "(", ")", ";", "}", "}", "@", "action", "public", "async", "rename", "(", "file", ",", "newName", ")", "{", "newName", "=", "newName", ".", "trim", "(", ")", ";", "file", ".", "renamed", "=", "false", ";", "const", "oldName", "=", "file", ".", "name", ";", "const", "ext", "=", "extname", "(", "newName", ")", ";", "const", "exists", "=", "this", ".", "files", ".", "find", "(", "r", "=>", "r", ".", "name", ".", "toLowerCase", "(", ")", "===", "newName", ".", "toLowerCase", "(", ")", "&&", "r", ".", "ext", "===", "ext", ")", ";", "if", "(", "!", "exists", "&&", "newName", ".", "length", ")", "{", "file", ".", "name", "=", "newName", ";", "file", ".", "ext", "=", "ext", ";", "if", "(", "file", ".", "type", "!==", "'folder'", ")", "{", "await", "store", ".", "icons", ".", "load", "(", "file", ")", ";", "}", "const", "oldPath", "=", "this", ".", "path", ".", "relative", "(", "oldName", ")", ";", "const", "newPath", "=", "this", ".", "path", ".", "relative", "(", "newName", ")", ";", "try", "{", "await", "this", ".", "session", ".", "client", ".", "move", "(", "oldPath", ",", "newPath", ")", ";", "}", "catch", "(", "error", ")", "{", "file", ".", "name", "=", "oldName", ";", "}", "this", ".", "files", "=", "sortFiles", "(", "this", ".", "files", ")", ";", "}", "}", "@", "action", "public", "async", "delete", "(", "files", ")", "{", "this", ".", "loading", "=", "true", ";", "for", "(", "const", "file", "of", "files", ")", "{", "const", "path", "=", "this", ".", "path", ".", "relative", "(", "file", ".", "name", ")", ";", "await", "this", ".", "session", ".", "client", ".", "delete", "(", "path", ")", ";", "}", "await", "this", ".", "fetchFiles", "(", ")", ";", "}", "@", "action", "public", "async", "cut", "(", "files", ")", "{", "this", ".", "cutFiles", "=", "files", ";", "this", ".", "cutPath", "=", "this", ".", "path", ".", "toString", "(", ")", ";", "this", ".", "files", ".", "forEach", "(", "file", "=>", "{", "file", ".", "cut", "=", "files", ".", "indexOf", "(", "file", ")", "!==", "-", "1", ";", "}", ")", ";", "}", "@", "action", "public", "async", "paste", "(", "workingDirectory", "=", "false", ")", "{", "if", "(", "this", ".", "cutFiles", ".", "length", ")", "{", "this", ".", "loading", "=", "true", ";", "const", "dir", "=", "workingDirectory", "?", "''", ":", "this", ".", "focusedFile", ".", "name", ";", "for", "(", "const", "file", "of", "this", ".", "cutFiles", ")", "{", "const", "oldPath", "=", "`${", "this", ".", "cutPath", "}/${", "file", ".", "name", "}`", ";", "const", "newPath", "=", "this", ".", "path", ".", "relative", "(", "dir", ",", "file", ".", "name", ")", ";", "await", "this", ".", "session", ".", "client", ".", "move", "(", "oldPath", ",", "newPath", ")", ";", "}", "this", ".", "cutFiles", "=", "[", "]", ";", "await", "this", ".", "fetchFiles", "(", ")", ";", "}", "}", "@", "action", "public", "async", "createBlank", "(", "type", ")", "{", "const", "path", "=", "this", ".", "path", ".", "toString", "(", ")", ";", "const", "fileName", "=", "await", "this", ".", "session", ".", "client", ".", "createBlank", "(", "type", ",", "path", ",", "this", ".", "files", ")", ";", "await", "this", ".", "fetchFiles", "(", ")", ";", "const", "file", "=", "this", ".", "files", ".", "find", "(", "r", "=>", "r", ".", "name", "===", "fileName", ")", ";", "file", ".", "selected", "=", "true", ";", "this", ".", "focusedFile", "=", "file", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Session", null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, "void", null, null, "array", null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "IFile", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "string", null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "array", null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, "IFile", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/models/page.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "page.ts"}
{"tokens": ["import", "{", "observable", ",", "computed", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "store", "from", "'.'", ";", "import", "{", "Page", "}", "from", "'../models/page'", ";", "import", "{", "Tab", "}", "from", "'../models/tab'", ";", "export", "class", "PagesStore", "{", "@", "observable", "public", "list", ":", "Page", "[", "]", "=", "[", "]", ";", "@", "computed", "public", "get", "current", "(", ")", "{", "const", "tab", "=", "store", ".", "tabs", ".", "selectedTab", ";", "return", "this", ".", "list", ".", "find", "(", "e", "=>", "e", ".", "id", "===", "tab", ".", "pageId", ")", ";", "}", "@", "action", "public", "async", "add", "(", "site", ",", "tab", ",", "path", "?", ")", "{", "const", "session", "=", "await", "store", ".", "sessions", ".", "add", "(", "site", ")", ";", "const", "page", "=", "new", "Page", "(", "session", ")", ";", "tab", ".", "pageId", "=", "page", ".", "id", ";", "tab", ".", "sessionId", "=", "session", ".", "id", ";", "tab", ".", "title", "=", "site", ".", "title", ";", "this", ".", "list", ".", "push", "(", "page", ")", ";", "try", "{", "await", "session", ".", "connect", "(", ")", ";", "await", "page", ".", "load", "(", "path", "||", "session", ".", "startPath", ")", ";", "}", "catch", "(", "e", ")", "{", "console", ".", "error", "(", "e", ")", ";", "}", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "ISite", null, "Tab", null, "string", null, null, null, null, "Session", null, null, null, null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/pages.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "pages.ts"}
{"tokens": ["import", "*", "as", "React", "from", "'react'", ";", "import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "store", "from", "'.'", ";", "export", "class", "PathViewStore", "{", "@", "observable", "public", "inputVisible", "=", "false", ";", "public", "inputRef", "=", "React", ".", "createRef", "<", "HTMLInputElement", ">", "(", ")", ";", "@", "action", "public", "show", "=", "(", ")", "=>", "{", "if", "(", "!", "this", ".", "inputVisible", ")", "{", "const", "page", "=", "store", ".", "pages", ".", "current", ";", "const", "input", "=", "this", ".", "inputRef", ".", "current", ";", "input", ".", "value", "=", "page", ".", "path", ".", "toString", "(", ")", ";", "this", ".", "inputVisible", "=", "true", ";", "requestAnimationFrame", "(", "(", ")", "=>", "{", "input", ".", "focus", "(", ")", ";", "input", ".", "select", "(", ")", ";", "}", ")", ";", "}", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, "HTMLInputElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/path-view.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "path-view.ts"}
{"tokens": ["import", "{", "IPos", "}", "from", "'~/interfaces'", ";", "export", "const", "getMenuPosition", "=", "(", "el", ",", "mousePos", ")", ":", "IPos", "=>", "{", "let", "{", "top", ",", "left", "}", "=", "mousePos", ";", "const", "screenWidth", "=", "document", ".", "body", ".", "clientWidth", ";", "const", "screenHeight", "=", "document", ".", "body", ".", "clientHeight", ";", "const", "width", "=", "el", ".", "clientWidth", ";", "const", "height", "=", "el", ".", "clientHeight", ";", "if", "(", "top", "+", "height", ">", "screenHeight", "&&", "top", "-", "height", ">", "0", ")", "{", "top", "-=", "height", ";", "}", "if", "(", "left", "+", "width", ">", "screenWidth", ")", "{", "left", "-=", "width", ";", "}", "return", "{", "top", ",", "left", "}", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, "IPos", null, null, "HTMLElement", null, "IPos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/utils/context-menu.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "context-menu.ts"}
{"tokens": ["import", "*", "as", "React", "from", "'react'", ";", "import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "store", "from", "'.'", ";", "import", "{", "IPos", ",", "ITreeItem", ",", "ISite", "}", "from", "'~/interfaces'", ";", "import", "{", "Tab", "}", "from", "'../models/tab'", ";", "import", "{", "getMenuPosition", "}", "from", "'../utils/context-menu'", ";", "export", "type", "ContextMenuContent", "=", "'page'", "|", "'file'", "|", "'tab'", "|", "'path'", "|", "'explorer'", "|", "'site'", ";", "export", "class", "ContextMenuStore", "{", "@", "observable", "public", "visible", "=", "false", ";", "@", "observable", "public", "pos", ":", "IPos", "=", "{", "top", ":", "0", ",", "left", ":", "0", ",", "}", ";", "@", "observable", "public", "content", ":", "ContextMenuContent", "=", "'file'", ";", "public", "ref", "=", "React", ".", "createRef", "<", "HTMLTableElement", ">", "(", ")", ";", "public", "focusedTab", ":", "Tab", ";", "public", "focusedExplorerItem", ":", "ITreeItem", ";", "public", "focusedSite", ":", "ISite", ";", "@", "action", "public", "show", "=", "(", "content", ")", "=>", "{", "this", ".", "content", "=", "content", ";", "this", ".", "visible", "=", "true", ";", "this", ".", "pos", "=", "getMenuPosition", "(", "this", ".", "ref", ".", "current", ",", "store", ".", "mousePos", ")", ";", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/context-menu.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "context-menu.ts"}
{"tokens": ["import", "*", "as", "React", "from", "'react'", ";", "import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "cursorDistance", ",", "setElementStyle", "}", "from", "'rectangle-selection'", ";", "import", "{", "IPos", "}", "from", "'~/interfaces'", ";", "import", "store", "from", "'.'", ";", "export", "class", "DragStore", "{", "@", "observable", "public", "visible", "=", "false", ";", "public", "ref", "=", "React", ".", "createRef", "<", "HTMLDivElement", ">", "(", ")", ";", "public", "startPos", ":", "IPos", ";", "public", "active", "=", "false", ";", "@", "action", "public", "update", "(", "pos", ")", "{", "const", "{", "top", ",", "left", "}", "=", "pos", ";", "if", "(", "this", ".", "active", ")", "{", "this", ".", "visible", "=", "this", ".", "visible", "||", "cursorDistance", "(", "pos", ",", "this", ".", "startPos", ")", ">", "5", ";", "setElementStyle", "(", "this", ".", "ref", ".", "current", ",", "{", "top", ":", "`${", "top", "}px`", ",", "left", ":", "`${", "left", "}px`", ",", "}", ")", ";", "}", "}", "public", "hide", "(", ")", "{", "if", "(", "this", ".", "visible", ")", "{", "store", ".", "pages", ".", "current", ".", "dropRemote", "(", ")", ";", "}", "this", ".", "visible", "=", "false", ";", "this", ".", "active", "=", "false", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "IPos", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/drag.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "drag.ts"}
{"tokens": ["import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "export", "type", "DialogContent", "=", "'add-site'", "|", "'edit-site'", "|", "'delete-site'", ";", "export", "class", "DialogStore", "{", "@", "observable", "public", "visible", "=", "false", ";", "@", "observable", "public", "content", ":", "DialogContent", "=", "'add-site'", ";", "@", "action", "public", "show", "=", "(", "content", ")", "=>", "{", "this", ".", "content", "=", "content", ";", "this", ".", "visible", "=", "true", ";", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/dialog.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "dialog.ts"}
{"tokens": ["import", "{", "ipcRenderer", "}", "from", "'electron'", ";", "export", "const", "setPassword", "=", "(", "_id", ",", "password", ")", "=>", "{", "return", "ipcRenderer", ".", "invoke", "(", "'set-password'", ",", "'qusly'", ",", "_id", ",", "password", ")", ";", "}", ";", "export", "const", "getPassword", "=", "(", "_id", ")", "=>", "{", "return", "ipcRenderer", ".", "invoke", "(", "'get-password'", ",", "'qusly'", ",", "_id", ")", ";", "}", ";", "export", "const", "deletePassword", "=", "(", "_id", ")", "=>", "{", "return", "ipcRenderer", ".", "invoke", "(", "'delete-password'", ",", "'qusly'", ",", "_id", ")", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, "Promise", null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/utils/credentials.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "credentials.ts"}
{"tokens": ["import", "{", "ipcRenderer", "}", "from", "'electron'", ";", "import", "{", "makeId", "}", "from", "'~/utils'", ";", "interface", "IAction", "<", "T", ">", "{", "item", "?", ":", "Partial", "<", "T", ">", ";", "query", "?", ":", "Partial", "<", "T", ">", ";", "multi", "?", ":", "boolean", ";", "value", "?", ":", "Partial", "<", "T", ">", ";", "}", "export", "class", "Database", "<", "T", ">", "{", "private", "scope", ":", "string", ";", "public", "constructor", "(", "scope", ")", "{", "this", ".", "scope", "=", "scope", ";", "}", "private", "async", "performOperation", "(", "operation", ",", "data", ")", "{", "return", "new", "Promise", "(", "resolve", "=>", "{", "const", "id", "=", "makeId", "(", "32", ")", ";", "ipcRenderer", ".", "send", "(", "`storage-${", "operation", "}`", ",", "id", ",", "{", "scope", ":", "this", ".", "scope", ",", "...", "data", ",", "}", ")", ";", "ipcRenderer", ".", "once", "(", "id", ",", "(", "e", ",", "res", ")", "=>", "{", "resolve", "(", "res", ")", ";", "}", ")", ";", "}", ")", ";", "}", "public", "async", "insert", "(", "item", ")", "{", "return", "await", "this", ".", "performOperation", "(", "'insert'", ",", "{", "item", "}", ")", ";", "}", "public", "async", "get", "(", "query", ")", "{", "return", "await", "this", ".", "performOperation", "(", "'get'", ",", "{", "query", "}", ")", ";", "}", "public", "async", "getOne", "(", "query", ")", "{", "return", "await", "this", ".", "performOperation", "(", "'get-one'", ",", "{", "query", "}", ")", ";", "}", "public", "async", "update", "(", "query", ",", "newValue", ",", "multi", "=", "false", ")", "{", "return", "await", "this", ".", "performOperation", "(", "'update'", ",", "{", "query", ",", "value", ":", "newValue", ",", "multi", ",", "}", ")", ";", "}", "public", "async", "remove", "(", "query", ",", "multi", "=", "false", ")", "{", "return", "await", "this", ".", "performOperation", "(", "'remove'", ",", "{", "query", ",", "multi", "}", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "IAction", null, null, null, null, null, null, "void", null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcRendererEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "T", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "T", null, "T", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "T", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/models/database.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "database.ts"}
{"tokens": ["import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "store", "from", "'.'", ";", "import", "{", "setPassword", ",", "getPassword", ",", "deletePassword", "}", "from", "'~/utils/credentials'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "{", "Database", "}", "from", "'~/renderer/models/database'", ";", "export", "class", "SitesStore", "{", "public", "db", "=", "new", "Database", "<", "ISite", ">", "(", "'sites'", ")", ";", "@", "observable", "public", "list", ":", "ISite", "[", "]", "=", "[", "]", ";", "constructor", "(", ")", "{", "this", ".", "load", "(", ")", ";", "}", "@", "action", "private", "async", "load", "(", ")", "{", "this", ".", "list", "=", "await", "this", ".", "db", ".", "get", "(", "{", "}", ")", ";", "}", "@", "action", "public", "async", "openInTab", "(", "site", ")", "{", "site", ".", "password", "=", "await", "getPassword", "(", "site", ".", "_id", ")", ";", "store", ".", "tabs", ".", "addTab", "(", "{", "active", ":", "true", ",", "site", "}", ")", ";", "}", "@", "action", "public", "async", "add", "(", "site", ")", "{", "const", "{", "password", "}", "=", "site", ";", "const", "res", "=", "await", "this", ".", "db", ".", "insert", "(", "{", "...", "site", ",", "password", ":", "''", ",", "date", ":", "new", "Date", "(", ")", ",", "}", ")", ";", "this", ".", "list", ".", "push", "(", "res", ")", ";", "await", "setPassword", "(", "res", ".", "_id", ",", "password", ")", ";", "}", "@", "action", "public", "async", "update", "(", "_id", ",", "changed", ")", "{", "const", "index", "=", "this", ".", "list", ".", "indexOf", "(", "this", ".", "list", ".", "find", "(", "r", "=>", "r", ".", "_id", "===", "_id", ")", ")", ";", "const", "{", "password", "}", "=", "changed", ";", "changed", "=", "{", "...", "changed", ",", "password", ":", "''", "}", ";", "this", ".", "list", "[", "index", "]", "=", "{", "...", "this", ".", "list", "[", "index", "]", ",", "...", "changed", "}", ";", "await", "this", ".", "db", ".", "update", "(", "{", "_id", "}", ",", "changed", ")", ";", "await", "setPassword", "(", "_id", ",", "password", ")", ";", "}", "@", "action", "public", "async", "remove", "(", "_id", ")", "{", "this", ".", "list", "=", "this", ".", "list", ".", "filter", "(", "r", "=>", "r", ".", "_id", "!==", "_id", ")", ";", "await", "this", ".", "db", ".", "remove", "(", "{", "_id", "}", ")", ";", "await", "deletePassword", "(", "_id", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, "ISite", null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, "ISite", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/sites.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "sites.ts"}
{"tokens": ["import", "{", "observable", ",", "computed", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "ITransferType", ",", "ITransferItem", "}", "from", "'qusly-core'", ";", "import", "{", "ITransferSection", ",", "ISite", "}", "from", "'~/interfaces'", ";", "export", "class", "TransferStore", "{", "@", "observable", "public", "content", ":", "ITransferType", "=", "'download'", ";", "@", "observable", "public", "items", ":", "ITransferItem", "[", "]", "=", "[", "]", ";", "@", "computed", "public", "get", "sections", "(", ")", "{", "const", "sections", "=", "[", "]", ";", "this", ".", "items", ".", "forEach", "(", "item", "=>", "{", "const", "{", "_id", ",", "title", "}", "=", "item", ".", "data", "as", "ISite", ";", "if", "(", "item", ".", "type", "===", "this", ".", "content", ")", "{", "const", "section", "=", "sections", ".", "find", "(", "r", "=>", "r", ".", "_id", "===", "_id", ")", ";", "if", "(", "section", ")", "{", "section", ".", "items", ".", "push", "(", "item", ")", ";", "}", "else", "{", "sections", ".", "push", "(", "{", "_id", ",", "title", ",", "items", ":", "[", "item", "]", ",", "transfered", ":", "0", ",", "}", ")", ";", "}", "}", "}", ")", ";", "return", "sections", ";", "}", "@", "action", "public", "onNew", "=", "(", "e", ")", "=>", "{", "this", ".", "items", ".", "push", "(", "e", ")", ";", "}", ";", "@", "action", "public", "onProgress", "=", "(", "e", ")", "=>", "{", "const", "item", "=", "this", ".", "items", ".", "find", "(", "r", "=>", "r", ".", "id", "===", "e", ".", "id", ")", ";", "if", "(", "item", ".", "status", "!==", "'transfering'", ")", "{", "item", ".", "status", "=", "'transfering'", ";", "}", "item", ".", "info", "=", "e", ".", "info", ";", "}", ";", "@", "action", "public", "onFinish", "=", "(", "e", ")", "=>", "{", "const", "section", "=", "this", ".", "sections", ".", "find", "(", "r", "=>", "r", ".", "_id", "===", "e", ".", "data", ".", "_id", ")", ";", "const", "item", "=", "this", ".", "items", ".", "find", "(", "r", "=>", "r", ".", "id", "===", "e", ".", "id", ")", ";", "item", ".", "status", "=", "'finished'", ";", "section", ".", "transfered", "++", ";", "}", ";", "@", "action", "public", "remove", "=", "(", "id", ")", "=>", "{", "this", ".", "items", "=", "this", ".", "items", ".", "filter", "(", "r", "=>", "r", ".", "id", "!==", "id", ")", ";", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, "UNK", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, "ITransferItem", null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/transfer.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "transfer.ts"}
{"tokens": ["import", "{", "ipcRenderer", "}", "from", "'electron'", ";", "import", "{", "observable", ",", "action", "}", "from", "'mobx'", ";", "import", "{", "IPos", "}", "from", "'~/interfaces'", ";", "import", "{", "AddTabStore", "}", "from", "'./add-tab'", ";", "import", "{", "TabsStore", "}", "from", "'./tabs'", ";", "import", "{", "IconsStore", "}", "from", "'./icons'", ";", "import", "{", "ActivitybarStore", "}", "from", "'./activitybar'", ";", "import", "{", "SessionsStore", "}", "from", "'./sessions'", ";", "import", "{", "PagesStore", "}", "from", "'./pages'", ";", "import", "{", "PathViewStore", "}", "from", "'./path-view'", ";", "import", "{", "ContextMenuStore", "}", "from", "'./context-menu'", ";", "import", "{", "DragStore", "}", "from", "'./drag'", ";", "import", "{", "DialogStore", "}", "from", "'./dialog'", ";", "import", "{", "SitesStore", "}", "from", "'./sites'", ";", "import", "{", "TransferStore", "}", "from", "'./transfer'", ";", "export", "class", "Store", "{", "public", "addTab", "=", "new", "AddTabStore", "(", ")", ";", "public", "tabs", "=", "new", "TabsStore", "(", ")", ";", "public", "icons", "=", "new", "IconsStore", "(", ")", ";", "public", "activitybar", "=", "new", "ActivitybarStore", "(", ")", ";", "public", "sessions", "=", "new", "SessionsStore", "(", ")", ";", "public", "pages", "=", "new", "PagesStore", "(", ")", ";", "public", "pathView", "=", "new", "PathViewStore", "(", ")", ";", "public", "contextMenu", "=", "new", "ContextMenuStore", "(", ")", ";", "public", "drag", "=", "new", "DragStore", "(", ")", ";", "public", "dialog", "=", "new", "DialogStore", "(", ")", ";", "public", "sites", "=", "new", "SitesStore", "(", ")", ";", "public", "transfer", "=", "new", "TransferStore", "(", ")", ";", "@", "observable", "public", "updateInfo", "=", "{", "available", ":", "false", ",", "version", ":", "''", ",", "}", ";", "public", "mousePos", ":", "IPos", "=", "{", "top", ":", "0", ",", "left", ":", "0", ",", "}", ";", "constructor", "(", ")", "{", "ipcRenderer", ".", "on", "(", "'update-available'", ",", "(", "e", ",", "version", ")", "=>", "{", "this", ".", "updateInfo", ".", "version", "=", "version", ";", "this", ".", "updateInfo", ".", "available", "=", "true", ";", "}", ")", ";", "window", ".", "removeEventListener", "(", "'mousemove'", ",", "this", ".", "onWindowMouseMove", ")", ";", "window", ".", "removeEventListener", "(", "'mousedown'", ",", "this", ".", "onWindowMouseDown", ")", ";", "window", ".", "removeEventListener", "(", "'click'", ",", "this", ".", "onWindowClick", ")", ";", "window", ".", "removeEventListener", "(", "'mouseup'", ",", "this", ".", "onWindowMouseUp", ")", ";", "window", ".", "addEventListener", "(", "'mousemove'", ",", "this", ".", "onWindowMouseMove", ")", ";", "window", ".", "addEventListener", "(", "'mousedown'", ",", "this", ".", "onWindowMouseDown", ")", ";", "window", ".", "addEventListener", "(", "'click'", ",", "this", ".", "onWindowClick", ")", ";", "window", ".", "addEventListener", "(", "'mouseup'", ",", "this", ".", "onWindowMouseUp", ")", ";", "}", "@", "action", "private", "onWindowMouseMove", "=", "(", "e", ")", "=>", "{", "this", ".", "mousePos", "=", "{", "top", ":", "e", ".", "pageY", ",", "left", ":", "e", ".", "pageX", ",", "}", ";", "this", ".", "drag", ".", "update", "(", "this", ".", "mousePos", ")", ";", "}", ";", "@", "action", "private", "onWindowMouseDown", "=", "(", ")", "=>", "{", "this", ".", "pathView", ".", "inputVisible", "=", "false", ";", "this", ".", "contextMenu", ".", "visible", "=", "false", ";", "}", ";", "@", "action", "private", "onWindowClick", "=", "(", ")", "=>", "{", "this", ".", "drag", ".", "hide", "(", ")", ";", "}", ";", "@", "action", "private", "onWindowMouseUp", "=", "(", "e", ")", "=>", "{", "if", "(", "e", ".", "button", "===", "3", ")", "{", "this", ".", "pages", ".", "current", ".", "path", ".", "goBack", "(", ")", ";", "}", "else", "if", "(", "e", ".", "button", "===", "4", ")", "{", "this", ".", "pages", ".", "current", ".", "path", ".", "goForward", "(", ")", ";", "}", "}", ";", "}", "export", "default", "new", "Store", "(", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "IpcRendererEvent", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "MouseEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "MouseEvent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/store/index.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.ts"}
{"tokens": ["import", "{", "observable", ",", "computed", ",", "action", "}", "from", "'mobx'", ";", "import", "*", "as", "React", "from", "'react'", ";", "import", "{", "ipcRenderer", "}", "from", "'electron'", ";", "import", "store", "from", "'~/renderer/app/store'", ";", "import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "import", "{", "defaultTabOptions", ",", "ADD_TAB_MARGIN_LEFT", ",", "TABS_PADDING", ",", "TAB_ANIMATION_DURATION", ",", "}", "from", "'../constants/tabs'", ";", "let", "id", "=", "1", ";", "export", "interface", "TabOptions", "{", "active", "?", ":", "boolean", ";", "index", "?", ":", "number", ";", "path", "?", ":", "string", ";", "site", "?", ":", "ISite", ";", "}", "export", "class", "Tab", "{", "@", "observable", "public", "id", ":", "number", "=", "id", "++", ";", "@", "observable", "public", "isDragging", "=", "false", ";", "@", "observable", "public", "title", "=", "'New tab'", ";", "@", "observable", "public", "subtitle", "=", "''", ";", "@", "observable", "public", "width", "=", "0", ";", "@", "observable", "public", "pageId", ":", "number", ";", "@", "observable", "public", "sessionId", ":", "number", ";", "@", "computed", "public", "get", "isSelected", "(", ")", "{", "return", "store", ".", "tabs", ".", "selectedTabId", "===", "this", ".", "id", ";", "}", "@", "computed", "public", "get", "isHovered", "(", ")", "{", "return", "store", ".", "tabs", ".", "hoveredTabId", "===", "this", ".", "id", ";", "}", "@", "computed", "public", "get", "borderVisible", "(", ")", "{", "const", "tabs", "=", "store", ".", "tabs", ".", "list", ";", "const", "i", "=", "tabs", ".", "indexOf", "(", "this", ")", ";", "if", "(", "i", "===", "tabs", ".", "length", "-", "1", ")", "{", "if", "(", "this", ".", "isSelected", "||", "this", ".", "isHovered", ")", "return", "false", ";", "return", "true", ";", "}", "const", "nextTab", "=", "tabs", "[", "i", "+", "1", "]", ";", "if", "(", "(", "nextTab", "&&", "(", "nextTab", ".", "isHovered", "||", "nextTab", ".", "isSelected", ")", ")", "||", "this", ".", "isSelected", "||", "this", ".", "isHovered", ")", "{", "return", "false", ";", "}", "return", "true", ";", "}", "@", "computed", "public", "get", "isExpanded", "(", ")", "{", "return", "this", ".", "isHovered", "||", "this", ".", "isSelected", "||", "!", "store", ".", "tabs", ".", "scrollable", ";", "}", "public", "left", "=", "0", ";", "public", "lastUrl", "=", "''", ";", "public", "isClosing", "=", "false", ";", "public", "ref", "=", "React", ".", "createRef", "<", "HTMLDivElement", ">", "(", ")", ";", "public", "lastHistoryId", ":", "string", ";", "public", "hasThemeColor", "=", "false", ";", "public", "webContentsId", ":", "number", ";", "public", "findRequestId", ":", "number", ";", "public", "removeTimeout", ":", "any", ";", "public", "isWindow", "=", "false", ";", "constructor", "(", "{", "active", "}", "=", "defaultTabOptions", ")", "{", "if", "(", "active", ")", "{", "this", ".", "select", "(", ")", ";", "}", "}", "@", "action", "public", "select", "(", ")", "{", "store", ".", "tabs", ".", "selectedTabId", "=", "this", ".", "id", ";", "}", "public", "getWidth", "(", "containerWidth", "=", "null", ",", "tabs", "=", "null", ")", "{", "if", "(", "containerWidth", "===", "null", ")", "{", "containerWidth", "=", "store", ".", "tabs", ".", "containerWidth", ";", "}", "if", "(", "tabs", "===", "null", ")", "{", "tabs", "=", "store", ".", "tabs", ".", "list", ".", "filter", "(", "x", "=>", "!", "x", ".", "isClosing", ")", ";", "}", "const", "width", "=", "(", "containerWidth", "-", "ADD_TAB_MARGIN_LEFT", ")", "/", "(", "tabs", ".", "length", "+", "store", ".", "tabs", ".", "removedTabs", ")", "-", "TABS_PADDING", ";", "if", "(", "width", ">", "200", ")", "{", "return", "200", ";", "}", "if", "(", "width", "<", "72", ")", "{", "return", "72", ";", "}", "return", "width", ";", "}", "public", "getLeft", "(", "calcNewLeft", "=", "false", ")", "{", "const", "tabs", "=", "store", ".", "tabs", ".", "list", ".", "slice", "(", ")", ";", "const", "index", "=", "tabs", ".", "indexOf", "(", "this", ")", ";", "let", "left", "=", "0", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "index", ";", "i", "++", ")", "{", "left", "+=", "(", "calcNewLeft", "?", "this", ".", "getWidth", "(", ")", ":", "tabs", "[", "i", "]", ".", "width", ")", "+", "TABS_PADDING", ";", "}", "return", "left", ";", "}", "@", "action", "public", "setLeft", "(", "left", ",", "animation", ")", "{", "store", ".", "tabs", ".", "animateProperty", "(", "'x'", ",", "this", ".", "ref", ".", "current", ",", "left", ",", "animation", ")", ";", "this", ".", "left", "=", "left", ";", "}", "@", "action", "public", "setWidth", "(", "width", ",", "animation", ")", "{", "store", ".", "tabs", ".", "animateProperty", "(", "'width'", ",", "this", ".", "ref", ".", "current", ",", "width", ",", "animation", ")", ";", "this", ".", "width", "=", "width", ";", "}", "@", "action", "public", "close", "(", ")", "{", "const", "tabs", "=", "store", ".", "tabs", ".", "list", ";", "const", "selected", "=", "store", ".", "tabs", ".", "selectedTabId", "===", "this", ".", "id", ";", "if", "(", "this", ".", "isWindow", ")", "{", "ipcRenderer", ".", "send", "(", "'detach-window'", ",", "this", ".", "id", ")", ";", "}", "else", "{", "ipcRenderer", ".", "send", "(", "'browserview-destroy'", ",", "this", ".", "id", ")", ";", "}", "const", "notClosingTabs", "=", "tabs", ".", "filter", "(", "x", "=>", "!", "x", ".", "isClosing", ")", ";", "let", "index", "=", "notClosingTabs", ".", "indexOf", "(", "this", ")", ";", "store", ".", "tabs", ".", "resetRearrangeTabsTimer", "(", ")", ";", "this", ".", "isClosing", "=", "true", ";", "if", "(", "notClosingTabs", ".", "length", "-", "1", "===", "index", ")", "{", "const", "previousTab", "=", "tabs", "[", "index", "-", "1", "]", ";", "if", "(", "previousTab", ")", "{", "this", ".", "setLeft", "(", "previousTab", ".", "getLeft", "(", "true", ")", "+", "this", ".", "getWidth", "(", ")", ",", "true", ")", ";", "}", "store", ".", "tabs", ".", "updateTabsBounds", "(", "true", ")", ";", "}", "else", "{", "store", ".", "tabs", ".", "removedTabs", "++", ";", "}", "this", ".", "setWidth", "(", "0", ",", "true", ")", ";", "store", ".", "tabs", ".", "setTabsLefts", "(", "true", ")", ";", "if", "(", "selected", ")", "{", "index", "=", "tabs", ".", "indexOf", "(", "this", ")", ";", "if", "(", "index", "+", "1", "<", "tabs", ".", "length", "&&", "!", "tabs", "[", "index", "+", "1", "]", ".", "isClosing", "&&", "!", "store", ".", "tabs", ".", "scrollable", ")", "{", "const", "nextTab", "=", "tabs", "[", "index", "+", "1", "]", ";", "nextTab", ".", "select", "(", ")", ";", "}", "else", "if", "(", "index", "-", "1", ">=", "0", "&&", "!", "tabs", "[", "index", "-", "1", "]", ".", "isClosing", ")", "{", "const", "prevTab", "=", "tabs", "[", "index", "-", "1", "]", ";", "prevTab", ".", "select", "(", ")", ";", "}", "}", "const", "page", "=", "store", ".", "pages", ".", "list", ".", "find", "(", "r", "=>", "r", ".", "id", "===", "this", ".", "pageId", ")", ";", "page", ".", "close", "(", ")", ";", "this", ".", "removeTimeout", "=", "setTimeout", "(", "(", ")", "=>", "{", "store", ".", "tabs", ".", "removeTab", "(", "this", ".", "id", ")", ";", "}", ",", "TAB_ANIMATION_DURATION", "*", "1000", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "number", null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "boolean", null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, "number", null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, "array", null, null, null, null, null, null, null, null, "boolean", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Tab", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, "Page", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/models/tab.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "tab.ts"}
{"tokens": ["import", "{", "Power2", "}", "from", "'gsap'", ";", "import", "{", "TabOptions", "}", "from", "'../models/tab'", ";", "export", "const", "defaultTabOptions", "=", "{", "active", ":", "true", ",", "}", ";", "export", "const", "TAB_MAX_WIDTH", "=", "200", ";", "export", "const", "TAB_MIN_WIDTH", "=", "72", ";", "export", "const", "TAB_PINNED_WIDTH", "=", "32", ";", "export", "const", "TAB_ANIMATION_DURATION", "=", "0.3", ";", "export", "const", "TAB_ANIMATION_EASING", "=", "Power2", ".", "easeOut", ";", "export", "const", "TABS_PADDING", "=", "0", ";", "export", "const", "ADD_TAB_MARGIN_LEFT", "=", "2", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null, null, null, "Cubic", null, null, null, null, null, null, null, "number", null, null, null, null, null, "number", null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/constants/tabs.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "tabs.ts"}
{"tokens": ["import", "styled", ",", "{", "css", "}", "from", "'styled-components'", ";", "import", "{", "StyledContextMenu", "}", "from", "'~/renderer/app/components/ContextMenu/style'", ";", "import", "{", "transparency", "}", "from", "'~/renderer/constants/transparency'", ";", "import", "{", "icons", "}", "from", "'~/renderer/constants/icons'", ";", "import", "{", "EASING_FUNCTION", "}", "from", "'~/renderer/app/constants/design'", ";", "import", "{", "centerIcon", "}", "from", "'~/renderer/mixins/images'", ";", "import", "{", "shadows", "}", "from", "'~/renderer/mixins/shadows'", ";", "export", "const", "StyledDropdown", "=", "styled", ".", "div", "`\n  width: 200px;\n  height: 32px;\n  position: relative;\n  border-radius: 4px;\n  user-select: none;\n  cursor: pointer;\n  display: flex;\n  align-items: center;\n  background-color: rgba(0, 0, 0, 0.08);\n\n  &:hover {\n    background-color: rgba(0, 0, 0, 0.1);\n  }\n`", ";", "export", "const", "Label", "=", "styled", ".", "div", "`\n  font-size: 13px;\n  margin-left: 8px;\n  pointer-events: none;\n  color: #000;\n`", ";", "export", "const", "DropIcon", "=", "styled", ".", "div", "`\n  width: 24px;\n  height: 24px;\n  margin-left: auto;\n  margin-right: 2px;\n  opacity: ${", "transparency", ".", "icons", ".", "inactive", "};\n  background-image: url(${", "icons", ".", "expand", "});\n  transition: 0.15s ${", "EASING_FUNCTION", "} transform;\n  ${", "centerIcon", "(", "20", ")", "};\n\n  ${", "(", "{", "expanded", "}", ")", "=>", "css", "`\n    transform: ${", "expanded", "?", "'rotate(180deg)'", ":", "'rotate(0deg)'", "};\n  `", "}\n`", ";", "export", "const", "Menu", "=", "styled", "(", "StyledContextMenu", ")", "`\n  width: 100%;\n  position: absolute;\n  top: 100%;\n  box-shadow: ${", "shadows", "(", "8", ")", "};\n`", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, "StyledComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/Dropdown/styles.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "styles.ts"}
{"tokens": ["import", "*", "as", "React", "from", "'react'", ";", "import", "{", "StyledItem", ",", "Items", ",", "Text", ",", "}", "from", "'~/renderer/app/components/ContextMenu/style'", ";", "import", "{", "StyledDropdown", ",", "Menu", ",", "Label", ",", "DropIcon", "}", "from", "'./styles'", ";", "interface", "ItemProps", "extends", "React", ".", "HTMLAttributes", "<", "HTMLDivElement", ">", "{", "children", ":", "any", ";", "value", ":", "string", ";", "}", "export", "const", "DropdownItem", "=", "(", "{", "children", ",", "value", ",", "...", "props", "}", ")", "=>", "{", "return", "(", "<", "StyledItem", "value", "=", "{", "value", "}", "{", "...", "props", "}", ">", "<", "Text", ">", "{", "children", "}", "<", "/Text>", "<", "/StyledItem>);", "}", ";", "interface", "Props", "{", "children", "?", ":", "any", ";", "defaultValue", "?", ":", "any", ";", "onChange", "?", ":", "(", "newValue", "?", ":", "any", ",", "oldValue", "?", ":", "any", ")", "=>", "void", ";", "style", "?", ":", "React", ".", "CSSProperties", ";", "}", "interface", "State", "{", "expanded", ":", "boolean", ";", "value", ":", "any", ";", "label", ":", "any", ";", "}", "export", "class", "Dropdown", "extends", "React", ".", "PureComponent", "<", "Props", ",", "State", ">", "{", "public", "state", ":", "State", "=", "{", "expanded", ":", "false", ",", "value", ":", "null", ",", "label", ":", "''", ",", "}", ";", "public", "componentDidMount", "(", ")", "{", "const", "{", "defaultValue", "}", "=", "this", ".", "props", ";", "if", "(", "defaultValue", ")", "{", "this", ".", "setValue", "(", "defaultValue", ",", "false", ")", ";", "}", "}", "public", "componentDidUpdate", "(", "prevProps", ")", "{", "const", "{", "defaultValue", "}", "=", "this", ".", "props", ";", "if", "(", "defaultValue", "!==", "prevProps", ".", "defaultValue", ")", "{", "this", ".", "setValue", "(", "defaultValue", ",", "false", ")", ";", "}", "}", "public", "componentWillUnmount", "(", ")", "{", "window", ".", "removeEventListener", "(", "'mousedown'", ",", "this", ".", "onWindowMouseDown", ")", ";", "}", "private", "onMouseDown", "=", "(", "e", ")", "=>", "{", "e", ".", "stopPropagation", "(", ")", ";", "const", "{", "expanded", "}", "=", "this", ".", "state", ";", "this", ".", "toggle", "(", "!", "expanded", ")", ";", "}", ";", "private", "onItemMouseClick", "=", "(", "newValue", ")", "=>", "(", "e", ")", "=>", "{", "e", ".", "stopPropagation", "(", ")", ";", "const", "{", "onChange", "}", "=", "this", ".", "props", ";", "const", "{", "value", "}", "=", "this", ".", "state", ";", "if", "(", "onChange", ")", "onChange", "(", "value", ",", "newValue", ")", ";", "this", ".", "setValue", "(", "newValue", ")", ";", "this", ".", "toggle", "(", "false", ")", ";", "}", ";", "public", "get", "value", "(", ")", "{", "const", "{", "defaultValue", "}", "=", "this", ".", "props", ";", "const", "{", "value", "}", "=", "this", ".", "state", ";", "return", "value", "||", "defaultValue", ";", "}", "public", "set", "value", "(", "value", ")", "{", "this", ".", "setValue", "(", "value", ")", ";", "}", "private", "setValue", "(", "value", ",", "emitEvent", "=", "true", ")", "{", "const", "{", "onChange", ",", "children", "}", "=", "this", ".", "props", ";", "const", "oldValue", "=", "this", ".", "state", ".", "value", ";", "const", "el", "=", "children", ".", "find", "(", "(", "r", ")", "=>", "r", ".", "props", ".", "value", "===", "value", ")", ";", "if", "(", "el", ")", "{", "this", ".", "setState", "(", "{", "value", ",", "label", ":", "el", ".", "props", ".", "children", ",", "}", ")", ";", "if", "(", "emitEvent", "&&", "onChange", ")", "{", "onChange", "(", "value", ",", "oldValue", ")", ";", "}", "}", "}", "private", "onWindowMouseDown", "=", "(", "e", ")", "=>", "{", "e", ".", "stopPropagation", "(", ")", ";", "e", ".", "preventDefault", "(", ")", ";", "this", ".", "toggle", "(", "false", ")", ";", "}", ";", "private", "toggle", "(", "value", ")", "{", "this", ".", "setState", "(", "{", "expanded", ":", "value", "}", ")", ";", "requestAnimationFrame", "(", "(", ")", "=>", "{", "if", "(", "value", ")", "{", "window", ".", "addEventListener", "(", "'mousedown'", ",", "this", ".", "onWindowMouseDown", ")", ";", "}", "else", "{", "window", ".", "removeEventListener", "(", "'mousedown'", ",", "this", ".", "onWindowMouseDown", ")", ";", "}", "}", ")", ";", "}", "render", "(", ")", "{", "const", "{", "style", ",", "children", "}", "=", "this", ".", "props", ";", "const", "{", "value", ",", "label", ",", "expanded", "}", "=", "this", ".", "state", ";", "return", "(", "<", "StyledDropdown", "className", "=", "\"dropdown\"", "onMouseDown", "=", "{", "this", ".", "onMouseDown", "}", "style", "=", "{", "style", "}", ">", "<", "Label", ">", "{", "label", "}", "<", "/Label>", "<", "DropIcon", "expanded", "=", "{", "expanded", "}", "/", ">", "<", "Menu", "visible", "=", "{", "expanded", "}", ">", "<", "Items", ">", "{", "React", ".", "Children", ".", "map", "(", "children", ",", "(", "child", ")", "=>", "{", "const", "{", "props", "}", "=", "child", ";", "return", "React", ".", "cloneElement", "(", "child", ",", "{", "selected", ":", "value", "===", "props", ".", "value", ",", "onMouseDown", ":", "(", "e", ")", "=>", "e", ".", "stopPropagation", "(", ")", ",", "onClick", ":", "this", ".", "onItemMouseClick", "(", "props", ".", "value", ")", ",", "}", ")", ";", "}", ")", "}", "<", "/Items>", "<", "/Menu>", "<", "/StyledDropdown>);", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Element", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/components/Dropdown/index.tsx", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "index.tsx"}
{"tokens": ["import", "{", "MutableRefObject", "}", "from", "'react'", ";", "import", "{", "Dropdown", "}", "from", "'~/renderer/components/Dropdown'", ";", "export", "const", "resizeTextarea", "=", "(", "el", ")", "=>", "{", "el", ".", "style", ".", "padding", "=", "''", ";", "el", ".", "style", ".", "height", "=", "'0px'", ";", "requestAnimationFrame", "(", "(", ")", "=>", "{", "el", ".", "style", ".", "padding", "=", "'4px 8px'", ";", "el", ".", "style", ".", "height", "=", "`${", "el", ".", "scrollHeight", "}px`", ";", "}", ")", ";", "}", ";", "export", "const", "selectFileName", "=", "(", "el", ")", "=>", "{", "const", "value", "=", "el", ".", "value", ";", "const", "dotIndex", "=", "value", ".", "lastIndexOf", "(", "'.'", ")", ";", "const", "endIndex", "=", "dotIndex", "<=", "0", "?", "value", ".", "length", ":", "dotIndex", ";", "el", ".", "setSelectionRange", "(", "0", ",", "endIndex", ")", ";", "}", ";", "export", "const", "getValues", "=", "(", "...", "inputs", ")", "=>", "{", "const", "values", "=", "[", "]", ";", "for", "(", "const", "input", "of", "inputs", ")", "{", "const", "value", "=", "input", "instanceof", "HTMLInputElement", "?", "input", ".", "value", ":", "input", ".", "current", ".", "value", ";", "values", ".", "push", "(", "value", ".", "trim", "(", ")", ")", ";", "}", "return", "values", ";", "}", ";", "type", "IFormControl", "=", "HTMLInputElement", "|", "MutableRefObject", "<", "HTMLInputElement", "|", "Dropdown", ">", ";", "export", "const", "ensureValue", "=", "(", "...", "inputs", ")", "=>", "{", "const", "values", "=", "getValues", "(", "...", "inputs", ")", ";", "return", "values", ".", "findIndex", "(", "r", "=>", "!", "r", ".", "length", ")", "===", "-", "1", ";", "}", ";", "export", "const", "setValues", "=", "(", "...", "list", ")", "=>", "{", "list", ".", "forEach", "(", "item", "=>", "{", "const", "[", "input", ",", "value", "]", "=", "item", ";", "if", "(", "input", "instanceof", "HTMLInputElement", ")", "{", "input", ".", "value", "=", "value", ";", "}", "else", "{", "input", ".", "current", ".", "value", "=", "value", ";", "}", "}", ")", ";", "}", ";", "export", "const", "clearValues", "=", "(", "...", "inputs", ")", "=>", "{", "for", "(", "const", "input", "of", "inputs", ")", "{", "if", "(", "input", "instanceof", "HTMLInputElement", ")", "{", "input", ".", "value", "=", "''", ";", "}", "else", "{", "input", ".", "current", ".", "value", "=", "''", ";", "}", "}", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, "HTMLTextAreaElement", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, "string", null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, null, null, "array", null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, "array", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, "array", null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/utils/input.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "input.ts"}
{"tokens": ["import", "{", "ISite", "}", "from", "'~/interfaces'", ";", "export", "const", "formatSiteDescription", "=", "(", "{", "protocol", ",", "user", ",", "host", ",", "port", ",", "}", ")", "=>", "{", "const", "defaultPort", "=", "protocol", "===", "'sftp'", "?", "22", ":", "21", ";", "const", "portStr", "=", "defaultPort", "!==", "port", "?", "`:${", "port", "}`", ":", "''", ";", "return", "`${", "user", "}@${", "host", "}${", "portStr", "}`", ";", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/utils/site.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "site.ts"}
{"tokens": ["import", "{", "remote", "}", "from", "'electron'", ";", "export", "const", "getCurrentWindow", "=", "(", ")", "=>", "remote", ".", "getCurrentWindow", "(", ")", ";", "export", "const", "closeWindow", "=", "(", ")", "=>", "{", "getCurrentWindow", "(", ")", ".", "close", "(", ")", ";", "}", ";", "export", "const", "minimizeWindow", "=", "(", "e", ")", "=>", "{", "getCurrentWindow", "(", ")", ".", "minimize", "(", ")", ";", "}", ";", "export", "const", "maximizeWindow", "=", "(", ")", "=>", "{", "const", "currentWindow", "=", "getCurrentWindow", "(", ")", ";", "if", "(", "currentWindow", ".", "isMaximized", "(", ")", ")", "{", "currentWindow", ".", "unmaximize", "(", ")", ";", "}", "else", "{", "currentWindow", ".", "maximize", "(", ")", ";", "}", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, "BrowserWindow", null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "void", null, null, null, null, null, null, "BrowserWindow", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/qusly/qusly", "path": "qusly/src/renderer/app/utils/window.ts", "commit_hash": "11d9bffc26beee3bef416308ecae8609393383bb", "file": "window.ts"}