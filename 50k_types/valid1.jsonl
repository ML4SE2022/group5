{"tokens": ["export", "function", "assert", "(", "condition", ",", "message", ")", "{", "if", "(", "process", ".", "env", ".", "NODE_ENV", "!==", "'production'", "&&", "!", "condition", ")", "{", "throw", "new", "Error", "(", "`[vue-compose-promise] ${", "message", "}`", ")", ";", "}", "}"], "labels": [null, null, null, null, "boolean", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/posva/vue-compose-promise", "path": "vue-compose-promise/src/utils.ts", "commit_hash": "65edbc4f95181f06fb4f54a25091703006311304", "file": "utils.ts"}
{"tokens": ["import", "{", "reactive", ",", "ref", ",", "watch", ",", "Ref", "}", "from", "'@vue/composition-api'", ";", "interface", "Options", "<", "T", ">", "{", "pendingDelay", "?", ":", "number", "|", "Ref", "<", "number", ">", ";", "promise", "?", ":", "Promise", "<", "T", ">", "|", "Ref", "<", "Promise", "<", "T", ">", ">", "|", "Ref", "<", "Promise", "<", "T", ">", "|", "null", ">", "|", "null", ";", "}", "export", "function", "usePromise", "<", "T", ">", "(", "options", "=", "{", "}", ")", "{", "const", "state", "=", "reactive", "(", "{", "promise", ":", "ref", "<", "Promise", "<", "T", ">", "|", "null", ">", "(", "options", ".", "promise", "||", "null", ")", ",", "isPending", ":", "ref", "(", "true", ")", ",", "data", ":", "ref", "<", "T", "|", "null", ">", "(", "null", ")", ",", "error", ":", "ref", "<", "Error", "|", "null", ">", "(", "null", ")", ",", "isDelayOver", ":", "ref", "(", "false", ")", ",", "}", ")", ";", "let", "timerId", "=", "null", ";", "const", "localOptions", "=", "reactive", "(", "{", "pendingDelay", ":", "options", ".", "pendingDelay", "==", "null", "?", "200", ":", "options", ".", "pendingDelay", ",", "}", ")", ";", "function", "setupDelay", "(", ")", "{", "if", "(", "localOptions", ".", "pendingDelay", ">", "0", ")", "{", "state", ".", "isDelayOver", "=", "false", ";", "if", "(", "timerId", ")", "clearTimeout", "(", "timerId", ")", ";", "timerId", "=", "setTimeout", "(", "(", ")", "=>", "(", "state", ".", "isDelayOver", "=", "true", ")", ",", "localOptions", ".", "pendingDelay", ")", ";", "}", "else", "{", "state", ".", "isDelayOver", "=", "true", ";", "}", "}", "watch", "(", "(", ")", "=>", "state", ".", "promise", ",", "newPromise", "=>", "{", "state", ".", "isPending", "=", "true", ";", "state", ".", "error", "=", "null", ";", "if", "(", "!", "newPromise", ")", "{", "state", ".", "data", "=", "null", ";", "state", ".", "isDelayOver", "=", "false", ";", "if", "(", "timerId", ")", "clearTimeout", "(", "timerId", ")", ";", "timerId", "=", "null", ";", "return", ";", "}", "setupDelay", "(", ")", ";", "newPromise", ".", "then", "(", "value", "=>", "{", "if", "(", "state", ".", "promise", "===", "newPromise", ")", "{", "state", ".", "data", "=", "value", ";", "state", ".", "isPending", "=", "false", ";", "}", "}", ")", ".", "catch", "(", "err", "=>", "{", "if", "(", "state", ".", "promise", "===", "newPromise", ")", "{", "state", ".", "error", "=", "err", ";", "state", ".", "isPending", "=", "false", ";", "}", "}", ")", ";", "}", ")", ";", "return", "{", "state", ",", "options", ":", "localOptions", ",", "set", ":", "(", "p", ")", "=>", "(", "state", ".", "promise", "=", "p", ")", ",", "}", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Readonly", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ReturnType", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Promise", null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/posva/vue-compose-promise", "path": "vue-compose-promise/src/usePromise.ts", "commit_hash": "65edbc4f95181f06fb4f54a25091703006311304", "file": "usePromise.ts"}
{"tokens": ["import", "{", "assert", "}", "from", "'./utils'", ";", "import", "{", "usePromise", "}", "from", "'./usePromise'", ";", "import", "{", "watch", "}", "from", "'@vue/composition-api'", ";", "import", "{", "createComponent", ",", "createElement", "as", "h", ",", "SetupContext", ",", "}", "from", "'@vue/composition-api'", ";", "function", "getSlotVNode", "(", "slots", ",", "slotName", ",", "data", ")", "{", "assert", "(", "!", "!", "slots", "[", "slotName", "]", ",", "`No slot \"${", "slotName", "}\" provided`", ")", ";", "const", "nodes", "=", "slots", "[", "slotName", "]", "(", "data", ")", ";", "assert", "(", "nodes", ".", "length", ">", "0", ",", "`Provided scoped slot \"${", "slotName", "}\" is empty`", ")", ";", "return", "nodes", ";", "}", "const", "realPromiseProp", "=", "{", "type", ":", "Promise", ",", "required", ":", "true", ",", "}", ";", "export", "const", "Promised", "=", "createComponent", "(", "{", "props", ":", "{", "tag", ":", "{", "type", ":", "String", ",", "default", ":", "'span'", ",", "}", ",", "promise", ":", "(", "{", "validator", ":", "(", "p", ")", "=>", "p", "&&", "typeof", "p", ".", "then", "===", "'function'", "&&", "typeof", "p", ".", "catch", "===", "'function'", ",", "}", "as", "unknown", ")", "as", "typeof", "realPromiseProp", ",", "pendingDelay", ":", "{", "type", ":", "Number", ",", "default", ":", "200", ",", "}", ",", "}", ",", "setup", "(", "props", ",", "{", "slots", "}", ")", "{", "const", "promised", "=", "usePromise", "(", "{", "pendingDelay", ":", "props", ".", "pendingDelay", ",", "promise", ":", "props", ".", "promise", ",", "}", ")", ";", "watch", "(", "(", ")", "=>", "props", ".", "promise", ",", "promise", "=>", "{", "promised", ".", "state", ".", "promise", "=", "promise", ";", "}", ")", ";", "return", "(", ")", "=>", "{", "if", "(", "slots", ".", "combined", ")", "{", "const", "node", "=", "slots", ".", "combined", "(", "{", "...", "promised", ".", "state", ",", "}", ")", ";", "assert", "(", "node", ".", "length", ">", "0", ",", "'Provided scoped slot \"combined\" cannot be empty'", ")", ";", "return", "node", "[", "0", "]", ";", "}", "if", "(", "promised", ".", "state", ".", "error", ")", "{", "return", "getSlotVNode", "(", "slots", ",", "'rejected'", ",", "promised", ".", "state", ".", "error", ")", ";", "}", "if", "(", "!", "promised", ".", "state", ".", "isPending", ")", "{", "return", "getSlotVNode", "(", "slots", ",", "'default'", ",", "promised", ".", "state", ".", "data", ")", ";", "}", "if", "(", "!", "promised", ".", "state", ".", "isDelayOver", ")", "return", "h", "(", ")", ";", "return", "getSlotVNode", "(", "slots", ",", "'pending'", ",", "promised", ".", "state", ".", "data", ")", ";", "}", ";", "}", ",", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/posva/vue-compose-promise", "path": "vue-compose-promise/src/Promised.ts", "commit_hash": "65edbc4f95181f06fb4f54a25091703006311304", "file": "Promised.ts"}
{"tokens": ["import", "VueCompositionApi", "from", "'@vue/composition-api'", ";", "import", "fakePromise", "from", "'faked-promise'", ";", "import", "Vue", "from", "'vue'", ";", "import", "MultipleChildrenHelper", "from", "'./utils/MultipleChildrenHelper.vue'", ";", "import", "CombinedMultipleChildren", "from", "'./utils/CombinedMultipleChildren.vue'", ";", "Vue", ".", "use", "(", "VueCompositionApi", ")", ";", "const", "timeout", "=", "setTimeout", ";", "const", "tick", "=", "(", ")", "=>", "new", "Promise", "(", "resolve", "=>", "timeout", "(", "resolve", ",", "0", ")", ")", ";", "jest", ".", "useFakeTimers", "(", ")", ";", "function", "factory", "(", "component", ",", "{", "pendingDelay", "=", "0", ",", "startAsNull", "=", "false", "}", "=", "{", "}", ")", "{", "const", "el", "=", "document", ".", "createElement", "(", "'div'", ")", ";", "el", ".", "textContent", "=", "'hey'", ";", "document", ".", "body", ".", "appendChild", "(", "el", ")", ";", "const", "[", "promise", ",", "resolve", ",", "reject", "]", "=", "fakePromise", "(", ")", ";", "const", "vm", "=", "new", "Vue", "(", "{", "el", ",", "data", ":", "{", "promise", ":", "startAsNull", "?", "null", ":", "promise", ",", "pendingDelay", "}", ",", "render", "(", "h", ")", "{", "return", "h", "(", "component", ",", "{", "props", ":", "{", "promise", ":", "this", ".", "promise", ",", "pendingDelay", ":", "this", ".", "pendingDelay", "}", ",", "}", ")", ";", "}", ",", "}", ")", ";", "return", "{", "vm", ",", "promise", ",", "resolve", ",", "reject", ",", "el", "}", ";", "}", "function", "combinedFactory", "(", "options", "?", ")", "{", "return", "factory", "(", "CombinedMultipleChildren", ",", "options", ")", ";", "}", "function", "multipleFactory", "(", "options", "?", ")", "{", "return", "factory", "(", "MultipleChildrenHelper", ",", "options", ")", ";", "}", "describe", "(", "'Promised'", ",", "(", ")", "=>", "{", "beforeEach", "(", "(", ")", "=>", "{", "jest", ".", "runAllTimers", "(", ")", ";", "}", ")", ";", "describe", "(", "'three slots'", ",", "(", ")", "=>", "{", "it", "(", "'displays pending'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "multipleFactory", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toMatchInlineSnapshot", "(", "`\"pending\"`", ")", ";", "}", ")", ";", "it", "(", "'displays the resolved value once resolved'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "resolve", "}", "=", "multipleFactory", "(", ")", ";", "resolve", "(", "'foo'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toBe", "(", "'foo'", ")", ";", "}", ")", ";", "it", "(", "'displays an error if rejected'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "reject", "}", "=", "multipleFactory", "(", ")", ";", "reject", "(", "new", "Error", "(", "'hello'", ")", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toBe", "(", "'hello'", ")", ";", "}", ")", ";", "it", "(", "'cancels previous promise'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "resolve", "}", "=", "multipleFactory", "(", ")", ";", "const", "other", "=", "fakePromise", "(", ")", ";", "vm", ".", "promise", "=", "other", "[", "0", "]", ";", "resolve", "(", "'foo'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toBe", "(", "'pending'", ")", ";", "}", ")", ";", "it", "(", "'cancels previous rejected promise'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "reject", "}", "=", "multipleFactory", "(", ")", ";", "const", "other", "=", "fakePromise", "(", ")", ";", "vm", ".", "promise", "=", "other", "[", "0", "]", ";", "reject", "(", "new", "Error", "(", "'failed'", ")", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toBe", "(", "'pending'", ")", ";", "}", ")", ";", "describe", "(", "'pendingDelay'", ",", "(", ")", "=>", "{", "it", ".", "skip", "(", "'displays nothing before the delay'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "multipleFactory", "(", "{", "pendingDelay", ":", "1", "}", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toBe", "(", "''", ")", ";", "jest", ".", "advanceTimersByTime", "(", "10", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", ")", ".", "toBe", "(", "'pending'", ")", ";", "}", ")", ";", "it", ".", "skip", "(", "'custom pendingDelay'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "multipleFactory", "(", "{", "pendingDelay", ":", "200", "}", ")", ";", "expect", "(", "setTimeout", ")", ".", "toHaveBeenCalledTimes", "(", "1", ")", ";", "expect", "(", "setTimeout", ")", ".", "toHaveBeenLastCalledWith", "(", "expect", ".", "any", "(", "Function", ")", ",", "200", ")", ";", "const", "[", "promise", "]", "=", "fakePromise", "(", ")", ";", "vm", ".", "pendingDelay", "=", "100", ";", "vm", ".", "promise", "=", "promise", ";", "await", "tick", "(", ")", ";", "expect", "(", "setTimeout", ")", ".", "toHaveBeenCalledTimes", "(", "2", ")", ";", "expect", "(", "setTimeout", ")", ".", "toHaveBeenLastCalledWith", "(", "expect", ".", "any", "(", "Function", ")", ",", "100", ")", ";", "}", ")", ";", "it", "(", "'cancels previous timeouts'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "multipleFactory", "(", "{", "pendingDelay", ":", "1", "}", ")", ";", "expect", "(", "clearTimeout", ")", ".", "not", ".", "toHaveBeenCalled", "(", ")", ";", "const", "[", "promise", "]", "=", "fakePromise", "(", ")", ";", "vm", ".", "promise", "=", "promise", ";", "await", "tick", "(", ")", ";", "expect", "(", "clearTimeout", ")", ".", "toHaveBeenCalled", "(", ")", ";", "}", ")", ";", "it", ".", "skip", "(", "'cancels timeout when promise is set to null'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "multipleFactory", "(", "{", "pendingDelay", ":", "1", "}", ")", ";", "expect", "(", "clearTimeout", ")", ".", "not", ".", "toHaveBeenCalled", "(", ")", ";", "vm", ".", "promise", "=", "null", ";", "await", "tick", "(", ")", ";", "expect", "(", "clearTimeout", ")", ".", "toHaveBeenCalledTimes", "(", "1", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'errors'", ",", "(", ")", "=>", "{", "let", "errorSpy", ";", "beforeEach", "(", "(", ")", "=>", "{", "errorSpy", "=", "jest", ".", "spyOn", "(", "console", ",", "'error'", ")", ".", "mockImplementation", "(", "(", ")", "=>", "{", "}", ")", ";", "}", ")", ";", "afterEach", "(", "(", ")", "=>", "{", "errorSpy", ".", "mockRestore", "(", ")", ";", "}", ")", ";", "}", ")", ";", "describe", "(", "'combined slot'", ",", "(", ")", "=>", "{", "let", "errorSpy", ";", "beforeEach", "(", "(", ")", "=>", "{", "errorSpy", "=", "jest", ".", "spyOn", "(", "console", ",", "'error'", ")", ".", "mockImplementation", "(", "(", ")", "=>", "{", "}", ")", ";", "}", ")", ";", "afterEach", "(", "(", ")", "=>", "{", "errorSpy", ".", "mockRestore", "(", ")", ";", "}", ")", ";", "it", "(", "'displays initial state'", ",", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "combinedFactory", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", "!", ".", "trim", "(", ")", ")", ".", "toBe", "(", "'true true'", ")", ";", "}", ")", ";", "it", "(", "'displays data when resolved'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "resolve", "}", "=", "combinedFactory", "(", ")", ";", "resolve", "(", "'foo'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'false'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'foo'", ")", ";", "}", ")", ";", "it", "(", "'works with no promise'", ",", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "combinedFactory", "(", "{", "startAsNull", ":", "true", "}", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", "!", ".", "trim", "(", ")", ")", ".", "toBe", "(", "'true false'", ")", ";", "}", ")", ";", "it", "(", "'displays an error if rejected'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "reject", "}", "=", "combinedFactory", "(", ")", ";", "reject", "(", "new", "Error", "(", "'hello'", ")", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'false'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.error'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'hello'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "''", ")", ";", "}", ")", ";", "it", "(", "'data contains previous data in between calls'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "resolve", "}", "=", "combinedFactory", "(", ")", ";", "resolve", "(", "'foo'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'false'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'foo'", ")", ";", "const", "[", "promise", ",", "resolve2", "]", "=", "fakePromise", "(", ")", ";", "vm", ".", "promise", "=", "promise", ";", "await", "tick", "(", ")", ";", "resolve2", "(", "'bar'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'foo'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'false'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'bar'", ")", ";", "}", ")", ";", "it", "(", "'data is reset when promise is set to null'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", ",", "resolve", "}", "=", "combinedFactory", "(", ")", ";", "resolve", "(", "'foo'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'false'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'foo'", ")", ";", "vm", ".", "promise", "=", "null", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "textContent", "!", ".", "trim", "(", ")", ")", ".", "toBe", "(", "'true false'", ")", ";", "}", ")", ";", "it", ".", "skip", "(", "'throws if slot is empty'", ",", "(", ")", "=>", "{", "expect", "(", "errorSpy", ")", ".", "not", ".", "toHaveBeenCalled", "(", ")", ";", "expect", "(", "(", ")", "=>", "{", "}", ")", ".", "toThrow", "(", "/Provided scoped slot \"combined\" cannot be empty/", ")", ";", "expect", "(", "errorSpy", ")", ".", "toHaveBeenCalledTimes", "(", "2", ")", ";", "}", ")", ";", "it", ".", "skip", "(", "'allows multiple nodes'", ",", "async", "(", ")", "=>", "{", "}", ")", ";", "it", "(", "'can be resolved right away'", ",", "async", "(", ")", "=>", "{", "const", "{", "vm", "}", "=", "combinedFactory", "(", "{", "startAsNull", ":", "true", "}", ")", ";", "vm", ".", "promise", "=", "Promise", ".", "resolve", "(", "'hello'", ")", ";", "await", "tick", "(", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.pending'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'false'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.delay'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'true'", ")", ";", "expect", "(", "vm", ".", "$el", ".", "querySelector", "(", "'.data'", ")", "!", ".", "textContent", ")", ".", "toBe", "(", "'hello'", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";", "}", ")", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "jest.SpyInstance", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "jest.SpyInstance", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/posva/vue-compose-promise", "path": "vue-compose-promise/__tests__/index.spec.ts", "commit_hash": "65edbc4f95181f06fb4f54a25091703006311304", "file": "index.spec.ts"}
{"tokens": ["import", "{", "FellowDataQuery", "}", "from", "'../../graphql-types'", ";", "import", "{", "GithubProfile", "}", "from", "'../lib/github'", ";", "export", "type", "FellowType", "=", "{", "name", "?", ":", "string", "|", "null", ";", "profilepic", "?", ":", "string", "|", "null", ";", "bio", "?", ":", "string", "|", "null", ";", "lat", "?", ":", "string", "|", "number", "|", "null", ";", "long", "?", ":", "string", "|", "number", "|", "null", ";", "}", "&", "{", "[", "k", "in", "SocialType", "]", "?", ":", "string", "|", "null", ";", "}", ";", "export", "const", "SocialLinks", "=", "{", "github", ":", "'https://github.com'", ",", "linkedin", ":", "'https://www.linkedin.com/in'", ",", "twitter", ":", "'https://twitter.com'", ",", "}", ";", "export", "type", "SocialType", "=", "keyof", "typeof", "SocialLinks", ";", "export", "class", "Fellow", "implements", "FellowType", "{", "bio", ":", "string", ";", "github", ":", "string", ";", "lat", ":", "number", ";", "linkedin", "?", ":", "string", ";", "long", ":", "number", ";", "name", ":", "string", ";", "twitter", "?", ":", "string", ";", "website", "?", ":", "string", ";", "company", "?", ":", "string", ";", "podName", ":", "string", ";", "podId", ":", "string", ";", "podLogoUrl", "?", ":", "string", ";", "body", "?", ":", "string", ";", "profilePictureUrl", "?", ":", "string", ";", "constructor", "(", "githubProfile", ",", "allImageSharp", ",", "fellow", "?", ",", "body", "?", ",", "githubCoords", "?", ")", "{", "const", "{", "profilepic", ",", "name", ",", "lat", ",", "bio", ",", "linkedin", ",", "long", ",", "twitter", "}", "=", "fellow", "||", "{", "}", ";", "if", "(", "!", "githubProfile", ")", "{", "console", ".", "log", "(", "fellow", ")", ";", "throw", "new", "Error", "(", "'No github profile given for '", "+", "fellow", "?.", "github", ")", ";", "}", "if", "(", "fellow", "?.", "github", "&&", "fellow", ".", "github", ".", "toLowerCase", "(", ")", "!==", "githubProfile", ".", "username", ".", "toLowerCase", "(", ")", ")", "throw", "new", "Error", "(", "'Mismatch between given MDX fellow and Github Fellow!'", ")", ";", "this", ".", "name", "=", "name", "||", "githubProfile", ".", "name", ";", "this", ".", "bio", "=", "bio", "||", "githubProfile", ".", "bio", "||", "''", ";", "this", ".", "github", "=", "githubProfile", ".", "username", ";", "this", ".", "twitter", "=", "twitter", "||", "githubProfile", ".", "twitter_username", ";", "this", ".", "linkedin", "=", "linkedin", "||", "undefined", ";", "this", ".", "lat", "=", "fellow", "?.", "lat", "?", "parseFloat", "(", "lat", "as", "string", ")", ":", "githubCoords", "?.", "lat", "||", "-", "74.496413", "+", "Math", ".", "random", "(", ")", "*", "5", ";", "this", ".", "long", "=", "fellow", "?.", "long", "?", "parseFloat", "(", "long", "as", "string", ")", ":", "githubCoords", "?.", "long", "||", "27.317572", "+", "Math", ".", "random", "(", ")", "*", "50", ";", "this", ".", "website", "=", "githubProfile", ".", "website_url", ";", "this", ".", "company", "=", "githubProfile", ".", "company", ";", "this", ".", "podName", "=", "githubProfile", ".", "pod", ";", "this", ".", "podId", "=", "githubProfile", ".", "pod_id", ";", "this", ".", "podLogoUrl", "=", "githubProfile", ".", "podLogoUrl", ";", "this", ".", "body", "=", "body", ";", "this", ".", "profilePictureUrl", "=", "allImageSharp", ".", "nodes", ".", "find", "(", "(", "ele", ")", "=>", "{", "if", "(", "!", "ele", ".", "fluid", "||", "!", "ele", ".", "fluid", ".", "originalName", ")", "return", "false", ";", "return", "ele", ".", "fluid", ".", "originalName", "===", "profilepic", ";", "}", ")", "?.", "fluid", "?.", "src", "||", "githubProfile", "?.", "profilepic", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, "UNK", null, null, "string", null, null, "object", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Korusuke/MLH-Fellow-Map", "path": "MLH-Fellow-Map/src/data/fellow-type.ts", "commit_hash": "e07350fd34c8e3741bb23d13bb09eee00c8b7373", "file": "fellow-type.ts"}
{"tokens": ["import", "{", "SimpleMapService", "}", "from", "'../lib/map-services'", ";", "export", "const", "mapServices", "=", "[", "{", "name", ":", "'OpenStreetMap'", ",", "attribution", ":", "'&copy; <a href=\"http://osm.org/copyright\">OpenStreetMap</a> contributors'", ",", "url", ":", "'https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png'", ",", "}", ",", "]", ";"], "labels": [null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Korusuke/MLH-Fellow-Map", "path": "MLH-Fellow-Map/src/data/map-services.ts", "commit_hash": "e07350fd34c8e3741bb23d13bb09eee00c8b7373", "file": "map-services.ts"}
{"tokens": ["import", "{", "mapServices", "}", "from", "'../data/map-services'", ";", "description", "export", "interface", "SimpleMapService", "{", "name", ":", "string", ";", "url", ":", "string", ";", "attribution", ":", "string", ";", "}", "export", "function", "getMapServices", "(", ")", "{", "return", "mapServices", "||", "[", "]", ";", "}", "description", "export", "function", "getMapServiceByName", "(", "name", ",", "userServices", "=", "[", "]", ")", "{", "const", "services", "=", "[", "...", "getMapServices", "(", ")", ",", "...", "userServices", "]", ";", "return", "services", ".", "find", "(", "(", "service", ")", "=>", "service", ".", "name", "===", "name", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Korusuke/MLH-Fellow-Map", "path": "MLH-Fellow-Map/src/lib/map-services.ts", "commit_hash": "e07350fd34c8e3741bb23d13bb09eee00c8b7373", "file": "map-services.ts"}
{"tokens": ["import", "{", "SimpleMapService", "}", "from", "'../lib/map-services'", ";", "class", "MapService", "implements", "SimpleMapService", "{", "name", ":", "string", ";", "attribution", ":", "string", ";", "url", ":", "string", ";", "_service", ":", "SimpleMapService", ";", "constructor", "(", "service", ")", "{", "this", ".", "_service", "=", "{", "...", "service", "}", ";", "this", ".", "name", "=", "this", ".", "_service", ".", "name", ";", "this", ".", "attribution", "=", "this", ".", "_service", ".", "attribution", ";", "this", ".", "url", "=", "this", ".", "_service", ".", "url", ";", "}", "}", "export", "default", "MapService", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Korusuke/MLH-Fellow-Map", "path": "MLH-Fellow-Map/src/models/map-service.ts", "commit_hash": "e07350fd34c8e3741bb23d13bb09eee00c8b7373", "file": "map-service.ts"}
{"tokens": ["import", "React", ",", "{", "FunctionComponent", "}", "from", "'react'", ";", "import", "{", "Map", "as", "BaseMap", ",", "TileLayer", ",", "ZoomControl", "}", "from", "'react-leaflet'", ";", "import", "{", "useConfigureLeaflet", "}", "from", "'../hooks'", ";", "import", "{", "isDomAvailable", "}", "from", "'../lib/util'", ";", "import", "{", "getMapServiceByName", "}", "from", "'../lib/map-services'", ";", "const", "DEFAULT_MAP_SERVICE", "=", "'OpenStreetMap'", ";", "const", "Map", "=", "(", "{", "children", ",", "className", ",", "defaultBaseMap", "=", "DEFAULT_MAP_SERVICE", ",", "...", "rest", "}", ")", "=>", "{", "useConfigureLeaflet", "(", ")", ";", "const", "basemap", "=", "getMapServiceByName", "(", "defaultBaseMap", ")", ";", "const", "mapClassName", "=", "`map`", ";", "if", "(", "!", "isDomAvailable", "(", ")", ")", "{", "return", "(", "<", "div", "className", "=", "{", "`${", "mapClassName", "} ${", "className", "||", "''", "}`", "}", ">", "<", "p", "className", "=", "\"map-loading\"", ">", "Loading", "map", "...", "<", "/p>", "<", "/div>);", "}", "const", "mapSettings", "=", "{", "className", ":", "'map-base'", ",", "zoomControl", ":", "false", ",", "...", "rest", ",", "}", ";", "return", "(", "<", "div", "className", "=", "{", "mapClassName", "}", ">", "<", "BaseMap", "{", "...", "mapSettings", "}", ">", "{", "basemap", "&&", "<", "TileLayer", "{", "...", "basemap", "}", "/", ">", "}", "{", "children", "}", "<", "ZoomControl", "position", "=", "\"bottomright\"", "/", ">", "<", "/BaseMap>", "<", "/div>);", "}", ";", "export", "default", "Map", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "FunctionComponent", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/Korusuke/MLH-Fellow-Map", "path": "MLH-Fellow-Map/src/components/Map.tsx", "commit_hash": "e07350fd34c8e3741bb23d13bb09eee00c8b7373", "file": "Map.tsx"}
{"tokens": ["import", "*", "as", "vscode", "from", "'vscode'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "*", "as", "os", "from", "'os'", ";", "export", "function", "lineRange", "(", "character", ",", "position", ")", "{", "return", "new", "vscode", ".", "Range", "(", "position", ".", "line", ",", "character", ",", "position", ".", "line", ",", "position", ".", "character", ")", ";", "}", "export", "function", "getSnippetDir", "(", ")", "{", "let", "platform", "=", "os", ".", "platform", "(", ")", ";", "let", "APPDATA", "=", "process", ".", "env", ".", "APPDATA", "||", "''", ";", "let", "HOME", "=", "process", ".", "env", ".", "HOME", "||", "''", ";", "if", "(", "platform", "==", "'win32'", ")", "{", "return", "path", ".", "join", "(", "APPDATA", ",", "'Code/User/hsnips'", ")", ";", "}", "else", "if", "(", "platform", "==", "'darwin'", ")", "{", "return", "path", ".", "join", "(", "HOME", ",", "'Library/Application Support/Code/User/hsnips'", ")", ";", "}", "else", "{", "return", "path", ".", "join", "(", "HOME", ",", "'.config/Code/User/hsnips'", ")", ";", "}", "}", "export", "function", "applyOffset", "(", "position", ",", "text", ",", "indent", ")", "{", "text", "=", "text", ".", "replace", "(", "'\\\\$'", ",", "'$'", ")", ";", "let", "lines", "=", "text", ".", "split", "(", "'\\n'", ")", ";", "let", "newLine", "=", "position", ".", "line", "+", "lines", ".", "length", "-", "1", ";", "let", "charOffset", "=", "lines", "[", "lines", ".", "length", "-", "1", "]", ".", "length", ";", "let", "newChar", "=", "position", ".", "character", "+", "charOffset", ";", "if", "(", "lines", ".", "length", ">", "1", ")", "newChar", "=", "indent", "+", "charOffset", ";", "return", "position", ".", "with", "(", "newLine", ",", "newChar", ")", ";", "}", "export", "function", "getWorkspaceUri", "(", ")", "{", "return", "vscode", ".", "workspace", ".", "workspaceFolders", "?.", "[", "0", "]", "?.", "uri", "?.", "toString", "(", ")", "??", "\"\"", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.Range", null, "number", null, "vscode.Position", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.Position", null, "vscode.Position", null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/utils.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "utils.ts"}
{"tokens": ["function", "makeId", "(", "length", ")", "{", "let", "result", "=", "''", ";", "const", "characters", "=", "'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789'", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "length", ";", "i", "++", ")", "{", "result", "+=", "characters", ".", "charAt", "(", "Math", ".", "floor", "(", "Math", ".", "random", "(", ")", "*", "characters", ".", "length", ")", ")", ";", "}", "return", "`[${", "result", "}]`", ";", "}", "export", "class", "HSnippetUtils", "{", "private", "placeholders", ":", "[", "string", ",", "string", "]", "[", "]", ";", "constructor", "(", ")", "{", "this", ".", "placeholders", "=", "[", "]", ";", "}", "tabstop", "(", "tabstop", ",", "placeholder", "?", ")", "{", "const", "id", "=", "makeId", "(", "10", ")", ";", "let", "text", "=", "''", ";", "if", "(", "placeholder", ")", "{", "text", "=", "`\\${${", "tabstop", "}:${", "placeholder", "}}`", ";", "}", "else", "{", "text", "=", "`$${", "tabstop", "}`", ";", "}", "this", ".", "placeholders", ".", "push", "(", "[", "id", ",", "text", "]", ")", ";", "return", "id", ";", "}", "static", "format", "(", "value", ",", "utils", ")", "{", "for", "(", "let", "[", "id", ",", "text", "]", "of", "utils", ".", "placeholders", ")", "{", "value", "=", "value", ".", "replace", "(", "id", ",", "text", ")", ";", "}", "return", "value", ";", "}", "}"], "labels": [null, null, null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "number", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/hsnippetUtils.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "hsnippetUtils.ts"}
{"tokens": ["import", "{", "HSnippetUtils", "}", "from", "'./hsnippetUtils'", ";", "export", "type", "GeneratorResult", "=", "[", "(", "string", "|", "{", "block", ":", "number", ";", "}", ")", "[", "]", ",", "string", "[", "]", "]", ";", "export", "type", "GeneratorFunction", "=", "(", "texts", ":", "string", "[", "]", ",", "matchGroups", ":", "string", "[", "]", ",", "workspaceUri", ":", "string", ",", "fileUri", ":", "string", ",", "hsnippetUtils", ":", "HSnippetUtils", ")", "=>", "GeneratorResult", ";", "export", "interface", "ContextInfo", "{", "scopes", ":", "string", "[", "]", ";", "}", "export", "type", "ContextFilter", "=", "(", "context", ":", "ContextInfo", ")", "=>", "boolean", ";", "export", "class", "HSnippet", "{", "trigger", ":", "string", ";", "description", ":", "string", ";", "generator", ":", "GeneratorFunction", ";", "contextFilter", "?", ":", "ContextFilter", ";", "regexp", "?", ":", "RegExp", ";", "placeholders", ":", "number", ";", "priority", ":", "number", ";", "automatic", "=", "false", ";", "multiline", "=", "false", ";", "inword", "=", "false", ";", "wordboundary", "=", "false", ";", "beginningofline", "=", "false", ";", "constructor", "(", "header", ",", "generator", ",", "placeholders", ",", "contextFilter", "?", ")", "{", "this", ".", "description", "=", "header", ".", "description", ";", "this", ".", "generator", "=", "generator", ";", "this", ".", "contextFilter", "=", "contextFilter", ";", "this", ".", "placeholders", "=", "placeholders", ";", "this", ".", "priority", "=", "header", ".", "priority", "||", "0", ";", "if", "(", "header", ".", "trigger", "instanceof", "RegExp", ")", "{", "this", ".", "regexp", "=", "header", ".", "trigger", ";", "this", ".", "trigger", "=", "''", ";", "}", "else", "{", "this", ".", "trigger", "=", "header", ".", "trigger", ";", "}", "if", "(", "header", ".", "flags", ".", "includes", "(", "'A'", ")", ")", "this", ".", "automatic", "=", "true", ";", "if", "(", "header", ".", "flags", ".", "includes", "(", "'M'", ")", ")", "this", ".", "multiline", "=", "true", ";", "if", "(", "header", ".", "flags", ".", "includes", "(", "'i'", ")", ")", "this", ".", "inword", "=", "true", ";", "if", "(", "header", ".", "flags", ".", "includes", "(", "'w'", ")", ")", "this", ".", "wordboundary", "=", "true", ";", "if", "(", "header", ".", "flags", ".", "includes", "(", "'b'", ")", ")", "this", ".", "beginningofline", "=", "true", ";", "}", "}", "export", "interface", "IHSnippetHeader", "{", "trigger", ":", "string", "|", "RegExp", ";", "description", ":", "string", ";", "flags", ":", "string", ";", "priority", "?", ":", "number", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, "number", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/hsnippet.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "hsnippet.ts"}
{"tokens": ["import", "*", "as", "vscode", "from", "'vscode'", ";", "import", "{", "lineRange", "}", "from", "'./utils'", ";", "import", "{", "HSnippet", "}", "from", "'./hsnippet'", ";", "export", "class", "CompletionInfo", "{", "range", ":", "vscode", ".", "Range", ";", "completionRange", ":", "vscode", ".", "Range", ";", "snippet", ":", "HSnippet", ";", "label", ":", "string", ";", "groups", ":", "string", "[", "]", ";", "constructor", "(", "snippet", ",", "label", ",", "range", ",", "groups", ")", "{", "this", ".", "snippet", "=", "snippet", ";", "this", ".", "label", "=", "label", ";", "this", ".", "range", "=", "range", ";", "this", ".", "completionRange", "=", "new", "vscode", ".", "Range", "(", "range", ".", "start", ",", "range", ".", "start", ".", "translate", "(", "0", ",", "label", ".", "length", ")", ")", ";", "this", ".", "groups", "=", "groups", ";", "}", "toCompletionItem", "(", ")", "{", "let", "completionItem", "=", "new", "vscode", ".", "CompletionItem", "(", "this", ".", "label", ")", ";", "completionItem", ".", "range", "=", "this", ".", "range", ";", "completionItem", ".", "detail", "=", "this", ".", "snippet", ".", "description", ";", "completionItem", ".", "insertText", "=", "this", ".", "label", ";", "completionItem", ".", "command", "=", "{", "command", ":", "'hsnips.expand'", ",", "title", ":", "'expand'", ",", "arguments", ":", "[", "this", "]", ",", "}", ";", "return", "completionItem", ";", "}", "}", "function", "matchSuffixPrefix", "(", "context", ",", "trigger", ")", "{", "while", "(", "trigger", ".", "length", ")", "{", "if", "(", "context", ".", "endsWith", "(", "trigger", ")", ")", "return", "trigger", ";", "trigger", "=", "trigger", ".", "substring", "(", "0", ",", "trigger", ".", "length", "-", "1", ")", ";", "}", "return", "null", ";", "}", "export", "function", "getCompletions", "(", "document", ",", "position", ",", "snippets", ")", "{", "let", "line", "=", "document", ".", "getText", "(", "lineRange", "(", "0", ",", "position", ")", ")", ";", "let", "match", "=", "line", ".", "match", "(", "/\\S*$/", ")", ";", "let", "contextRange", "=", "lineRange", "(", "(", "match", "as", "RegExpMatchArray", ")", ".", "index", "||", "0", ",", "position", ")", ";", "let", "context", "=", "document", ".", "getText", "(", "contextRange", ")", ";", "let", "precedingContextRange", "=", "new", "vscode", ".", "Range", "(", "position", ".", "line", ",", "0", ",", "position", ".", "line", ",", "(", "match", "as", "RegExpMatchArray", ")", ".", "index", "||", "0", ")", ";", "let", "precedingContext", "=", "document", ".", "getText", "(", "precedingContextRange", ")", ";", "let", "isPrecedingContextWhitespace", "=", "precedingContext", ".", "match", "(", "/^\\s*$/", ")", "!=", "null", ";", "let", "wordRange", "=", "document", ".", "getWordRangeAtPosition", "(", "position", ")", "||", "contextRange", ";", "if", "(", "wordRange", ".", "end", "!=", "position", ")", "{", "wordRange", "=", "new", "vscode", ".", "Range", "(", "wordRange", ".", "start", ",", "position", ")", ";", "}", "let", "wordContext", "=", "document", ".", "getText", "(", "wordRange", ")", ";", "let", "longContext", "=", "null", ";", "let", "completions", "=", "[", "]", ";", "let", "snippetContext", "=", "{", "scopes", ":", "[", "]", "}", ";", "if", "(", "document", ".", "languageId", "!==", "'plaintext'", ")", "{", "snippetContext", "=", "{", "scopes", ":", "vscode", ".", "extensions", ".", "getExtension", "(", "'draivin.hscopes'", ")", "!", ".", "exports", ".", "getScopeAt", "(", "document", ",", "position", ")", ".", "scopes", ",", "}", ";", "}", "for", "(", "let", "snippet", "of", "snippets", ")", "{", "if", "(", "snippet", ".", "contextFilter", "&&", "!", "snippet", ".", "contextFilter", "(", "snippetContext", ")", ")", "{", "continue", ";", "}", "let", "snippetMatches", "=", "false", ";", "let", "snippetRange", "=", "contextRange", ";", "let", "prefixMatches", "=", "false", ";", "let", "matchGroups", "=", "[", "]", ";", "let", "label", "=", "snippet", ".", "trigger", ";", "if", "(", "snippet", ".", "trigger", ")", "{", "let", "matchingPrefix", "=", "null", ";", "if", "(", "snippet", ".", "inword", ")", "{", "snippetMatches", "=", "context", ".", "endsWith", "(", "snippet", ".", "trigger", ")", ";", "matchingPrefix", "=", "snippetMatches", "?", "snippet", ".", "trigger", ":", "matchSuffixPrefix", "(", "context", ",", "snippet", ".", "trigger", ")", ";", "}", "else", "if", "(", "snippet", ".", "wordboundary", ")", "{", "snippetMatches", "=", "wordContext", "==", "snippet", ".", "trigger", ";", "matchingPrefix", "=", "snippet", ".", "trigger", ".", "startsWith", "(", "wordContext", ")", "?", "wordContext", ":", "null", ";", "}", "else", "if", "(", "snippet", ".", "beginningofline", ")", "{", "snippetMatches", "=", "context", ".", "endsWith", "(", "snippet", ".", "trigger", ")", "&&", "isPrecedingContextWhitespace", ";", "matchingPrefix", "=", "snippet", ".", "trigger", ".", "startsWith", "(", "context", ")", "&&", "isPrecedingContextWhitespace", "?", "context", ":", "null", ";", "}", "else", "{", "snippetMatches", "=", "context", "==", "snippet", ".", "trigger", ";", "matchingPrefix", "=", "snippet", ".", "trigger", ".", "startsWith", "(", "context", ")", "?", "context", ":", "null", ";", "}", "if", "(", "matchingPrefix", ")", "{", "snippetRange", "=", "new", "vscode", ".", "Range", "(", "position", ".", "translate", "(", "0", ",", "-", "matchingPrefix", ".", "length", ")", ",", "position", ")", ";", "prefixMatches", "=", "true", ";", "}", "}", "else", "if", "(", "snippet", ".", "regexp", ")", "{", "let", "regexContext", "=", "line", ";", "if", "(", "snippet", ".", "multiline", ")", "{", "if", "(", "!", "longContext", ")", "{", "let", "numberPrevLines", "=", "vscode", ".", "workspace", ".", "getConfiguration", "(", "'hsnips'", ")", ".", "get", "(", "'multiLineContext'", ")", "as", "number", ";", "longContext", "=", "document", ".", "getText", "(", "new", "vscode", ".", "Range", "(", "new", "vscode", ".", "Position", "(", "Math", ".", "max", "(", "position", ".", "line", "-", "numberPrevLines", ",", "0", ")", ",", "0", ")", ",", "position", ")", ")", ".", "replace", "(", "/\\r/g", ",", "''", ")", ";", "}", "regexContext", "=", "longContext", ";", "}", "let", "match", "=", "snippet", ".", "regexp", ".", "exec", "(", "regexContext", ")", ";", "if", "(", "match", ")", "{", "let", "charOffset", "=", "match", ".", "index", "-", "regexContext", ".", "lastIndexOf", "(", "'\\n'", ",", "match", ".", "index", ")", "-", "1", ";", "let", "lineOffset", "=", "match", "[", "0", "]", ".", "split", "(", "'\\n'", ")", ".", "length", "-", "1", ";", "snippetRange", "=", "new", "vscode", ".", "Range", "(", "new", "vscode", ".", "Position", "(", "position", ".", "line", "-", "lineOffset", ",", "charOffset", ")", ",", "position", ")", ";", "snippetMatches", "=", "true", ";", "prefixMatches", "=", "true", ";", "matchGroups", "=", "Array", ".", "from", "(", "match", ")", ";", "label", "=", "match", "[", "0", "]", ";", "}", "}", "let", "completion", "=", "new", "CompletionInfo", "(", "snippet", ",", "label", ",", "snippetRange", ",", "matchGroups", ")", ";", "if", "(", "snippet", ".", "automatic", "&&", "snippetMatches", ")", "{", "return", "completion", ";", "}", "else", "if", "(", "prefixMatches", ")", "{", "completions", ".", "push", "(", "completion", ")", ";", "}", "}", "return", "completions", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, "vscode.Range", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.TextDocument", null, "vscode.Position", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/completion.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "completion.ts"}
{"tokens": ["import", "*", "as", "vscode", "from", "'vscode'", ";", "type", "PositionDelta", "=", "{", "characterDelta", ":", "number", ";", "lineDelta", ":", "number", ";", "}", ";", "export", "enum", "GrowthType", "{", "Grow", ",", "FixLeft", ",", "FixRight", "}", "export", "interface", "IChangeInfo", "{", "change", ":", "vscode", ".", "TextDocumentContentChangeEvent", ";", "growth", ":", "GrowthType", ";", "}", "function", "getRangeDelta", "(", "range", ",", "change", ",", "growth", ")", "{", "let", "deltaStart", "=", "{", "characterDelta", ":", "0", ",", "lineDelta", ":", "0", "}", ";", "let", "deltaEnd", "=", "{", "characterDelta", ":", "0", ",", "lineDelta", ":", "0", "}", ";", "let", "textLines", "=", "change", ".", "text", ".", "split", "(", "'\\n'", ")", ";", "let", "lineDelta", "=", "change", ".", "text", ".", "split", "(", "'\\n'", ")", ".", "length", "-", "(", "change", ".", "range", ".", "end", ".", "line", "-", "change", ".", "range", ".", "start", ".", "line", "+", "1", ")", ";", "let", "charDelta", "=", "textLines", "[", "textLines", ".", "length", "-", "1", "]", ".", "length", "-", "change", ".", "range", ".", "end", ".", "character", ";", "if", "(", "lineDelta", "==", "0", ")", "charDelta", "+=", "change", ".", "range", ".", "start", ".", "character", ";", "if", "(", "range", ".", "start", ".", "isAfterOrEqual", "(", "change", ".", "range", ".", "end", ")", ")", "{", "deltaStart", ".", "lineDelta", "=", "lineDelta", ";", "}", "if", "(", "range", ".", "end", ".", "isAfterOrEqual", "(", "change", ".", "range", ".", "end", ")", ")", "{", "deltaEnd", ".", "lineDelta", "=", "lineDelta", ";", "}", "if", "(", "change", ".", "range", ".", "end", ".", "line", "==", "range", ".", "start", ".", "line", ")", "if", "(", "(", "growth", "==", "GrowthType", ".", "FixRight", "&&", "range", ".", "start", ".", "isEqual", "(", "change", ".", "range", ".", "end", ")", ")", "||", "range", ".", "start", ".", "isAfter", "(", "change", ".", "range", ".", "end", ")", ")", "{", "deltaStart", ".", "characterDelta", "=", "charDelta", ";", "}", "if", "(", "change", ".", "range", ".", "end", ".", "line", "==", "range", ".", "end", ".", "line", ")", "if", "(", "(", "growth", "!=", "GrowthType", ".", "FixLeft", "&&", "range", ".", "end", ".", "isEqual", "(", "change", ".", "range", ".", "end", ")", ")", "||", "range", ".", "end", ".", "isAfter", "(", "change", ".", "range", ".", "end", ")", ")", "{", "deltaEnd", ".", "characterDelta", "=", "charDelta", ";", "}", "return", "[", "deltaStart", ",", "deltaEnd", "]", ";", "}", "export", "class", "DynamicRange", "{", "range", ":", "vscode", ".", "Range", ";", "constructor", "(", "start", ",", "end", ")", "{", "this", ".", "range", "=", "new", "vscode", ".", "Range", "(", "start", ",", "end", ")", ";", "}", "static", "fromRange", "(", "range", ")", "{", "return", "new", "DynamicRange", "(", "range", ".", "start", ",", "range", ".", "end", ")", ";", "}", "update", "(", "changes", ")", "{", "let", "deltaStart", "=", "{", "characterDelta", ":", "0", ",", "lineDelta", ":", "0", "}", ";", "let", "deltaEnd", "=", "{", "characterDelta", ":", "0", ",", "lineDelta", ":", "0", "}", ";", "for", "(", "let", "{", "change", ",", "growth", "}", "of", "changes", ")", "{", "let", "deltaChange", "=", "getRangeDelta", "(", "this", ".", "range", ",", "change", ",", "growth", ")", ";", "deltaStart", ".", "characterDelta", "+=", "deltaChange", "[", "0", "]", ".", "characterDelta", ";", "deltaStart", ".", "lineDelta", "+=", "deltaChange", "[", "0", "]", ".", "lineDelta", ";", "deltaEnd", ".", "characterDelta", "+=", "deltaChange", "[", "1", "]", ".", "characterDelta", ";", "deltaEnd", ".", "lineDelta", "+=", "deltaChange", "[", "1", "]", ".", "lineDelta", ";", "}", "let", "[", "newStart", ",", "newEnd", "]", "=", "[", "this", ".", "range", ".", "start", ",", "this", ".", "range", ".", "end", "]", ";", "newStart", "=", "newStart", ".", "translate", "(", "deltaStart", ")", ";", "newEnd", "=", "newEnd", ".", "translate", "(", "deltaEnd", ")", ";", "this", ".", "range", "=", "this", ".", "range", ".", "with", "(", "newStart", ",", "newEnd", ")", ";", "}", "contains", "(", "range", ")", "{", "return", "this", ".", "range", ".", "contains", "(", "range", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "vscode.Range", null, "vscode.TextDocumentContentChangeEvent", null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.Position", null, "vscode.Position", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.Range", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "boolean", null, "vscode.Range", null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/dynamicRange.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "dynamicRange.ts"}
{"tokens": ["import", "*", "as", "vscode", "from", "'vscode'", ";", "import", "{", "DynamicRange", ",", "GrowthType", ",", "IChangeInfo", "}", "from", "'./dynamicRange'", ";", "import", "{", "applyOffset", ",", "getWorkspaceUri", "}", "from", "'./utils'", ";", "import", "{", "HSnippet", ",", "GeneratorResult", "}", "from", "'./hsnippet'", ";", "import", "{", "HSnippetUtils", "}", "from", "'./hsnippetUtils'", ";", "enum", "HSnippetPartType", "{", "Placeholder", ",", "Block", "}", "class", "HSnippetPart", "{", "type", ":", "HSnippetPartType", ";", "range", ":", "DynamicRange", ";", "content", ":", "string", ";", "id", "?", ":", "number", ";", "updates", ":", "IChangeInfo", "[", "]", ";", "constructor", "(", "type", ",", "range", ",", "content", ",", "id", "?", ")", "{", "this", ".", "type", "=", "type", ";", "this", ".", "range", "=", "range", ";", "this", ".", "content", "=", "content", ";", "this", ".", "id", "=", "id", ";", "this", ".", "updates", "=", "[", "]", ";", "}", "updateRange", "(", ")", "{", "if", "(", "this", ".", "updates", ".", "length", "==", "0", ")", "return", ";", "this", ".", "range", ".", "update", "(", "this", ".", "updates", ")", ";", "this", ".", "updates", "=", "[", "]", ";", "}", "}", "export", "class", "HSnippetInstance", "{", "type", ":", "HSnippet", ";", "matchGroups", ":", "string", "[", "]", ";", "editor", ":", "vscode", ".", "TextEditor", ";", "range", ":", "DynamicRange", ";", "placeholderIds", ":", "number", "[", "]", ";", "selectedPlaceholder", ":", "number", ";", "parts", ":", "HSnippetPart", "[", "]", ";", "blockParts", ":", "HSnippetPart", "[", "]", ";", "blockChanged", ":", "boolean", ";", "snippetString", ":", "vscode", ".", "SnippetString", ";", "constructor", "(", "type", ",", "editor", ",", "position", ",", "matchGroups", ")", "{", "this", ".", "type", "=", "type", ";", "this", ".", "editor", "=", "editor", ";", "this", ".", "matchGroups", "=", "matchGroups", ";", "this", ".", "selectedPlaceholder", "=", "0", ";", "this", ".", "placeholderIds", "=", "[", "]", ";", "this", ".", "blockChanged", "=", "false", ";", "let", "generatorResult", "=", "this", ".", "runCodeBlocks", "(", "true", ")", ";", "let", "[", "sections", ",", "blocks", "]", "=", "generatorResult", ";", "this", ".", "parts", "=", "[", "]", ";", "this", ".", "blockParts", "=", "[", "]", ";", "let", "start", "=", "position", ";", "let", "snippetString", "=", "''", ";", "const", "indentLevel", "=", "editor", ".", "document", ".", "lineAt", "(", "position", ".", "line", ")", ".", "firstNonWhitespaceCharacterIndex", ";", "for", "(", "let", "section", "of", "sections", ")", "{", "let", "rawSection", "=", "section", ";", "if", "(", "typeof", "rawSection", "!=", "'string'", ")", "{", "let", "block", "=", "blocks", "[", "rawSection", ".", "block", "]", ";", "let", "endPosition", "=", "applyOffset", "(", "position", ",", "block", ",", "indentLevel", ")", ";", "let", "range", "=", "new", "DynamicRange", "(", "position", ",", "endPosition", ")", ";", "let", "part", "=", "new", "HSnippetPart", "(", "HSnippetPartType", ".", "Block", ",", "range", ",", "block", ")", ";", "this", ".", "parts", ".", "push", "(", "part", ")", ";", "this", ".", "blockParts", ".", "push", "(", "part", ")", ";", "snippetString", "+=", "block", ";", "position", "=", "endPosition", ";", "continue", ";", "}", "snippetString", "+=", "rawSection", ";", "let", "PLACEHOLDER_REGEX", "=", "/\\$(\\d+)|\\$\\{(\\d+)\\}/", ";", "let", "match", ";", "while", "(", "(", "match", "=", "PLACEHOLDER_REGEX", ".", "exec", "(", "rawSection", ")", ")", ")", "{", "let", "text", "=", "rawSection", ".", "substring", "(", "0", ",", "match", ".", "index", ")", ";", "position", "=", "applyOffset", "(", "position", ",", "text", ",", "indentLevel", ")", ";", "let", "range", "=", "new", "DynamicRange", "(", "position", ",", "position", ")", ";", "let", "placeholderId", "=", "Number", "(", "match", "[", "1", "]", "||", "match", "[", "2", "]", ")", ";", "if", "(", "!", "this", ".", "placeholderIds", ".", "includes", "(", "placeholderId", ")", ")", "this", ".", "placeholderIds", ".", "push", "(", "placeholderId", ")", ";", "this", ".", "parts", ".", "push", "(", "new", "HSnippetPart", "(", "HSnippetPartType", ".", "Placeholder", ",", "range", ",", "''", ",", "placeholderId", ")", ")", ";", "rawSection", "=", "rawSection", ".", "substring", "(", "match", ".", "index", "+", "match", "[", "0", "]", ".", "length", ")", ";", "}", "position", "=", "applyOffset", "(", "position", ",", "rawSection", ",", "indentLevel", ")", ";", "}", "this", ".", "snippetString", "=", "new", "vscode", ".", "SnippetString", "(", "snippetString", ")", ";", "this", ".", "range", "=", "new", "DynamicRange", "(", "start", ",", "position", ")", ";", "this", ".", "placeholderIds", ".", "sort", "(", ")", ";", "if", "(", "this", ".", "placeholderIds", "[", "0", "]", "==", "0", ")", "this", ".", "placeholderIds", ".", "shift", "(", ")", ";", "this", ".", "placeholderIds", ".", "push", "(", "0", ")", ";", "this", ".", "selectedPlaceholder", "=", "this", ".", "placeholderIds", "[", "0", "]", ";", "}", "runCodeBlocks", "(", "stripDollars", "=", "true", ",", "placeholderContents", "?", ")", "{", "if", "(", "!", "placeholderContents", ")", "{", "placeholderContents", "=", "new", "Array", "(", "this", ".", "type", ".", "placeholders", ")", ".", "fill", "(", "''", ")", ";", "}", "let", "generatorResult", "=", "[", "[", "]", ",", "[", "]", "]", ";", "let", "hsnippetUtils", "=", "new", "HSnippetUtils", "(", ")", ";", "try", "{", "generatorResult", "=", "this", ".", "type", ".", "generator", "(", "placeholderContents", ",", "this", ".", "matchGroups", ",", "getWorkspaceUri", "(", ")", ",", "this", ".", "editor", ".", "document", ".", "uri", ".", "toString", "(", ")", ",", "hsnippetUtils", ")", ";", "}", "catch", "(", "e", ")", "{", "if", "(", "e", "instanceof", "Error", ")", "{", "vscode", ".", "window", ".", "showWarningMessage", "(", "`Snippet ${", "this", ".", "type", ".", "description", "} failed to expand with error: ${", "e", ".", "message", "}`", ")", ";", "}", "}", "generatorResult", "[", "1", "]", "=", "generatorResult", "[", "1", "]", ".", "map", "(", "(", "block", ")", "=>", "{", "if", "(", "stripDollars", ")", "{", "block", "=", "block", ".", "replace", "(", "/\\$/g", ",", "'\\\\$'", ")", ";", "}", "block", "=", "HSnippetUtils", ".", "format", "(", "block", ",", "hsnippetUtils", ")", ";", "return", "block", ";", "}", ")", ";", "return", "generatorResult", ";", "}", "nextPlaceholder", "(", ")", "{", "let", "currentIndex", "=", "this", ".", "placeholderIds", ".", "indexOf", "(", "this", ".", "selectedPlaceholder", ")", ";", "this", ".", "selectedPlaceholder", "=", "this", ".", "placeholderIds", "[", "currentIndex", "+", "1", "]", ";", "return", "this", ".", "selectedPlaceholder", "!=", "undefined", "&&", "this", ".", "selectedPlaceholder", "!=", "0", ";", "}", "prevPlaceholder", "(", ")", "{", "let", "currentIndex", "=", "this", ".", "placeholderIds", ".", "indexOf", "(", "this", ".", "selectedPlaceholder", ")", ";", "this", ".", "selectedPlaceholder", "=", "this", ".", "placeholderIds", "[", "currentIndex", "-", "1", "]", ";", "return", "this", ".", "selectedPlaceholder", "!=", "undefined", "&&", "this", ".", "selectedPlaceholder", "!=", "0", ";", "}", "debugLog", "(", ")", "{", "let", "parts", "=", "this", ".", "parts", ";", "for", "(", "let", "i", "=", "0", ";", "i", "<", "parts", ".", "length", ";", "i", "++", ")", "{", "let", "range", "=", "parts", "[", "i", "]", ".", "range", ".", "range", ";", "let", "start", "=", "range", ".", "start", ";", "let", "end", "=", "range", ".", "end", ";", "console", ".", "log", "(", "`Tabstop ${", "i", "}: \"${", "parts", "[", "i", "]", ".", "content", "}\" (${", "start", ".", "line", "}, ${", "start", ".", "character", "})..(${", "end", ".", "line", "}, ${", "end", ".", "character", "})`", ")", ";", "}", "}", "update", "(", "changes", ")", "{", "let", "ordChanges", "=", "[", "...", "changes", "]", ";", "ordChanges", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "{", "if", "(", "a", ".", "range", ".", "end", ".", "isBefore", "(", "b", ".", "range", ".", "end", ")", ")", "return", "-", "1", ";", "else", "if", "(", "a", ".", "range", ".", "end", ".", "isEqual", "(", "b", ".", "range", ".", "end", ")", ")", "return", "0", ";", "else", "return", "1", ";", "}", ")", ";", "let", "changedPlaceholders", "=", "[", "]", ";", "let", "currentPart", "=", "0", ";", "for", "(", "let", "change", "of", "ordChanges", ")", "{", "let", "part", "=", "this", ".", "parts", "[", "currentPart", "]", ";", "while", "(", "currentPart", "<", "this", ".", "parts", ".", "length", ")", "{", "if", "(", "part", ".", "range", ".", "range", ".", "end", ".", "isAfterOrEqual", "(", "change", ".", "range", ".", "end", ")", ")", "{", "break", ";", "}", "currentPart", "++", ";", "part", "=", "this", ".", "parts", "[", "currentPart", "]", ";", "}", "if", "(", "currentPart", ">=", "this", ".", "parts", ".", "length", ")", "break", ";", "while", "(", "part", ".", "range", ".", "contains", "(", "change", ".", "range", ")", ")", "{", "if", "(", "(", "part", ".", "type", "==", "HSnippetPartType", ".", "Placeholder", "&&", "part", ".", "id", "==", "this", ".", "selectedPlaceholder", "&&", "!", "this", ".", "blockChanged", ")", "||", "(", "part", ".", "type", "==", "HSnippetPartType", ".", "Block", "&&", "this", ".", "blockChanged", "&&", "part", ".", "content", "==", "change", ".", "text", ")", ")", "{", "if", "(", "part", ".", "type", "==", "HSnippetPartType", ".", "Placeholder", ")", "changedPlaceholders", ".", "push", "(", "part", ")", ";", "part", ".", "updates", ".", "push", "(", "{", "change", ",", "growth", ":", "GrowthType", ".", "Grow", "}", ")", ";", "currentPart", "++", ";", "part", "=", "this", ".", "parts", "[", "currentPart", "]", ";", "break", ";", "}", "currentPart", "++", ";", "part", "=", "this", ".", "parts", "[", "currentPart", "]", ";", "}", "for", "(", "let", "i", "=", "currentPart", ";", "i", "<", "this", ".", "parts", ".", "length", ";", "i", "++", ")", "{", "this", ".", "parts", "[", "i", "]", ".", "updates", ".", "push", "(", "{", "change", ",", "growth", ":", "GrowthType", ".", "FixRight", "}", ")", ";", "}", "}", "this", ".", "range", ".", "update", "(", "ordChanges", ".", "map", "(", "(", "c", ")", "=>", "(", "{", "change", ":", "c", ",", "growth", ":", "GrowthType", ".", "Grow", "}", ")", ")", ")", ";", "this", ".", "parts", ".", "forEach", "(", "(", "p", ")", "=>", "p", ".", "updateRange", "(", ")", ")", ";", "if", "(", "this", ".", "blockChanged", ")", "this", ".", "blockChanged", "=", "false", ";", "if", "(", "!", "changedPlaceholders", ".", "length", ")", "return", ";", "changedPlaceholders", ".", "forEach", "(", "(", "p", ")", "=>", "(", "p", ".", "content", "=", "this", ".", "editor", ".", "document", ".", "getText", "(", "p", ".", "range", ".", "range", ")", ")", ")", ";", "let", "placeholderContents", "=", "this", ".", "parts", ".", "filter", "(", "(", "p", ")", "=>", "p", ".", "type", "==", "HSnippetPartType", ".", "Placeholder", ")", ".", "map", "(", "(", "p", ")", "=>", "p", ".", "content", ")", ";", "let", "blocks", "=", "this", ".", "runCodeBlocks", "(", "false", ",", "placeholderContents", ")", "[", "1", "]", ";", "this", ".", "editor", ".", "edit", "(", "(", "edit", ")", "=>", "{", "for", "(", "let", "i", "=", "0", ";", "i", "<", "blocks", ".", "length", ";", "i", "++", ")", "{", "let", "range", "=", "this", ".", "blockParts", "[", "i", "]", ".", "range", ";", "let", "oldContent", "=", "this", ".", "blockParts", "[", "i", "]", ".", "content", ";", "let", "content", "=", "blocks", "[", "i", "]", ";", "if", "(", "content", "!=", "oldContent", ")", "{", "edit", ".", "replace", "(", "range", ".", "range", ",", "content", ")", ";", "this", ".", "blockChanged", "=", "true", ";", "}", "}", "}", ")", ";", "this", ".", "blockParts", ".", "forEach", "(", "(", "b", ",", "i", ")", "=>", "(", "b", ".", "content", "=", "blocks", "[", "i", "]", ")", ")", ";", "}", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "UNK", null, "string", null, "number", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "vscode.TextEditor", null, "vscode.Position", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "GeneratorResult", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/hsnippetInstance.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "hsnippetInstance.ts"}
{"tokens": ["import", "{", "HSnippet", ",", "IHSnippetHeader", ",", "GeneratorFunction", ",", "ContextFilter", "}", "from", "'./hsnippet'", ";", "const", "CODE_DELIMITER", "=", "'``'", ";", "const", "CODE_DELIMITER_REGEX", "=", "/``(?!`)/", ";", "const", "HEADER_REGEXP", "=", "/^snippet ?(?:`([^`]+)`|(\\S+))?(?: \"([^\"]+)\")?(?: ([AMiwb]*))?/", ";", "function", "parseSnippetHeader", "(", "header", ")", "{", "let", "match", "=", "HEADER_REGEXP", ".", "exec", "(", "header", ")", ";", "if", "(", "!", "match", ")", "throw", "new", "Error", "(", "'Invalid snippet header'", ")", ";", "let", "trigger", "=", "match", "[", "2", "]", ";", "if", "(", "match", "[", "1", "]", ")", "{", "if", "(", "!", "match", "[", "1", "]", ".", "endsWith", "(", "'$'", ")", ")", "match", "[", "1", "]", "+=", "'$'", ";", "trigger", "=", "new", "RegExp", "(", "match", "[", "1", "]", ",", "'m'", ")", ";", "}", "return", "{", "trigger", ",", "description", ":", "match", "[", "3", "]", "||", "''", ",", "flags", ":", "match", "[", "4", "]", "||", "''", ",", "}", ";", "}", "interface", "IHSnippetInfo", "{", "body", ":", "string", ";", "contextFilter", "?", ":", "string", ";", "placeholders", ":", "number", ";", "header", ":", "IHSnippetHeader", ";", "}", "interface", "IHSnippetParseResult", "{", "contextFilter", "?", ":", "ContextFilter", ";", "generatorFunction", ":", "GeneratorFunction", ";", "}", "function", "escapeString", "(", "string", ")", "{", "return", "string", ".", "replace", "(", "/\\\\/g", ",", "'\\\\\\\\'", ")", ".", "replace", "(", "/\"/g", ",", "'\\\\\"'", ")", ";", "}", "function", "countPlaceholders", "(", "string", ")", "{", "return", "string", ".", "split", "(", "/\\$\\d+|\\$\\{\\d+\\}/g", ")", ".", "length", "-", "1", ";", "}", "function", "parseSnippet", "(", "headerLine", ",", "lines", ")", "{", "let", "header", "=", "parseSnippetHeader", "(", "headerLine", ")", ";", "let", "script", "=", "[", "`(t, m, w, path, snip) => {`", "]", ";", "script", ".", "push", "(", "`let rv = \"\";`", ")", ";", "script", ".", "push", "(", "`let _result = [];`", ")", ";", "script", ".", "push", "(", "`let _blockResults = [];`", ")", ";", "let", "isCode", "=", "false", ";", "let", "placeholders", "=", "0", ";", "while", "(", "lines", ".", "length", ">", "0", ")", "{", "let", "line", "=", "lines", ".", "shift", "(", ")", "as", "string", ";", "if", "(", "isCode", ")", "{", "if", "(", "!", "line", ".", "includes", "(", "CODE_DELIMITER", ")", ")", "{", "script", ".", "push", "(", "line", ".", "trim", "(", ")", ")", ";", "}", "else", "{", "let", "[", "code", ",", "...", "rest", "]", "=", "line", ".", "split", "(", "CODE_DELIMITER_REGEX", ")", ";", "script", ".", "push", "(", "code", ".", "trim", "(", ")", ")", ";", "lines", ".", "unshift", "(", "rest", ".", "join", "(", "CODE_DELIMITER", ")", ")", ";", "script", ".", "push", "(", "`_result.push({block: _blockResults.length});`", ")", ";", "script", ".", "push", "(", "`_blockResults.push(String(rv));`", ")", ";", "isCode", "=", "false", ";", "}", "}", "else", "{", "if", "(", "line", ".", "startsWith", "(", "'endsnippet'", ")", ")", "{", "break", ";", "}", "else", "if", "(", "!", "line", ".", "includes", "(", "CODE_DELIMITER", ")", ")", "{", "script", ".", "push", "(", "`_result.push(\"${", "escapeString", "(", "line", ")", "}\");`", ")", ";", "script", ".", "push", "(", "`_result.push(\"\\\\n\");`", ")", ";", "placeholders", "+=", "countPlaceholders", "(", "line", ")", ";", "}", "else", "if", "(", "isCode", "==", "false", ")", "{", "let", "[", "text", ",", "...", "rest", "]", "=", "line", ".", "split", "(", "CODE_DELIMITER_REGEX", ")", ";", "script", ".", "push", "(", "`_result.push(\"${", "escapeString", "(", "text", ")", "}\");`", ")", ";", "script", ".", "push", "(", "`rv = \"\";`", ")", ";", "placeholders", "+=", "countPlaceholders", "(", "text", ")", ";", "lines", ".", "unshift", "(", "rest", ".", "join", "(", "CODE_DELIMITER", ")", ")", ";", "isCode", "=", "true", ";", "}", "}", "}", "script", ".", "pop", "(", ")", ";", "script", ".", "push", "(", "`return [_result, _blockResults];`", ")", ";", "script", ".", "push", "(", "`}`", ")", ";", "return", "{", "body", ":", "script", ".", "join", "(", "'\\n'", ")", ",", "header", ",", "placeholders", "}", ";", "}", "export", "function", "parse", "(", "content", ")", "{", "let", "lines", "=", "content", ".", "split", "(", "/\\r?\\n/", ")", ";", "let", "snippetInfos", "=", "[", "]", ";", "let", "script", "=", "[", "]", ";", "let", "isCode", "=", "false", ";", "let", "priority", "=", "0", ";", "let", "context", "=", "undefined", ";", "while", "(", "lines", ".", "length", ">", "0", ")", "{", "let", "line", "=", "lines", ".", "shift", "(", ")", "as", "string", ";", "if", "(", "isCode", ")", "{", "if", "(", "line", ".", "startsWith", "(", "'endglobal'", ")", ")", "{", "isCode", "=", "false", ";", "}", "else", "{", "script", ".", "push", "(", "line", ")", ";", "}", "}", "else", "if", "(", "line", ".", "startsWith", "(", "'#'", ")", ")", "{", "continue", ";", "}", "else", "if", "(", "line", ".", "startsWith", "(", "'global'", ")", ")", "{", "isCode", "=", "true", ";", "}", "else", "if", "(", "line", ".", "startsWith", "(", "'priority '", ")", ")", "{", "priority", "=", "Number", "(", "line", ".", "substring", "(", "'priority '", ".", "length", ")", ".", "trim", "(", ")", ")", "||", "0", ";", "}", "else", "if", "(", "line", ".", "startsWith", "(", "'context '", ")", ")", "{", "context", "=", "line", ".", "substring", "(", "'context '", ".", "length", ")", ".", "trim", "(", ")", "||", "undefined", ";", "}", "else", "if", "(", "line", ".", "match", "(", "HEADER_REGEXP", ")", ")", "{", "let", "info", "=", "parseSnippet", "(", "line", ",", "lines", ")", ";", "info", ".", "header", ".", "priority", "=", "priority", ";", "info", ".", "contextFilter", "=", "context", ";", "snippetInfos", ".", "push", "(", "info", ")", ";", "priority", "=", "0", ";", "context", "=", "undefined", ";", "}", "}", "script", ".", "push", "(", "`return [`", ")", ";", "for", "(", "let", "snippet", "of", "snippetInfos", ")", "{", "script", ".", "push", "(", "'{'", ")", ";", "if", "(", "snippet", ".", "contextFilter", ")", "{", "script", ".", "push", "(", "`contextFilter: (context) => (${", "snippet", ".", "contextFilter", "}),`", ")", ";", "}", "script", ".", "push", "(", "`generatorFunction: ${", "snippet", ".", "body", "}`", ")", ";", "script", ".", "push", "(", "'},'", ")", ";", "}", "script", ".", "push", "(", "`]`", ")", ";", "let", "generators", "=", "new", "Function", "(", "'require'", ",", "script", ".", "join", "(", "'\\n'", ")", ")", "(", "require", ")", "as", "IHSnippetParseResult", "[", "]", ";", "return", "snippetInfos", ".", "map", "(", "(", "s", ",", "i", ")", "=>", "new", "HSnippet", "(", "s", ".", "header", ",", "generators", "[", "i", "]", ".", "generatorFunction", ",", "s", ".", "placeholders", ",", "generators", "[", "i", "]", ".", "contextFilter", ")", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, "string", null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "array", null, "string", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/parser.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "parser.ts"}
{"tokens": ["import", "*", "as", "vscode", "from", "'vscode'", ";", "import", "{", "existsSync", ",", "mkdirSync", ",", "readdirSync", ",", "readFileSync", "}", "from", "'fs'", ";", "import", "*", "as", "path", "from", "'path'", ";", "import", "openExplorer", "=", "require", "(", "'open-file-explorer'", ")", ";", "import", "{", "HSnippet", "}", "from", "'./hsnippet'", ";", "import", "{", "HSnippetInstance", "}", "from", "'./hsnippetInstance'", ";", "import", "{", "parse", "}", "from", "'./parser'", ";", "import", "{", "getSnippetDir", "}", "from", "'./utils'", ";", "import", "{", "getCompletions", ",", "CompletionInfo", "}", "from", "'./completion'", ";", "import", "{", "COMPLETIONS_TRIGGERS", "}", "from", "'./consts'", ";", "const", "SNIPPETS_BY_LANGUAGE", "=", "new", "Map", "(", ")", ";", "const", "SNIPPET_STACK", "=", "[", "]", ";", "let", "insertingSnippet", "=", "false", ";", "async", "function", "loadSnippets", "(", ")", "{", "SNIPPETS_BY_LANGUAGE", ".", "clear", "(", ")", ";", "let", "snippetDir", "=", "getSnippetDir", "(", ")", ";", "if", "(", "!", "existsSync", "(", "snippetDir", ")", ")", "{", "mkdirSync", "(", "snippetDir", ")", ";", "}", "for", "(", "let", "file", "of", "readdirSync", "(", "snippetDir", ")", ")", "{", "if", "(", "path", ".", "extname", "(", "file", ")", ".", "toLowerCase", "(", ")", "!=", "'.hsnips'", ")", "continue", ";", "let", "filePath", "=", "path", ".", "join", "(", "snippetDir", ",", "file", ")", ";", "let", "fileData", "=", "readFileSync", "(", "filePath", ",", "'utf8'", ")", ";", "let", "language", "=", "path", ".", "basename", "(", "file", ",", "'.hsnips'", ")", ".", "toLowerCase", "(", ")", ";", "SNIPPETS_BY_LANGUAGE", ".", "set", "(", "language", ",", "parse", "(", "fileData", ")", ")", ";", "}", "let", "globalSnippets", "=", "SNIPPETS_BY_LANGUAGE", ".", "get", "(", "'all'", ")", ";", "if", "(", "globalSnippets", ")", "{", "for", "(", "let", "[", "language", ",", "snippetList", "]", "of", "SNIPPETS_BY_LANGUAGE", ".", "entries", "(", ")", ")", "{", "if", "(", "language", "!=", "'all'", ")", "snippetList", ".", "push", "(", "...", "globalSnippets", ")", ";", "}", "}", "for", "(", "let", "snippetList", "of", "SNIPPETS_BY_LANGUAGE", ".", "values", "(", ")", ")", "{", "snippetList", ".", "sort", "(", "(", "a", ",", "b", ")", "=>", "b", ".", "priority", "-", "a", ".", "priority", ")", ";", "}", "}", "export", "async", "function", "expandSnippet", "(", "completion", ",", "editor", ",", "snippetExpansion", "=", "false", ")", "{", "let", "snippetInstance", "=", "new", "HSnippetInstance", "(", "completion", ".", "snippet", ",", "editor", ",", "completion", ".", "range", ".", "start", ",", "completion", ".", "groups", ")", ";", "let", "insertionRange", "=", "completion", ".", "range", ".", "start", ";", "insertingSnippet", "=", "true", ";", "await", "editor", ".", "edit", "(", "(", "eb", ")", "=>", "{", "eb", ".", "delete", "(", "snippetExpansion", "?", "completion", ".", "completionRange", ":", "completion", ".", "range", ")", ";", "}", ",", "{", "undoStopAfter", ":", "false", ",", "undoStopBefore", ":", "!", "snippetExpansion", "}", ")", ";", "await", "editor", ".", "insertSnippet", "(", "snippetInstance", ".", "snippetString", ",", "insertionRange", ",", "{", "undoStopAfter", ":", "false", ",", "undoStopBefore", ":", "false", ",", "}", ")", ";", "if", "(", "snippetInstance", ".", "selectedPlaceholder", "!=", "0", ")", "SNIPPET_STACK", ".", "unshift", "(", "snippetInstance", ")", ";", "insertingSnippet", "=", "false", ";", "}", "export", "function", "activate", "(", "context", ")", "{", "vscode", ".", "extensions", ".", "getExtension", "(", "'draivin.hscopes'", ")", "?.", "activate", "(", ")", ";", "loadSnippets", "(", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerCommand", "(", "'hsnips.openSnippetsDir'", ",", "(", ")", "=>", "openExplorer", "(", "getSnippetDir", "(", ")", ")", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerCommand", "(", "'hsnips.openSnippetFile'", ",", "async", "(", ")", "=>", "{", "let", "snippetDir", "=", "getSnippetDir", "(", ")", ";", "let", "files", "=", "readdirSync", "(", "snippetDir", ")", ";", "let", "selectedFile", "=", "await", "vscode", ".", "window", ".", "showQuickPick", "(", "files", ")", ";", "if", "(", "selectedFile", ")", "{", "let", "document", "=", "await", "vscode", ".", "workspace", ".", "openTextDocument", "(", "path", ".", "join", "(", "snippetDir", ",", "selectedFile", ")", ")", ";", "vscode", ".", "window", ".", "showTextDocument", "(", "document", ")", ";", "}", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerCommand", "(", "'hsnips.reloadSnippets'", ",", "(", ")", "=>", "loadSnippets", "(", ")", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerCommand", "(", "'hsnips.leaveSnippet'", ",", "(", ")", "=>", "{", "while", "(", "SNIPPET_STACK", ".", "length", ")", "SNIPPET_STACK", ".", "pop", "(", ")", ";", "vscode", ".", "commands", ".", "executeCommand", "(", "'leaveSnippet'", ")", ";", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerCommand", "(", "'hsnips.nextPlaceholder'", ",", "(", ")", "=>", "{", "if", "(", "SNIPPET_STACK", "[", "0", "]", "&&", "!", "SNIPPET_STACK", "[", "0", "]", ".", "nextPlaceholder", "(", ")", ")", "{", "SNIPPET_STACK", ".", "shift", "(", ")", ";", "}", "vscode", ".", "commands", ".", "executeCommand", "(", "'jumpToNextSnippetPlaceholder'", ")", ";", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerCommand", "(", "'hsnips.prevPlaceholder'", ",", "(", ")", "=>", "{", "if", "(", "SNIPPET_STACK", "[", "0", "]", "&&", "!", "SNIPPET_STACK", "[", "0", "]", ".", "prevPlaceholder", "(", ")", ")", "{", "SNIPPET_STACK", ".", "shift", "(", ")", ";", "}", "vscode", ".", "commands", ".", "executeCommand", "(", "'jumpToPrevSnippetPlaceholder'", ")", ";", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "workspace", ".", "onDidSaveTextDocument", "(", "(", "document", ")", "=>", "{", "if", "(", "document", ".", "languageId", "==", "'hsnips'", ")", "{", "loadSnippets", "(", ")", ";", "}", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "commands", ".", "registerTextEditorCommand", "(", "'hsnips.expand'", ",", "(", "editor", ",", "_", ",", "completion", ")", "=>", "{", "expandSnippet", "(", "completion", ",", "editor", ",", "true", ")", ";", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "workspace", ".", "onDidChangeTextDocument", "(", "(", "e", ")", "=>", "{", "if", "(", "SNIPPET_STACK", ".", "length", "&&", "SNIPPET_STACK", "[", "0", "]", ".", "editor", ".", "document", "==", "e", ".", "document", ")", "{", "SNIPPET_STACK", "[", "0", "]", ".", "update", "(", "e", ".", "contentChanges", ")", ";", "}", "if", "(", "insertingSnippet", ")", "return", ";", "if", "(", "e", ".", "contentChanges", ".", "length", "===", "0", ")", "return", ";", "let", "mainChange", "=", "e", ".", "contentChanges", "[", "0", "]", ";", "if", "(", "mainChange", ".", "text", ".", "length", "!=", "1", ")", "return", ";", "let", "snippets", "=", "SNIPPETS_BY_LANGUAGE", ".", "get", "(", "e", ".", "document", ".", "languageId", ".", "toLowerCase", "(", ")", ")", ";", "if", "(", "!", "snippets", ")", "snippets", "=", "SNIPPETS_BY_LANGUAGE", ".", "get", "(", "'all'", ")", ";", "if", "(", "!", "snippets", ")", "return", ";", "let", "mainChangePosition", "=", "mainChange", ".", "range", ".", "start", ".", "translate", "(", "0", ",", "mainChange", ".", "text", ".", "length", ")", ";", "let", "completions", "=", "getCompletions", "(", "e", ".", "document", ",", "mainChangePosition", ",", "snippets", ")", ";", "if", "(", "completions", "&&", "!", "Array", ".", "isArray", "(", "completions", ")", ")", "{", "let", "editor", "=", "vscode", ".", "window", ".", "activeTextEditor", ";", "if", "(", "editor", "&&", "e", ".", "document", "==", "editor", ".", "document", ")", "{", "expandSnippet", "(", "completions", ",", "editor", ")", ";", "return", ";", "}", "}", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "window", ".", "onDidChangeVisibleTextEditors", "(", "(", ")", "=>", "{", "while", "(", "SNIPPET_STACK", ".", "length", ")", "SNIPPET_STACK", ".", "pop", "(", ")", ";", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "window", ".", "onDidChangeTextEditorSelection", "(", "(", "e", ")", "=>", "{", "while", "(", "SNIPPET_STACK", ".", "length", ")", "{", "if", "(", "e", ".", "selections", ".", "some", "(", "(", "s", ")", "=>", "SNIPPET_STACK", "[", "0", "]", ".", "range", ".", "contains", "(", "s", ")", ")", ")", "{", "break", ";", "}", "SNIPPET_STACK", ".", "shift", "(", ")", ";", "}", "}", ")", ")", ";", "context", ".", "subscriptions", ".", "push", "(", "vscode", ".", "languages", ".", "registerCompletionItemProvider", "(", "[", "{", "pattern", ":", "'**'", "}", "]", ",", "{", "provideCompletionItems", "(", "document", ",", "position", ")", "{", "let", "snippets", "=", "SNIPPETS_BY_LANGUAGE", ".", "get", "(", "document", ".", "languageId", ".", "toLowerCase", "(", ")", ")", ";", "if", "(", "!", "snippets", ")", "snippets", "=", "SNIPPETS_BY_LANGUAGE", ".", "get", "(", "'all'", ")", ";", "if", "(", "!", "snippets", ")", "return", ";", "let", "completions", "=", "getCompletions", "(", "document", ",", "position", ",", "snippets", ")", ";", "if", "(", "completions", "&&", "Array", ".", "isArray", "(", "completions", ")", ")", "{", "return", "completions", ".", "map", "(", "(", "c", ")", "=>", "c", ".", "toCompletionItem", "(", ")", ")", ";", "}", "}", ",", "}", ",", "...", "COMPLETIONS_TRIGGERS", ")", ")", ";", "}"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "Map", null, null, null, null, null, null, null, "array", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CompletionInfo", null, "vscode.TextEditor", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.ExtensionContext", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "CompletionInfo", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "vscode.TextDocument", null, "vscode.Position", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/draivin/hsnips", "path": "hsnips/src/extension.ts", "commit_hash": "9ba2ac8d7d19bfb34b792ff5f29290f8ca9a6156", "file": "extension.ts"}
{"tokens": ["import", "{", "useLoader", "}", "from", "\"@react-three/fiber\"", ";", "import", "*", "as", "THREE", "from", "\"three\"", ";", "type", "ArrowProps", "=", "{", "dark", "?", ":", "boolean", ";", "}", "&", "JSX", ".", "IntrinsicElements", "[", "\"group\"", "]", ";", "const", "IMAGE_SRC", "=", "\"https://d27rt3a60hh1lx.cloudfront.net/images/whiteArrow.png\"", ";", "const", "IMAGE_SRC_DARK", "=", "\"https://d27rt3a60hh1lx.cloudfront.net/images/blackArrow.png\"", ";", "export", "const", "Arrow", "=", "(", "props", ")", "=>", "{", "const", "{", "dark", ",", "...", "restProps", "}", "=", "props", ";", "const", "texture", "=", "useLoader", "(", "THREE", ".", "TextureLoader", ",", "dark", "?", "IMAGE_SRC_DARK", ":", "IMAGE_SRC", ")", ";", "return", "(", "<", "group", "{", "...", "restProps", "}", ">", "<", "mesh", "scale", "=", "{", "[", "0.004", ",", "0.004", ",", "0.004", "]", "}", ">", "<", "planeBufferGeometry", "attach", "=", "\"geometry\"", "args", "=", "{", "[", "98", ",", "51", "]", "}", "/", ">", "<", "meshStandardMaterial", "map", "=", "{", "texture", "}", "attach", "=", "\"material\"", "alphaTest", "=", "{", "0.5", "}", "transparent", "=", "{", "true", "}", "normalMap", "=", "{", "texture", "}", "/", ">", "<", "/mesh>", "<", "/group>);", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "ArrowProps", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/spacesvr/spacesvr", "path": "spacesvr/src/ideas/components/Arrow.tsx", "commit_hash": "ddf4524489e8752fb9f545a3f0b5720cbf8b936e", "file": "Arrow.tsx"}
{"tokens": ["import", "*", "as", "THREE", "from", "\"three\"", ";", "import", "{", "useEffect", ",", "useMemo", ",", "useState", "}", "from", "\"react\"", ";", "import", "{", "GroupProps", ",", "useThree", "}", "from", "\"@react-three/fiber\"", ";", "import", "{", "AudioAnalyser", ",", "Vector3", "}", "from", "\"three\"", ";", "type", "AudioProps", "=", "{", "url", ":", "string", ";", "dCone", "?", ":", "Vector3", ";", "rollOff", "?", ":", "number", ";", "volume", "?", ":", "number", ";", "setAudioAnalyser", "?", ":", "(", "aa", ":", "AudioAnalyser", ")", "=>", "void", ";", "fftSize", "?", ":", "64", "|", "128", "|", "256", "|", "512", "|", "1024", ";", "}", "&", "GroupProps", ";", "export", "const", "Audio", "=", "(", "props", ")", "=>", "{", "const", "{", "url", ",", "dCone", "=", "new", "Vector3", "(", "180", ",", "230", ",", "0.1", ")", ",", "rollOff", "=", "1", ",", "volume", "=", "1", ",", "setAudioAnalyser", ",", "fftSize", "=", "128", ",", "...", "restProps", "}", "=", "props", ";", "const", "[", "speaker", ",", "setSpeaker", "]", "=", "useState", "<", "THREE", ".", "PositionalAudio", ">", "(", ")", ";", "const", "camera", "=", "useThree", "(", "(", "state", ")", "=>", "state", ".", "camera", ")", ";", "const", "audio", "=", "useMemo", "(", "(", ")", "=>", "{", "const", "a", "=", "document", ".", "createElement", "(", "\"audio\"", ")", ";", "a", ".", "src", "=", "url", ";", "a", ".", "autoplay", "=", "false", ";", "a", ".", "preload", "=", "\"auto\"", ";", "a", ".", "crossOrigin", "=", "\"Anonymous\"", ";", "a", ".", "loop", "=", "true", ";", "return", "a", ";", "}", ",", "[", "]", ")", ";", "useEffect", "(", "(", ")", "=>", "{", "const", "setupAudio", "=", "(", ")", "=>", "{", "if", "(", "!", "audio", ".", "paused", "&&", "!", "speaker", ")", "{", "const", "listener", "=", "new", "THREE", ".", "AudioListener", "(", ")", ";", "camera", ".", "add", "(", "listener", ")", ";", "const", "speak", "=", "new", "THREE", ".", "PositionalAudio", "(", "listener", ")", ";", "speak", ".", "setMediaElementSource", "(", "audio", ")", ";", "speak", ".", "setRefDistance", "(", "0.75", ")", ";", "speak", ".", "setRolloffFactor", "(", "rollOff", ")", ";", "speak", ".", "setVolume", "(", "volume", ")", ";", "speak", ".", "setDirectionalCone", "(", "dCone", ".", "x", ",", "dCone", ".", "y", ",", "dCone", ".", "z", ")", ";", "if", "(", "setAudioAnalyser", ")", "{", "setAudioAnalyser", "(", "new", "AudioAnalyser", "(", "speak", ",", "fftSize", ")", ")", ";", "}", "setSpeaker", "(", "speak", ")", ";", "}", "}", ";", "const", "playAudio", "=", "(", ")", "=>", "audio", ".", "play", "(", ")", ".", "then", "(", "(", ")", "=>", "setupAudio", "(", ")", ")", ";", "if", "(", "audio", ")", "{", "audio", ".", "setAttribute", "(", "\"src\"", ",", "url", ")", ";", "audio", ".", "play", "(", ")", ".", "then", "(", "(", ")", "=>", "setupAudio", "(", ")", ")", ";", "document", ".", "addEventListener", "(", "\"click\"", ",", "playAudio", ")", ";", "return", "(", ")", "=>", "{", "document", ".", "removeEventListener", "(", "\"click\"", ",", "playAudio", ")", ";", "}", ";", "}", "}", ",", "[", "speaker", ",", "audio", ",", "url", "]", ")", ";", "useEffect", "(", "(", ")", "=>", "{", "if", "(", "!", "speaker", ")", "return", ";", "speaker", ".", "setRolloffFactor", "(", "rollOff", ")", ";", "speaker", ".", "setVolume", "(", "volume", ")", ";", "speaker", ".", "setDirectionalCone", "(", "dCone", ".", "x", ",", "dCone", ".", "y", ",", "dCone", ".", "z", ")", ";", "}", ",", "[", "dCone", ",", "rollOff", ",", "volume", "]", ")", ";", "return", "(", "<", "group", "{", "...", "restProps", "}", ">", "{", "speaker", "&&", "<", "primitive", "object", "=", "{", "speaker", "}", "/", ">", "}", "<", "/group>);", "}", ";"], "labels": [null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, "UNK", null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null, null], "url": "https://github.com/spacesvr/spacesvr", "path": "spacesvr/src/ideas/components/Audio.tsx", "commit_hash": "ddf4524489e8752fb9f545a3f0b5720cbf8b936e", "file": "Audio.tsx"}